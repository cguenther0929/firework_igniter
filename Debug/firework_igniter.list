
firework_igniter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bc04  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000087c  0800bdf0  0800bdf0  0001bdf0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c66c  0800c66c  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800c66c  0800c66c  0001c66c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c674  0800c674  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c674  0800c674  0001c674  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c678  0800c678  0001c678  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800c67c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000248  200001e0  0800c85c  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000428  0800c85c  00020428  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b4c7  00000000  00000000  00020209  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000352c  00000000  00000000  0003b6d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001508  00000000  00000000  0003ec00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000013d8  00000000  00000000  00040108  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002291f  00000000  00000000  000414e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000197ad  00000000  00000000  00063dff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c01e6  00000000  00000000  0007d5ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0013d792  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007180  00000000  00000000  0013d7e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	200001e0 	.word	0x200001e0
 8000204:	00000000 	.word	0x00000000
 8000208:	0800bdd4 	.word	0x0800bdd4

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	200001e4 	.word	0x200001e4
 8000224:	0800bdd4 	.word	0x0800bdd4

08000228 <strlen>:
 8000228:	4603      	mov	r3, r0
 800022a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022e:	2a00      	cmp	r2, #0
 8000230:	d1fb      	bne.n	800022a <strlen+0x2>
 8000232:	1a18      	subs	r0, r3, r0
 8000234:	3801      	subs	r0, #1
 8000236:	4770      	bx	lr

08000238 <__aeabi_fmul>:
 8000238:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800023c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000240:	bf1e      	ittt	ne
 8000242:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000246:	ea92 0f0c 	teqne	r2, ip
 800024a:	ea93 0f0c 	teqne	r3, ip
 800024e:	d06f      	beq.n	8000330 <__aeabi_fmul+0xf8>
 8000250:	441a      	add	r2, r3
 8000252:	ea80 0c01 	eor.w	ip, r0, r1
 8000256:	0240      	lsls	r0, r0, #9
 8000258:	bf18      	it	ne
 800025a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800025e:	d01e      	beq.n	800029e <__aeabi_fmul+0x66>
 8000260:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000264:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000268:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 800026c:	fba0 3101 	umull	r3, r1, r0, r1
 8000270:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000274:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000278:	bf3e      	ittt	cc
 800027a:	0049      	lslcc	r1, r1, #1
 800027c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000280:	005b      	lslcc	r3, r3, #1
 8000282:	ea40 0001 	orr.w	r0, r0, r1
 8000286:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 800028a:	2afd      	cmp	r2, #253	; 0xfd
 800028c:	d81d      	bhi.n	80002ca <__aeabi_fmul+0x92>
 800028e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000292:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000296:	bf08      	it	eq
 8000298:	f020 0001 	biceq.w	r0, r0, #1
 800029c:	4770      	bx	lr
 800029e:	f090 0f00 	teq	r0, #0
 80002a2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80002a6:	bf08      	it	eq
 80002a8:	0249      	lsleq	r1, r1, #9
 80002aa:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80002ae:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80002b2:	3a7f      	subs	r2, #127	; 0x7f
 80002b4:	bfc2      	ittt	gt
 80002b6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80002ba:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80002be:	4770      	bxgt	lr
 80002c0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002c4:	f04f 0300 	mov.w	r3, #0
 80002c8:	3a01      	subs	r2, #1
 80002ca:	dc5d      	bgt.n	8000388 <__aeabi_fmul+0x150>
 80002cc:	f112 0f19 	cmn.w	r2, #25
 80002d0:	bfdc      	itt	le
 80002d2:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80002d6:	4770      	bxle	lr
 80002d8:	f1c2 0200 	rsb	r2, r2, #0
 80002dc:	0041      	lsls	r1, r0, #1
 80002de:	fa21 f102 	lsr.w	r1, r1, r2
 80002e2:	f1c2 0220 	rsb	r2, r2, #32
 80002e6:	fa00 fc02 	lsl.w	ip, r0, r2
 80002ea:	ea5f 0031 	movs.w	r0, r1, rrx
 80002ee:	f140 0000 	adc.w	r0, r0, #0
 80002f2:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80002f6:	bf08      	it	eq
 80002f8:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80002fc:	4770      	bx	lr
 80002fe:	f092 0f00 	teq	r2, #0
 8000302:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000306:	bf02      	ittt	eq
 8000308:	0040      	lsleq	r0, r0, #1
 800030a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800030e:	3a01      	subeq	r2, #1
 8000310:	d0f9      	beq.n	8000306 <__aeabi_fmul+0xce>
 8000312:	ea40 000c 	orr.w	r0, r0, ip
 8000316:	f093 0f00 	teq	r3, #0
 800031a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800031e:	bf02      	ittt	eq
 8000320:	0049      	lsleq	r1, r1, #1
 8000322:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000326:	3b01      	subeq	r3, #1
 8000328:	d0f9      	beq.n	800031e <__aeabi_fmul+0xe6>
 800032a:	ea41 010c 	orr.w	r1, r1, ip
 800032e:	e78f      	b.n	8000250 <__aeabi_fmul+0x18>
 8000330:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000334:	ea92 0f0c 	teq	r2, ip
 8000338:	bf18      	it	ne
 800033a:	ea93 0f0c 	teqne	r3, ip
 800033e:	d00a      	beq.n	8000356 <__aeabi_fmul+0x11e>
 8000340:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000344:	bf18      	it	ne
 8000346:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800034a:	d1d8      	bne.n	80002fe <__aeabi_fmul+0xc6>
 800034c:	ea80 0001 	eor.w	r0, r0, r1
 8000350:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000354:	4770      	bx	lr
 8000356:	f090 0f00 	teq	r0, #0
 800035a:	bf17      	itett	ne
 800035c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000360:	4608      	moveq	r0, r1
 8000362:	f091 0f00 	teqne	r1, #0
 8000366:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800036a:	d014      	beq.n	8000396 <__aeabi_fmul+0x15e>
 800036c:	ea92 0f0c 	teq	r2, ip
 8000370:	d101      	bne.n	8000376 <__aeabi_fmul+0x13e>
 8000372:	0242      	lsls	r2, r0, #9
 8000374:	d10f      	bne.n	8000396 <__aeabi_fmul+0x15e>
 8000376:	ea93 0f0c 	teq	r3, ip
 800037a:	d103      	bne.n	8000384 <__aeabi_fmul+0x14c>
 800037c:	024b      	lsls	r3, r1, #9
 800037e:	bf18      	it	ne
 8000380:	4608      	movne	r0, r1
 8000382:	d108      	bne.n	8000396 <__aeabi_fmul+0x15e>
 8000384:	ea80 0001 	eor.w	r0, r0, r1
 8000388:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800038c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000390:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000394:	4770      	bx	lr
 8000396:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800039a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 800039e:	4770      	bx	lr

080003a0 <__aeabi_drsub>:
 80003a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80003a4:	e002      	b.n	80003ac <__adddf3>
 80003a6:	bf00      	nop

080003a8 <__aeabi_dsub>:
 80003a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080003ac <__adddf3>:
 80003ac:	b530      	push	{r4, r5, lr}
 80003ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003b6:	ea94 0f05 	teq	r4, r5
 80003ba:	bf08      	it	eq
 80003bc:	ea90 0f02 	teqeq	r0, r2
 80003c0:	bf1f      	itttt	ne
 80003c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d2:	f000 80e2 	beq.w	800059a <__adddf3+0x1ee>
 80003d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003de:	bfb8      	it	lt
 80003e0:	426d      	neglt	r5, r5
 80003e2:	dd0c      	ble.n	80003fe <__adddf3+0x52>
 80003e4:	442c      	add	r4, r5
 80003e6:	ea80 0202 	eor.w	r2, r0, r2
 80003ea:	ea81 0303 	eor.w	r3, r1, r3
 80003ee:	ea82 0000 	eor.w	r0, r2, r0
 80003f2:	ea83 0101 	eor.w	r1, r3, r1
 80003f6:	ea80 0202 	eor.w	r2, r0, r2
 80003fa:	ea81 0303 	eor.w	r3, r1, r3
 80003fe:	2d36      	cmp	r5, #54	; 0x36
 8000400:	bf88      	it	hi
 8000402:	bd30      	pophi	{r4, r5, pc}
 8000404:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000408:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800040c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000410:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000414:	d002      	beq.n	800041c <__adddf3+0x70>
 8000416:	4240      	negs	r0, r0
 8000418:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800041c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000420:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000424:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000428:	d002      	beq.n	8000430 <__adddf3+0x84>
 800042a:	4252      	negs	r2, r2
 800042c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000430:	ea94 0f05 	teq	r4, r5
 8000434:	f000 80a7 	beq.w	8000586 <__adddf3+0x1da>
 8000438:	f1a4 0401 	sub.w	r4, r4, #1
 800043c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000440:	db0d      	blt.n	800045e <__adddf3+0xb2>
 8000442:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000446:	fa22 f205 	lsr.w	r2, r2, r5
 800044a:	1880      	adds	r0, r0, r2
 800044c:	f141 0100 	adc.w	r1, r1, #0
 8000450:	fa03 f20e 	lsl.w	r2, r3, lr
 8000454:	1880      	adds	r0, r0, r2
 8000456:	fa43 f305 	asr.w	r3, r3, r5
 800045a:	4159      	adcs	r1, r3
 800045c:	e00e      	b.n	800047c <__adddf3+0xd0>
 800045e:	f1a5 0520 	sub.w	r5, r5, #32
 8000462:	f10e 0e20 	add.w	lr, lr, #32
 8000466:	2a01      	cmp	r2, #1
 8000468:	fa03 fc0e 	lsl.w	ip, r3, lr
 800046c:	bf28      	it	cs
 800046e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000472:	fa43 f305 	asr.w	r3, r3, r5
 8000476:	18c0      	adds	r0, r0, r3
 8000478:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800047c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000480:	d507      	bpl.n	8000492 <__adddf3+0xe6>
 8000482:	f04f 0e00 	mov.w	lr, #0
 8000486:	f1dc 0c00 	rsbs	ip, ip, #0
 800048a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800048e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000492:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000496:	d31b      	bcc.n	80004d0 <__adddf3+0x124>
 8000498:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800049c:	d30c      	bcc.n	80004b8 <__adddf3+0x10c>
 800049e:	0849      	lsrs	r1, r1, #1
 80004a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80004a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004a8:	f104 0401 	add.w	r4, r4, #1
 80004ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004b4:	f080 809a 	bcs.w	80005ec <__adddf3+0x240>
 80004b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004bc:	bf08      	it	eq
 80004be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004c2:	f150 0000 	adcs.w	r0, r0, #0
 80004c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ca:	ea41 0105 	orr.w	r1, r1, r5
 80004ce:	bd30      	pop	{r4, r5, pc}
 80004d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004d4:	4140      	adcs	r0, r0
 80004d6:	eb41 0101 	adc.w	r1, r1, r1
 80004da:	3c01      	subs	r4, #1
 80004dc:	bf28      	it	cs
 80004de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004e2:	d2e9      	bcs.n	80004b8 <__adddf3+0x10c>
 80004e4:	f091 0f00 	teq	r1, #0
 80004e8:	bf04      	itt	eq
 80004ea:	4601      	moveq	r1, r0
 80004ec:	2000      	moveq	r0, #0
 80004ee:	fab1 f381 	clz	r3, r1
 80004f2:	bf08      	it	eq
 80004f4:	3320      	addeq	r3, #32
 80004f6:	f1a3 030b 	sub.w	r3, r3, #11
 80004fa:	f1b3 0220 	subs.w	r2, r3, #32
 80004fe:	da0c      	bge.n	800051a <__adddf3+0x16e>
 8000500:	320c      	adds	r2, #12
 8000502:	dd08      	ble.n	8000516 <__adddf3+0x16a>
 8000504:	f102 0c14 	add.w	ip, r2, #20
 8000508:	f1c2 020c 	rsb	r2, r2, #12
 800050c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000510:	fa21 f102 	lsr.w	r1, r1, r2
 8000514:	e00c      	b.n	8000530 <__adddf3+0x184>
 8000516:	f102 0214 	add.w	r2, r2, #20
 800051a:	bfd8      	it	le
 800051c:	f1c2 0c20 	rsble	ip, r2, #32
 8000520:	fa01 f102 	lsl.w	r1, r1, r2
 8000524:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000528:	bfdc      	itt	le
 800052a:	ea41 010c 	orrle.w	r1, r1, ip
 800052e:	4090      	lslle	r0, r2
 8000530:	1ae4      	subs	r4, r4, r3
 8000532:	bfa2      	ittt	ge
 8000534:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000538:	4329      	orrge	r1, r5
 800053a:	bd30      	popge	{r4, r5, pc}
 800053c:	ea6f 0404 	mvn.w	r4, r4
 8000540:	3c1f      	subs	r4, #31
 8000542:	da1c      	bge.n	800057e <__adddf3+0x1d2>
 8000544:	340c      	adds	r4, #12
 8000546:	dc0e      	bgt.n	8000566 <__adddf3+0x1ba>
 8000548:	f104 0414 	add.w	r4, r4, #20
 800054c:	f1c4 0220 	rsb	r2, r4, #32
 8000550:	fa20 f004 	lsr.w	r0, r0, r4
 8000554:	fa01 f302 	lsl.w	r3, r1, r2
 8000558:	ea40 0003 	orr.w	r0, r0, r3
 800055c:	fa21 f304 	lsr.w	r3, r1, r4
 8000560:	ea45 0103 	orr.w	r1, r5, r3
 8000564:	bd30      	pop	{r4, r5, pc}
 8000566:	f1c4 040c 	rsb	r4, r4, #12
 800056a:	f1c4 0220 	rsb	r2, r4, #32
 800056e:	fa20 f002 	lsr.w	r0, r0, r2
 8000572:	fa01 f304 	lsl.w	r3, r1, r4
 8000576:	ea40 0003 	orr.w	r0, r0, r3
 800057a:	4629      	mov	r1, r5
 800057c:	bd30      	pop	{r4, r5, pc}
 800057e:	fa21 f004 	lsr.w	r0, r1, r4
 8000582:	4629      	mov	r1, r5
 8000584:	bd30      	pop	{r4, r5, pc}
 8000586:	f094 0f00 	teq	r4, #0
 800058a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800058e:	bf06      	itte	eq
 8000590:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000594:	3401      	addeq	r4, #1
 8000596:	3d01      	subne	r5, #1
 8000598:	e74e      	b.n	8000438 <__adddf3+0x8c>
 800059a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800059e:	bf18      	it	ne
 80005a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005a4:	d029      	beq.n	80005fa <__adddf3+0x24e>
 80005a6:	ea94 0f05 	teq	r4, r5
 80005aa:	bf08      	it	eq
 80005ac:	ea90 0f02 	teqeq	r0, r2
 80005b0:	d005      	beq.n	80005be <__adddf3+0x212>
 80005b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005b6:	bf04      	itt	eq
 80005b8:	4619      	moveq	r1, r3
 80005ba:	4610      	moveq	r0, r2
 80005bc:	bd30      	pop	{r4, r5, pc}
 80005be:	ea91 0f03 	teq	r1, r3
 80005c2:	bf1e      	ittt	ne
 80005c4:	2100      	movne	r1, #0
 80005c6:	2000      	movne	r0, #0
 80005c8:	bd30      	popne	{r4, r5, pc}
 80005ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005ce:	d105      	bne.n	80005dc <__adddf3+0x230>
 80005d0:	0040      	lsls	r0, r0, #1
 80005d2:	4149      	adcs	r1, r1
 80005d4:	bf28      	it	cs
 80005d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005da:	bd30      	pop	{r4, r5, pc}
 80005dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005e0:	bf3c      	itt	cc
 80005e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005e6:	bd30      	popcc	{r4, r5, pc}
 80005e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005f4:	f04f 0000 	mov.w	r0, #0
 80005f8:	bd30      	pop	{r4, r5, pc}
 80005fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005fe:	bf1a      	itte	ne
 8000600:	4619      	movne	r1, r3
 8000602:	4610      	movne	r0, r2
 8000604:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000608:	bf1c      	itt	ne
 800060a:	460b      	movne	r3, r1
 800060c:	4602      	movne	r2, r0
 800060e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000612:	bf06      	itte	eq
 8000614:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000618:	ea91 0f03 	teqeq	r1, r3
 800061c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000620:	bd30      	pop	{r4, r5, pc}
 8000622:	bf00      	nop

08000624 <__aeabi_ui2d>:
 8000624:	f090 0f00 	teq	r0, #0
 8000628:	bf04      	itt	eq
 800062a:	2100      	moveq	r1, #0
 800062c:	4770      	bxeq	lr
 800062e:	b530      	push	{r4, r5, lr}
 8000630:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000634:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000638:	f04f 0500 	mov.w	r5, #0
 800063c:	f04f 0100 	mov.w	r1, #0
 8000640:	e750      	b.n	80004e4 <__adddf3+0x138>
 8000642:	bf00      	nop

08000644 <__aeabi_i2d>:
 8000644:	f090 0f00 	teq	r0, #0
 8000648:	bf04      	itt	eq
 800064a:	2100      	moveq	r1, #0
 800064c:	4770      	bxeq	lr
 800064e:	b530      	push	{r4, r5, lr}
 8000650:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000654:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000658:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800065c:	bf48      	it	mi
 800065e:	4240      	negmi	r0, r0
 8000660:	f04f 0100 	mov.w	r1, #0
 8000664:	e73e      	b.n	80004e4 <__adddf3+0x138>
 8000666:	bf00      	nop

08000668 <__aeabi_f2d>:
 8000668:	0042      	lsls	r2, r0, #1
 800066a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800066e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000672:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000676:	bf1f      	itttt	ne
 8000678:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800067c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000680:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000684:	4770      	bxne	lr
 8000686:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800068a:	bf08      	it	eq
 800068c:	4770      	bxeq	lr
 800068e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000692:	bf04      	itt	eq
 8000694:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000698:	4770      	bxeq	lr
 800069a:	b530      	push	{r4, r5, lr}
 800069c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80006a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006a8:	e71c      	b.n	80004e4 <__adddf3+0x138>
 80006aa:	bf00      	nop

080006ac <__aeabi_ul2d>:
 80006ac:	ea50 0201 	orrs.w	r2, r0, r1
 80006b0:	bf08      	it	eq
 80006b2:	4770      	bxeq	lr
 80006b4:	b530      	push	{r4, r5, lr}
 80006b6:	f04f 0500 	mov.w	r5, #0
 80006ba:	e00a      	b.n	80006d2 <__aeabi_l2d+0x16>

080006bc <__aeabi_l2d>:
 80006bc:	ea50 0201 	orrs.w	r2, r0, r1
 80006c0:	bf08      	it	eq
 80006c2:	4770      	bxeq	lr
 80006c4:	b530      	push	{r4, r5, lr}
 80006c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006ca:	d502      	bpl.n	80006d2 <__aeabi_l2d+0x16>
 80006cc:	4240      	negs	r0, r0
 80006ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006de:	f43f aed8 	beq.w	8000492 <__adddf3+0xe6>
 80006e2:	f04f 0203 	mov.w	r2, #3
 80006e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006ea:	bf18      	it	ne
 80006ec:	3203      	addne	r2, #3
 80006ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006f2:	bf18      	it	ne
 80006f4:	3203      	addne	r2, #3
 80006f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006fa:	f1c2 0320 	rsb	r3, r2, #32
 80006fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000702:	fa20 f002 	lsr.w	r0, r0, r2
 8000706:	fa01 fe03 	lsl.w	lr, r1, r3
 800070a:	ea40 000e 	orr.w	r0, r0, lr
 800070e:	fa21 f102 	lsr.w	r1, r1, r2
 8000712:	4414      	add	r4, r2
 8000714:	e6bd      	b.n	8000492 <__adddf3+0xe6>
 8000716:	bf00      	nop

08000718 <__aeabi_dmul>:
 8000718:	b570      	push	{r4, r5, r6, lr}
 800071a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800071e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000722:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000726:	bf1d      	ittte	ne
 8000728:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800072c:	ea94 0f0c 	teqne	r4, ip
 8000730:	ea95 0f0c 	teqne	r5, ip
 8000734:	f000 f8de 	bleq	80008f4 <__aeabi_dmul+0x1dc>
 8000738:	442c      	add	r4, r5
 800073a:	ea81 0603 	eor.w	r6, r1, r3
 800073e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000742:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000746:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800074a:	bf18      	it	ne
 800074c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000750:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000754:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000758:	d038      	beq.n	80007cc <__aeabi_dmul+0xb4>
 800075a:	fba0 ce02 	umull	ip, lr, r0, r2
 800075e:	f04f 0500 	mov.w	r5, #0
 8000762:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000766:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800076a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800076e:	f04f 0600 	mov.w	r6, #0
 8000772:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000776:	f09c 0f00 	teq	ip, #0
 800077a:	bf18      	it	ne
 800077c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000780:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000784:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000788:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800078c:	d204      	bcs.n	8000798 <__aeabi_dmul+0x80>
 800078e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000792:	416d      	adcs	r5, r5
 8000794:	eb46 0606 	adc.w	r6, r6, r6
 8000798:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800079c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80007a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80007a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80007a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80007ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80007b0:	bf88      	it	hi
 80007b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80007b6:	d81e      	bhi.n	80007f6 <__aeabi_dmul+0xde>
 80007b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80007bc:	bf08      	it	eq
 80007be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80007c2:	f150 0000 	adcs.w	r0, r0, #0
 80007c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80007ca:	bd70      	pop	{r4, r5, r6, pc}
 80007cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80007d0:	ea46 0101 	orr.w	r1, r6, r1
 80007d4:	ea40 0002 	orr.w	r0, r0, r2
 80007d8:	ea81 0103 	eor.w	r1, r1, r3
 80007dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80007e0:	bfc2      	ittt	gt
 80007e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80007e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80007ea:	bd70      	popgt	{r4, r5, r6, pc}
 80007ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80007f0:	f04f 0e00 	mov.w	lr, #0
 80007f4:	3c01      	subs	r4, #1
 80007f6:	f300 80ab 	bgt.w	8000950 <__aeabi_dmul+0x238>
 80007fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80007fe:	bfde      	ittt	le
 8000800:	2000      	movle	r0, #0
 8000802:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000806:	bd70      	pople	{r4, r5, r6, pc}
 8000808:	f1c4 0400 	rsb	r4, r4, #0
 800080c:	3c20      	subs	r4, #32
 800080e:	da35      	bge.n	800087c <__aeabi_dmul+0x164>
 8000810:	340c      	adds	r4, #12
 8000812:	dc1b      	bgt.n	800084c <__aeabi_dmul+0x134>
 8000814:	f104 0414 	add.w	r4, r4, #20
 8000818:	f1c4 0520 	rsb	r5, r4, #32
 800081c:	fa00 f305 	lsl.w	r3, r0, r5
 8000820:	fa20 f004 	lsr.w	r0, r0, r4
 8000824:	fa01 f205 	lsl.w	r2, r1, r5
 8000828:	ea40 0002 	orr.w	r0, r0, r2
 800082c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000830:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000834:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000838:	fa21 f604 	lsr.w	r6, r1, r4
 800083c:	eb42 0106 	adc.w	r1, r2, r6
 8000840:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000844:	bf08      	it	eq
 8000846:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800084a:	bd70      	pop	{r4, r5, r6, pc}
 800084c:	f1c4 040c 	rsb	r4, r4, #12
 8000850:	f1c4 0520 	rsb	r5, r4, #32
 8000854:	fa00 f304 	lsl.w	r3, r0, r4
 8000858:	fa20 f005 	lsr.w	r0, r0, r5
 800085c:	fa01 f204 	lsl.w	r2, r1, r4
 8000860:	ea40 0002 	orr.w	r0, r0, r2
 8000864:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000868:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800086c:	f141 0100 	adc.w	r1, r1, #0
 8000870:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000874:	bf08      	it	eq
 8000876:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800087a:	bd70      	pop	{r4, r5, r6, pc}
 800087c:	f1c4 0520 	rsb	r5, r4, #32
 8000880:	fa00 f205 	lsl.w	r2, r0, r5
 8000884:	ea4e 0e02 	orr.w	lr, lr, r2
 8000888:	fa20 f304 	lsr.w	r3, r0, r4
 800088c:	fa01 f205 	lsl.w	r2, r1, r5
 8000890:	ea43 0302 	orr.w	r3, r3, r2
 8000894:	fa21 f004 	lsr.w	r0, r1, r4
 8000898:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800089c:	fa21 f204 	lsr.w	r2, r1, r4
 80008a0:	ea20 0002 	bic.w	r0, r0, r2
 80008a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80008a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80008ac:	bf08      	it	eq
 80008ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80008b2:	bd70      	pop	{r4, r5, r6, pc}
 80008b4:	f094 0f00 	teq	r4, #0
 80008b8:	d10f      	bne.n	80008da <__aeabi_dmul+0x1c2>
 80008ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80008be:	0040      	lsls	r0, r0, #1
 80008c0:	eb41 0101 	adc.w	r1, r1, r1
 80008c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c8:	bf08      	it	eq
 80008ca:	3c01      	subeq	r4, #1
 80008cc:	d0f7      	beq.n	80008be <__aeabi_dmul+0x1a6>
 80008ce:	ea41 0106 	orr.w	r1, r1, r6
 80008d2:	f095 0f00 	teq	r5, #0
 80008d6:	bf18      	it	ne
 80008d8:	4770      	bxne	lr
 80008da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80008de:	0052      	lsls	r2, r2, #1
 80008e0:	eb43 0303 	adc.w	r3, r3, r3
 80008e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80008e8:	bf08      	it	eq
 80008ea:	3d01      	subeq	r5, #1
 80008ec:	d0f7      	beq.n	80008de <__aeabi_dmul+0x1c6>
 80008ee:	ea43 0306 	orr.w	r3, r3, r6
 80008f2:	4770      	bx	lr
 80008f4:	ea94 0f0c 	teq	r4, ip
 80008f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008fc:	bf18      	it	ne
 80008fe:	ea95 0f0c 	teqne	r5, ip
 8000902:	d00c      	beq.n	800091e <__aeabi_dmul+0x206>
 8000904:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000908:	bf18      	it	ne
 800090a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800090e:	d1d1      	bne.n	80008b4 <__aeabi_dmul+0x19c>
 8000910:	ea81 0103 	eor.w	r1, r1, r3
 8000914:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000918:	f04f 0000 	mov.w	r0, #0
 800091c:	bd70      	pop	{r4, r5, r6, pc}
 800091e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000922:	bf06      	itte	eq
 8000924:	4610      	moveq	r0, r2
 8000926:	4619      	moveq	r1, r3
 8000928:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800092c:	d019      	beq.n	8000962 <__aeabi_dmul+0x24a>
 800092e:	ea94 0f0c 	teq	r4, ip
 8000932:	d102      	bne.n	800093a <__aeabi_dmul+0x222>
 8000934:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000938:	d113      	bne.n	8000962 <__aeabi_dmul+0x24a>
 800093a:	ea95 0f0c 	teq	r5, ip
 800093e:	d105      	bne.n	800094c <__aeabi_dmul+0x234>
 8000940:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000944:	bf1c      	itt	ne
 8000946:	4610      	movne	r0, r2
 8000948:	4619      	movne	r1, r3
 800094a:	d10a      	bne.n	8000962 <__aeabi_dmul+0x24a>
 800094c:	ea81 0103 	eor.w	r1, r1, r3
 8000950:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000954:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000958:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800095c:	f04f 0000 	mov.w	r0, #0
 8000960:	bd70      	pop	{r4, r5, r6, pc}
 8000962:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000966:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800096a:	bd70      	pop	{r4, r5, r6, pc}

0800096c <__aeabi_ddiv>:
 800096c:	b570      	push	{r4, r5, r6, lr}
 800096e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000972:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000976:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800097a:	bf1d      	ittte	ne
 800097c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000980:	ea94 0f0c 	teqne	r4, ip
 8000984:	ea95 0f0c 	teqne	r5, ip
 8000988:	f000 f8a7 	bleq	8000ada <__aeabi_ddiv+0x16e>
 800098c:	eba4 0405 	sub.w	r4, r4, r5
 8000990:	ea81 0e03 	eor.w	lr, r1, r3
 8000994:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000998:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800099c:	f000 8088 	beq.w	8000ab0 <__aeabi_ddiv+0x144>
 80009a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80009a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80009a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80009ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80009b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80009b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80009b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80009bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80009c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80009c4:	429d      	cmp	r5, r3
 80009c6:	bf08      	it	eq
 80009c8:	4296      	cmpeq	r6, r2
 80009ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80009ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80009d2:	d202      	bcs.n	80009da <__aeabi_ddiv+0x6e>
 80009d4:	085b      	lsrs	r3, r3, #1
 80009d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80009da:	1ab6      	subs	r6, r6, r2
 80009dc:	eb65 0503 	sbc.w	r5, r5, r3
 80009e0:	085b      	lsrs	r3, r3, #1
 80009e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80009ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80009ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80009f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009f6:	bf22      	ittt	cs
 80009f8:	1ab6      	subcs	r6, r6, r2
 80009fa:	4675      	movcs	r5, lr
 80009fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000a00:	085b      	lsrs	r3, r3, #1
 8000a02:	ea4f 0232 	mov.w	r2, r2, rrx
 8000a06:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a0a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a0e:	bf22      	ittt	cs
 8000a10:	1ab6      	subcs	r6, r6, r2
 8000a12:	4675      	movcs	r5, lr
 8000a14:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000a18:	085b      	lsrs	r3, r3, #1
 8000a1a:	ea4f 0232 	mov.w	r2, r2, rrx
 8000a1e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a22:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a26:	bf22      	ittt	cs
 8000a28:	1ab6      	subcs	r6, r6, r2
 8000a2a:	4675      	movcs	r5, lr
 8000a2c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000a30:	085b      	lsrs	r3, r3, #1
 8000a32:	ea4f 0232 	mov.w	r2, r2, rrx
 8000a36:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a3a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a3e:	bf22      	ittt	cs
 8000a40:	1ab6      	subcs	r6, r6, r2
 8000a42:	4675      	movcs	r5, lr
 8000a44:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000a48:	ea55 0e06 	orrs.w	lr, r5, r6
 8000a4c:	d018      	beq.n	8000a80 <__aeabi_ddiv+0x114>
 8000a4e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000a52:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000a56:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000a5a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000a5e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000a62:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000a66:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000a6a:	d1c0      	bne.n	80009ee <__aeabi_ddiv+0x82>
 8000a6c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a70:	d10b      	bne.n	8000a8a <__aeabi_ddiv+0x11e>
 8000a72:	ea41 0100 	orr.w	r1, r1, r0
 8000a76:	f04f 0000 	mov.w	r0, #0
 8000a7a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000a7e:	e7b6      	b.n	80009ee <__aeabi_ddiv+0x82>
 8000a80:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a84:	bf04      	itt	eq
 8000a86:	4301      	orreq	r1, r0
 8000a88:	2000      	moveq	r0, #0
 8000a8a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000a8e:	bf88      	it	hi
 8000a90:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000a94:	f63f aeaf 	bhi.w	80007f6 <__aeabi_dmul+0xde>
 8000a98:	ebb5 0c03 	subs.w	ip, r5, r3
 8000a9c:	bf04      	itt	eq
 8000a9e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000aa2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000aa6:	f150 0000 	adcs.w	r0, r0, #0
 8000aaa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000aae:	bd70      	pop	{r4, r5, r6, pc}
 8000ab0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000ab4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000ab8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000abc:	bfc2      	ittt	gt
 8000abe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000ac2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000ac6:	bd70      	popgt	{r4, r5, r6, pc}
 8000ac8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000acc:	f04f 0e00 	mov.w	lr, #0
 8000ad0:	3c01      	subs	r4, #1
 8000ad2:	e690      	b.n	80007f6 <__aeabi_dmul+0xde>
 8000ad4:	ea45 0e06 	orr.w	lr, r5, r6
 8000ad8:	e68d      	b.n	80007f6 <__aeabi_dmul+0xde>
 8000ada:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000ade:	ea94 0f0c 	teq	r4, ip
 8000ae2:	bf08      	it	eq
 8000ae4:	ea95 0f0c 	teqeq	r5, ip
 8000ae8:	f43f af3b 	beq.w	8000962 <__aeabi_dmul+0x24a>
 8000aec:	ea94 0f0c 	teq	r4, ip
 8000af0:	d10a      	bne.n	8000b08 <__aeabi_ddiv+0x19c>
 8000af2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000af6:	f47f af34 	bne.w	8000962 <__aeabi_dmul+0x24a>
 8000afa:	ea95 0f0c 	teq	r5, ip
 8000afe:	f47f af25 	bne.w	800094c <__aeabi_dmul+0x234>
 8000b02:	4610      	mov	r0, r2
 8000b04:	4619      	mov	r1, r3
 8000b06:	e72c      	b.n	8000962 <__aeabi_dmul+0x24a>
 8000b08:	ea95 0f0c 	teq	r5, ip
 8000b0c:	d106      	bne.n	8000b1c <__aeabi_ddiv+0x1b0>
 8000b0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000b12:	f43f aefd 	beq.w	8000910 <__aeabi_dmul+0x1f8>
 8000b16:	4610      	mov	r0, r2
 8000b18:	4619      	mov	r1, r3
 8000b1a:	e722      	b.n	8000962 <__aeabi_dmul+0x24a>
 8000b1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000b20:	bf18      	it	ne
 8000b22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000b26:	f47f aec5 	bne.w	80008b4 <__aeabi_dmul+0x19c>
 8000b2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000b2e:	f47f af0d 	bne.w	800094c <__aeabi_dmul+0x234>
 8000b32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000b36:	f47f aeeb 	bne.w	8000910 <__aeabi_dmul+0x1f8>
 8000b3a:	e712      	b.n	8000962 <__aeabi_dmul+0x24a>

08000b3c <__gedf2>:
 8000b3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000b40:	e006      	b.n	8000b50 <__cmpdf2+0x4>
 8000b42:	bf00      	nop

08000b44 <__ledf2>:
 8000b44:	f04f 0c01 	mov.w	ip, #1
 8000b48:	e002      	b.n	8000b50 <__cmpdf2+0x4>
 8000b4a:	bf00      	nop

08000b4c <__cmpdf2>:
 8000b4c:	f04f 0c01 	mov.w	ip, #1
 8000b50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000b54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	bf18      	it	ne
 8000b62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000b66:	d01b      	beq.n	8000ba0 <__cmpdf2+0x54>
 8000b68:	b001      	add	sp, #4
 8000b6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000b6e:	bf0c      	ite	eq
 8000b70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000b74:	ea91 0f03 	teqne	r1, r3
 8000b78:	bf02      	ittt	eq
 8000b7a:	ea90 0f02 	teqeq	r0, r2
 8000b7e:	2000      	moveq	r0, #0
 8000b80:	4770      	bxeq	lr
 8000b82:	f110 0f00 	cmn.w	r0, #0
 8000b86:	ea91 0f03 	teq	r1, r3
 8000b8a:	bf58      	it	pl
 8000b8c:	4299      	cmppl	r1, r3
 8000b8e:	bf08      	it	eq
 8000b90:	4290      	cmpeq	r0, r2
 8000b92:	bf2c      	ite	cs
 8000b94:	17d8      	asrcs	r0, r3, #31
 8000b96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000b9a:	f040 0001 	orr.w	r0, r0, #1
 8000b9e:	4770      	bx	lr
 8000ba0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ba4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba8:	d102      	bne.n	8000bb0 <__cmpdf2+0x64>
 8000baa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000bae:	d107      	bne.n	8000bc0 <__cmpdf2+0x74>
 8000bb0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000bb4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000bb8:	d1d6      	bne.n	8000b68 <__cmpdf2+0x1c>
 8000bba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000bbe:	d0d3      	beq.n	8000b68 <__cmpdf2+0x1c>
 8000bc0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_cdrcmple>:
 8000bc8:	4684      	mov	ip, r0
 8000bca:	4610      	mov	r0, r2
 8000bcc:	4662      	mov	r2, ip
 8000bce:	468c      	mov	ip, r1
 8000bd0:	4619      	mov	r1, r3
 8000bd2:	4663      	mov	r3, ip
 8000bd4:	e000      	b.n	8000bd8 <__aeabi_cdcmpeq>
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_cdcmpeq>:
 8000bd8:	b501      	push	{r0, lr}
 8000bda:	f7ff ffb7 	bl	8000b4c <__cmpdf2>
 8000bde:	2800      	cmp	r0, #0
 8000be0:	bf48      	it	mi
 8000be2:	f110 0f00 	cmnmi.w	r0, #0
 8000be6:	bd01      	pop	{r0, pc}

08000be8 <__aeabi_dcmpeq>:
 8000be8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bec:	f7ff fff4 	bl	8000bd8 <__aeabi_cdcmpeq>
 8000bf0:	bf0c      	ite	eq
 8000bf2:	2001      	moveq	r0, #1
 8000bf4:	2000      	movne	r0, #0
 8000bf6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bfa:	bf00      	nop

08000bfc <__aeabi_dcmplt>:
 8000bfc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c00:	f7ff ffea 	bl	8000bd8 <__aeabi_cdcmpeq>
 8000c04:	bf34      	ite	cc
 8000c06:	2001      	movcc	r0, #1
 8000c08:	2000      	movcs	r0, #0
 8000c0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c0e:	bf00      	nop

08000c10 <__aeabi_dcmple>:
 8000c10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c14:	f7ff ffe0 	bl	8000bd8 <__aeabi_cdcmpeq>
 8000c18:	bf94      	ite	ls
 8000c1a:	2001      	movls	r0, #1
 8000c1c:	2000      	movhi	r0, #0
 8000c1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c22:	bf00      	nop

08000c24 <__aeabi_dcmpge>:
 8000c24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c28:	f7ff ffce 	bl	8000bc8 <__aeabi_cdrcmple>
 8000c2c:	bf94      	ite	ls
 8000c2e:	2001      	movls	r0, #1
 8000c30:	2000      	movhi	r0, #0
 8000c32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c36:	bf00      	nop

08000c38 <__aeabi_dcmpgt>:
 8000c38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c3c:	f7ff ffc4 	bl	8000bc8 <__aeabi_cdrcmple>
 8000c40:	bf34      	ite	cc
 8000c42:	2001      	movcc	r0, #1
 8000c44:	2000      	movcs	r0, #0
 8000c46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c4a:	bf00      	nop

08000c4c <__aeabi_dcmpun>:
 8000c4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000c50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c54:	d102      	bne.n	8000c5c <__aeabi_dcmpun+0x10>
 8000c56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000c5a:	d10a      	bne.n	8000c72 <__aeabi_dcmpun+0x26>
 8000c5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000c60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c64:	d102      	bne.n	8000c6c <__aeabi_dcmpun+0x20>
 8000c66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000c6a:	d102      	bne.n	8000c72 <__aeabi_dcmpun+0x26>
 8000c6c:	f04f 0000 	mov.w	r0, #0
 8000c70:	4770      	bx	lr
 8000c72:	f04f 0001 	mov.w	r0, #1
 8000c76:	4770      	bx	lr

08000c78 <__aeabi_d2iz>:
 8000c78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c80:	d215      	bcs.n	8000cae <__aeabi_d2iz+0x36>
 8000c82:	d511      	bpl.n	8000ca8 <__aeabi_d2iz+0x30>
 8000c84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c8c:	d912      	bls.n	8000cb4 <__aeabi_d2iz+0x3c>
 8000c8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ca2:	bf18      	it	ne
 8000ca4:	4240      	negne	r0, r0
 8000ca6:	4770      	bx	lr
 8000ca8:	f04f 0000 	mov.w	r0, #0
 8000cac:	4770      	bx	lr
 8000cae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000cb2:	d105      	bne.n	8000cc0 <__aeabi_d2iz+0x48>
 8000cb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000cb8:	bf08      	it	eq
 8000cba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000cbe:	4770      	bx	lr
 8000cc0:	f04f 0000 	mov.w	r0, #0
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_d2uiz>:
 8000cc8:	004a      	lsls	r2, r1, #1
 8000cca:	d211      	bcs.n	8000cf0 <__aeabi_d2uiz+0x28>
 8000ccc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000cd0:	d211      	bcs.n	8000cf6 <__aeabi_d2uiz+0x2e>
 8000cd2:	d50d      	bpl.n	8000cf0 <__aeabi_d2uiz+0x28>
 8000cd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000cd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000cdc:	d40e      	bmi.n	8000cfc <__aeabi_d2uiz+0x34>
 8000cde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ce2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ce6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000cea:	fa23 f002 	lsr.w	r0, r3, r2
 8000cee:	4770      	bx	lr
 8000cf0:	f04f 0000 	mov.w	r0, #0
 8000cf4:	4770      	bx	lr
 8000cf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000cfa:	d102      	bne.n	8000d02 <__aeabi_d2uiz+0x3a>
 8000cfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000d00:	4770      	bx	lr
 8000d02:	f04f 0000 	mov.w	r0, #0
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_d2f>:
 8000d08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000d0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000d10:	bf24      	itt	cs
 8000d12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000d16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000d1a:	d90d      	bls.n	8000d38 <__aeabi_d2f+0x30>
 8000d1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000d24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000d28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000d2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000d30:	bf08      	it	eq
 8000d32:	f020 0001 	biceq.w	r0, r0, #1
 8000d36:	4770      	bx	lr
 8000d38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000d3c:	d121      	bne.n	8000d82 <__aeabi_d2f+0x7a>
 8000d3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000d42:	bfbc      	itt	lt
 8000d44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000d48:	4770      	bxlt	lr
 8000d4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000d4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000d52:	f1c2 0218 	rsb	r2, r2, #24
 8000d56:	f1c2 0c20 	rsb	ip, r2, #32
 8000d5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000d5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000d62:	bf18      	it	ne
 8000d64:	f040 0001 	orrne.w	r0, r0, #1
 8000d68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000d6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000d70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000d74:	ea40 000c 	orr.w	r0, r0, ip
 8000d78:	fa23 f302 	lsr.w	r3, r3, r2
 8000d7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000d80:	e7cc      	b.n	8000d1c <__aeabi_d2f+0x14>
 8000d82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000d86:	d107      	bne.n	8000d98 <__aeabi_d2f+0x90>
 8000d88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000d92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000d96:	4770      	bxne	lr
 8000d98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000d9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000da0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000da4:	4770      	bx	lr
 8000da6:	bf00      	nop

08000da8 <__aeabi_frsub>:
 8000da8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000dac:	e002      	b.n	8000db4 <__addsf3>
 8000dae:	bf00      	nop

08000db0 <__aeabi_fsub>:
 8000db0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000db4 <__addsf3>:
 8000db4:	0042      	lsls	r2, r0, #1
 8000db6:	bf1f      	itttt	ne
 8000db8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000dbc:	ea92 0f03 	teqne	r2, r3
 8000dc0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000dc4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000dc8:	d06a      	beq.n	8000ea0 <__addsf3+0xec>
 8000dca:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000dce:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000dd2:	bfc1      	itttt	gt
 8000dd4:	18d2      	addgt	r2, r2, r3
 8000dd6:	4041      	eorgt	r1, r0
 8000dd8:	4048      	eorgt	r0, r1
 8000dda:	4041      	eorgt	r1, r0
 8000ddc:	bfb8      	it	lt
 8000dde:	425b      	neglt	r3, r3
 8000de0:	2b19      	cmp	r3, #25
 8000de2:	bf88      	it	hi
 8000de4:	4770      	bxhi	lr
 8000de6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000dea:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dee:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000df2:	bf18      	it	ne
 8000df4:	4240      	negne	r0, r0
 8000df6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000dfa:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000dfe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000e02:	bf18      	it	ne
 8000e04:	4249      	negne	r1, r1
 8000e06:	ea92 0f03 	teq	r2, r3
 8000e0a:	d03f      	beq.n	8000e8c <__addsf3+0xd8>
 8000e0c:	f1a2 0201 	sub.w	r2, r2, #1
 8000e10:	fa41 fc03 	asr.w	ip, r1, r3
 8000e14:	eb10 000c 	adds.w	r0, r0, ip
 8000e18:	f1c3 0320 	rsb	r3, r3, #32
 8000e1c:	fa01 f103 	lsl.w	r1, r1, r3
 8000e20:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000e24:	d502      	bpl.n	8000e2c <__addsf3+0x78>
 8000e26:	4249      	negs	r1, r1
 8000e28:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000e2c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000e30:	d313      	bcc.n	8000e5a <__addsf3+0xa6>
 8000e32:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000e36:	d306      	bcc.n	8000e46 <__addsf3+0x92>
 8000e38:	0840      	lsrs	r0, r0, #1
 8000e3a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000e3e:	f102 0201 	add.w	r2, r2, #1
 8000e42:	2afe      	cmp	r2, #254	; 0xfe
 8000e44:	d251      	bcs.n	8000eea <__addsf3+0x136>
 8000e46:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000e4a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e4e:	bf08      	it	eq
 8000e50:	f020 0001 	biceq.w	r0, r0, #1
 8000e54:	ea40 0003 	orr.w	r0, r0, r3
 8000e58:	4770      	bx	lr
 8000e5a:	0049      	lsls	r1, r1, #1
 8000e5c:	eb40 0000 	adc.w	r0, r0, r0
 8000e60:	3a01      	subs	r2, #1
 8000e62:	bf28      	it	cs
 8000e64:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000e68:	d2ed      	bcs.n	8000e46 <__addsf3+0x92>
 8000e6a:	fab0 fc80 	clz	ip, r0
 8000e6e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000e72:	ebb2 020c 	subs.w	r2, r2, ip
 8000e76:	fa00 f00c 	lsl.w	r0, r0, ip
 8000e7a:	bfaa      	itet	ge
 8000e7c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000e80:	4252      	neglt	r2, r2
 8000e82:	4318      	orrge	r0, r3
 8000e84:	bfbc      	itt	lt
 8000e86:	40d0      	lsrlt	r0, r2
 8000e88:	4318      	orrlt	r0, r3
 8000e8a:	4770      	bx	lr
 8000e8c:	f092 0f00 	teq	r2, #0
 8000e90:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000e94:	bf06      	itte	eq
 8000e96:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000e9a:	3201      	addeq	r2, #1
 8000e9c:	3b01      	subne	r3, #1
 8000e9e:	e7b5      	b.n	8000e0c <__addsf3+0x58>
 8000ea0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ea4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ea8:	bf18      	it	ne
 8000eaa:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000eae:	d021      	beq.n	8000ef4 <__addsf3+0x140>
 8000eb0:	ea92 0f03 	teq	r2, r3
 8000eb4:	d004      	beq.n	8000ec0 <__addsf3+0x10c>
 8000eb6:	f092 0f00 	teq	r2, #0
 8000eba:	bf08      	it	eq
 8000ebc:	4608      	moveq	r0, r1
 8000ebe:	4770      	bx	lr
 8000ec0:	ea90 0f01 	teq	r0, r1
 8000ec4:	bf1c      	itt	ne
 8000ec6:	2000      	movne	r0, #0
 8000ec8:	4770      	bxne	lr
 8000eca:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000ece:	d104      	bne.n	8000eda <__addsf3+0x126>
 8000ed0:	0040      	lsls	r0, r0, #1
 8000ed2:	bf28      	it	cs
 8000ed4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000ed8:	4770      	bx	lr
 8000eda:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000ede:	bf3c      	itt	cc
 8000ee0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ee4:	4770      	bxcc	lr
 8000ee6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000eea:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000eee:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ef2:	4770      	bx	lr
 8000ef4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ef8:	bf16      	itet	ne
 8000efa:	4608      	movne	r0, r1
 8000efc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000f00:	4601      	movne	r1, r0
 8000f02:	0242      	lsls	r2, r0, #9
 8000f04:	bf06      	itte	eq
 8000f06:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000f0a:	ea90 0f01 	teqeq	r0, r1
 8000f0e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000f12:	4770      	bx	lr

08000f14 <__aeabi_ui2f>:
 8000f14:	f04f 0300 	mov.w	r3, #0
 8000f18:	e004      	b.n	8000f24 <__aeabi_i2f+0x8>
 8000f1a:	bf00      	nop

08000f1c <__aeabi_i2f>:
 8000f1c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000f20:	bf48      	it	mi
 8000f22:	4240      	negmi	r0, r0
 8000f24:	ea5f 0c00 	movs.w	ip, r0
 8000f28:	bf08      	it	eq
 8000f2a:	4770      	bxeq	lr
 8000f2c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000f30:	4601      	mov	r1, r0
 8000f32:	f04f 0000 	mov.w	r0, #0
 8000f36:	e01c      	b.n	8000f72 <__aeabi_l2f+0x2a>

08000f38 <__aeabi_ul2f>:
 8000f38:	ea50 0201 	orrs.w	r2, r0, r1
 8000f3c:	bf08      	it	eq
 8000f3e:	4770      	bxeq	lr
 8000f40:	f04f 0300 	mov.w	r3, #0
 8000f44:	e00a      	b.n	8000f5c <__aeabi_l2f+0x14>
 8000f46:	bf00      	nop

08000f48 <__aeabi_l2f>:
 8000f48:	ea50 0201 	orrs.w	r2, r0, r1
 8000f4c:	bf08      	it	eq
 8000f4e:	4770      	bxeq	lr
 8000f50:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000f54:	d502      	bpl.n	8000f5c <__aeabi_l2f+0x14>
 8000f56:	4240      	negs	r0, r0
 8000f58:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f5c:	ea5f 0c01 	movs.w	ip, r1
 8000f60:	bf02      	ittt	eq
 8000f62:	4684      	moveq	ip, r0
 8000f64:	4601      	moveq	r1, r0
 8000f66:	2000      	moveq	r0, #0
 8000f68:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000f6c:	bf08      	it	eq
 8000f6e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000f72:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000f76:	fabc f28c 	clz	r2, ip
 8000f7a:	3a08      	subs	r2, #8
 8000f7c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000f80:	db10      	blt.n	8000fa4 <__aeabi_l2f+0x5c>
 8000f82:	fa01 fc02 	lsl.w	ip, r1, r2
 8000f86:	4463      	add	r3, ip
 8000f88:	fa00 fc02 	lsl.w	ip, r0, r2
 8000f8c:	f1c2 0220 	rsb	r2, r2, #32
 8000f90:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000f94:	fa20 f202 	lsr.w	r2, r0, r2
 8000f98:	eb43 0002 	adc.w	r0, r3, r2
 8000f9c:	bf08      	it	eq
 8000f9e:	f020 0001 	biceq.w	r0, r0, #1
 8000fa2:	4770      	bx	lr
 8000fa4:	f102 0220 	add.w	r2, r2, #32
 8000fa8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000fac:	f1c2 0220 	rsb	r2, r2, #32
 8000fb0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000fb4:	fa21 f202 	lsr.w	r2, r1, r2
 8000fb8:	eb43 0002 	adc.w	r0, r3, r2
 8000fbc:	bf08      	it	eq
 8000fbe:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000fc2:	4770      	bx	lr

08000fc4 <__gesf2>:
 8000fc4:	f04f 3cff 	mov.w	ip, #4294967295
 8000fc8:	e006      	b.n	8000fd8 <__cmpsf2+0x4>
 8000fca:	bf00      	nop

08000fcc <__lesf2>:
 8000fcc:	f04f 0c01 	mov.w	ip, #1
 8000fd0:	e002      	b.n	8000fd8 <__cmpsf2+0x4>
 8000fd2:	bf00      	nop

08000fd4 <__cmpsf2>:
 8000fd4:	f04f 0c01 	mov.w	ip, #1
 8000fd8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000fdc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000fe0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000fe4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fe8:	bf18      	it	ne
 8000fea:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000fee:	d011      	beq.n	8001014 <__cmpsf2+0x40>
 8000ff0:	b001      	add	sp, #4
 8000ff2:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000ff6:	bf18      	it	ne
 8000ff8:	ea90 0f01 	teqne	r0, r1
 8000ffc:	bf58      	it	pl
 8000ffe:	ebb2 0003 	subspl.w	r0, r2, r3
 8001002:	bf88      	it	hi
 8001004:	17c8      	asrhi	r0, r1, #31
 8001006:	bf38      	it	cc
 8001008:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800100c:	bf18      	it	ne
 800100e:	f040 0001 	orrne.w	r0, r0, #1
 8001012:	4770      	bx	lr
 8001014:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001018:	d102      	bne.n	8001020 <__cmpsf2+0x4c>
 800101a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800101e:	d105      	bne.n	800102c <__cmpsf2+0x58>
 8001020:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001024:	d1e4      	bne.n	8000ff0 <__cmpsf2+0x1c>
 8001026:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800102a:	d0e1      	beq.n	8000ff0 <__cmpsf2+0x1c>
 800102c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop

08001034 <__aeabi_cfrcmple>:
 8001034:	4684      	mov	ip, r0
 8001036:	4608      	mov	r0, r1
 8001038:	4661      	mov	r1, ip
 800103a:	e7ff      	b.n	800103c <__aeabi_cfcmpeq>

0800103c <__aeabi_cfcmpeq>:
 800103c:	b50f      	push	{r0, r1, r2, r3, lr}
 800103e:	f7ff ffc9 	bl	8000fd4 <__cmpsf2>
 8001042:	2800      	cmp	r0, #0
 8001044:	bf48      	it	mi
 8001046:	f110 0f00 	cmnmi.w	r0, #0
 800104a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800104c <__aeabi_fcmpeq>:
 800104c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001050:	f7ff fff4 	bl	800103c <__aeabi_cfcmpeq>
 8001054:	bf0c      	ite	eq
 8001056:	2001      	moveq	r0, #1
 8001058:	2000      	movne	r0, #0
 800105a:	f85d fb08 	ldr.w	pc, [sp], #8
 800105e:	bf00      	nop

08001060 <__aeabi_fcmplt>:
 8001060:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001064:	f7ff ffea 	bl	800103c <__aeabi_cfcmpeq>
 8001068:	bf34      	ite	cc
 800106a:	2001      	movcc	r0, #1
 800106c:	2000      	movcs	r0, #0
 800106e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001072:	bf00      	nop

08001074 <__aeabi_fcmple>:
 8001074:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001078:	f7ff ffe0 	bl	800103c <__aeabi_cfcmpeq>
 800107c:	bf94      	ite	ls
 800107e:	2001      	movls	r0, #1
 8001080:	2000      	movhi	r0, #0
 8001082:	f85d fb08 	ldr.w	pc, [sp], #8
 8001086:	bf00      	nop

08001088 <__aeabi_fcmpge>:
 8001088:	f84d ed08 	str.w	lr, [sp, #-8]!
 800108c:	f7ff ffd2 	bl	8001034 <__aeabi_cfrcmple>
 8001090:	bf94      	ite	ls
 8001092:	2001      	movls	r0, #1
 8001094:	2000      	movhi	r0, #0
 8001096:	f85d fb08 	ldr.w	pc, [sp], #8
 800109a:	bf00      	nop

0800109c <__aeabi_fcmpgt>:
 800109c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010a0:	f7ff ffc8 	bl	8001034 <__aeabi_cfrcmple>
 80010a4:	bf34      	ite	cc
 80010a6:	2001      	movcc	r0, #1
 80010a8:	2000      	movcs	r0, #0
 80010aa:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ae:	bf00      	nop

080010b0 <__aeabi_uldivmod>:
 80010b0:	b953      	cbnz	r3, 80010c8 <__aeabi_uldivmod+0x18>
 80010b2:	b94a      	cbnz	r2, 80010c8 <__aeabi_uldivmod+0x18>
 80010b4:	2900      	cmp	r1, #0
 80010b6:	bf08      	it	eq
 80010b8:	2800      	cmpeq	r0, #0
 80010ba:	bf1c      	itt	ne
 80010bc:	f04f 31ff 	movne.w	r1, #4294967295
 80010c0:	f04f 30ff 	movne.w	r0, #4294967295
 80010c4:	f000 b9a6 	b.w	8001414 <__aeabi_idiv0>
 80010c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80010cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80010d0:	f000 f83e 	bl	8001150 <__udivmoddi4>
 80010d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80010d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80010dc:	b004      	add	sp, #16
 80010de:	4770      	bx	lr

080010e0 <__aeabi_d2lz>:
 80010e0:	b538      	push	{r3, r4, r5, lr}
 80010e2:	460c      	mov	r4, r1
 80010e4:	4605      	mov	r5, r0
 80010e6:	4621      	mov	r1, r4
 80010e8:	4628      	mov	r0, r5
 80010ea:	2200      	movs	r2, #0
 80010ec:	2300      	movs	r3, #0
 80010ee:	f7ff fd85 	bl	8000bfc <__aeabi_dcmplt>
 80010f2:	b928      	cbnz	r0, 8001100 <__aeabi_d2lz+0x20>
 80010f4:	4628      	mov	r0, r5
 80010f6:	4621      	mov	r1, r4
 80010f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80010fc:	f000 b80a 	b.w	8001114 <__aeabi_d2ulz>
 8001100:	4628      	mov	r0, r5
 8001102:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8001106:	f000 f805 	bl	8001114 <__aeabi_d2ulz>
 800110a:	4240      	negs	r0, r0
 800110c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001110:	bd38      	pop	{r3, r4, r5, pc}
 8001112:	bf00      	nop

08001114 <__aeabi_d2ulz>:
 8001114:	b5d0      	push	{r4, r6, r7, lr}
 8001116:	2200      	movs	r2, #0
 8001118:	4b0b      	ldr	r3, [pc, #44]	; (8001148 <__aeabi_d2ulz+0x34>)
 800111a:	4606      	mov	r6, r0
 800111c:	460f      	mov	r7, r1
 800111e:	f7ff fafb 	bl	8000718 <__aeabi_dmul>
 8001122:	f7ff fdd1 	bl	8000cc8 <__aeabi_d2uiz>
 8001126:	4604      	mov	r4, r0
 8001128:	f7ff fa7c 	bl	8000624 <__aeabi_ui2d>
 800112c:	2200      	movs	r2, #0
 800112e:	4b07      	ldr	r3, [pc, #28]	; (800114c <__aeabi_d2ulz+0x38>)
 8001130:	f7ff faf2 	bl	8000718 <__aeabi_dmul>
 8001134:	4602      	mov	r2, r0
 8001136:	460b      	mov	r3, r1
 8001138:	4630      	mov	r0, r6
 800113a:	4639      	mov	r1, r7
 800113c:	f7ff f934 	bl	80003a8 <__aeabi_dsub>
 8001140:	f7ff fdc2 	bl	8000cc8 <__aeabi_d2uiz>
 8001144:	4621      	mov	r1, r4
 8001146:	bdd0      	pop	{r4, r6, r7, pc}
 8001148:	3df00000 	.word	0x3df00000
 800114c:	41f00000 	.word	0x41f00000

08001150 <__udivmoddi4>:
 8001150:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001154:	9e08      	ldr	r6, [sp, #32]
 8001156:	460d      	mov	r5, r1
 8001158:	4604      	mov	r4, r0
 800115a:	468e      	mov	lr, r1
 800115c:	2b00      	cmp	r3, #0
 800115e:	f040 8083 	bne.w	8001268 <__udivmoddi4+0x118>
 8001162:	428a      	cmp	r2, r1
 8001164:	4617      	mov	r7, r2
 8001166:	d947      	bls.n	80011f8 <__udivmoddi4+0xa8>
 8001168:	fab2 f382 	clz	r3, r2
 800116c:	b14b      	cbz	r3, 8001182 <__udivmoddi4+0x32>
 800116e:	f1c3 0120 	rsb	r1, r3, #32
 8001172:	fa05 fe03 	lsl.w	lr, r5, r3
 8001176:	fa20 f101 	lsr.w	r1, r0, r1
 800117a:	409f      	lsls	r7, r3
 800117c:	ea41 0e0e 	orr.w	lr, r1, lr
 8001180:	409c      	lsls	r4, r3
 8001182:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8001186:	fbbe fcf8 	udiv	ip, lr, r8
 800118a:	fa1f f987 	uxth.w	r9, r7
 800118e:	fb08 e21c 	mls	r2, r8, ip, lr
 8001192:	fb0c f009 	mul.w	r0, ip, r9
 8001196:	0c21      	lsrs	r1, r4, #16
 8001198:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 800119c:	4290      	cmp	r0, r2
 800119e:	d90a      	bls.n	80011b6 <__udivmoddi4+0x66>
 80011a0:	18ba      	adds	r2, r7, r2
 80011a2:	f10c 31ff 	add.w	r1, ip, #4294967295
 80011a6:	f080 8118 	bcs.w	80013da <__udivmoddi4+0x28a>
 80011aa:	4290      	cmp	r0, r2
 80011ac:	f240 8115 	bls.w	80013da <__udivmoddi4+0x28a>
 80011b0:	f1ac 0c02 	sub.w	ip, ip, #2
 80011b4:	443a      	add	r2, r7
 80011b6:	1a12      	subs	r2, r2, r0
 80011b8:	fbb2 f0f8 	udiv	r0, r2, r8
 80011bc:	fb08 2210 	mls	r2, r8, r0, r2
 80011c0:	fb00 f109 	mul.w	r1, r0, r9
 80011c4:	b2a4      	uxth	r4, r4
 80011c6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80011ca:	42a1      	cmp	r1, r4
 80011cc:	d909      	bls.n	80011e2 <__udivmoddi4+0x92>
 80011ce:	193c      	adds	r4, r7, r4
 80011d0:	f100 32ff 	add.w	r2, r0, #4294967295
 80011d4:	f080 8103 	bcs.w	80013de <__udivmoddi4+0x28e>
 80011d8:	42a1      	cmp	r1, r4
 80011da:	f240 8100 	bls.w	80013de <__udivmoddi4+0x28e>
 80011de:	3802      	subs	r0, #2
 80011e0:	443c      	add	r4, r7
 80011e2:	1a64      	subs	r4, r4, r1
 80011e4:	2100      	movs	r1, #0
 80011e6:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80011ea:	b11e      	cbz	r6, 80011f4 <__udivmoddi4+0xa4>
 80011ec:	2200      	movs	r2, #0
 80011ee:	40dc      	lsrs	r4, r3
 80011f0:	e9c6 4200 	strd	r4, r2, [r6]
 80011f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80011f8:	b902      	cbnz	r2, 80011fc <__udivmoddi4+0xac>
 80011fa:	deff      	udf	#255	; 0xff
 80011fc:	fab2 f382 	clz	r3, r2
 8001200:	2b00      	cmp	r3, #0
 8001202:	d14f      	bne.n	80012a4 <__udivmoddi4+0x154>
 8001204:	1a8d      	subs	r5, r1, r2
 8001206:	2101      	movs	r1, #1
 8001208:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800120c:	fa1f f882 	uxth.w	r8, r2
 8001210:	fbb5 fcfe 	udiv	ip, r5, lr
 8001214:	fb0e 551c 	mls	r5, lr, ip, r5
 8001218:	fb08 f00c 	mul.w	r0, r8, ip
 800121c:	0c22      	lsrs	r2, r4, #16
 800121e:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 8001222:	42a8      	cmp	r0, r5
 8001224:	d907      	bls.n	8001236 <__udivmoddi4+0xe6>
 8001226:	197d      	adds	r5, r7, r5
 8001228:	f10c 32ff 	add.w	r2, ip, #4294967295
 800122c:	d202      	bcs.n	8001234 <__udivmoddi4+0xe4>
 800122e:	42a8      	cmp	r0, r5
 8001230:	f200 80e9 	bhi.w	8001406 <__udivmoddi4+0x2b6>
 8001234:	4694      	mov	ip, r2
 8001236:	1a2d      	subs	r5, r5, r0
 8001238:	fbb5 f0fe 	udiv	r0, r5, lr
 800123c:	fb0e 5510 	mls	r5, lr, r0, r5
 8001240:	fb08 f800 	mul.w	r8, r8, r0
 8001244:	b2a4      	uxth	r4, r4
 8001246:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800124a:	45a0      	cmp	r8, r4
 800124c:	d907      	bls.n	800125e <__udivmoddi4+0x10e>
 800124e:	193c      	adds	r4, r7, r4
 8001250:	f100 32ff 	add.w	r2, r0, #4294967295
 8001254:	d202      	bcs.n	800125c <__udivmoddi4+0x10c>
 8001256:	45a0      	cmp	r8, r4
 8001258:	f200 80d9 	bhi.w	800140e <__udivmoddi4+0x2be>
 800125c:	4610      	mov	r0, r2
 800125e:	eba4 0408 	sub.w	r4, r4, r8
 8001262:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8001266:	e7c0      	b.n	80011ea <__udivmoddi4+0x9a>
 8001268:	428b      	cmp	r3, r1
 800126a:	d908      	bls.n	800127e <__udivmoddi4+0x12e>
 800126c:	2e00      	cmp	r6, #0
 800126e:	f000 80b1 	beq.w	80013d4 <__udivmoddi4+0x284>
 8001272:	2100      	movs	r1, #0
 8001274:	e9c6 0500 	strd	r0, r5, [r6]
 8001278:	4608      	mov	r0, r1
 800127a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800127e:	fab3 f183 	clz	r1, r3
 8001282:	2900      	cmp	r1, #0
 8001284:	d14b      	bne.n	800131e <__udivmoddi4+0x1ce>
 8001286:	42ab      	cmp	r3, r5
 8001288:	d302      	bcc.n	8001290 <__udivmoddi4+0x140>
 800128a:	4282      	cmp	r2, r0
 800128c:	f200 80b9 	bhi.w	8001402 <__udivmoddi4+0x2b2>
 8001290:	1a84      	subs	r4, r0, r2
 8001292:	eb65 0303 	sbc.w	r3, r5, r3
 8001296:	2001      	movs	r0, #1
 8001298:	469e      	mov	lr, r3
 800129a:	2e00      	cmp	r6, #0
 800129c:	d0aa      	beq.n	80011f4 <__udivmoddi4+0xa4>
 800129e:	e9c6 4e00 	strd	r4, lr, [r6]
 80012a2:	e7a7      	b.n	80011f4 <__udivmoddi4+0xa4>
 80012a4:	409f      	lsls	r7, r3
 80012a6:	f1c3 0220 	rsb	r2, r3, #32
 80012aa:	40d1      	lsrs	r1, r2
 80012ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80012b0:	fbb1 f0fe 	udiv	r0, r1, lr
 80012b4:	fa1f f887 	uxth.w	r8, r7
 80012b8:	fb0e 1110 	mls	r1, lr, r0, r1
 80012bc:	fa24 f202 	lsr.w	r2, r4, r2
 80012c0:	409d      	lsls	r5, r3
 80012c2:	fb00 fc08 	mul.w	ip, r0, r8
 80012c6:	432a      	orrs	r2, r5
 80012c8:	0c15      	lsrs	r5, r2, #16
 80012ca:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 80012ce:	45ac      	cmp	ip, r5
 80012d0:	fa04 f403 	lsl.w	r4, r4, r3
 80012d4:	d909      	bls.n	80012ea <__udivmoddi4+0x19a>
 80012d6:	197d      	adds	r5, r7, r5
 80012d8:	f100 31ff 	add.w	r1, r0, #4294967295
 80012dc:	f080 808f 	bcs.w	80013fe <__udivmoddi4+0x2ae>
 80012e0:	45ac      	cmp	ip, r5
 80012e2:	f240 808c 	bls.w	80013fe <__udivmoddi4+0x2ae>
 80012e6:	3802      	subs	r0, #2
 80012e8:	443d      	add	r5, r7
 80012ea:	eba5 050c 	sub.w	r5, r5, ip
 80012ee:	fbb5 f1fe 	udiv	r1, r5, lr
 80012f2:	fb0e 5c11 	mls	ip, lr, r1, r5
 80012f6:	fb01 f908 	mul.w	r9, r1, r8
 80012fa:	b295      	uxth	r5, r2
 80012fc:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8001300:	45a9      	cmp	r9, r5
 8001302:	d907      	bls.n	8001314 <__udivmoddi4+0x1c4>
 8001304:	197d      	adds	r5, r7, r5
 8001306:	f101 32ff 	add.w	r2, r1, #4294967295
 800130a:	d274      	bcs.n	80013f6 <__udivmoddi4+0x2a6>
 800130c:	45a9      	cmp	r9, r5
 800130e:	d972      	bls.n	80013f6 <__udivmoddi4+0x2a6>
 8001310:	3902      	subs	r1, #2
 8001312:	443d      	add	r5, r7
 8001314:	eba5 0509 	sub.w	r5, r5, r9
 8001318:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800131c:	e778      	b.n	8001210 <__udivmoddi4+0xc0>
 800131e:	f1c1 0720 	rsb	r7, r1, #32
 8001322:	408b      	lsls	r3, r1
 8001324:	fa22 fc07 	lsr.w	ip, r2, r7
 8001328:	ea4c 0c03 	orr.w	ip, ip, r3
 800132c:	fa25 f407 	lsr.w	r4, r5, r7
 8001330:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8001334:	fbb4 f9fe 	udiv	r9, r4, lr
 8001338:	fa1f f88c 	uxth.w	r8, ip
 800133c:	fb0e 4419 	mls	r4, lr, r9, r4
 8001340:	fa20 f307 	lsr.w	r3, r0, r7
 8001344:	fb09 fa08 	mul.w	sl, r9, r8
 8001348:	408d      	lsls	r5, r1
 800134a:	431d      	orrs	r5, r3
 800134c:	0c2b      	lsrs	r3, r5, #16
 800134e:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8001352:	45a2      	cmp	sl, r4
 8001354:	fa02 f201 	lsl.w	r2, r2, r1
 8001358:	fa00 f301 	lsl.w	r3, r0, r1
 800135c:	d909      	bls.n	8001372 <__udivmoddi4+0x222>
 800135e:	eb1c 0404 	adds.w	r4, ip, r4
 8001362:	f109 30ff 	add.w	r0, r9, #4294967295
 8001366:	d248      	bcs.n	80013fa <__udivmoddi4+0x2aa>
 8001368:	45a2      	cmp	sl, r4
 800136a:	d946      	bls.n	80013fa <__udivmoddi4+0x2aa>
 800136c:	f1a9 0902 	sub.w	r9, r9, #2
 8001370:	4464      	add	r4, ip
 8001372:	eba4 040a 	sub.w	r4, r4, sl
 8001376:	fbb4 f0fe 	udiv	r0, r4, lr
 800137a:	fb0e 4410 	mls	r4, lr, r0, r4
 800137e:	fb00 fa08 	mul.w	sl, r0, r8
 8001382:	b2ad      	uxth	r5, r5
 8001384:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8001388:	45a2      	cmp	sl, r4
 800138a:	d908      	bls.n	800139e <__udivmoddi4+0x24e>
 800138c:	eb1c 0404 	adds.w	r4, ip, r4
 8001390:	f100 35ff 	add.w	r5, r0, #4294967295
 8001394:	d22d      	bcs.n	80013f2 <__udivmoddi4+0x2a2>
 8001396:	45a2      	cmp	sl, r4
 8001398:	d92b      	bls.n	80013f2 <__udivmoddi4+0x2a2>
 800139a:	3802      	subs	r0, #2
 800139c:	4464      	add	r4, ip
 800139e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80013a2:	fba0 8902 	umull	r8, r9, r0, r2
 80013a6:	eba4 040a 	sub.w	r4, r4, sl
 80013aa:	454c      	cmp	r4, r9
 80013ac:	46c6      	mov	lr, r8
 80013ae:	464d      	mov	r5, r9
 80013b0:	d319      	bcc.n	80013e6 <__udivmoddi4+0x296>
 80013b2:	d016      	beq.n	80013e2 <__udivmoddi4+0x292>
 80013b4:	b15e      	cbz	r6, 80013ce <__udivmoddi4+0x27e>
 80013b6:	ebb3 020e 	subs.w	r2, r3, lr
 80013ba:	eb64 0405 	sbc.w	r4, r4, r5
 80013be:	fa04 f707 	lsl.w	r7, r4, r7
 80013c2:	fa22 f301 	lsr.w	r3, r2, r1
 80013c6:	431f      	orrs	r7, r3
 80013c8:	40cc      	lsrs	r4, r1
 80013ca:	e9c6 7400 	strd	r7, r4, [r6]
 80013ce:	2100      	movs	r1, #0
 80013d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80013d4:	4631      	mov	r1, r6
 80013d6:	4630      	mov	r0, r6
 80013d8:	e70c      	b.n	80011f4 <__udivmoddi4+0xa4>
 80013da:	468c      	mov	ip, r1
 80013dc:	e6eb      	b.n	80011b6 <__udivmoddi4+0x66>
 80013de:	4610      	mov	r0, r2
 80013e0:	e6ff      	b.n	80011e2 <__udivmoddi4+0x92>
 80013e2:	4543      	cmp	r3, r8
 80013e4:	d2e6      	bcs.n	80013b4 <__udivmoddi4+0x264>
 80013e6:	ebb8 0e02 	subs.w	lr, r8, r2
 80013ea:	eb69 050c 	sbc.w	r5, r9, ip
 80013ee:	3801      	subs	r0, #1
 80013f0:	e7e0      	b.n	80013b4 <__udivmoddi4+0x264>
 80013f2:	4628      	mov	r0, r5
 80013f4:	e7d3      	b.n	800139e <__udivmoddi4+0x24e>
 80013f6:	4611      	mov	r1, r2
 80013f8:	e78c      	b.n	8001314 <__udivmoddi4+0x1c4>
 80013fa:	4681      	mov	r9, r0
 80013fc:	e7b9      	b.n	8001372 <__udivmoddi4+0x222>
 80013fe:	4608      	mov	r0, r1
 8001400:	e773      	b.n	80012ea <__udivmoddi4+0x19a>
 8001402:	4608      	mov	r0, r1
 8001404:	e749      	b.n	800129a <__udivmoddi4+0x14a>
 8001406:	f1ac 0c02 	sub.w	ip, ip, #2
 800140a:	443d      	add	r5, r7
 800140c:	e713      	b.n	8001236 <__udivmoddi4+0xe6>
 800140e:	3802      	subs	r0, #2
 8001410:	443c      	add	r4, r7
 8001412:	e724      	b.n	800125e <__udivmoddi4+0x10e>

08001414 <__aeabi_idiv0>:
 8001414:	4770      	bx	lr
 8001416:	bf00      	nop

08001418 <init_ad7888>:

#include "ad7888.h"

//TODO this file needs a lot of work

void init_ad7888 (ad7888 * a2d) {
 8001418:	b480      	push	{r7}
 800141a:	b083      	sub	sp, #12
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
    a2d -> last_channel_sampled = 0xFF;   // Set to invalid channel
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	22ff      	movs	r2, #255	; 0xff
 8001424:	701a      	strb	r2, [r3, #0]

}
 8001426:	bf00      	nop
 8001428:	370c      	adds	r7, #12
 800142a:	46bd      	mov	sp, r7
 800142c:	bc80      	pop	{r7}
 800142e:	4770      	bx	lr

08001430 <get_voltage_mv>:


float get_voltage_mv (ad7888 * a2d, uint8_t channel) {
 8001430:	b580      	push	{r7, lr}
 8001432:	b088      	sub	sp, #32
 8001434:	af02      	add	r7, sp, #8
 8001436:	6078      	str	r0, [r7, #4]
 8001438:	460b      	mov	r3, r1
 800143a:	70fb      	strb	r3, [r7, #3]


//                          Array position [0]
//                            | Array position [1]
//                            |   |
  uint8_t spi_tx_data[2] = {0x55,0x00};       // Define the SPI data buffer (index 0 to 15)
 800143c:	2355      	movs	r3, #85	; 0x55
 800143e:	81bb      	strh	r3, [r7, #12]
  uint8_t spi_rx_data[2] = {0x00,0x00};
 8001440:	2300      	movs	r3, #0
 8001442:	813b      	strh	r3, [r7, #8]
  uint16_t digital_result = 0x000;
 8001444:	2300      	movs	r3, #0
 8001446:	82fb      	strh	r3, [r7, #22]
   * Control register data is loaded in
   * on the first eight clocks of the 
   * transaction.  Channel numbers are 
   * 0 based;
   */
  channel--;    
 8001448:	78fb      	ldrb	r3, [r7, #3]
 800144a:	3b01      	subs	r3, #1
 800144c:	70fb      	strb	r3, [r7, #3]
  spi_tx_data[0] = ( 
                  ((channel >> 2 & 0x01) << AD7888_ADD2_BIT_OFFSET) | 
 800144e:	78fb      	ldrb	r3, [r7, #3]
 8001450:	089b      	lsrs	r3, r3, #2
 8001452:	b2db      	uxtb	r3, r3
 8001454:	015b      	lsls	r3, r3, #5
 8001456:	b25b      	sxtb	r3, r3
 8001458:	f003 0320 	and.w	r3, r3, #32
 800145c:	b25a      	sxtb	r2, r3
                  ((channel >> 1 & 0x01) << AD7888_ADD1_BIT_OFFSET) |
 800145e:	78fb      	ldrb	r3, [r7, #3]
 8001460:	085b      	lsrs	r3, r3, #1
 8001462:	b2db      	uxtb	r3, r3
 8001464:	011b      	lsls	r3, r3, #4
 8001466:	b25b      	sxtb	r3, r3
 8001468:	f003 0310 	and.w	r3, r3, #16
 800146c:	b25b      	sxtb	r3, r3
                  ((channel >> 2 & 0x01) << AD7888_ADD2_BIT_OFFSET) | 
 800146e:	4313      	orrs	r3, r2
 8001470:	b25a      	sxtb	r2, r3
                  ((channel & 0x01) << AD7888_ADD0_BIT_OFFSET) |
 8001472:	78fb      	ldrb	r3, [r7, #3]
 8001474:	00db      	lsls	r3, r3, #3
 8001476:	b25b      	sxtb	r3, r3
 8001478:	f003 0308 	and.w	r3, r3, #8
 800147c:	b25b      	sxtb	r3, r3
                  ((AD7888_USE_ON_CHIP_REFERENCE) << AD7888_REF_BIT_OFFSET) | 
                  ((AD7888_NORMAL_POWER >> 1 & 0x01) << AD7888_PM1_BIT_OFFSET) |
 800147e:	4313      	orrs	r3, r2
 8001480:	b25b      	sxtb	r3, r3
 8001482:	b2db      	uxtb	r3, r3
  spi_tx_data[0] = ( 
 8001484:	733b      	strb	r3, [r7, #12]
                  ((AD7888_NORMAL_POWER & 0x01) << AD7888_PM0_BIT_OFFSET)
                  );

  
  if(channel <= 8){
 8001486:	78fb      	ldrb	r3, [r7, #3]
 8001488:	2b08      	cmp	r3, #8
 800148a:	d806      	bhi.n	800149a <get_voltage_mv+0x6a>
    HAL_GPIO_WritePin(CH1_8_ADC_CS_n_GPIO_Port, CH1_8_ADC_CS_n_Pin, GPIO_PIN_RESET);  //Drop CS line
 800148c:	2200      	movs	r2, #0
 800148e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001492:	4838      	ldr	r0, [pc, #224]	; (8001574 <get_voltage_mv+0x144>)
 8001494:	f003 f854 	bl	8004540 <HAL_GPIO_WritePin>
 8001498:	e005      	b.n	80014a6 <get_voltage_mv+0x76>
  }
  else {
    HAL_GPIO_WritePin(CH9_16_ADC_CS_n_GPIO_Port, CH9_16_ADC_CS_n_Pin, GPIO_PIN_RESET);  //Drop CS line
 800149a:	2200      	movs	r2, #0
 800149c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80014a0:	4834      	ldr	r0, [pc, #208]	; (8001574 <get_voltage_mv+0x144>)
 80014a2:	f003 f84d 	bl	8004540 <HAL_GPIO_WritePin>
  }

  HAL_Delay(CS_HAL_DELAY_mS);
 80014a6:	2001      	movs	r0, #1
 80014a8:	f002 f95c 	bl	8003764 <HAL_Delay>
  //                               |              Pointer to transmit buffer                                                     
  //                               |                   |                   Pointer to receive buffer                                     
  //                               |                   |                        |             Size in bytes                  
  //                               |                   |                        |                  |          Timeout in us   
  //                               |                   |                        |                  |             |
  ret = HAL_SPI_TransmitReceive(&hspi1, (uint8_t *)spi_tx_data, (uint8_t *) spi_rx_data, (uint16_t) 2, (uint32_t) 800);
 80014ac:	f107 0208 	add.w	r2, r7, #8
 80014b0:	f107 010c 	add.w	r1, r7, #12
 80014b4:	f44f 7348 	mov.w	r3, #800	; 0x320
 80014b8:	9300      	str	r3, [sp, #0]
 80014ba:	2302      	movs	r3, #2
 80014bc:	482e      	ldr	r0, [pc, #184]	; (8001578 <get_voltage_mv+0x148>)
 80014be:	f004 f9dd 	bl	800587c <HAL_SPI_TransmitReceive>
 80014c2:	4603      	mov	r3, r0
 80014c4:	757b      	strb	r3, [r7, #21]
  HAL_Delay(CS_HAL_DELAY_mS);
 80014c6:	2001      	movs	r0, #1
 80014c8:	f002 f94c 	bl	8003764 <HAL_Delay>
  HAL_Delay(CS_HAL_DELAY_mS);
 80014cc:	2001      	movs	r0, #1
 80014ce:	f002 f949 	bl	8003764 <HAL_Delay>
  
  if(ret != HAL_OK){
 80014d2:	7d7b      	ldrb	r3, [r7, #21]
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d003      	beq.n	80014e0 <get_voltage_mv+0xb0>
    print_string("SPI Transmit Error",LF);
 80014d8:	2101      	movs	r1, #1
 80014da:	4828      	ldr	r0, [pc, #160]	; (800157c <get_voltage_mv+0x14c>)
 80014dc:	f001 fbf0 	bl	8002cc0 <print_string>
   * to be sent again. 
   * Note, upon initialization, "last channel sampled"
   * is set to a high value so the algorithm knows 
   * when the very first sample occurs. 
   */
  if((a2d -> last_channel_sampled > 16) || (a2d -> last_channel_sampled != channel)) {
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	781b      	ldrb	r3, [r3, #0]
 80014e4:	2b10      	cmp	r3, #16
 80014e6:	d804      	bhi.n	80014f2 <get_voltage_mv+0xc2>
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	781b      	ldrb	r3, [r3, #0]
 80014ec:	78fa      	ldrb	r2, [r7, #3]
 80014ee:	429a      	cmp	r2, r3
 80014f0:	d016      	beq.n	8001520 <get_voltage_mv+0xf0>
    //                               |              Pointer to transmit buffer                                                     
    //                               |                   |                   Pointer to receive buffer                                     
    //                               |                   |                        |             Size in bytes                  
    //                               |                   |                        |                  |          Timeout in us   
    //                               |                   |                        |                  |             |
    ret = HAL_SPI_TransmitReceive(&hspi1, (uint8_t *)spi_tx_data, (uint8_t *) spi_rx_data, (uint16_t) 2, (uint32_t) 800);
 80014f2:	f107 0208 	add.w	r2, r7, #8
 80014f6:	f107 010c 	add.w	r1, r7, #12
 80014fa:	f44f 7348 	mov.w	r3, #800	; 0x320
 80014fe:	9300      	str	r3, [sp, #0]
 8001500:	2302      	movs	r3, #2
 8001502:	481d      	ldr	r0, [pc, #116]	; (8001578 <get_voltage_mv+0x148>)
 8001504:	f004 f9ba 	bl	800587c <HAL_SPI_TransmitReceive>
 8001508:	4603      	mov	r3, r0
 800150a:	757b      	strb	r3, [r7, #21]

    if(ret != HAL_OK){
 800150c:	7d7b      	ldrb	r3, [r7, #21]
 800150e:	2b00      	cmp	r3, #0
 8001510:	d003      	beq.n	800151a <get_voltage_mv+0xea>
      print_string("SPI Transmit Error",LF);
 8001512:	2101      	movs	r1, #1
 8001514:	4819      	ldr	r0, [pc, #100]	; (800157c <get_voltage_mv+0x14c>)
 8001516:	f001 fbd3 	bl	8002cc0 <print_string>
    }    

      a2d -> last_channel_sampled = channel;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	78fa      	ldrb	r2, [r7, #3]
 800151e:	701a      	strb	r2, [r3, #0]
    } //END IF


  HAL_GPIO_WritePin(CH1_8_ADC_CS_n_GPIO_Port, CH1_8_ADC_CS_n_Pin, GPIO_PIN_SET);  //Drop CS line
 8001520:	2201      	movs	r2, #1
 8001522:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001526:	4813      	ldr	r0, [pc, #76]	; (8001574 <get_voltage_mv+0x144>)
 8001528:	f003 f80a 	bl	8004540 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(CH9_16_ADC_CS_n_GPIO_Port, CH9_16_ADC_CS_n_Pin, GPIO_PIN_SET);  //Drop CS line
 800152c:	2201      	movs	r2, #1
 800152e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001532:	4810      	ldr	r0, [pc, #64]	; (8001574 <get_voltage_mv+0x144>)
 8001534:	f003 f804 	bl	8004540 <HAL_GPIO_WritePin>
  
  digital_result = (uint16_t)((spi_rx_data[0] << 8) | (spi_rx_data[1]));
 8001538:	7a3b      	ldrb	r3, [r7, #8]
 800153a:	021b      	lsls	r3, r3, #8
 800153c:	b21a      	sxth	r2, r3
 800153e:	7a7b      	ldrb	r3, [r7, #9]
 8001540:	b21b      	sxth	r3, r3
 8001542:	4313      	orrs	r3, r2
 8001544:	b21b      	sxth	r3, r3
 8001546:	82fb      	strh	r3, [r7, #22]

  // print_string("The digital result: ", 0);
  // print_16b_binary_rep(digital_result, LF);

  voltage = (float)(digital_result * A2D_VOLTAGE_PER_BIT * 1000); //Value in mV
 8001548:	8afb      	ldrh	r3, [r7, #22]
 800154a:	4618      	mov	r0, r3
 800154c:	f7ff fce6 	bl	8000f1c <__aeabi_i2f>
 8001550:	4603      	mov	r3, r0
 8001552:	490b      	ldr	r1, [pc, #44]	; (8001580 <get_voltage_mv+0x150>)
 8001554:	4618      	mov	r0, r3
 8001556:	f7fe fe6f 	bl	8000238 <__aeabi_fmul>
 800155a:	4603      	mov	r3, r0
 800155c:	4909      	ldr	r1, [pc, #36]	; (8001584 <get_voltage_mv+0x154>)
 800155e:	4618      	mov	r0, r3
 8001560:	f7fe fe6a 	bl	8000238 <__aeabi_fmul>
 8001564:	4603      	mov	r3, r0
 8001566:	613b      	str	r3, [r7, #16]

  return voltage;
 8001568:	693b      	ldr	r3, [r7, #16]
 800156a:	4618      	mov	r0, r3
 800156c:	3718      	adds	r7, #24
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	40010c00 	.word	0x40010c00
 8001578:	20000374 	.word	0x20000374
 800157c:	0800bdf0 	.word	0x0800bdf0
 8001580:	3a200008 	.word	0x3a200008
 8001584:	447a0000 	.word	0x447a0000

08001588 <getNumber_u8>:
ad7888       a2d;               // Struct for all things A2D related 
fuse         fus;               // Struct for all things fuse related
timing       tim;


uint8_t getNumber_u8 ( void ) {
 8001588:	b580      	push	{r7, lr}
 800158a:	b082      	sub	sp, #8
 800158c:	af00      	add	r7, sp, #0
    int number      = 0;
 800158e:	2300      	movs	r3, #0
 8001590:	603b      	str	r3, [r7, #0]
    uint8_t timeout     = 0;
 8001592:	2300      	movs	r3, #0
 8001594:	71fb      	strb	r3, [r7, #7]

    ResetRxBuffer();
 8001596:	f001 fc8d 	bl	8002eb4 <ResetRxBuffer>
    
    uart.rxchar = '\0';
 800159a:	4b1a      	ldr	r3, [pc, #104]	; (8001604 <getNumber_u8+0x7c>)
 800159c:	2200      	movs	r2, #0
 800159e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while(uart.rxchar == '\0'){}                   // Wait for keyboard input 
 80015a2:	bf00      	nop
 80015a4:	4b17      	ldr	r3, [pc, #92]	; (8001604 <getNumber_u8+0x7c>)
 80015a6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d0fa      	beq.n	80015a4 <getNumber_u8+0x1c>
    
    while (timeout < 20) {
 80015ae:	e00a      	b.n	80015c6 <getNumber_u8+0x3e>
        if(uart.rxchar == ENTER_KEY) break;
 80015b0:	4b14      	ldr	r3, [pc, #80]	; (8001604 <getNumber_u8+0x7c>)
 80015b2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80015b6:	2b0d      	cmp	r3, #13
 80015b8:	d009      	beq.n	80015ce <getNumber_u8+0x46>

        HAL_Delay(100);          // Delay in ms 
 80015ba:	2064      	movs	r0, #100	; 0x64
 80015bc:	f002 f8d2 	bl	8003764 <HAL_Delay>
        timeout++;
 80015c0:	79fb      	ldrb	r3, [r7, #7]
 80015c2:	3301      	adds	r3, #1
 80015c4:	71fb      	strb	r3, [r7, #7]
    while (timeout < 20) {
 80015c6:	79fb      	ldrb	r3, [r7, #7]
 80015c8:	2b13      	cmp	r3, #19
 80015ca:	d9f1      	bls.n	80015b0 <getNumber_u8+0x28>
 80015cc:	e000      	b.n	80015d0 <getNumber_u8+0x48>
        if(uart.rxchar == ENTER_KEY) break;
 80015ce:	bf00      	nop
    }

    sscanf(uart.rxbuf,"%d",&number);
 80015d0:	463b      	mov	r3, r7
 80015d2:	461a      	mov	r2, r3
 80015d4:	490c      	ldr	r1, [pc, #48]	; (8001608 <getNumber_u8+0x80>)
 80015d6:	480b      	ldr	r0, [pc, #44]	; (8001604 <getNumber_u8+0x7c>)
 80015d8:	f006 fa52 	bl	8007a80 <siscanf>

    print_string("Number Received: ",0);
 80015dc:	2100      	movs	r1, #0
 80015de:	480b      	ldr	r0, [pc, #44]	; (800160c <getNumber_u8+0x84>)
 80015e0:	f001 fb6e 	bl	8002cc0 <print_string>
    print_unsigned_decimal((uint8_t)number, LF);
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	b2db      	uxtb	r3, r3
 80015e8:	b29b      	uxth	r3, r3
 80015ea:	2101      	movs	r1, #1
 80015ec:	4618      	mov	r0, r3
 80015ee:	f001 fba9 	bl	8002d44 <print_unsigned_decimal>

    ResetRxBuffer();
 80015f2:	f001 fc5f 	bl	8002eb4 <ResetRxBuffer>
    return(number);
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	b2db      	uxtb	r3, r3
}
 80015fa:	4618      	mov	r0, r3
 80015fc:	3708      	adds	r7, #8
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}
 8001602:	bf00      	nop
 8001604:	20000220 	.word	0x20000220
 8001608:	0800be04 	.word	0x0800be04
 800160c:	0800be08 	.word	0x0800be08

08001610 <getNumber_float>:


float getNumber_float( void ) {
 8001610:	b580      	push	{r7, lr}
 8001612:	b082      	sub	sp, #8
 8001614:	af00      	add	r7, sp, #0
    float number        = 0;
 8001616:	f04f 0300 	mov.w	r3, #0
 800161a:	603b      	str	r3, [r7, #0]
    uint8_t timeout     = 0;
 800161c:	2300      	movs	r3, #0
 800161e:	71fb      	strb	r3, [r7, #7]
    
    ResetRxBuffer();
 8001620:	f001 fc48 	bl	8002eb4 <ResetRxBuffer>
    
    uart.rxchar = '\0';
 8001624:	4b13      	ldr	r3, [pc, #76]	; (8001674 <getNumber_float+0x64>)
 8001626:	2200      	movs	r2, #0
 8001628:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while(uart.rxchar == '\0'){}                   // Wait for keyboard input 
 800162c:	bf00      	nop
 800162e:	4b11      	ldr	r3, [pc, #68]	; (8001674 <getNumber_float+0x64>)
 8001630:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001634:	2b00      	cmp	r3, #0
 8001636:	d0fa      	beq.n	800162e <getNumber_float+0x1e>
    
    while (timeout < 80) {
 8001638:	e00a      	b.n	8001650 <getNumber_float+0x40>
        
        if(uart.rxchar == ENTER_KEY) break;
 800163a:	4b0e      	ldr	r3, [pc, #56]	; (8001674 <getNumber_float+0x64>)
 800163c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001640:	2b0d      	cmp	r3, #13
 8001642:	d009      	beq.n	8001658 <getNumber_float+0x48>

        HAL_Delay(100);          // Delay in ms
 8001644:	2064      	movs	r0, #100	; 0x64
 8001646:	f002 f88d 	bl	8003764 <HAL_Delay>
        timeout++;
 800164a:	79fb      	ldrb	r3, [r7, #7]
 800164c:	3301      	adds	r3, #1
 800164e:	71fb      	strb	r3, [r7, #7]
    while (timeout < 80) {
 8001650:	79fb      	ldrb	r3, [r7, #7]
 8001652:	2b4f      	cmp	r3, #79	; 0x4f
 8001654:	d9f1      	bls.n	800163a <getNumber_float+0x2a>
 8001656:	e000      	b.n	800165a <getNumber_float+0x4a>
        if(uart.rxchar == ENTER_KEY) break;
 8001658:	bf00      	nop
    }

    sscanf(uart.rxbuf,"%f.3",&number);
 800165a:	463b      	mov	r3, r7
 800165c:	461a      	mov	r2, r3
 800165e:	4906      	ldr	r1, [pc, #24]	; (8001678 <getNumber_float+0x68>)
 8001660:	4804      	ldr	r0, [pc, #16]	; (8001674 <getNumber_float+0x64>)
 8001662:	f006 fa0d 	bl	8007a80 <siscanf>
    
    ResetRxBuffer();
 8001666:	f001 fc25 	bl	8002eb4 <ResetRxBuffer>

    return(number);
 800166a:	683b      	ldr	r3, [r7, #0]

}
 800166c:	4618      	mov	r0, r3
 800166e:	3708      	adds	r7, #8
 8001670:	46bd      	mov	sp, r7
 8001672:	bd80      	pop	{r7, pc}
 8001674:	20000220 	.word	0x20000220
 8001678:	0800be1c 	.word	0x0800be1c

0800167c <MainMenu>:

void MainMenu( void ) {
 800167c:	b580      	push	{r7, lr}
 800167e:	b084      	sub	sp, #16
 8001680:	af00      	add	r7, sp, #0
     * determined, the equation y=mx+b can be rewritten in
     * order to solve for b (b = y-mx).  
     * 
     */

	uint8_t     usr_number_u8           = 0;        // Number user has entered will be stored here
 8001682:	2300      	movs	r3, #0
 8001684:	73fb      	strb	r3, [r7, #15]
    uint16_t    dac_data_value          = 0;
 8001686:	2300      	movs	r3, #0
 8001688:	81bb      	strh	r3, [r7, #12]
    uint16_t    temp_fuse_status_u16    = 0;
 800168a:	2300      	movs	r3, #0
 800168c:	817b      	strh	r3, [r7, #10]
    uint8_t     temp_u8                 = 0;
 800168e:	2300      	movs	r3, #0
 8001690:	727b      	strb	r3, [r7, #9]
    bool        temp_bool               = 0;
 8001692:	2300      	movs	r3, #0
 8001694:	723b      	strb	r3, [r7, #8]
    float       temp_float              = 0.0;
 8001696:	f04f 0300 	mov.w	r3, #0
 800169a:	607b      	str	r3, [r7, #4]
    
    uart.rxchar = '\0';                  
 800169c:	4baf      	ldr	r3, [pc, #700]	; (800195c <MainMenu+0x2e0>)
 800169e:	2200      	movs	r2, #0
 80016a0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    ResetTerminal();                            // Clear all the contents on the terminal
 80016a4:	f001 fbb8 	bl	8002e18 <ResetTerminal>

    
    // blockingDelay10ms(1);
    HAL_Delay(1);
 80016a8:	2001      	movs	r0, #1
 80016aa:	f002 f85b 	bl	8003764 <HAL_Delay>
    CursorTopLeft();
 80016ae:	f001 fb9b 	bl	8002de8 <CursorTopLeft>
    HAL_Delay(1);
 80016b2:	2001      	movs	r0, #1
 80016b4:	f002 f856 	bl	8003764 <HAL_Delay>
    // blockingDelay10ms(1);

    while(usr_number_u8 != 99) {
 80016b8:	e143      	b.n	8001942 <MainMenu+0x2c6>
        InsertLineFeed(1);
 80016ba:	2001      	movs	r0, #1
 80016bc:	f001 fbc4 	bl	8002e48 <InsertLineFeed>
        InsertLineSeparator();
 80016c0:	f001 fbee 	bl	8002ea0 <InsertLineSeparator>
        print_string("1 --- Manipulate DAC output.",LF);
 80016c4:	2101      	movs	r1, #1
 80016c6:	48a6      	ldr	r0, [pc, #664]	; (8001960 <MainMenu+0x2e4>)
 80016c8:	f001 fafa 	bl	8002cc0 <print_string>
        print_string("2 --- Set fuse current.",LF);
 80016cc:	2101      	movs	r1, #1
 80016ce:	48a5      	ldr	r0, [pc, #660]	; (8001964 <MainMenu+0x2e8>)
 80016d0:	f001 faf6 	bl	8002cc0 <print_string>
        print_string("3 --- Turn particular analog sw ON.",LF);
 80016d4:	2101      	movs	r1, #1
 80016d6:	48a4      	ldr	r0, [pc, #656]	; (8001968 <MainMenu+0x2ec>)
 80016d8:	f001 faf2 	bl	8002cc0 <print_string>
        print_string("4 --- Turn all analog sw OFF.",LF);
 80016dc:	2101      	movs	r1, #1
 80016de:	48a3      	ldr	r0, [pc, #652]	; (800196c <MainMenu+0x2f0>)
 80016e0:	f001 faee 	bl	8002cc0 <print_string>
        print_string("5 --- Get voltage from A2D.",LF);
 80016e4:	2101      	movs	r1, #1
 80016e6:	48a2      	ldr	r0, [pc, #648]	; (8001970 <MainMenu+0x2f4>)
 80016e8:	f001 faea 	bl	8002cc0 <print_string>
        print_string("6 --- Get fuse status.",LF);
 80016ec:	2101      	movs	r1, #1
 80016ee:	48a1      	ldr	r0, [pc, #644]	; (8001974 <MainMenu+0x2f8>)
 80016f0:	f001 fae6 	bl	8002cc0 <print_string>
        print_string("7 --- Ignite a fuse.",LF);
 80016f4:	2101      	movs	r1, #1
 80016f6:	48a0      	ldr	r0, [pc, #640]	; (8001978 <MainMenu+0x2fc>)
 80016f8:	f001 fae2 	bl	8002cc0 <print_string>


        
        print_string("99 -- Exit menu.",LF);  
 80016fc:	2101      	movs	r1, #1
 80016fe:	489f      	ldr	r0, [pc, #636]	; (800197c <MainMenu+0x300>)
 8001700:	f001 fade 	bl	8002cc0 <print_string>
        InsertLineFeed(2);
 8001704:	2002      	movs	r0, #2
 8001706:	f001 fb9f 	bl	8002e48 <InsertLineFeed>
        
        print_string("Enter Selection:  ",0);
 800170a:	2100      	movs	r1, #0
 800170c:	489c      	ldr	r0, [pc, #624]	; (8001980 <MainMenu+0x304>)
 800170e:	f001 fad7 	bl	8002cc0 <print_string>
        usr_number_u8 = getNumber_u8();
 8001712:	f7ff ff39 	bl	8001588 <getNumber_u8>
 8001716:	4603      	mov	r3, r0
 8001718:	73fb      	strb	r3, [r7, #15]

       
        switch(usr_number_u8) {
 800171a:	7bfb      	ldrb	r3, [r7, #15]
 800171c:	2b07      	cmp	r3, #7
 800171e:	dc17      	bgt.n	8001750 <MainMenu+0xd4>
 8001720:	2b00      	cmp	r3, #0
 8001722:	f340 810c 	ble.w	800193e <MainMenu+0x2c2>
 8001726:	3b01      	subs	r3, #1
 8001728:	2b06      	cmp	r3, #6
 800172a:	f200 8108 	bhi.w	800193e <MainMenu+0x2c2>
 800172e:	a201      	add	r2, pc, #4	; (adr r2, 8001734 <MainMenu+0xb8>)
 8001730:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001734:	08001759 	.word	0x08001759
 8001738:	0800179f 	.word	0x0800179f
 800173c:	08001811 	.word	0x08001811
 8001740:	0800184d 	.word	0x0800184d
 8001744:	0800185b 	.word	0x0800185b
 8001748:	080018a7 	.word	0x080018a7
 800174c:	080018cf 	.word	0x080018cf
 8001750:	2b63      	cmp	r3, #99	; 0x63
 8001752:	f000 80e7 	beq.w	8001924 <MainMenu+0x2a8>
 8001756:	e0f2      	b.n	800193e <MainMenu+0x2c2>
            /* Manipulate DAC Voltage Output */
            case 1:
                InsertLineFeed(1);
 8001758:	2001      	movs	r0, #1
 800175a:	f001 fb75 	bl	8002e48 <InsertLineFeed>
                InsertLineSeparator();
 800175e:	f001 fb9f 	bl	8002ea0 <InsertLineSeparator>
                print_string("What voltage shall the DAC be set to: ",0);
 8001762:	2100      	movs	r1, #0
 8001764:	4887      	ldr	r0, [pc, #540]	; (8001984 <MainMenu+0x308>)
 8001766:	f001 faab 	bl	8002cc0 <print_string>
                temp_float = getNumber_float();
 800176a:	f7ff ff51 	bl	8001610 <getNumber_float>
 800176e:	6078      	str	r0, [r7, #4]
                InsertLineFeed(1);
 8001770:	2001      	movs	r0, #1
 8001772:	f001 fb69 	bl	8002e48 <InsertLineFeed>
                print_string("Setting DAC voltage to: ",0);
 8001776:	2100      	movs	r1, #0
 8001778:	4883      	ldr	r0, [pc, #524]	; (8001988 <MainMenu+0x30c>)
 800177a:	f001 faa1 	bl	8002cc0 <print_string>
                print_float(temp_float,LF);
 800177e:	2101      	movs	r1, #1
 8001780:	6878      	ldr	r0, [r7, #4]
 8001782:	f001 f9ff 	bl	8002b84 <print_float>

            	dac_data_value = get_dac_data_value (temp_float);
 8001786:	6878      	ldr	r0, [r7, #4]
 8001788:	f000 f926 	bl	80019d8 <get_dac_data_value>
 800178c:	4603      	mov	r3, r0
 800178e:	81bb      	strh	r3, [r7, #12]
                HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, (uint32_t)dac_data_value);
 8001790:	89bb      	ldrh	r3, [r7, #12]
 8001792:	2200      	movs	r2, #0
 8001794:	2100      	movs	r1, #0
 8001796:	487d      	ldr	r0, [pc, #500]	; (800198c <MainMenu+0x310>)
 8001798:	f002 fb9a 	bl	8003ed0 <HAL_DAC_SetValue>
            break;
 800179c:	e0d1      	b.n	8001942 <MainMenu+0x2c6>
            
            /* Set fuse current */
            case 2:
                InsertLineFeed(1);
 800179e:	2001      	movs	r0, #1
 80017a0:	f001 fb52 	bl	8002e48 <InsertLineFeed>
                InsertLineSeparator();
 80017a4:	f001 fb7c 	bl	8002ea0 <InsertLineSeparator>
                print_string("What shall the fuse current be (mA): ",0);
 80017a8:	2100      	movs	r1, #0
 80017aa:	4879      	ldr	r0, [pc, #484]	; (8001990 <MainMenu+0x314>)
 80017ac:	f001 fa88 	bl	8002cc0 <print_string>
                temp_float = getNumber_float();
 80017b0:	f7ff ff2e 	bl	8001610 <getNumber_float>
 80017b4:	6078      	str	r0, [r7, #4]
                temp_float = (float)(temp_float/1000.0*0.5);                  // Multiply by 0.5 to get voltage
 80017b6:	6878      	ldr	r0, [r7, #4]
 80017b8:	f7fe ff56 	bl	8000668 <__aeabi_f2d>
 80017bc:	f04f 0200 	mov.w	r2, #0
 80017c0:	4b74      	ldr	r3, [pc, #464]	; (8001994 <MainMenu+0x318>)
 80017c2:	f7ff f8d3 	bl	800096c <__aeabi_ddiv>
 80017c6:	4602      	mov	r2, r0
 80017c8:	460b      	mov	r3, r1
 80017ca:	4610      	mov	r0, r2
 80017cc:	4619      	mov	r1, r3
 80017ce:	f04f 0200 	mov.w	r2, #0
 80017d2:	4b71      	ldr	r3, [pc, #452]	; (8001998 <MainMenu+0x31c>)
 80017d4:	f7fe ffa0 	bl	8000718 <__aeabi_dmul>
 80017d8:	4602      	mov	r2, r0
 80017da:	460b      	mov	r3, r1
 80017dc:	4610      	mov	r0, r2
 80017de:	4619      	mov	r1, r3
 80017e0:	f7ff fa92 	bl	8000d08 <__aeabi_d2f>
 80017e4:	4603      	mov	r3, r0
 80017e6:	607b      	str	r3, [r7, #4]
                print_string("Required DAC Voltage: ",0);
 80017e8:	2100      	movs	r1, #0
 80017ea:	486c      	ldr	r0, [pc, #432]	; (800199c <MainMenu+0x320>)
 80017ec:	f001 fa68 	bl	8002cc0 <print_string>
                print_float(temp_float,LF);
 80017f0:	2101      	movs	r1, #1
 80017f2:	6878      	ldr	r0, [r7, #4]
 80017f4:	f001 f9c6 	bl	8002b84 <print_float>

            	dac_data_value = get_dac_data_value (temp_float);
 80017f8:	6878      	ldr	r0, [r7, #4]
 80017fa:	f000 f8ed 	bl	80019d8 <get_dac_data_value>
 80017fe:	4603      	mov	r3, r0
 8001800:	81bb      	strh	r3, [r7, #12]
                
                HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, (uint32_t)dac_data_value);
 8001802:	89bb      	ldrh	r3, [r7, #12]
 8001804:	2200      	movs	r2, #0
 8001806:	2100      	movs	r1, #0
 8001808:	4860      	ldr	r0, [pc, #384]	; (800198c <MainMenu+0x310>)
 800180a:	f002 fb61 	bl	8003ed0 <HAL_DAC_SetValue>
            	
            break;
 800180e:	e098      	b.n	8001942 <MainMenu+0x2c6>

            case 3:
                InsertLineFeed(1);
 8001810:	2001      	movs	r0, #1
 8001812:	f001 fb19 	bl	8002e48 <InsertLineFeed>
                InsertLineSeparator();
 8001816:	f001 fb43 	bl	8002ea0 <InsertLineSeparator>
                print_string("Which switch would you like to enable:  ",0);
 800181a:	2100      	movs	r1, #0
 800181c:	4860      	ldr	r0, [pc, #384]	; (80019a0 <MainMenu+0x324>)
 800181e:	f001 fa4f 	bl	8002cc0 <print_string>
                temp_u8 = getNumber_u8();
 8001822:	f7ff feb1 	bl	8001588 <getNumber_u8>
 8001826:	4603      	mov	r3, r0
 8001828:	727b      	strb	r3, [r7, #9]

                if(set_anlg_sw_on (temp_u8)) {
 800182a:	7a7b      	ldrb	r3, [r7, #9]
 800182c:	4618      	mov	r0, r3
 800182e:	f000 fe4d 	bl	80024cc <set_anlg_sw_on>
 8001832:	4603      	mov	r3, r0
 8001834:	2b00      	cmp	r3, #0
 8001836:	d004      	beq.n	8001842 <MainMenu+0x1c6>
                    print_string("Successful. Channel should be enabled.",LF);
 8001838:	2101      	movs	r1, #1
 800183a:	485a      	ldr	r0, [pc, #360]	; (80019a4 <MainMenu+0x328>)
 800183c:	f001 fa40 	bl	8002cc0 <print_string>
 8001840:	e07f      	b.n	8001942 <MainMenu+0x2c6>
                }
                else {
                    print_string("Failed to set analog switch ON.",LF);
 8001842:	2101      	movs	r1, #1
 8001844:	4858      	ldr	r0, [pc, #352]	; (80019a8 <MainMenu+0x32c>)
 8001846:	f001 fa3b 	bl	8002cc0 <print_string>
                }
                
                
            	
            break;
 800184a:	e07a      	b.n	8001942 <MainMenu+0x2c6>
            
            case 4:
                print_string("Turning all analog SW OFF.",LF);
 800184c:	2101      	movs	r1, #1
 800184e:	4857      	ldr	r0, [pc, #348]	; (80019ac <MainMenu+0x330>)
 8001850:	f001 fa36 	bl	8002cc0 <print_string>
                anlg_sw_all_off();
 8001854:	f000 fdea 	bl	800242c <anlg_sw_all_off>
                
            	
            break;
 8001858:	e073      	b.n	8001942 <MainMenu+0x2c6>
            
            case 5:
                InsertLineFeed(1);
 800185a:	2001      	movs	r0, #1
 800185c:	f001 faf4 	bl	8002e48 <InsertLineFeed>
                InsertLineSeparator();
 8001860:	f001 fb1e 	bl	8002ea0 <InsertLineSeparator>
                print_string("Which channel of the A2D shall be sampled:  ",0);
 8001864:	2100      	movs	r1, #0
 8001866:	4852      	ldr	r0, [pc, #328]	; (80019b0 <MainMenu+0x334>)
 8001868:	f001 fa2a 	bl	8002cc0 <print_string>
                temp_u8 = getNumber_u8();
 800186c:	f7ff fe8c 	bl	8001588 <getNumber_u8>
 8001870:	4603      	mov	r3, r0
 8001872:	727b      	strb	r3, [r7, #9]
                
                print_string("User elected to see channel: ",0);
 8001874:	2100      	movs	r1, #0
 8001876:	484f      	ldr	r0, [pc, #316]	; (80019b4 <MainMenu+0x338>)
 8001878:	f001 fa22 	bl	8002cc0 <print_string>
                print_unsigned_decimal(temp_u8,LF);
 800187c:	7a7b      	ldrb	r3, [r7, #9]
 800187e:	b29b      	uxth	r3, r3
 8001880:	2101      	movs	r1, #1
 8001882:	4618      	mov	r0, r3
 8001884:	f001 fa5e 	bl	8002d44 <print_unsigned_decimal>
                temp_float = get_voltage_mv (&a2d, temp_u8);
 8001888:	7a7b      	ldrb	r3, [r7, #9]
 800188a:	4619      	mov	r1, r3
 800188c:	484a      	ldr	r0, [pc, #296]	; (80019b8 <MainMenu+0x33c>)
 800188e:	f7ff fdcf 	bl	8001430 <get_voltage_mv>
 8001892:	6078      	str	r0, [r7, #4]
                print_string("ADC Voltage: ",0);
 8001894:	2100      	movs	r1, #0
 8001896:	4849      	ldr	r0, [pc, #292]	; (80019bc <MainMenu+0x340>)
 8001898:	f001 fa12 	bl	8002cc0 <print_string>
                print_float(temp_float,LF);
 800189c:	2101      	movs	r1, #1
 800189e:	6878      	ldr	r0, [r7, #4]
 80018a0:	f001 f970 	bl	8002b84 <print_float>
            	
            break;
 80018a4:	e04d      	b.n	8001942 <MainMenu+0x2c6>
            
            case 6:
                InsertLineFeed(1);
 80018a6:	2001      	movs	r0, #1
 80018a8:	f001 face 	bl	8002e48 <InsertLineFeed>
                InsertLineSeparator();
 80018ac:	f001 faf8 	bl	8002ea0 <InsertLineSeparator>
                temp_fuse_status_u16 = get_status_all_fuses(&fus);
 80018b0:	4843      	ldr	r0, [pc, #268]	; (80019c0 <MainMenu+0x344>)
 80018b2:	f000 fc4b 	bl	800214c <get_status_all_fuses>
 80018b6:	4603      	mov	r3, r0
 80018b8:	817b      	strh	r3, [r7, #10]
                print_string("Fuse Status U16: ",0);
 80018ba:	2100      	movs	r1, #0
 80018bc:	4841      	ldr	r0, [pc, #260]	; (80019c4 <MainMenu+0x348>)
 80018be:	f001 f9ff 	bl	8002cc0 <print_string>
                print_16b_binary_rep(temp_fuse_status_u16,LF);
 80018c2:	897b      	ldrh	r3, [r7, #10]
 80018c4:	2101      	movs	r1, #1
 80018c6:	4618      	mov	r0, r3
 80018c8:	f001 f9a4 	bl	8002c14 <print_16b_binary_rep>
            break;
 80018cc:	e039      	b.n	8001942 <MainMenu+0x2c6>
            
            case 7:
                InsertLineFeed(1);
 80018ce:	2001      	movs	r0, #1
 80018d0:	f001 faba 	bl	8002e48 <InsertLineFeed>
                InsertLineSeparator();
 80018d4:	f001 fae4 	bl	8002ea0 <InsertLineSeparator>
                
                print_string("Enter fuse to be lit: ",0);
 80018d8:	2100      	movs	r1, #0
 80018da:	483b      	ldr	r0, [pc, #236]	; (80019c8 <MainMenu+0x34c>)
 80018dc:	f001 f9f0 	bl	8002cc0 <print_string>
                temp_u8 = getNumber_u8();
 80018e0:	f7ff fe52 	bl	8001588 <getNumber_u8>
 80018e4:	4603      	mov	r3, r0
 80018e6:	727b      	strb	r3, [r7, #9]
                
                print_string("User elected to light fuse: ",0);
 80018e8:	2100      	movs	r1, #0
 80018ea:	4838      	ldr	r0, [pc, #224]	; (80019cc <MainMenu+0x350>)
 80018ec:	f001 f9e8 	bl	8002cc0 <print_string>
                print_unsigned_decimal(temp_u8,LF);
 80018f0:	7a7b      	ldrb	r3, [r7, #9]
 80018f2:	b29b      	uxth	r3, r3
 80018f4:	2101      	movs	r1, #1
 80018f6:	4618      	mov	r0, r3
 80018f8:	f001 fa24 	bl	8002d44 <print_unsigned_decimal>
                
                ignite_fuse (&tim, &fus, temp_u8);
 80018fc:	7a7b      	ldrb	r3, [r7, #9]
 80018fe:	461a      	mov	r2, r3
 8001900:	492f      	ldr	r1, [pc, #188]	; (80019c0 <MainMenu+0x344>)
 8001902:	4833      	ldr	r0, [pc, #204]	; (80019d0 <MainMenu+0x354>)
 8001904:	f000 fbdc 	bl	80020c0 <ignite_fuse>

                while (tim.timer_100ms_cntr < FUSE_100MS_TICKS_TIMEOUT);
 8001908:	bf00      	nop
 800190a:	4b31      	ldr	r3, [pc, #196]	; (80019d0 <MainMenu+0x354>)
 800190c:	895b      	ldrh	r3, [r3, #10]
 800190e:	2b13      	cmp	r3, #19
 8001910:	d9fb      	bls.n	800190a <MainMenu+0x28e>
                anlg_sw_all_off();
 8001912:	f000 fd8b 	bl	800242c <anlg_sw_all_off>

                tim.timer_100ms_running = false;
 8001916:	4b2e      	ldr	r3, [pc, #184]	; (80019d0 <MainMenu+0x354>)
 8001918:	2200      	movs	r2, #0
 800191a:	731a      	strb	r2, [r3, #12]
                tim.timer_100ms_cntr = 0;
 800191c:	4b2c      	ldr	r3, [pc, #176]	; (80019d0 <MainMenu+0x354>)
 800191e:	2200      	movs	r2, #0
 8001920:	815a      	strh	r2, [r3, #10]

            break;
 8001922:	e00e      	b.n	8001942 <MainMenu+0x2c6>

            case 99:
                ResetTerminal();              //Leaving menu, so clear the screen so not to confuse user
 8001924:	f001 fa78 	bl	8002e18 <ResetTerminal>
                HAL_Delay(1);
 8001928:	2001      	movs	r0, #1
 800192a:	f001 ff1b 	bl	8003764 <HAL_Delay>
                // blockingDelay10ms(1);
                CursorTopLeft();        //Make sure the cursor is in the Top Left position
 800192e:	f001 fa5b 	bl	8002de8 <CursorTopLeft>
                HAL_Delay(1);
 8001932:	2001      	movs	r0, #1
 8001934:	f001 ff16 	bl	8003764 <HAL_Delay>
                // blockingDelay10ms(1);
                usr_number_u8 = 99;
 8001938:	2363      	movs	r3, #99	; 0x63
 800193a:	73fb      	strb	r3, [r7, #15]
            break;
 800193c:	e001      	b.n	8001942 <MainMenu+0x2c6>

            default:
                usr_number_u8 = 0;
 800193e:	2300      	movs	r3, #0
 8001940:	73fb      	strb	r3, [r7, #15]
    while(usr_number_u8 != 99) {
 8001942:	7bfb      	ldrb	r3, [r7, #15]
 8001944:	2b63      	cmp	r3, #99	; 0x63
 8001946:	f47f aeb8 	bne.w	80016ba <MainMenu+0x3e>
        }   //END Switch(usr_number_u8)
    }  //END while(glbinfo.rxchar != 99)

    print_string("Leaving console.",LF);
 800194a:	2101      	movs	r1, #1
 800194c:	4821      	ldr	r0, [pc, #132]	; (80019d4 <MainMenu+0x358>)
 800194e:	f001 f9b7 	bl	8002cc0 <print_string>

}
 8001952:	bf00      	nop
 8001954:	3710      	adds	r7, #16
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}
 800195a:	bf00      	nop
 800195c:	20000220 	.word	0x20000220
 8001960:	0800be24 	.word	0x0800be24
 8001964:	0800be44 	.word	0x0800be44
 8001968:	0800be5c 	.word	0x0800be5c
 800196c:	0800be80 	.word	0x0800be80
 8001970:	0800bea0 	.word	0x0800bea0
 8001974:	0800bebc 	.word	0x0800bebc
 8001978:	0800bed4 	.word	0x0800bed4
 800197c:	0800beec 	.word	0x0800beec
 8001980:	0800bf00 	.word	0x0800bf00
 8001984:	0800bf14 	.word	0x0800bf14
 8001988:	0800bf3c 	.word	0x0800bf3c
 800198c:	20000318 	.word	0x20000318
 8001990:	0800bf58 	.word	0x0800bf58
 8001994:	408f4000 	.word	0x408f4000
 8001998:	3fe00000 	.word	0x3fe00000
 800199c:	0800bf80 	.word	0x0800bf80
 80019a0:	0800bf98 	.word	0x0800bf98
 80019a4:	0800bfc4 	.word	0x0800bfc4
 80019a8:	0800bfec 	.word	0x0800bfec
 80019ac:	0800c00c 	.word	0x0800c00c
 80019b0:	0800c028 	.word	0x0800c028
 80019b4:	0800c058 	.word	0x0800c058
 80019b8:	20000218 	.word	0x20000218
 80019bc:	0800c078 	.word	0x0800c078
 80019c0:	2000021c 	.word	0x2000021c
 80019c4:	0800c088 	.word	0x0800c088
 80019c8:	0800c09c 	.word	0x0800c09c
 80019cc:	0800c0b4 	.word	0x0800c0b4
 80019d0:	20000208 	.word	0x20000208
 80019d4:	0800c0d4 	.word	0x0800c0d4

080019d8 <get_dac_data_value>:
  ******************************************************************************
  */

#include "dac.h"

uint16_t get_dac_data_value (float voltage_setting) {
 80019d8:	b580      	push	{r7, lr}
 80019da:	b084      	sub	sp, #16
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
    uint16_t dac_data_value;
    dac_data_value = (uint16_t)(4096/3.3*voltage_setting);
 80019e0:	6878      	ldr	r0, [r7, #4]
 80019e2:	f7fe fe41 	bl	8000668 <__aeabi_f2d>
 80019e6:	a30a      	add	r3, pc, #40	; (adr r3, 8001a10 <get_dac_data_value+0x38>)
 80019e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019ec:	f7fe fe94 	bl	8000718 <__aeabi_dmul>
 80019f0:	4602      	mov	r2, r0
 80019f2:	460b      	mov	r3, r1
 80019f4:	4610      	mov	r0, r2
 80019f6:	4619      	mov	r1, r3
 80019f8:	f7ff f966 	bl	8000cc8 <__aeabi_d2uiz>
 80019fc:	4603      	mov	r3, r0
 80019fe:	81fb      	strh	r3, [r7, #14]
    return dac_data_value;
 8001a00:	89fb      	ldrh	r3, [r7, #14]
}
 8001a02:	4618      	mov	r0, r3
 8001a04:	3710      	adds	r7, #16
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	f3af 8000 	nop.w
 8001a10:	364d9365 	.word	0x364d9365
 8001a14:	409364d9 	.word	0x409364d9

08001a18 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a1c:	f001 fe40 	bl	80036a0 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a20:	f000 f8e0 	bl	8001be4 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  uart.errorflag      = false;
 8001a24:	4b64      	ldr	r3, [pc, #400]	; (8001bb8 <main+0x1a0>)
 8001a26:	2200      	movs	r2, #0
 8001a28:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  uart.validmsg       = false;
 8001a2c:	4b62      	ldr	r3, [pc, #392]	; (8001bb8 <main+0x1a0>)
 8001a2e:	2200      	movs	r2, #0
 8001a30:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  uart.msg_state      = STATESTART;
 8001a34:	4b60      	ldr	r3, [pc, #384]	; (8001bb8 <main+0x1a0>)
 8001a36:	2201      	movs	r2, #1
 8001a38:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  uart.len_verify     = 0;                        // Initialize length verify counter to 0
 8001a3c:	4b5e      	ldr	r3, [pc, #376]	; (8001bb8 <main+0x1a0>)
 8001a3e:	2200      	movs	r2, #0
 8001a40:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  uart.producer_index = 0;                        // Initialize consumer index
 8001a44:	4b5c      	ldr	r3, [pc, #368]	; (8001bb8 <main+0x1a0>)
 8001a46:	2200      	movs	r2, #0
 8001a48:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
  uart.consumer_index = 0;                        // Initialize producer index
 8001a4c:	4b5a      	ldr	r3, [pc, #360]	; (8001bb8 <main+0x1a0>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
  uart.inmenu         = false;                    // Will not start out in console menu
 8001a54:	4b58      	ldr	r3, [pc, #352]	; (8001bb8 <main+0x1a0>)
 8001a56:	2200      	movs	r2, #0
 8001a58:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a5c:	f000 fa7c 	bl	8001f58 <MX_GPIO_Init>
  MX_ADC1_Init();
 8001a60:	f000 f924 	bl	8001cac <MX_ADC1_Init>
  MX_DAC_Init();
 8001a64:	f000 f960 	bl	8001d28 <MX_DAC_Init>
  MX_I2C2_Init();
 8001a68:	f000 f988 	bl	8001d7c <MX_I2C2_Init>
  MX_SPI1_Init();
 8001a6c:	f000 f9b4 	bl	8001dd8 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8001a70:	f000 fa1e 	bl	8001eb0 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8001a74:	f000 fa46 	bl	8001f04 <MX_USART2_UART_Init>
  MX_TIM6_Init();
 8001a78:	f000 f9e4 	bl	8001e44 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

  init_ad7888 (&a2d); 
 8001a7c:	484f      	ldr	r0, [pc, #316]	; (8001bbc <main+0x1a4>)
 8001a7e:	f7ff fccb 	bl	8001418 <init_ad7888>
  init_timer (&tim);
 8001a82:	484f      	ldr	r0, [pc, #316]	; (8001bc0 <main+0x1a8>)
 8001a84:	f000 faf8 	bl	8002078 <init_timer>
  igniter_initialize(&fus);
 8001a88:	484e      	ldr	r0, [pc, #312]	; (8001bc4 <main+0x1ac>)
 8001a8a:	f000 fbfb 	bl	8002284 <igniter_initialize>

  HAL_GPIO_WritePin(EXT_LED_1_GPIO_Port, EXT_LED_1_Pin, GPIO_PIN_RESET);
 8001a8e:	2200      	movs	r2, #0
 8001a90:	2110      	movs	r1, #16
 8001a92:	484d      	ldr	r0, [pc, #308]	; (8001bc8 <main+0x1b0>)
 8001a94:	f002 fd54 	bl	8004540 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(EXT_LED_2_GPIO_Port,EXT_LED_2_Pin, GPIO_PIN_RESET);
 8001a98:	2200      	movs	r2, #0
 8001a9a:	2120      	movs	r1, #32
 8001a9c:	484a      	ldr	r0, [pc, #296]	; (8001bc8 <main+0x1b0>)
 8001a9e:	f002 fd4f 	bl	8004540 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(EXT_LED_3_GPIO_Port,EXT_LED_3_Pin, GPIO_PIN_RESET);
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	2140      	movs	r1, #64	; 0x40
 8001aa6:	4848      	ldr	r0, [pc, #288]	; (8001bc8 <main+0x1b0>)
 8001aa8:	f002 fd4a 	bl	8004540 <HAL_GPIO_WritePin>

  // Verify the XBEE module is awake and not in reset
  HAL_GPIO_WritePin(XB_ON_GPIO_Port,XB_ON_Pin, GPIO_PIN_SET);
 8001aac:	2201      	movs	r2, #1
 8001aae:	2120      	movs	r1, #32
 8001ab0:	4846      	ldr	r0, [pc, #280]	; (8001bcc <main+0x1b4>)
 8001ab2:	f002 fd45 	bl	8004540 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(XB_RST_n_GPIO_Port,XB_RST_n_Pin, GPIO_PIN_SET);
 8001ab6:	2201      	movs	r2, #1
 8001ab8:	2140      	movs	r1, #64	; 0x40
 8001aba:	4844      	ldr	r0, [pc, #272]	; (8001bcc <main+0x1b4>)
 8001abc:	f002 fd40 	bl	8004540 <HAL_GPIO_WritePin>


  // Must use Base Start IT if using interrupts
  HAL_TIM_Base_Start_IT(&htim6);
 8001ac0:	4843      	ldr	r0, [pc, #268]	; (8001bd0 <main+0x1b8>)
 8001ac2:	f004 f973 	bl	8005dac <HAL_TIM_Base_Start_IT>
  HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 8001ac6:	2100      	movs	r1, #0
 8001ac8:	4842      	ldr	r0, [pc, #264]	; (8001bd4 <main+0x1bc>)
 8001aca:	f002 f9b0 	bl	8003e2e <HAL_DAC_Start>

  HAL_UART_Receive_IT(&huart1, &uart.rxchar, 1);  // UART to console interface
 8001ace:	2201      	movs	r2, #1
 8001ad0:	4941      	ldr	r1, [pc, #260]	; (8001bd8 <main+0x1c0>)
 8001ad2:	4842      	ldr	r0, [pc, #264]	; (8001bdc <main+0x1c4>)
 8001ad4:	f004 fcb3 	bl	800643e <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart2, &uart.rxchar, 1);  // UART to XBEE interface
 8001ad8:	2201      	movs	r2, #1
 8001ada:	493f      	ldr	r1, [pc, #252]	; (8001bd8 <main+0x1c0>)
 8001adc:	4840      	ldr	r0, [pc, #256]	; (8001be0 <main+0x1c8>)
 8001ade:	f004 fcae 	bl	800643e <HAL_UART_Receive_IT>
  {

    /**
     * Message handling
     */
    if (uart.byte_counter >= MAX_RX_BUF_INDEX) {
 8001ae2:	4b35      	ldr	r3, [pc, #212]	; (8001bb8 <main+0x1a0>)
 8001ae4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001ae8:	2b1f      	cmp	r3, #31
 8001aea:	d902      	bls.n	8001af2 <main+0xda>
      ResetRxBuffer();                        //Something went wrong, reset the RX buffer.
 8001aec:	f001 f9e2 	bl	8002eb4 <ResetRxBuffer>
 8001af0:	e009      	b.n	8001b06 <main+0xee>
    }
    else if(uart.consumer_index != uart.producer_index) {             //We have unprocessed data when indices do not agree
 8001af2:	4b31      	ldr	r3, [pc, #196]	; (8001bb8 <main+0x1a0>)
 8001af4:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 8001af8:	4b2f      	ldr	r3, [pc, #188]	; (8001bb8 <main+0x1a0>)
 8001afa:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8001afe:	429a      	cmp	r2, r3
 8001b00:	d001      	beq.n	8001b06 <main+0xee>
      HandleByte();
 8001b02:	f001 f9f1 	bl	8002ee8 <HandleByte>
    }

    if(uart.validmsg == true) {     //A valid message confirmed in buffer
 8001b06:	4b2c      	ldr	r3, [pc, #176]	; (8001bb8 <main+0x1a0>)
 8001b08:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d005      	beq.n	8001b1c <main+0x104>
        uart.validmsg = false;      //Avoid diving into ProcessMessage for no reason
 8001b10:	4b29      	ldr	r3, [pc, #164]	; (8001bb8 <main+0x1a0>)
 8001b12:	2200      	movs	r2, #0
 8001b14:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
        ProcessMessage();
 8001b18:	f001 fab6 	bl	8003088 <ProcessMessage>
    }

    if(tim.timer_100ms_running && ((tim.timer_100ms_cntr) >= FUSE_100MS_TICKS_TIMEOUT)) {
 8001b1c:	4b28      	ldr	r3, [pc, #160]	; (8001bc0 <main+0x1a8>)
 8001b1e:	7b1b      	ldrb	r3, [r3, #12]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d00e      	beq.n	8001b42 <main+0x12a>
 8001b24:	4b26      	ldr	r3, [pc, #152]	; (8001bc0 <main+0x1a8>)
 8001b26:	895b      	ldrh	r3, [r3, #10]
 8001b28:	2b13      	cmp	r3, #19
 8001b2a:	d90a      	bls.n	8001b42 <main+0x12a>
      anlg_sw_all_off();
 8001b2c:	f000 fc7e 	bl	800242c <anlg_sw_all_off>
      fus.fuse_lighting_bool = false;
 8001b30:	4b24      	ldr	r3, [pc, #144]	; (8001bc4 <main+0x1ac>)
 8001b32:	2200      	movs	r2, #0
 8001b34:	70da      	strb	r2, [r3, #3]
      tim.timer_100ms_running = false;
 8001b36:	4b22      	ldr	r3, [pc, #136]	; (8001bc0 <main+0x1a8>)
 8001b38:	2200      	movs	r2, #0
 8001b3a:	731a      	strb	r2, [r3, #12]
      tim.timer_100ms_cntr = 0;
 8001b3c:	4b20      	ldr	r3, [pc, #128]	; (8001bc0 <main+0x1a8>)
 8001b3e:	2200      	movs	r2, #0
 8001b40:	815a      	strh	r2, [r3, #10]

    }


	  if(tim.flag_10ms_tick) {
 8001b42:	4b1f      	ldr	r3, [pc, #124]	; (8001bc0 <main+0x1a8>)
 8001b44:	799b      	ldrb	r3, [r3, #6]
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d002      	beq.n	8001b50 <main+0x138>
		  tim.flag_10ms_tick = false;
 8001b4a:	4b1d      	ldr	r3, [pc, #116]	; (8001bc0 <main+0x1a8>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	719a      	strb	r2, [r3, #6]
	  }

	  if(tim.flag_100ms_tick) {
 8001b50:	4b1b      	ldr	r3, [pc, #108]	; (8001bc0 <main+0x1a8>)
 8001b52:	79db      	ldrb	r3, [r3, #7]
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d01e      	beq.n	8001b96 <main+0x17e>
	      tim.flag_100ms_tick = false;
 8001b58:	4b19      	ldr	r3, [pc, #100]	; (8001bc0 <main+0x1a8>)
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	71da      	strb	r2, [r3, #7]
        if(fus.fuse_lighting_bool) {
 8001b5e:	4b19      	ldr	r3, [pc, #100]	; (8001bc4 <main+0x1ac>)
 8001b60:	78db      	ldrb	r3, [r3, #3]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d004      	beq.n	8001b70 <main+0x158>
	        HAL_GPIO_TogglePin(EXT_LED_2_GPIO_Port, EXT_LED_2_Pin); // External RED LED
 8001b66:	2120      	movs	r1, #32
 8001b68:	4817      	ldr	r0, [pc, #92]	; (8001bc8 <main+0x1b0>)
 8001b6a:	f002 fd01 	bl	8004570 <HAL_GPIO_TogglePin>
 8001b6e:	e004      	b.n	8001b7a <main+0x162>
        }
        else {
          HAL_GPIO_WritePin(EXT_LED_2_GPIO_Port,EXT_LED_2_Pin, GPIO_PIN_RESET);
 8001b70:	2200      	movs	r2, #0
 8001b72:	2120      	movs	r1, #32
 8001b74:	4814      	ldr	r0, [pc, #80]	; (8001bc8 <main+0x1b0>)
 8001b76:	f002 fce3 	bl	8004540 <HAL_GPIO_WritePin>
        }
        
        /* If all fuses are bad, illuminate the amber LED */
	      if(fus.all_fuses_bad_bool){
 8001b7a:	4b12      	ldr	r3, [pc, #72]	; (8001bc4 <main+0x1ac>)
 8001b7c:	789b      	ldrb	r3, [r3, #2]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d004      	beq.n	8001b8c <main+0x174>
          HAL_GPIO_TogglePin(EXT_LED_3_GPIO_Port, EXT_LED_3_Pin); // External Amber LED
 8001b82:	2140      	movs	r1, #64	; 0x40
 8001b84:	4810      	ldr	r0, [pc, #64]	; (8001bc8 <main+0x1b0>)
 8001b86:	f002 fcf3 	bl	8004570 <HAL_GPIO_TogglePin>
 8001b8a:	e004      	b.n	8001b96 <main+0x17e>
        }
        else {
          HAL_GPIO_WritePin(EXT_LED_3_GPIO_Port, EXT_LED_3_Pin, GPIO_PIN_RESET);
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	2140      	movs	r1, #64	; 0x40
 8001b90:	480d      	ldr	r0, [pc, #52]	; (8001bc8 <main+0x1b0>)
 8001b92:	f002 fcd5 	bl	8004540 <HAL_GPIO_WritePin>
        }
	  
    }

	    if(tim.flag_500ms_tick) {
 8001b96:	4b0a      	ldr	r3, [pc, #40]	; (8001bc0 <main+0x1a8>)
 8001b98:	7a1b      	ldrb	r3, [r3, #8]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d0a1      	beq.n	8001ae2 <main+0xca>
	      tim.flag_500ms_tick = false;
 8001b9e:	4b08      	ldr	r3, [pc, #32]	; (8001bc0 <main+0x1a8>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	721a      	strb	r2, [r3, #8]
	      HAL_GPIO_TogglePin(HLTH_LED_GPIO_Port, HLTH_LED_Pin);   // Board LED
 8001ba4:	2101      	movs	r1, #1
 8001ba6:	4808      	ldr	r0, [pc, #32]	; (8001bc8 <main+0x1b0>)
 8001ba8:	f002 fce2 	bl	8004570 <HAL_GPIO_TogglePin>
	      HAL_GPIO_TogglePin(EXT_LED_1_GPIO_Port, EXT_LED_1_Pin); // External GRN LED
 8001bac:	2110      	movs	r1, #16
 8001bae:	4806      	ldr	r0, [pc, #24]	; (8001bc8 <main+0x1b0>)
 8001bb0:	f002 fcde 	bl	8004570 <HAL_GPIO_TogglePin>
    if (uart.byte_counter >= MAX_RX_BUF_INDEX) {
 8001bb4:	e795      	b.n	8001ae2 <main+0xca>
 8001bb6:	bf00      	nop
 8001bb8:	20000220 	.word	0x20000220
 8001bbc:	20000218 	.word	0x20000218
 8001bc0:	20000208 	.word	0x20000208
 8001bc4:	2000021c 	.word	0x2000021c
 8001bc8:	40011000 	.word	0x40011000
 8001bcc:	40010c00 	.word	0x40010c00
 8001bd0:	2000032c 	.word	0x2000032c
 8001bd4:	20000318 	.word	0x20000318
 8001bd8:	20000241 	.word	0x20000241
 8001bdc:	200002d4 	.word	0x200002d4
 8001be0:	200003cc 	.word	0x200003cc

08001be4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b09c      	sub	sp, #112	; 0x70
 8001be8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001bea:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001bee:	2238      	movs	r2, #56	; 0x38
 8001bf0:	2100      	movs	r1, #0
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	f005 f8a6 	bl	8006d44 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001bf8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	601a      	str	r2, [r3, #0]
 8001c00:	605a      	str	r2, [r3, #4]
 8001c02:	609a      	str	r2, [r3, #8]
 8001c04:	60da      	str	r2, [r3, #12]
 8001c06:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001c08:	1d3b      	adds	r3, r7, #4
 8001c0a:	2220      	movs	r2, #32
 8001c0c:	2100      	movs	r1, #0
 8001c0e:	4618      	mov	r0, r3
 8001c10:	f005 f898 	bl	8006d44 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001c14:	2301      	movs	r3, #1
 8001c16:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001c18:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001c1c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 8001c1e:	2301      	movs	r3, #1
 8001c20:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001c22:	2301      	movs	r3, #1
 8001c24:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.Prediv1Source = RCC_PREDIV1_SOURCE_HSE;
 8001c26:	2300      	movs	r3, #0
 8001c28:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c2a:	2302      	movs	r3, #2
 8001c2c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001c2e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001c32:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001c34:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001c38:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL2.PLL2State = RCC_PLL_NONE;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c3e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001c42:	4618      	mov	r0, r3
 8001c44:	f002 fdf2 	bl	800482c <HAL_RCC_OscConfig>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d001      	beq.n	8001c52 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001c4e:	f000 fbe7 	bl	8002420 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c52:	230f      	movs	r3, #15
 8001c54:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c56:	2302      	movs	r3, #2
 8001c58:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001c5e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c62:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001c64:	2300      	movs	r3, #0
 8001c66:	637b      	str	r3, [r7, #52]	; 0x34

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001c68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c6c:	2102      	movs	r1, #2
 8001c6e:	4618      	mov	r0, r3
 8001c70:	f003 f8f2 	bl	8004e58 <HAL_RCC_ClockConfig>
 8001c74:	4603      	mov	r3, r0
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d001      	beq.n	8001c7e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001c7a:	f000 fbd1 	bl	8002420 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001c7e:	2302      	movs	r3, #2
 8001c80:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001c82:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001c86:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c88:	1d3b      	adds	r3, r7, #4
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	f003 fb04 	bl	8005298 <HAL_RCCEx_PeriphCLKConfig>
 8001c90:	4603      	mov	r3, r0
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d001      	beq.n	8001c9a <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8001c96:	f000 fbc3 	bl	8002420 <Error_Handler>
  }
  /** Configure the Systick interrupt time
  */
  __HAL_RCC_PLLI2S_ENABLE();
 8001c9a:	4b03      	ldr	r3, [pc, #12]	; (8001ca8 <SystemClock_Config+0xc4>)
 8001c9c:	2201      	movs	r2, #1
 8001c9e:	601a      	str	r2, [r3, #0]
}
 8001ca0:	bf00      	nop
 8001ca2:	3770      	adds	r7, #112	; 0x70
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bd80      	pop	{r7, pc}
 8001ca8:	42420070 	.word	0x42420070

08001cac <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b084      	sub	sp, #16
 8001cb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001cb2:	1d3b      	adds	r3, r7, #4
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	601a      	str	r2, [r3, #0]
 8001cb8:	605a      	str	r2, [r3, #4]
 8001cba:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8001cbc:	4b18      	ldr	r3, [pc, #96]	; (8001d20 <MX_ADC1_Init+0x74>)
 8001cbe:	4a19      	ldr	r2, [pc, #100]	; (8001d24 <MX_ADC1_Init+0x78>)
 8001cc0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001cc2:	4b17      	ldr	r3, [pc, #92]	; (8001d20 <MX_ADC1_Init+0x74>)
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001cc8:	4b15      	ldr	r3, [pc, #84]	; (8001d20 <MX_ADC1_Init+0x74>)
 8001cca:	2200      	movs	r2, #0
 8001ccc:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001cce:	4b14      	ldr	r3, [pc, #80]	; (8001d20 <MX_ADC1_Init+0x74>)
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001cd4:	4b12      	ldr	r3, [pc, #72]	; (8001d20 <MX_ADC1_Init+0x74>)
 8001cd6:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001cda:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001cdc:	4b10      	ldr	r3, [pc, #64]	; (8001d20 <MX_ADC1_Init+0x74>)
 8001cde:	2200      	movs	r2, #0
 8001ce0:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8001ce2:	4b0f      	ldr	r3, [pc, #60]	; (8001d20 <MX_ADC1_Init+0x74>)
 8001ce4:	2201      	movs	r2, #1
 8001ce6:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001ce8:	480d      	ldr	r0, [pc, #52]	; (8001d20 <MX_ADC1_Init+0x74>)
 8001cea:	f001 fd5f 	bl	80037ac <HAL_ADC_Init>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d001      	beq.n	8001cf8 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8001cf4:	f000 fb94 	bl	8002420 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001cfc:	2301      	movs	r3, #1
 8001cfe:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001d00:	2300      	movs	r3, #0
 8001d02:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001d04:	1d3b      	adds	r3, r7, #4
 8001d06:	4619      	mov	r1, r3
 8001d08:	4805      	ldr	r0, [pc, #20]	; (8001d20 <MX_ADC1_Init+0x74>)
 8001d0a:	f001 fe27 	bl	800395c <HAL_ADC_ConfigChannel>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d001      	beq.n	8001d18 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8001d14:	f000 fb84 	bl	8002420 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001d18:	bf00      	nop
 8001d1a:	3710      	adds	r7, #16
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bd80      	pop	{r7, pc}
 8001d20:	200002a4 	.word	0x200002a4
 8001d24:	40012400 	.word	0x40012400

08001d28 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b082      	sub	sp, #8
 8001d2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001d2e:	463b      	mov	r3, r7
 8001d30:	2200      	movs	r2, #0
 8001d32:	601a      	str	r2, [r3, #0]
 8001d34:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8001d36:	4b0f      	ldr	r3, [pc, #60]	; (8001d74 <MX_DAC_Init+0x4c>)
 8001d38:	4a0f      	ldr	r2, [pc, #60]	; (8001d78 <MX_DAC_Init+0x50>)
 8001d3a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8001d3c:	480d      	ldr	r0, [pc, #52]	; (8001d74 <MX_DAC_Init+0x4c>)
 8001d3e:	f002 f854 	bl	8003dea <HAL_DAC_Init>
 8001d42:	4603      	mov	r3, r0
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d001      	beq.n	8001d4c <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8001d48:	f000 fb6a 	bl	8002420 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001d50:	2300      	movs	r3, #0
 8001d52:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001d54:	463b      	mov	r3, r7
 8001d56:	2200      	movs	r2, #0
 8001d58:	4619      	mov	r1, r3
 8001d5a:	4806      	ldr	r0, [pc, #24]	; (8001d74 <MX_DAC_Init+0x4c>)
 8001d5c:	f002 f8dc 	bl	8003f18 <HAL_DAC_ConfigChannel>
 8001d60:	4603      	mov	r3, r0
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d001      	beq.n	8001d6a <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8001d66:	f000 fb5b 	bl	8002420 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8001d6a:	bf00      	nop
 8001d6c:	3708      	adds	r7, #8
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}
 8001d72:	bf00      	nop
 8001d74:	20000318 	.word	0x20000318
 8001d78:	40007400 	.word	0x40007400

08001d7c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001d80:	4b12      	ldr	r3, [pc, #72]	; (8001dcc <MX_I2C2_Init+0x50>)
 8001d82:	4a13      	ldr	r2, [pc, #76]	; (8001dd0 <MX_I2C2_Init+0x54>)
 8001d84:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001d86:	4b11      	ldr	r3, [pc, #68]	; (8001dcc <MX_I2C2_Init+0x50>)
 8001d88:	4a12      	ldr	r2, [pc, #72]	; (8001dd4 <MX_I2C2_Init+0x58>)
 8001d8a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001d8c:	4b0f      	ldr	r3, [pc, #60]	; (8001dcc <MX_I2C2_Init+0x50>)
 8001d8e:	2200      	movs	r2, #0
 8001d90:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001d92:	4b0e      	ldr	r3, [pc, #56]	; (8001dcc <MX_I2C2_Init+0x50>)
 8001d94:	2200      	movs	r2, #0
 8001d96:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001d98:	4b0c      	ldr	r3, [pc, #48]	; (8001dcc <MX_I2C2_Init+0x50>)
 8001d9a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001d9e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001da0:	4b0a      	ldr	r3, [pc, #40]	; (8001dcc <MX_I2C2_Init+0x50>)
 8001da2:	2200      	movs	r2, #0
 8001da4:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001da6:	4b09      	ldr	r3, [pc, #36]	; (8001dcc <MX_I2C2_Init+0x50>)
 8001da8:	2200      	movs	r2, #0
 8001daa:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001dac:	4b07      	ldr	r3, [pc, #28]	; (8001dcc <MX_I2C2_Init+0x50>)
 8001dae:	2200      	movs	r2, #0
 8001db0:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001db2:	4b06      	ldr	r3, [pc, #24]	; (8001dcc <MX_I2C2_Init+0x50>)
 8001db4:	2200      	movs	r2, #0
 8001db6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001db8:	4804      	ldr	r0, [pc, #16]	; (8001dcc <MX_I2C2_Init+0x50>)
 8001dba:	f002 fbf3 	bl	80045a4 <HAL_I2C_Init>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d001      	beq.n	8001dc8 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001dc4:	f000 fb2c 	bl	8002420 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001dc8:	bf00      	nop
 8001dca:	bd80      	pop	{r7, pc}
 8001dcc:	20000250 	.word	0x20000250
 8001dd0:	40005800 	.word	0x40005800
 8001dd4:	000186a0 	.word	0x000186a0

08001dd8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001ddc:	4b17      	ldr	r3, [pc, #92]	; (8001e3c <MX_SPI1_Init+0x64>)
 8001dde:	4a18      	ldr	r2, [pc, #96]	; (8001e40 <MX_SPI1_Init+0x68>)
 8001de0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001de2:	4b16      	ldr	r3, [pc, #88]	; (8001e3c <MX_SPI1_Init+0x64>)
 8001de4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001de8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001dea:	4b14      	ldr	r3, [pc, #80]	; (8001e3c <MX_SPI1_Init+0x64>)
 8001dec:	2200      	movs	r2, #0
 8001dee:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001df0:	4b12      	ldr	r3, [pc, #72]	; (8001e3c <MX_SPI1_Init+0x64>)
 8001df2:	2200      	movs	r2, #0
 8001df4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001df6:	4b11      	ldr	r3, [pc, #68]	; (8001e3c <MX_SPI1_Init+0x64>)
 8001df8:	2200      	movs	r2, #0
 8001dfa:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001dfc:	4b0f      	ldr	r3, [pc, #60]	; (8001e3c <MX_SPI1_Init+0x64>)
 8001dfe:	2200      	movs	r2, #0
 8001e00:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001e02:	4b0e      	ldr	r3, [pc, #56]	; (8001e3c <MX_SPI1_Init+0x64>)
 8001e04:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e08:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8001e0a:	4b0c      	ldr	r3, [pc, #48]	; (8001e3c <MX_SPI1_Init+0x64>)
 8001e0c:	2238      	movs	r2, #56	; 0x38
 8001e0e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001e10:	4b0a      	ldr	r3, [pc, #40]	; (8001e3c <MX_SPI1_Init+0x64>)
 8001e12:	2200      	movs	r2, #0
 8001e14:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001e16:	4b09      	ldr	r3, [pc, #36]	; (8001e3c <MX_SPI1_Init+0x64>)
 8001e18:	2200      	movs	r2, #0
 8001e1a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001e1c:	4b07      	ldr	r3, [pc, #28]	; (8001e3c <MX_SPI1_Init+0x64>)
 8001e1e:	2200      	movs	r2, #0
 8001e20:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001e22:	4b06      	ldr	r3, [pc, #24]	; (8001e3c <MX_SPI1_Init+0x64>)
 8001e24:	220a      	movs	r2, #10
 8001e26:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001e28:	4804      	ldr	r0, [pc, #16]	; (8001e3c <MX_SPI1_Init+0x64>)
 8001e2a:	f003 fb67 	bl	80054fc <HAL_SPI_Init>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d001      	beq.n	8001e38 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001e34:	f000 faf4 	bl	8002420 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001e38:	bf00      	nop
 8001e3a:	bd80      	pop	{r7, pc}
 8001e3c:	20000374 	.word	0x20000374
 8001e40:	40013000 	.word	0x40013000

08001e44 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b082      	sub	sp, #8
 8001e48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e4a:	463b      	mov	r3, r7
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	601a      	str	r2, [r3, #0]
 8001e50:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001e52:	4b15      	ldr	r3, [pc, #84]	; (8001ea8 <MX_TIM6_Init+0x64>)
 8001e54:	4a15      	ldr	r2, [pc, #84]	; (8001eac <MX_TIM6_Init+0x68>)
 8001e56:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 72-1;
 8001e58:	4b13      	ldr	r3, [pc, #76]	; (8001ea8 <MX_TIM6_Init+0x64>)
 8001e5a:	2247      	movs	r2, #71	; 0x47
 8001e5c:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e5e:	4b12      	ldr	r3, [pc, #72]	; (8001ea8 <MX_TIM6_Init+0x64>)
 8001e60:	2200      	movs	r2, #0
 8001e62:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 10000-1;
 8001e64:	4b10      	ldr	r3, [pc, #64]	; (8001ea8 <MX_TIM6_Init+0x64>)
 8001e66:	f242 720f 	movw	r2, #9999	; 0x270f
 8001e6a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001e6c:	4b0e      	ldr	r3, [pc, #56]	; (8001ea8 <MX_TIM6_Init+0x64>)
 8001e6e:	2280      	movs	r2, #128	; 0x80
 8001e70:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001e72:	480d      	ldr	r0, [pc, #52]	; (8001ea8 <MX_TIM6_Init+0x64>)
 8001e74:	f003 ff4a 	bl	8005d0c <HAL_TIM_Base_Init>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d001      	beq.n	8001e82 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8001e7e:	f000 facf 	bl	8002420 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e82:	2300      	movs	r3, #0
 8001e84:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e86:	2300      	movs	r3, #0
 8001e88:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001e8a:	463b      	mov	r3, r7
 8001e8c:	4619      	mov	r1, r3
 8001e8e:	4806      	ldr	r0, [pc, #24]	; (8001ea8 <MX_TIM6_Init+0x64>)
 8001e90:	f004 f97e 	bl	8006190 <HAL_TIMEx_MasterConfigSynchronization>
 8001e94:	4603      	mov	r3, r0
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d001      	beq.n	8001e9e <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8001e9a:	f000 fac1 	bl	8002420 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001e9e:	bf00      	nop
 8001ea0:	3708      	adds	r7, #8
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd80      	pop	{r7, pc}
 8001ea6:	bf00      	nop
 8001ea8:	2000032c 	.word	0x2000032c
 8001eac:	40001000 	.word	0x40001000

08001eb0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001eb4:	4b11      	ldr	r3, [pc, #68]	; (8001efc <MX_USART1_UART_Init+0x4c>)
 8001eb6:	4a12      	ldr	r2, [pc, #72]	; (8001f00 <MX_USART1_UART_Init+0x50>)
 8001eb8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 57600;
 8001eba:	4b10      	ldr	r3, [pc, #64]	; (8001efc <MX_USART1_UART_Init+0x4c>)
 8001ebc:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8001ec0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001ec2:	4b0e      	ldr	r3, [pc, #56]	; (8001efc <MX_USART1_UART_Init+0x4c>)
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001ec8:	4b0c      	ldr	r3, [pc, #48]	; (8001efc <MX_USART1_UART_Init+0x4c>)
 8001eca:	2200      	movs	r2, #0
 8001ecc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001ece:	4b0b      	ldr	r3, [pc, #44]	; (8001efc <MX_USART1_UART_Init+0x4c>)
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001ed4:	4b09      	ldr	r3, [pc, #36]	; (8001efc <MX_USART1_UART_Init+0x4c>)
 8001ed6:	220c      	movs	r2, #12
 8001ed8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001eda:	4b08      	ldr	r3, [pc, #32]	; (8001efc <MX_USART1_UART_Init+0x4c>)
 8001edc:	2200      	movs	r2, #0
 8001ede:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ee0:	4b06      	ldr	r3, [pc, #24]	; (8001efc <MX_USART1_UART_Init+0x4c>)
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001ee6:	4805      	ldr	r0, [pc, #20]	; (8001efc <MX_USART1_UART_Init+0x4c>)
 8001ee8:	f004 f9ca 	bl	8006280 <HAL_UART_Init>
 8001eec:	4603      	mov	r3, r0
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d001      	beq.n	8001ef6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001ef2:	f000 fa95 	bl	8002420 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001ef6:	bf00      	nop
 8001ef8:	bd80      	pop	{r7, pc}
 8001efa:	bf00      	nop
 8001efc:	200002d4 	.word	0x200002d4
 8001f00:	40013800 	.word	0x40013800

08001f04 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001f08:	4b11      	ldr	r3, [pc, #68]	; (8001f50 <MX_USART2_UART_Init+0x4c>)
 8001f0a:	4a12      	ldr	r2, [pc, #72]	; (8001f54 <MX_USART2_UART_Init+0x50>)
 8001f0c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001f0e:	4b10      	ldr	r3, [pc, #64]	; (8001f50 <MX_USART2_UART_Init+0x4c>)
 8001f10:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001f14:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001f16:	4b0e      	ldr	r3, [pc, #56]	; (8001f50 <MX_USART2_UART_Init+0x4c>)
 8001f18:	2200      	movs	r2, #0
 8001f1a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001f1c:	4b0c      	ldr	r3, [pc, #48]	; (8001f50 <MX_USART2_UART_Init+0x4c>)
 8001f1e:	2200      	movs	r2, #0
 8001f20:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001f22:	4b0b      	ldr	r3, [pc, #44]	; (8001f50 <MX_USART2_UART_Init+0x4c>)
 8001f24:	2200      	movs	r2, #0
 8001f26:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001f28:	4b09      	ldr	r3, [pc, #36]	; (8001f50 <MX_USART2_UART_Init+0x4c>)
 8001f2a:	220c      	movs	r2, #12
 8001f2c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f2e:	4b08      	ldr	r3, [pc, #32]	; (8001f50 <MX_USART2_UART_Init+0x4c>)
 8001f30:	2200      	movs	r2, #0
 8001f32:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f34:	4b06      	ldr	r3, [pc, #24]	; (8001f50 <MX_USART2_UART_Init+0x4c>)
 8001f36:	2200      	movs	r2, #0
 8001f38:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001f3a:	4805      	ldr	r0, [pc, #20]	; (8001f50 <MX_USART2_UART_Init+0x4c>)
 8001f3c:	f004 f9a0 	bl	8006280 <HAL_UART_Init>
 8001f40:	4603      	mov	r3, r0
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d001      	beq.n	8001f4a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001f46:	f000 fa6b 	bl	8002420 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001f4a:	bf00      	nop
 8001f4c:	bd80      	pop	{r7, pc}
 8001f4e:	bf00      	nop
 8001f50:	200003cc 	.word	0x200003cc
 8001f54:	40004400 	.word	0x40004400

08001f58 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b088      	sub	sp, #32
 8001f5c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f5e:	f107 0310 	add.w	r3, r7, #16
 8001f62:	2200      	movs	r2, #0
 8001f64:	601a      	str	r2, [r3, #0]
 8001f66:	605a      	str	r2, [r3, #4]
 8001f68:	609a      	str	r2, [r3, #8]
 8001f6a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f6c:	4b3f      	ldr	r3, [pc, #252]	; (800206c <MX_GPIO_Init+0x114>)
 8001f6e:	699b      	ldr	r3, [r3, #24]
 8001f70:	4a3e      	ldr	r2, [pc, #248]	; (800206c <MX_GPIO_Init+0x114>)
 8001f72:	f043 0310 	orr.w	r3, r3, #16
 8001f76:	6193      	str	r3, [r2, #24]
 8001f78:	4b3c      	ldr	r3, [pc, #240]	; (800206c <MX_GPIO_Init+0x114>)
 8001f7a:	699b      	ldr	r3, [r3, #24]
 8001f7c:	f003 0310 	and.w	r3, r3, #16
 8001f80:	60fb      	str	r3, [r7, #12]
 8001f82:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f84:	4b39      	ldr	r3, [pc, #228]	; (800206c <MX_GPIO_Init+0x114>)
 8001f86:	699b      	ldr	r3, [r3, #24]
 8001f88:	4a38      	ldr	r2, [pc, #224]	; (800206c <MX_GPIO_Init+0x114>)
 8001f8a:	f043 0320 	orr.w	r3, r3, #32
 8001f8e:	6193      	str	r3, [r2, #24]
 8001f90:	4b36      	ldr	r3, [pc, #216]	; (800206c <MX_GPIO_Init+0x114>)
 8001f92:	699b      	ldr	r3, [r3, #24]
 8001f94:	f003 0320 	and.w	r3, r3, #32
 8001f98:	60bb      	str	r3, [r7, #8]
 8001f9a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f9c:	4b33      	ldr	r3, [pc, #204]	; (800206c <MX_GPIO_Init+0x114>)
 8001f9e:	699b      	ldr	r3, [r3, #24]
 8001fa0:	4a32      	ldr	r2, [pc, #200]	; (800206c <MX_GPIO_Init+0x114>)
 8001fa2:	f043 0304 	orr.w	r3, r3, #4
 8001fa6:	6193      	str	r3, [r2, #24]
 8001fa8:	4b30      	ldr	r3, [pc, #192]	; (800206c <MX_GPIO_Init+0x114>)
 8001faa:	699b      	ldr	r3, [r3, #24]
 8001fac:	f003 0304 	and.w	r3, r3, #4
 8001fb0:	607b      	str	r3, [r7, #4]
 8001fb2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fb4:	4b2d      	ldr	r3, [pc, #180]	; (800206c <MX_GPIO_Init+0x114>)
 8001fb6:	699b      	ldr	r3, [r3, #24]
 8001fb8:	4a2c      	ldr	r2, [pc, #176]	; (800206c <MX_GPIO_Init+0x114>)
 8001fba:	f043 0308 	orr.w	r3, r3, #8
 8001fbe:	6193      	str	r3, [r2, #24]
 8001fc0:	4b2a      	ldr	r3, [pc, #168]	; (800206c <MX_GPIO_Init+0x114>)
 8001fc2:	699b      	ldr	r3, [r3, #24]
 8001fc4:	f003 0308 	and.w	r3, r3, #8
 8001fc8:	603b      	str	r3, [r7, #0]
 8001fca:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(HLTH_LED_GPIO_Port, HLTH_LED_Pin, GPIO_PIN_RESET);
 8001fcc:	2200      	movs	r2, #0
 8001fce:	2101      	movs	r1, #1
 8001fd0:	4827      	ldr	r0, [pc, #156]	; (8002070 <MX_GPIO_Init+0x118>)
 8001fd2:	f002 fab5 	bl	8004540 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, EXT_LED_1_Pin|EXT_LED_2_Pin|EXT_LED_3_Pin, GPIO_PIN_SET);
 8001fd6:	2201      	movs	r2, #1
 8001fd8:	2170      	movs	r1, #112	; 0x70
 8001fda:	4825      	ldr	r0, [pc, #148]	; (8002070 <MX_GPIO_Init+0x118>)
 8001fdc:	f002 fab0 	bl	8004540 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CH1_8_ANSW_CS_n_Pin|CH1_8_ADC_CS_n_Pin|CH9_16_ADC_CS_n_Pin|CH9_16_ANSW_CS_n_Pin, GPIO_PIN_SET);
 8001fe0:	2201      	movs	r2, #1
 8001fe2:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8001fe6:	4823      	ldr	r0, [pc, #140]	; (8002074 <MX_GPIO_Init+0x11c>)
 8001fe8:	f002 faaa 	bl	8004540 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(XB_RST_n_GPIO_Port, XB_RST_n_Pin, GPIO_PIN_RESET);
 8001fec:	2200      	movs	r2, #0
 8001fee:	2140      	movs	r1, #64	; 0x40
 8001ff0:	4820      	ldr	r0, [pc, #128]	; (8002074 <MX_GPIO_Init+0x11c>)
 8001ff2:	f002 faa5 	bl	8004540 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : HW_REV_0_Pin HW_REV_1_Pin HW_REV_2_Pin PBTN_1_Pin
                           pbtn_2_Pin */
  GPIO_InitStruct.Pin = HW_REV_0_Pin|HW_REV_1_Pin|HW_REV_2_Pin|PBTN_1_Pin
 8001ff6:	f24e 0306 	movw	r3, #57350	; 0xe006
 8001ffa:	613b      	str	r3, [r7, #16]
                          |pbtn_2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002000:	2300      	movs	r3, #0
 8002002:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002004:	f107 0310 	add.w	r3, r7, #16
 8002008:	4619      	mov	r1, r3
 800200a:	4819      	ldr	r0, [pc, #100]	; (8002070 <MX_GPIO_Init+0x118>)
 800200c:	f002 f914 	bl	8004238 <HAL_GPIO_Init>

  /*Configure GPIO pins : HLTH_LED_Pin EXT_LED_1_Pin EXT_LED_2_Pin EXT_LED_3_Pin */
  GPIO_InitStruct.Pin = HLTH_LED_Pin|EXT_LED_1_Pin|EXT_LED_2_Pin|EXT_LED_3_Pin;
 8002010:	2371      	movs	r3, #113	; 0x71
 8002012:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002014:	2301      	movs	r3, #1
 8002016:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002018:	2300      	movs	r3, #0
 800201a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800201c:	2302      	movs	r3, #2
 800201e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002020:	f107 0310 	add.w	r3, r7, #16
 8002024:	4619      	mov	r1, r3
 8002026:	4812      	ldr	r0, [pc, #72]	; (8002070 <MX_GPIO_Init+0x118>)
 8002028:	f002 f906 	bl	8004238 <HAL_GPIO_Init>

  /*Configure GPIO pins : CH1_8_ANSW_CS_n_Pin CH1_8_ADC_CS_n_Pin CH9_16_ADC_CS_n_Pin CH9_16_ANSW_CS_n_Pin
                           XB_RST_n_Pin */
  GPIO_InitStruct.Pin = CH1_8_ANSW_CS_n_Pin|CH1_8_ADC_CS_n_Pin|CH9_16_ADC_CS_n_Pin|CH9_16_ANSW_CS_n_Pin
 800202c:	f24f 0340 	movw	r3, #61504	; 0xf040
 8002030:	613b      	str	r3, [r7, #16]
                          |XB_RST_n_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002032:	2301      	movs	r3, #1
 8002034:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002036:	2300      	movs	r3, #0
 8002038:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800203a:	2302      	movs	r3, #2
 800203c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800203e:	f107 0310 	add.w	r3, r7, #16
 8002042:	4619      	mov	r1, r3
 8002044:	480b      	ldr	r0, [pc, #44]	; (8002074 <MX_GPIO_Init+0x11c>)
 8002046:	f002 f8f7 	bl	8004238 <HAL_GPIO_Init>

  /*Configure GPIO pin : XB_ON_Pin */
  GPIO_InitStruct.Pin = XB_ON_Pin;
 800204a:	2320      	movs	r3, #32
 800204c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800204e:	2300      	movs	r3, #0
 8002050:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002052:	2300      	movs	r3, #0
 8002054:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(XB_ON_GPIO_Port, &GPIO_InitStruct);
 8002056:	f107 0310 	add.w	r3, r7, #16
 800205a:	4619      	mov	r1, r3
 800205c:	4805      	ldr	r0, [pc, #20]	; (8002074 <MX_GPIO_Init+0x11c>)
 800205e:	f002 f8eb 	bl	8004238 <HAL_GPIO_Init>

}
 8002062:	bf00      	nop
 8002064:	3720      	adds	r7, #32
 8002066:	46bd      	mov	sp, r7
 8002068:	bd80      	pop	{r7, pc}
 800206a:	bf00      	nop
 800206c:	40021000 	.word	0x40021000
 8002070:	40011000 	.word	0x40011000
 8002074:	40010c00 	.word	0x40010c00

08002078 <init_timer>:
/* USER CODE BEGIN 4 */

/********************************************//**
 *  @brief Initialize timer events 
 ***********************************************/
void init_timer (timing * tim) {
 8002078:	b480      	push	{r7}
 800207a:	b083      	sub	sp, #12
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
  tim -> led_fast_blink = false;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2200      	movs	r2, #0
 8002084:	725a      	strb	r2, [r3, #9]
  tim -> flag_10ms_tick = false;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2200      	movs	r2, #0
 800208a:	719a      	strb	r2, [r3, #6]
  tim -> flag_100ms_tick = false;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2200      	movs	r2, #0
 8002090:	71da      	strb	r2, [r3, #7]
  tim -> flag_500ms_tick = false;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	2200      	movs	r2, #0
 8002096:	721a      	strb	r2, [r3, #8]
  tim -> ticks10ms = 0;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2200      	movs	r2, #0
 800209c:	801a      	strh	r2, [r3, #0]
  tim -> ticks100ms = 0;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	2200      	movs	r2, #0
 80020a2:	805a      	strh	r2, [r3, #2]
  tim -> ticks500ms = 0;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2200      	movs	r2, #0
 80020a8:	809a      	strh	r2, [r3, #4]

  tim -> timer_100ms_running = false;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2200      	movs	r2, #0
 80020ae:	731a      	strb	r2, [r3, #12]
  tim -> timer_100ms_cntr = 0;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2200      	movs	r2, #0
 80020b4:	815a      	strh	r2, [r3, #10]

}
 80020b6:	bf00      	nop
 80020b8:	370c      	adds	r7, #12
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bc80      	pop	{r7}
 80020be:	4770      	bx	lr

080020c0 <ignite_fuse>:

/********************************************//**
 *  @brief Ignite a fuse  
 ***********************************************/
void ignite_fuse (timing * tim, fuse * fus, uint8_t fuse_number_u8) {
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b086      	sub	sp, #24
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	60f8      	str	r0, [r7, #12]
 80020c8:	60b9      	str	r1, [r7, #8]
 80020ca:	4613      	mov	r3, r2
 80020cc:	71fb      	strb	r3, [r7, #7]
  /**
   * Start the timer so the fuse driver
   * shuts off after so many
   * mili-seconds
   */
  tim -> timer_100ms_cntr = 0;
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	2200      	movs	r2, #0
 80020d2:	815a      	strh	r2, [r3, #10]
  tim -> timer_100ms_running = true;
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	2201      	movs	r2, #1
 80020d8:	731a      	strb	r2, [r3, #12]
  fus -> fuse_lighting_bool = true;
 80020da:	68bb      	ldr	r3, [r7, #8]
 80020dc:	2201      	movs	r2, #1
 80020de:	70da      	strb	r2, [r3, #3]

  /**
   * Set the DAC value appropriately
   */
  temp_float = (float)(fus -> fuse_current_u16/1000.0*0.5);  
 80020e0:	68bb      	ldr	r3, [r7, #8]
 80020e2:	881b      	ldrh	r3, [r3, #0]
 80020e4:	4618      	mov	r0, r3
 80020e6:	f7fe faad 	bl	8000644 <__aeabi_i2d>
 80020ea:	f04f 0200 	mov.w	r2, #0
 80020ee:	4b14      	ldr	r3, [pc, #80]	; (8002140 <ignite_fuse+0x80>)
 80020f0:	f7fe fc3c 	bl	800096c <__aeabi_ddiv>
 80020f4:	4602      	mov	r2, r0
 80020f6:	460b      	mov	r3, r1
 80020f8:	4610      	mov	r0, r2
 80020fa:	4619      	mov	r1, r3
 80020fc:	f04f 0200 	mov.w	r2, #0
 8002100:	4b10      	ldr	r3, [pc, #64]	; (8002144 <ignite_fuse+0x84>)
 8002102:	f7fe fb09 	bl	8000718 <__aeabi_dmul>
 8002106:	4602      	mov	r2, r0
 8002108:	460b      	mov	r3, r1
 800210a:	4610      	mov	r0, r2
 800210c:	4619      	mov	r1, r3
 800210e:	f7fe fdfb 	bl	8000d08 <__aeabi_d2f>
 8002112:	4603      	mov	r3, r0
 8002114:	617b      	str	r3, [r7, #20]
  dac_data_value = get_dac_data_value(temp_float);
 8002116:	6978      	ldr	r0, [r7, #20]
 8002118:	f7ff fc5e 	bl	80019d8 <get_dac_data_value>
 800211c:	4603      	mov	r3, r0
 800211e:	827b      	strh	r3, [r7, #18]
  HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, (uint32_t)dac_data_value);
 8002120:	8a7b      	ldrh	r3, [r7, #18]
 8002122:	2200      	movs	r2, #0
 8002124:	2100      	movs	r1, #0
 8002126:	4808      	ldr	r0, [pc, #32]	; (8002148 <ignite_fuse+0x88>)
 8002128:	f001 fed2 	bl	8003ed0 <HAL_DAC_SetValue>

  /**
   * Make sure other fuse channels
   * are first turned off 
   */
  anlg_sw_all_off ();
 800212c:	f000 f97e 	bl	800242c <anlg_sw_all_off>

  /**
   * Turn on the appropriate 
   * analog switch
   */
  set_anlg_sw_on(fuse_number_u8);
 8002130:	79fb      	ldrb	r3, [r7, #7]
 8002132:	4618      	mov	r0, r3
 8002134:	f000 f9ca 	bl	80024cc <set_anlg_sw_on>


}
 8002138:	bf00      	nop
 800213a:	3718      	adds	r7, #24
 800213c:	46bd      	mov	sp, r7
 800213e:	bd80      	pop	{r7, pc}
 8002140:	408f4000 	.word	0x408f4000
 8002144:	3fe00000 	.word	0x3fe00000
 8002148:	20000318 	.word	0x20000318

0800214c <get_status_all_fuses>:

/********************************************//**
 *  @brief Get fuse status
 ***********************************************/
uint16_t get_status_all_fuses(fuse * fus) {
 800214c:	b580      	push	{r7, lr}
 800214e:	b086      	sub	sp, #24
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  uint16_t  temp_fuse_current_u16;
  uint16_t  dac_data_value;
  float     temp_float;
  uint16_t  fuse_status_u16 = 0x0000;
 8002154:	2300      	movs	r3, #0
 8002156:	82fb      	strh	r3, [r7, #22]
  uint8_t   counter_u8;
  bool      temp_all_fuses_bad_b = true;
 8002158:	2301      	movs	r3, #1
 800215a:	753b      	strb	r3, [r7, #20]
  /**
   * Retrieve the current fuse current
   * setting so the value can be 
   * restored before leaving this funciton
   */
  temp_fuse_current_u16 = fus -> fuse_current_u16;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	881b      	ldrh	r3, [r3, #0]
 8002160:	827b      	strh	r3, [r7, #18]
   * checking the fuse.  Fuse current value
   * is in mA, so must first divide by 1000
   * before multiplying by 0.5 to determine 
   * DAC voltage.
   */
  fus -> fuse_current_u16 = CHECK_VALUE_FUSE_CURRENT_MA;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002168:	801a      	strh	r2, [r3, #0]
  temp_float = (float)(fus -> fuse_current_u16/1000.0*0.5);  
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	881b      	ldrh	r3, [r3, #0]
 800216e:	4618      	mov	r0, r3
 8002170:	f7fe fa68 	bl	8000644 <__aeabi_i2d>
 8002174:	f04f 0200 	mov.w	r2, #0
 8002178:	4b3d      	ldr	r3, [pc, #244]	; (8002270 <get_status_all_fuses+0x124>)
 800217a:	f7fe fbf7 	bl	800096c <__aeabi_ddiv>
 800217e:	4602      	mov	r2, r0
 8002180:	460b      	mov	r3, r1
 8002182:	4610      	mov	r0, r2
 8002184:	4619      	mov	r1, r3
 8002186:	f04f 0200 	mov.w	r2, #0
 800218a:	4b3a      	ldr	r3, [pc, #232]	; (8002274 <get_status_all_fuses+0x128>)
 800218c:	f7fe fac4 	bl	8000718 <__aeabi_dmul>
 8002190:	4602      	mov	r2, r0
 8002192:	460b      	mov	r3, r1
 8002194:	4610      	mov	r0, r2
 8002196:	4619      	mov	r1, r3
 8002198:	f7fe fdb6 	bl	8000d08 <__aeabi_d2f>
 800219c:	4603      	mov	r3, r0
 800219e:	60fb      	str	r3, [r7, #12]

  dac_data_value = get_dac_data_value(temp_float);
 80021a0:	68f8      	ldr	r0, [r7, #12]
 80021a2:	f7ff fc19 	bl	80019d8 <get_dac_data_value>
 80021a6:	4603      	mov	r3, r0
 80021a8:	817b      	strh	r3, [r7, #10]
  HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, (uint32_t)dac_data_value);
 80021aa:	897b      	ldrh	r3, [r7, #10]
 80021ac:	2200      	movs	r2, #0
 80021ae:	2100      	movs	r1, #0
 80021b0:	4831      	ldr	r0, [pc, #196]	; (8002278 <get_status_all_fuses+0x12c>)
 80021b2:	f001 fe8d 	bl	8003ed0 <HAL_DAC_SetValue>

  /**
   * Cycle through the fuses to see 
   * which are valid and which are not 
   */
  for(counter_u8 = 1; counter_u8 < 17; counter_u8++){
 80021b6:	2301      	movs	r3, #1
 80021b8:	757b      	strb	r3, [r7, #21]
 80021ba:	e025      	b.n	8002208 <get_status_all_fuses+0xbc>
    set_anlg_sw_on (counter_u8);
 80021bc:	7d7b      	ldrb	r3, [r7, #21]
 80021be:	4618      	mov	r0, r3
 80021c0:	f000 f984 	bl	80024cc <set_anlg_sw_on>
    temp_float = get_voltage_mv (&a2d, counter_u8);
 80021c4:	7d7b      	ldrb	r3, [r7, #21]
 80021c6:	4619      	mov	r1, r3
 80021c8:	482c      	ldr	r0, [pc, #176]	; (800227c <get_status_all_fuses+0x130>)
 80021ca:	f7ff f931 	bl	8001430 <get_voltage_mv>
 80021ce:	60f8      	str	r0, [r7, #12]
    
    if(temp_float > GOOD_FUSE_MV_THRESHOLD) {     // Fuse is good
 80021d0:	492b      	ldr	r1, [pc, #172]	; (8002280 <get_status_all_fuses+0x134>)
 80021d2:	68f8      	ldr	r0, [r7, #12]
 80021d4:	f7fe ff62 	bl	800109c <__aeabi_fcmpgt>
 80021d8:	4603      	mov	r3, r0
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d00f      	beq.n	80021fe <get_status_all_fuses+0xb2>
      fuse_status_u16 |= (1 << (counter_u8 - 1));
 80021de:	7d7b      	ldrb	r3, [r7, #21]
 80021e0:	3b01      	subs	r3, #1
 80021e2:	2201      	movs	r2, #1
 80021e4:	fa02 f303 	lsl.w	r3, r2, r3
 80021e8:	b21a      	sxth	r2, r3
 80021ea:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80021ee:	4313      	orrs	r3, r2
 80021f0:	b21b      	sxth	r3, r3
 80021f2:	82fb      	strh	r3, [r7, #22]
      if(temp_all_fuses_bad_b) {
 80021f4:	7d3b      	ldrb	r3, [r7, #20]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d001      	beq.n	80021fe <get_status_all_fuses+0xb2>
        temp_all_fuses_bad_b = false;
 80021fa:	2300      	movs	r3, #0
 80021fc:	753b      	strb	r3, [r7, #20]
      }
    }

    anlg_sw_all_off();
 80021fe:	f000 f915 	bl	800242c <anlg_sw_all_off>
  for(counter_u8 = 1; counter_u8 < 17; counter_u8++){
 8002202:	7d7b      	ldrb	r3, [r7, #21]
 8002204:	3301      	adds	r3, #1
 8002206:	757b      	strb	r3, [r7, #21]
 8002208:	7d7b      	ldrb	r3, [r7, #21]
 800220a:	2b10      	cmp	r3, #16
 800220c:	d9d6      	bls.n	80021bc <get_status_all_fuses+0x70>
  }

  /**
   * Update all fuses bad status
   */
  fus -> all_fuses_bad_bool = temp_all_fuses_bad_b;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	7d3a      	ldrb	r2, [r7, #20]
 8002212:	709a      	strb	r2, [r3, #2]

  /**
   * Return the DAC value back to what it was
   * when entering this function 
   */
  fus -> fuse_current_u16 = temp_fuse_current_u16;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	8a7a      	ldrh	r2, [r7, #18]
 8002218:	801a      	strh	r2, [r3, #0]
  temp_float = (float)(fus -> fuse_current_u16/1000.0*0.5);  
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	881b      	ldrh	r3, [r3, #0]
 800221e:	4618      	mov	r0, r3
 8002220:	f7fe fa10 	bl	8000644 <__aeabi_i2d>
 8002224:	f04f 0200 	mov.w	r2, #0
 8002228:	4b11      	ldr	r3, [pc, #68]	; (8002270 <get_status_all_fuses+0x124>)
 800222a:	f7fe fb9f 	bl	800096c <__aeabi_ddiv>
 800222e:	4602      	mov	r2, r0
 8002230:	460b      	mov	r3, r1
 8002232:	4610      	mov	r0, r2
 8002234:	4619      	mov	r1, r3
 8002236:	f04f 0200 	mov.w	r2, #0
 800223a:	4b0e      	ldr	r3, [pc, #56]	; (8002274 <get_status_all_fuses+0x128>)
 800223c:	f7fe fa6c 	bl	8000718 <__aeabi_dmul>
 8002240:	4602      	mov	r2, r0
 8002242:	460b      	mov	r3, r1
 8002244:	4610      	mov	r0, r2
 8002246:	4619      	mov	r1, r3
 8002248:	f7fe fd5e 	bl	8000d08 <__aeabi_d2f>
 800224c:	4603      	mov	r3, r0
 800224e:	60fb      	str	r3, [r7, #12]

  dac_data_value = get_dac_data_value(temp_float);
 8002250:	68f8      	ldr	r0, [r7, #12]
 8002252:	f7ff fbc1 	bl	80019d8 <get_dac_data_value>
 8002256:	4603      	mov	r3, r0
 8002258:	817b      	strh	r3, [r7, #10]
  HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, (uint32_t)dac_data_value);
 800225a:	897b      	ldrh	r3, [r7, #10]
 800225c:	2200      	movs	r2, #0
 800225e:	2100      	movs	r1, #0
 8002260:	4805      	ldr	r0, [pc, #20]	; (8002278 <get_status_all_fuses+0x12c>)
 8002262:	f001 fe35 	bl	8003ed0 <HAL_DAC_SetValue>

  return fuse_status_u16;
 8002266:	8afb      	ldrh	r3, [r7, #22]
  
}
 8002268:	4618      	mov	r0, r3
 800226a:	3718      	adds	r7, #24
 800226c:	46bd      	mov	sp, r7
 800226e:	bd80      	pop	{r7, pc}
 8002270:	408f4000 	.word	0x408f4000
 8002274:	3fe00000 	.word	0x3fe00000
 8002278:	20000318 	.word	0x20000318
 800227c:	20000218 	.word	0x20000218
 8002280:	42a00000 	.word	0x42a00000

08002284 <igniter_initialize>:

/********************************************//**
 *  @brief Initalize fuse ignition parameters
 ***********************************************/
void igniter_initialize(fuse * fus){
 8002284:	b480      	push	{r7}
 8002286:	b083      	sub	sp, #12
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
  fus -> fuse_current_u16 = DEFAULT_FUSE_CURRENT_MA;  
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2232      	movs	r2, #50	; 0x32
 8002290:	801a      	strh	r2, [r3, #0]
  fus -> fuse_lighting_bool = false;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	2200      	movs	r2, #0
 8002296:	70da      	strb	r2, [r3, #3]
  fus -> all_fuses_bad_bool = false;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2200      	movs	r2, #0
 800229c:	709a      	strb	r2, [r3, #2]
}
 800229e:	bf00      	nop
 80022a0:	370c      	adds	r7, #12
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bc80      	pop	{r7}
 80022a6:	4770      	bx	lr

080022a8 <HAL_TIM_PeriodElapsedCallback>:

/********************************************//**
 *  @brief Handle Timer Interrupts 
 ***********************************************/
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80022a8:	b480      	push	{r7}
 80022aa:	b083      	sub	sp, #12
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
	if(htim == &htim6){
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	4a24      	ldr	r2, [pc, #144]	; (8002344 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 80022b4:	4293      	cmp	r3, r2
 80022b6:	d140      	bne.n	800233a <HAL_TIM_PeriodElapsedCallback+0x92>
			tim.flag_10ms_tick = true;
 80022b8:	4b23      	ldr	r3, [pc, #140]	; (8002348 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80022ba:	2201      	movs	r2, #1
 80022bc:	719a      	strb	r2, [r3, #6]

		 if(tim.ticks10ms == 9) {
 80022be:	4b22      	ldr	r3, [pc, #136]	; (8002348 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80022c0:	881b      	ldrh	r3, [r3, #0]
 80022c2:	2b09      	cmp	r3, #9
 80022c4:	d133      	bne.n	800232e <HAL_TIM_PeriodElapsedCallback+0x86>
		   tim.ticks10ms = 0;
 80022c6:	4b20      	ldr	r3, [pc, #128]	; (8002348 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80022c8:	2200      	movs	r2, #0
 80022ca:	801a      	strh	r2, [r3, #0]
		   tim.flag_100ms_tick = true;
 80022cc:	4b1e      	ldr	r3, [pc, #120]	; (8002348 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80022ce:	2201      	movs	r2, #1
 80022d0:	71da      	strb	r2, [r3, #7]
       if(tim.timer_100ms_running) {
 80022d2:	4b1d      	ldr	r3, [pc, #116]	; (8002348 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80022d4:	7b1b      	ldrb	r3, [r3, #12]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d006      	beq.n	80022e8 <HAL_TIM_PeriodElapsedCallback+0x40>
        tim.timer_100ms_cntr++;
 80022da:	4b1b      	ldr	r3, [pc, #108]	; (8002348 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80022dc:	895b      	ldrh	r3, [r3, #10]
 80022de:	3301      	adds	r3, #1
 80022e0:	b29a      	uxth	r2, r3
 80022e2:	4b19      	ldr	r3, [pc, #100]	; (8002348 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80022e4:	815a      	strh	r2, [r3, #10]
 80022e6:	e002      	b.n	80022ee <HAL_TIM_PeriodElapsedCallback+0x46>
       }
       else {
        tim.timer_100ms_cntr = 0;
 80022e8:	4b17      	ldr	r3, [pc, #92]	; (8002348 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80022ea:	2200      	movs	r2, #0
 80022ec:	815a      	strh	r2, [r3, #10]
       }

		   if(tim.ticks100ms == 4) {
 80022ee:	4b16      	ldr	r3, [pc, #88]	; (8002348 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80022f0:	885b      	ldrh	r3, [r3, #2]
 80022f2:	2b04      	cmp	r3, #4
 80022f4:	d114      	bne.n	8002320 <HAL_TIM_PeriodElapsedCallback+0x78>
			 tim.ticks100ms = 0;
 80022f6:	4b14      	ldr	r3, [pc, #80]	; (8002348 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80022f8:	2200      	movs	r2, #0
 80022fa:	805a      	strh	r2, [r3, #2]
			 tim.flag_500ms_tick = true;
 80022fc:	4b12      	ldr	r3, [pc, #72]	; (8002348 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80022fe:	2201      	movs	r2, #1
 8002300:	721a      	strb	r2, [r3, #8]

			 if(tim.ticks500ms == 119)										// One minute worth of half seconds
 8002302:	4b11      	ldr	r3, [pc, #68]	; (8002348 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8002304:	889b      	ldrh	r3, [r3, #4]
 8002306:	2b77      	cmp	r3, #119	; 0x77
 8002308:	d103      	bne.n	8002312 <HAL_TIM_PeriodElapsedCallback+0x6a>
			   tim.ticks500ms = 0;
 800230a:	4b0f      	ldr	r3, [pc, #60]	; (8002348 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 800230c:	2200      	movs	r2, #0
 800230e:	809a      	strh	r2, [r3, #4]
		 else {
		   tim.ticks10ms += 1;
		 }

		}
}
 8002310:	e013      	b.n	800233a <HAL_TIM_PeriodElapsedCallback+0x92>
			   tim.ticks500ms += 1;
 8002312:	4b0d      	ldr	r3, [pc, #52]	; (8002348 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8002314:	889b      	ldrh	r3, [r3, #4]
 8002316:	3301      	adds	r3, #1
 8002318:	b29a      	uxth	r2, r3
 800231a:	4b0b      	ldr	r3, [pc, #44]	; (8002348 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 800231c:	809a      	strh	r2, [r3, #4]
}
 800231e:	e00c      	b.n	800233a <HAL_TIM_PeriodElapsedCallback+0x92>
			   tim.ticks100ms += 1;
 8002320:	4b09      	ldr	r3, [pc, #36]	; (8002348 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8002322:	885b      	ldrh	r3, [r3, #2]
 8002324:	3301      	adds	r3, #1
 8002326:	b29a      	uxth	r2, r3
 8002328:	4b07      	ldr	r3, [pc, #28]	; (8002348 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 800232a:	805a      	strh	r2, [r3, #2]
}
 800232c:	e005      	b.n	800233a <HAL_TIM_PeriodElapsedCallback+0x92>
		   tim.ticks10ms += 1;
 800232e:	4b06      	ldr	r3, [pc, #24]	; (8002348 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8002330:	881b      	ldrh	r3, [r3, #0]
 8002332:	3301      	adds	r3, #1
 8002334:	b29a      	uxth	r2, r3
 8002336:	4b04      	ldr	r3, [pc, #16]	; (8002348 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8002338:	801a      	strh	r2, [r3, #0]
}
 800233a:	bf00      	nop
 800233c:	370c      	adds	r7, #12
 800233e:	46bd      	mov	sp, r7
 8002340:	bc80      	pop	{r7}
 8002342:	4770      	bx	lr
 8002344:	2000032c 	.word	0x2000032c
 8002348:	20000208 	.word	0x20000208

0800234c <HAL_UART_RxCpltCallback>:

/********************************************//**
 *  @brief Handle UART RX interrupts 
 ***********************************************/
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800234c:	b580      	push	{r7, lr}
 800234e:	b082      	sub	sp, #8
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
	
  /**
   * Console UART Interface
   * 
   */
  if(huart == &huart1) {
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	4a2e      	ldr	r2, [pc, #184]	; (8002410 <HAL_UART_RxCpltCallback+0xc4>)
 8002358:	4293      	cmp	r3, r2
 800235a:	d128      	bne.n	80023ae <HAL_UART_RxCpltCallback+0x62>

    uart.rxbuf[uart.producer_index] = uart.rxchar;          // Load this byte into rx buffer  
 800235c:	4b2d      	ldr	r3, [pc, #180]	; (8002414 <HAL_UART_RxCpltCallback+0xc8>)
 800235e:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8002362:	461a      	mov	r2, r3
 8002364:	4b2b      	ldr	r3, [pc, #172]	; (8002414 <HAL_UART_RxCpltCallback+0xc8>)
 8002366:	f893 1021 	ldrb.w	r1, [r3, #33]	; 0x21
 800236a:	4b2a      	ldr	r3, [pc, #168]	; (8002414 <HAL_UART_RxCpltCallback+0xc8>)
 800236c:	5499      	strb	r1, [r3, r2]
    uart.byte_counter++;                                                   //Increase data counter
 800236e:	4b29      	ldr	r3, [pc, #164]	; (8002414 <HAL_UART_RxCpltCallback+0xc8>)
 8002370:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002374:	3301      	adds	r3, #1
 8002376:	b2da      	uxtb	r2, r3
 8002378:	4b26      	ldr	r3, [pc, #152]	; (8002414 <HAL_UART_RxCpltCallback+0xc8>)
 800237a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    (uart.producer_index >= MAX_RX_BUF_INDEX) ? (uart.producer_index = 0):(uart.producer_index++);       
 800237e:	4b25      	ldr	r3, [pc, #148]	; (8002414 <HAL_UART_RxCpltCallback+0xc8>)
 8002380:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8002384:	2b1f      	cmp	r3, #31
 8002386:	d904      	bls.n	8002392 <HAL_UART_RxCpltCallback+0x46>
 8002388:	4b22      	ldr	r3, [pc, #136]	; (8002414 <HAL_UART_RxCpltCallback+0xc8>)
 800238a:	2200      	movs	r2, #0
 800238c:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 8002390:	e007      	b.n	80023a2 <HAL_UART_RxCpltCallback+0x56>
 8002392:	4b20      	ldr	r3, [pc, #128]	; (8002414 <HAL_UART_RxCpltCallback+0xc8>)
 8002394:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8002398:	3301      	adds	r3, #1
 800239a:	b2da      	uxtb	r2, r3
 800239c:	4b1d      	ldr	r3, [pc, #116]	; (8002414 <HAL_UART_RxCpltCallback+0xc8>)
 800239e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		HAL_UART_Receive_IT(&huart1, &uart.rxchar, 1);
 80023a2:	2201      	movs	r2, #1
 80023a4:	491c      	ldr	r1, [pc, #112]	; (8002418 <HAL_UART_RxCpltCallback+0xcc>)
 80023a6:	481a      	ldr	r0, [pc, #104]	; (8002410 <HAL_UART_RxCpltCallback+0xc4>)
 80023a8:	f004 f849 	bl	800643e <HAL_UART_Receive_IT>
    uart.rxbuf[uart.producer_index] = uart.rxchar;          // Load this byte into rx buffer  
    uart.byte_counter++;                                                   //Increase data counter
    (uart.producer_index >= MAX_RX_BUF_INDEX) ? (uart.producer_index = 0):(uart.producer_index++);       
		HAL_UART_Receive_IT(&huart2, &uart.rxchar, 1);
	}
}
 80023ac:	e02b      	b.n	8002406 <HAL_UART_RxCpltCallback+0xba>
  else if(huart == &huart2) {
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	4a1a      	ldr	r2, [pc, #104]	; (800241c <HAL_UART_RxCpltCallback+0xd0>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d127      	bne.n	8002406 <HAL_UART_RxCpltCallback+0xba>
    uart.rxbuf[uart.producer_index] = uart.rxchar;          // Load this byte into rx buffer  
 80023b6:	4b17      	ldr	r3, [pc, #92]	; (8002414 <HAL_UART_RxCpltCallback+0xc8>)
 80023b8:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80023bc:	461a      	mov	r2, r3
 80023be:	4b15      	ldr	r3, [pc, #84]	; (8002414 <HAL_UART_RxCpltCallback+0xc8>)
 80023c0:	f893 1021 	ldrb.w	r1, [r3, #33]	; 0x21
 80023c4:	4b13      	ldr	r3, [pc, #76]	; (8002414 <HAL_UART_RxCpltCallback+0xc8>)
 80023c6:	5499      	strb	r1, [r3, r2]
    uart.byte_counter++;                                                   //Increase data counter
 80023c8:	4b12      	ldr	r3, [pc, #72]	; (8002414 <HAL_UART_RxCpltCallback+0xc8>)
 80023ca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80023ce:	3301      	adds	r3, #1
 80023d0:	b2da      	uxtb	r2, r3
 80023d2:	4b10      	ldr	r3, [pc, #64]	; (8002414 <HAL_UART_RxCpltCallback+0xc8>)
 80023d4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    (uart.producer_index >= MAX_RX_BUF_INDEX) ? (uart.producer_index = 0):(uart.producer_index++);       
 80023d8:	4b0e      	ldr	r3, [pc, #56]	; (8002414 <HAL_UART_RxCpltCallback+0xc8>)
 80023da:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80023de:	2b1f      	cmp	r3, #31
 80023e0:	d904      	bls.n	80023ec <HAL_UART_RxCpltCallback+0xa0>
 80023e2:	4b0c      	ldr	r3, [pc, #48]	; (8002414 <HAL_UART_RxCpltCallback+0xc8>)
 80023e4:	2200      	movs	r2, #0
 80023e6:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 80023ea:	e007      	b.n	80023fc <HAL_UART_RxCpltCallback+0xb0>
 80023ec:	4b09      	ldr	r3, [pc, #36]	; (8002414 <HAL_UART_RxCpltCallback+0xc8>)
 80023ee:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80023f2:	3301      	adds	r3, #1
 80023f4:	b2da      	uxtb	r2, r3
 80023f6:	4b07      	ldr	r3, [pc, #28]	; (8002414 <HAL_UART_RxCpltCallback+0xc8>)
 80023f8:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		HAL_UART_Receive_IT(&huart2, &uart.rxchar, 1);
 80023fc:	2201      	movs	r2, #1
 80023fe:	4906      	ldr	r1, [pc, #24]	; (8002418 <HAL_UART_RxCpltCallback+0xcc>)
 8002400:	4806      	ldr	r0, [pc, #24]	; (800241c <HAL_UART_RxCpltCallback+0xd0>)
 8002402:	f004 f81c 	bl	800643e <HAL_UART_Receive_IT>
}
 8002406:	bf00      	nop
 8002408:	3708      	adds	r7, #8
 800240a:	46bd      	mov	sp, r7
 800240c:	bd80      	pop	{r7, pc}
 800240e:	bf00      	nop
 8002410:	200002d4 	.word	0x200002d4
 8002414:	20000220 	.word	0x20000220
 8002418:	20000241 	.word	0x20000241
 800241c:	200003cc 	.word	0x200003cc

08002420 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002420:	b480      	push	{r7}
 8002422:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002424:	b672      	cpsid	i
}
 8002426:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002428:	e7fe      	b.n	8002428 <Error_Handler+0x8>
	...

0800242c <anlg_sw_all_off>:
    // a2d -> run_time_min = 0.0f;
    // a2d -> time_us_elapsed = 0;

}

void anlg_sw_all_off ( void ) {
 800242c:	b580      	push	{r7, lr}
 800242e:	b082      	sub	sp, #8
 8002430:	af00      	add	r7, sp, #0
    uint8_t spi_data[1] = {0x00};       //Define the SPI data buffer (index 0 to 15)
 8002432:	2300      	movs	r3, #0
 8002434:	713b      	strb	r3, [r7, #4]
    HAL_StatusTypeDef ret;

    /**
     * First clear switches 1-8
     */
    HAL_GPIO_WritePin(CH1_8_ANSW_CS_n_GPIO_Port, CH1_8_ANSW_CS_n_Pin, GPIO_PIN_RESET);
 8002436:	2200      	movs	r2, #0
 8002438:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800243c:	4820      	ldr	r0, [pc, #128]	; (80024c0 <anlg_sw_all_off+0x94>)
 800243e:	f002 f87f 	bl	8004540 <HAL_GPIO_WritePin>
    HAL_Delay(CS_HAL_DELAY_ANLGSW_mS);
 8002442:	2001      	movs	r0, #1
 8002444:	f001 f98e 	bl	8003764 <HAL_Delay>

    spi_data[0] = 0x00;
 8002448:	2300      	movs	r3, #0
 800244a:	713b      	strb	r3, [r7, #4]
    //                   Handle to SPI instance                                                     
    //                        |            Pointer to data buffer                                    
    //                        |                 |             Size in bytes                  
    //                        |                 |                  |          Timeout in us   
    //                        |                 |                  |             |
    ret = HAL_SPI_Transmit(&hspi1, (uint8_t *)spi_data, (uint16_t) 1, (uint32_t) 200);     // Timeout in us
 800244c:	1d39      	adds	r1, r7, #4
 800244e:	23c8      	movs	r3, #200	; 0xc8
 8002450:	2201      	movs	r2, #1
 8002452:	481c      	ldr	r0, [pc, #112]	; (80024c4 <anlg_sw_all_off+0x98>)
 8002454:	f003 f8d6 	bl	8005604 <HAL_SPI_Transmit>
 8002458:	4603      	mov	r3, r0
 800245a:	71fb      	strb	r3, [r7, #7]
    if(ret != HAL_OK){
 800245c:	79fb      	ldrb	r3, [r7, #7]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d003      	beq.n	800246a <anlg_sw_all_off+0x3e>
        print_string("SPI Transmit Error",LF);
 8002462:	2101      	movs	r1, #1
 8002464:	4818      	ldr	r0, [pc, #96]	; (80024c8 <anlg_sw_all_off+0x9c>)
 8002466:	f000 fc2b 	bl	8002cc0 <print_string>
    }


    HAL_GPIO_WritePin(CH1_8_ANSW_CS_n_GPIO_Port, CH1_8_ANSW_CS_n_Pin, GPIO_PIN_SET);
 800246a:	2201      	movs	r2, #1
 800246c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002470:	4813      	ldr	r0, [pc, #76]	; (80024c0 <anlg_sw_all_off+0x94>)
 8002472:	f002 f865 	bl	8004540 <HAL_GPIO_WritePin>
    
    /**
     * Now clear switches 9-16
     */
    HAL_GPIO_WritePin(CH9_16_ANSW_CS_n_GPIO_Port, CH9_16_ANSW_CS_n_Pin, GPIO_PIN_RESET);
 8002476:	2200      	movs	r2, #0
 8002478:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800247c:	4810      	ldr	r0, [pc, #64]	; (80024c0 <anlg_sw_all_off+0x94>)
 800247e:	f002 f85f 	bl	8004540 <HAL_GPIO_WritePin>
    HAL_Delay(CS_HAL_DELAY_ANLGSW_mS);
 8002482:	2001      	movs	r0, #1
 8002484:	f001 f96e 	bl	8003764 <HAL_Delay>

    spi_data[0] = 0x00;
 8002488:	2300      	movs	r3, #0
 800248a:	713b      	strb	r3, [r7, #4]
    //                   Handle to SPI instance                                                     
    //                        |            Pointer to data buffer                                    
    //                        |                 |             Size in bytes                  
    //                        |                 |                  |          Timeout in us   
    //                        |                 |                  |             |
    ret = HAL_SPI_Transmit(&hspi1, (uint8_t *)spi_data, (uint16_t) 1, (uint32_t) 200);
 800248c:	1d39      	adds	r1, r7, #4
 800248e:	23c8      	movs	r3, #200	; 0xc8
 8002490:	2201      	movs	r2, #1
 8002492:	480c      	ldr	r0, [pc, #48]	; (80024c4 <anlg_sw_all_off+0x98>)
 8002494:	f003 f8b6 	bl	8005604 <HAL_SPI_Transmit>
 8002498:	4603      	mov	r3, r0
 800249a:	71fb      	strb	r3, [r7, #7]
    if(ret != HAL_OK){
 800249c:	79fb      	ldrb	r3, [r7, #7]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d003      	beq.n	80024aa <anlg_sw_all_off+0x7e>
        print_string("SPI Transmit Error",LF);
 80024a2:	2101      	movs	r1, #1
 80024a4:	4808      	ldr	r0, [pc, #32]	; (80024c8 <anlg_sw_all_off+0x9c>)
 80024a6:	f000 fc0b 	bl	8002cc0 <print_string>
    }


    HAL_GPIO_WritePin(CH9_16_ANSW_CS_n_GPIO_Port, CH9_16_ANSW_CS_n_Pin, GPIO_PIN_SET);
 80024aa:	2201      	movs	r2, #1
 80024ac:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80024b0:	4803      	ldr	r0, [pc, #12]	; (80024c0 <anlg_sw_all_off+0x94>)
 80024b2:	f002 f845 	bl	8004540 <HAL_GPIO_WritePin>
}
 80024b6:	bf00      	nop
 80024b8:	3708      	adds	r7, #8
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bd80      	pop	{r7, pc}
 80024be:	bf00      	nop
 80024c0:	40010c00 	.word	0x40010c00
 80024c4:	20000374 	.word	0x20000374
 80024c8:	0800c0e8 	.word	0x0800c0e8

080024cc <set_anlg_sw_on>:

bool set_anlg_sw_on (uint8_t channel) {
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b084      	sub	sp, #16
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	4603      	mov	r3, r0
 80024d4:	71fb      	strb	r3, [r7, #7]
    uint8_t spi_data[1] = {0x00};               // Define the SPI data buffer (index 0 to 15)
 80024d6:	2300      	movs	r3, #0
 80024d8:	733b      	strb	r3, [r7, #12]
    uint16_t temp = 0x0000;
 80024da:	2300      	movs	r3, #0
 80024dc:	81fb      	strh	r3, [r7, #14]

    HAL_StatusTypeDef ret;

    if(channel >= 1 && channel <= 8) {
 80024de:	79fb      	ldrb	r3, [r7, #7]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d023      	beq.n	800252c <set_anlg_sw_on+0x60>
 80024e4:	79fb      	ldrb	r3, [r7, #7]
 80024e6:	2b08      	cmp	r3, #8
 80024e8:	d820      	bhi.n	800252c <set_anlg_sw_on+0x60>
        HAL_GPIO_WritePin(CH1_8_ANSW_CS_n_GPIO_Port, CH1_8_ANSW_CS_n_Pin, GPIO_PIN_RESET);
 80024ea:	2200      	movs	r2, #0
 80024ec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80024f0:	4825      	ldr	r0, [pc, #148]	; (8002588 <set_anlg_sw_on+0xbc>)
 80024f2:	f002 f825 	bl	8004540 <HAL_GPIO_WritePin>
        HAL_Delay(CS_HAL_DELAY_ANLGSW_mS);
 80024f6:	2001      	movs	r0, #1
 80024f8:	f001 f934 	bl	8003764 <HAL_Delay>

        spi_data[0] = (uint8_t)(0x01 << (channel-1));
 80024fc:	79fb      	ldrb	r3, [r7, #7]
 80024fe:	3b01      	subs	r3, #1
 8002500:	2201      	movs	r2, #1
 8002502:	fa02 f303 	lsl.w	r3, r2, r3
 8002506:	b2db      	uxtb	r3, r3
 8002508:	733b      	strb	r3, [r7, #12]
        //                   Handle to SPI instance                                                     
        //                        |            Pointer to data buffer                                    
        //                        |                 |             Size in bytes                  
        //                        |                 |                  |          Timeout in us   
        //                        |                 |                  |             |
        ret = HAL_SPI_Transmit(&hspi1, (uint8_t *)spi_data, (uint16_t) 1, (uint32_t) 200);
 800250a:	f107 010c 	add.w	r1, r7, #12
 800250e:	23c8      	movs	r3, #200	; 0xc8
 8002510:	2201      	movs	r2, #1
 8002512:	481e      	ldr	r0, [pc, #120]	; (800258c <set_anlg_sw_on+0xc0>)
 8002514:	f003 f876 	bl	8005604 <HAL_SPI_Transmit>
 8002518:	4603      	mov	r3, r0
 800251a:	737b      	strb	r3, [r7, #13]
        HAL_GPIO_WritePin(CH1_8_ANSW_CS_n_GPIO_Port, CH1_8_ANSW_CS_n_Pin, GPIO_PIN_SET);
 800251c:	2201      	movs	r2, #1
 800251e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002522:	4819      	ldr	r0, [pc, #100]	; (8002588 <set_anlg_sw_on+0xbc>)
 8002524:	f002 f80c 	bl	8004540 <HAL_GPIO_WritePin>

        return true;
 8002528:	2301      	movs	r3, #1
 800252a:	e028      	b.n	800257e <set_anlg_sw_on+0xb2>
        
    }

    else if (channel > 8) {
 800252c:	79fb      	ldrb	r3, [r7, #7]
 800252e:	2b08      	cmp	r3, #8
 8002530:	d924      	bls.n	800257c <set_anlg_sw_on+0xb0>
        temp = channel - 8;        // Shift channel values down to 8 LSBs
 8002532:	79fb      	ldrb	r3, [r7, #7]
 8002534:	b29b      	uxth	r3, r3
 8002536:	3b08      	subs	r3, #8
 8002538:	81fb      	strh	r3, [r7, #14]

        HAL_GPIO_WritePin(CH9_16_ANSW_CS_n_GPIO_Port, CH9_16_ANSW_CS_n_Pin, GPIO_PIN_RESET);
 800253a:	2200      	movs	r2, #0
 800253c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002540:	4811      	ldr	r0, [pc, #68]	; (8002588 <set_anlg_sw_on+0xbc>)
 8002542:	f001 fffd 	bl	8004540 <HAL_GPIO_WritePin>
        HAL_Delay(CS_HAL_DELAY_ANLGSW_mS);
 8002546:	2001      	movs	r0, #1
 8002548:	f001 f90c 	bl	8003764 <HAL_Delay>

        spi_data[0] = (uint8_t)(0x01 << (temp-1));
 800254c:	89fb      	ldrh	r3, [r7, #14]
 800254e:	3b01      	subs	r3, #1
 8002550:	2201      	movs	r2, #1
 8002552:	fa02 f303 	lsl.w	r3, r2, r3
 8002556:	b2db      	uxtb	r3, r3
 8002558:	733b      	strb	r3, [r7, #12]
        //                   Handle to SPI instance                                                     
        //                        |            Pointer to data buffer                                    
        //                        |                 |             Size in bytes                  
        //                        |                 |                  |          Timeout in us   
        //                        |                 |                  |             |
        ret = HAL_SPI_Transmit(&hspi1, (uint8_t *)spi_data, (uint16_t) 1, (uint32_t) 200);
 800255a:	f107 010c 	add.w	r1, r7, #12
 800255e:	23c8      	movs	r3, #200	; 0xc8
 8002560:	2201      	movs	r2, #1
 8002562:	480a      	ldr	r0, [pc, #40]	; (800258c <set_anlg_sw_on+0xc0>)
 8002564:	f003 f84e 	bl	8005604 <HAL_SPI_Transmit>
 8002568:	4603      	mov	r3, r0
 800256a:	737b      	strb	r3, [r7, #13]
        HAL_GPIO_WritePin(CH9_16_ANSW_CS_n_GPIO_Port, CH9_16_ANSW_CS_n_Pin, GPIO_PIN_SET);
 800256c:	2201      	movs	r2, #1
 800256e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002572:	4805      	ldr	r0, [pc, #20]	; (8002588 <set_anlg_sw_on+0xbc>)
 8002574:	f001 ffe4 	bl	8004540 <HAL_GPIO_WritePin>

        return true;
 8002578:	2301      	movs	r3, #1
 800257a:	e000      	b.n	800257e <set_anlg_sw_on+0xb2>

    }

    else {
        return false;
 800257c:	2300      	movs	r3, #0
    }




}
 800257e:	4618      	mov	r0, r3
 8002580:	3710      	adds	r7, #16
 8002582:	46bd      	mov	sp, r7
 8002584:	bd80      	pop	{r7, pc}
 8002586:	bf00      	nop
 8002588:	40010c00 	.word	0x40010c00
 800258c:	20000374 	.word	0x20000374

08002590 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002590:	b480      	push	{r7}
 8002592:	b085      	sub	sp, #20
 8002594:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002596:	4b15      	ldr	r3, [pc, #84]	; (80025ec <HAL_MspInit+0x5c>)
 8002598:	699b      	ldr	r3, [r3, #24]
 800259a:	4a14      	ldr	r2, [pc, #80]	; (80025ec <HAL_MspInit+0x5c>)
 800259c:	f043 0301 	orr.w	r3, r3, #1
 80025a0:	6193      	str	r3, [r2, #24]
 80025a2:	4b12      	ldr	r3, [pc, #72]	; (80025ec <HAL_MspInit+0x5c>)
 80025a4:	699b      	ldr	r3, [r3, #24]
 80025a6:	f003 0301 	and.w	r3, r3, #1
 80025aa:	60bb      	str	r3, [r7, #8]
 80025ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80025ae:	4b0f      	ldr	r3, [pc, #60]	; (80025ec <HAL_MspInit+0x5c>)
 80025b0:	69db      	ldr	r3, [r3, #28]
 80025b2:	4a0e      	ldr	r2, [pc, #56]	; (80025ec <HAL_MspInit+0x5c>)
 80025b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025b8:	61d3      	str	r3, [r2, #28]
 80025ba:	4b0c      	ldr	r3, [pc, #48]	; (80025ec <HAL_MspInit+0x5c>)
 80025bc:	69db      	ldr	r3, [r3, #28]
 80025be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025c2:	607b      	str	r3, [r7, #4]
 80025c4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80025c6:	4b0a      	ldr	r3, [pc, #40]	; (80025f0 <HAL_MspInit+0x60>)
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	60fb      	str	r3, [r7, #12]
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80025d2:	60fb      	str	r3, [r7, #12]
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80025da:	60fb      	str	r3, [r7, #12]
 80025dc:	4a04      	ldr	r2, [pc, #16]	; (80025f0 <HAL_MspInit+0x60>)
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80025e2:	bf00      	nop
 80025e4:	3714      	adds	r7, #20
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bc80      	pop	{r7}
 80025ea:	4770      	bx	lr
 80025ec:	40021000 	.word	0x40021000
 80025f0:	40010000 	.word	0x40010000

080025f4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b088      	sub	sp, #32
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025fc:	f107 0310 	add.w	r3, r7, #16
 8002600:	2200      	movs	r2, #0
 8002602:	601a      	str	r2, [r3, #0]
 8002604:	605a      	str	r2, [r3, #4]
 8002606:	609a      	str	r2, [r3, #8]
 8002608:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4a14      	ldr	r2, [pc, #80]	; (8002660 <HAL_ADC_MspInit+0x6c>)
 8002610:	4293      	cmp	r3, r2
 8002612:	d121      	bne.n	8002658 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002614:	4b13      	ldr	r3, [pc, #76]	; (8002664 <HAL_ADC_MspInit+0x70>)
 8002616:	699b      	ldr	r3, [r3, #24]
 8002618:	4a12      	ldr	r2, [pc, #72]	; (8002664 <HAL_ADC_MspInit+0x70>)
 800261a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800261e:	6193      	str	r3, [r2, #24]
 8002620:	4b10      	ldr	r3, [pc, #64]	; (8002664 <HAL_ADC_MspInit+0x70>)
 8002622:	699b      	ldr	r3, [r3, #24]
 8002624:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002628:	60fb      	str	r3, [r7, #12]
 800262a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800262c:	4b0d      	ldr	r3, [pc, #52]	; (8002664 <HAL_ADC_MspInit+0x70>)
 800262e:	699b      	ldr	r3, [r3, #24]
 8002630:	4a0c      	ldr	r2, [pc, #48]	; (8002664 <HAL_ADC_MspInit+0x70>)
 8002632:	f043 0304 	orr.w	r3, r3, #4
 8002636:	6193      	str	r3, [r2, #24]
 8002638:	4b0a      	ldr	r3, [pc, #40]	; (8002664 <HAL_ADC_MspInit+0x70>)
 800263a:	699b      	ldr	r3, [r3, #24]
 800263c:	f003 0304 	and.w	r3, r3, #4
 8002640:	60bb      	str	r3, [r7, #8]
 8002642:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002644:	2301      	movs	r3, #1
 8002646:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002648:	2303      	movs	r3, #3
 800264a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800264c:	f107 0310 	add.w	r3, r7, #16
 8002650:	4619      	mov	r1, r3
 8002652:	4805      	ldr	r0, [pc, #20]	; (8002668 <HAL_ADC_MspInit+0x74>)
 8002654:	f001 fdf0 	bl	8004238 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002658:	bf00      	nop
 800265a:	3720      	adds	r7, #32
 800265c:	46bd      	mov	sp, r7
 800265e:	bd80      	pop	{r7, pc}
 8002660:	40012400 	.word	0x40012400
 8002664:	40021000 	.word	0x40021000
 8002668:	40010800 	.word	0x40010800

0800266c <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b088      	sub	sp, #32
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002674:	f107 0310 	add.w	r3, r7, #16
 8002678:	2200      	movs	r2, #0
 800267a:	601a      	str	r2, [r3, #0]
 800267c:	605a      	str	r2, [r3, #4]
 800267e:	609a      	str	r2, [r3, #8]
 8002680:	60da      	str	r2, [r3, #12]
  if(hdac->Instance==DAC)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4a14      	ldr	r2, [pc, #80]	; (80026d8 <HAL_DAC_MspInit+0x6c>)
 8002688:	4293      	cmp	r3, r2
 800268a:	d121      	bne.n	80026d0 <HAL_DAC_MspInit+0x64>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 800268c:	4b13      	ldr	r3, [pc, #76]	; (80026dc <HAL_DAC_MspInit+0x70>)
 800268e:	69db      	ldr	r3, [r3, #28]
 8002690:	4a12      	ldr	r2, [pc, #72]	; (80026dc <HAL_DAC_MspInit+0x70>)
 8002692:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002696:	61d3      	str	r3, [r2, #28]
 8002698:	4b10      	ldr	r3, [pc, #64]	; (80026dc <HAL_DAC_MspInit+0x70>)
 800269a:	69db      	ldr	r3, [r3, #28]
 800269c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80026a0:	60fb      	str	r3, [r7, #12]
 80026a2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026a4:	4b0d      	ldr	r3, [pc, #52]	; (80026dc <HAL_DAC_MspInit+0x70>)
 80026a6:	699b      	ldr	r3, [r3, #24]
 80026a8:	4a0c      	ldr	r2, [pc, #48]	; (80026dc <HAL_DAC_MspInit+0x70>)
 80026aa:	f043 0304 	orr.w	r3, r3, #4
 80026ae:	6193      	str	r3, [r2, #24]
 80026b0:	4b0a      	ldr	r3, [pc, #40]	; (80026dc <HAL_DAC_MspInit+0x70>)
 80026b2:	699b      	ldr	r3, [r3, #24]
 80026b4:	f003 0304 	and.w	r3, r3, #4
 80026b8:	60bb      	str	r3, [r7, #8]
 80026ba:	68bb      	ldr	r3, [r7, #8]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80026bc:	2310      	movs	r3, #16
 80026be:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80026c0:	2303      	movs	r3, #3
 80026c2:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026c4:	f107 0310 	add.w	r3, r7, #16
 80026c8:	4619      	mov	r1, r3
 80026ca:	4805      	ldr	r0, [pc, #20]	; (80026e0 <HAL_DAC_MspInit+0x74>)
 80026cc:	f001 fdb4 	bl	8004238 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 80026d0:	bf00      	nop
 80026d2:	3720      	adds	r7, #32
 80026d4:	46bd      	mov	sp, r7
 80026d6:	bd80      	pop	{r7, pc}
 80026d8:	40007400 	.word	0x40007400
 80026dc:	40021000 	.word	0x40021000
 80026e0:	40010800 	.word	0x40010800

080026e4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b088      	sub	sp, #32
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026ec:	f107 0310 	add.w	r3, r7, #16
 80026f0:	2200      	movs	r2, #0
 80026f2:	601a      	str	r2, [r3, #0]
 80026f4:	605a      	str	r2, [r3, #4]
 80026f6:	609a      	str	r2, [r3, #8]
 80026f8:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4a16      	ldr	r2, [pc, #88]	; (8002758 <HAL_I2C_MspInit+0x74>)
 8002700:	4293      	cmp	r3, r2
 8002702:	d124      	bne.n	800274e <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002704:	4b15      	ldr	r3, [pc, #84]	; (800275c <HAL_I2C_MspInit+0x78>)
 8002706:	699b      	ldr	r3, [r3, #24]
 8002708:	4a14      	ldr	r2, [pc, #80]	; (800275c <HAL_I2C_MspInit+0x78>)
 800270a:	f043 0308 	orr.w	r3, r3, #8
 800270e:	6193      	str	r3, [r2, #24]
 8002710:	4b12      	ldr	r3, [pc, #72]	; (800275c <HAL_I2C_MspInit+0x78>)
 8002712:	699b      	ldr	r3, [r3, #24]
 8002714:	f003 0308 	and.w	r3, r3, #8
 8002718:	60fb      	str	r3, [r7, #12]
 800271a:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800271c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002720:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002722:	2312      	movs	r3, #18
 8002724:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002726:	2303      	movs	r3, #3
 8002728:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800272a:	f107 0310 	add.w	r3, r7, #16
 800272e:	4619      	mov	r1, r3
 8002730:	480b      	ldr	r0, [pc, #44]	; (8002760 <HAL_I2C_MspInit+0x7c>)
 8002732:	f001 fd81 	bl	8004238 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002736:	4b09      	ldr	r3, [pc, #36]	; (800275c <HAL_I2C_MspInit+0x78>)
 8002738:	69db      	ldr	r3, [r3, #28]
 800273a:	4a08      	ldr	r2, [pc, #32]	; (800275c <HAL_I2C_MspInit+0x78>)
 800273c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002740:	61d3      	str	r3, [r2, #28]
 8002742:	4b06      	ldr	r3, [pc, #24]	; (800275c <HAL_I2C_MspInit+0x78>)
 8002744:	69db      	ldr	r3, [r3, #28]
 8002746:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800274a:	60bb      	str	r3, [r7, #8]
 800274c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800274e:	bf00      	nop
 8002750:	3720      	adds	r7, #32
 8002752:	46bd      	mov	sp, r7
 8002754:	bd80      	pop	{r7, pc}
 8002756:	bf00      	nop
 8002758:	40005800 	.word	0x40005800
 800275c:	40021000 	.word	0x40021000
 8002760:	40010c00 	.word	0x40010c00

08002764 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b088      	sub	sp, #32
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800276c:	f107 0310 	add.w	r3, r7, #16
 8002770:	2200      	movs	r2, #0
 8002772:	601a      	str	r2, [r3, #0]
 8002774:	605a      	str	r2, [r3, #4]
 8002776:	609a      	str	r2, [r3, #8]
 8002778:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4a1b      	ldr	r2, [pc, #108]	; (80027ec <HAL_SPI_MspInit+0x88>)
 8002780:	4293      	cmp	r3, r2
 8002782:	d12f      	bne.n	80027e4 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002784:	4b1a      	ldr	r3, [pc, #104]	; (80027f0 <HAL_SPI_MspInit+0x8c>)
 8002786:	699b      	ldr	r3, [r3, #24]
 8002788:	4a19      	ldr	r2, [pc, #100]	; (80027f0 <HAL_SPI_MspInit+0x8c>)
 800278a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800278e:	6193      	str	r3, [r2, #24]
 8002790:	4b17      	ldr	r3, [pc, #92]	; (80027f0 <HAL_SPI_MspInit+0x8c>)
 8002792:	699b      	ldr	r3, [r3, #24]
 8002794:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002798:	60fb      	str	r3, [r7, #12]
 800279a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800279c:	4b14      	ldr	r3, [pc, #80]	; (80027f0 <HAL_SPI_MspInit+0x8c>)
 800279e:	699b      	ldr	r3, [r3, #24]
 80027a0:	4a13      	ldr	r2, [pc, #76]	; (80027f0 <HAL_SPI_MspInit+0x8c>)
 80027a2:	f043 0304 	orr.w	r3, r3, #4
 80027a6:	6193      	str	r3, [r2, #24]
 80027a8:	4b11      	ldr	r3, [pc, #68]	; (80027f0 <HAL_SPI_MspInit+0x8c>)
 80027aa:	699b      	ldr	r3, [r3, #24]
 80027ac:	f003 0304 	and.w	r3, r3, #4
 80027b0:	60bb      	str	r3, [r7, #8]
 80027b2:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80027b4:	23a0      	movs	r3, #160	; 0xa0
 80027b6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027b8:	2302      	movs	r3, #2
 80027ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80027bc:	2303      	movs	r3, #3
 80027be:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027c0:	f107 0310 	add.w	r3, r7, #16
 80027c4:	4619      	mov	r1, r3
 80027c6:	480b      	ldr	r0, [pc, #44]	; (80027f4 <HAL_SPI_MspInit+0x90>)
 80027c8:	f001 fd36 	bl	8004238 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80027cc:	2340      	movs	r3, #64	; 0x40
 80027ce:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80027d0:	2300      	movs	r3, #0
 80027d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027d4:	2300      	movs	r3, #0
 80027d6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027d8:	f107 0310 	add.w	r3, r7, #16
 80027dc:	4619      	mov	r1, r3
 80027de:	4805      	ldr	r0, [pc, #20]	; (80027f4 <HAL_SPI_MspInit+0x90>)
 80027e0:	f001 fd2a 	bl	8004238 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80027e4:	bf00      	nop
 80027e6:	3720      	adds	r7, #32
 80027e8:	46bd      	mov	sp, r7
 80027ea:	bd80      	pop	{r7, pc}
 80027ec:	40013000 	.word	0x40013000
 80027f0:	40021000 	.word	0x40021000
 80027f4:	40010800 	.word	0x40010800

080027f8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b084      	sub	sp, #16
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4a0d      	ldr	r2, [pc, #52]	; (800283c <HAL_TIM_Base_MspInit+0x44>)
 8002806:	4293      	cmp	r3, r2
 8002808:	d113      	bne.n	8002832 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800280a:	4b0d      	ldr	r3, [pc, #52]	; (8002840 <HAL_TIM_Base_MspInit+0x48>)
 800280c:	69db      	ldr	r3, [r3, #28]
 800280e:	4a0c      	ldr	r2, [pc, #48]	; (8002840 <HAL_TIM_Base_MspInit+0x48>)
 8002810:	f043 0310 	orr.w	r3, r3, #16
 8002814:	61d3      	str	r3, [r2, #28]
 8002816:	4b0a      	ldr	r3, [pc, #40]	; (8002840 <HAL_TIM_Base_MspInit+0x48>)
 8002818:	69db      	ldr	r3, [r3, #28]
 800281a:	f003 0310 	and.w	r3, r3, #16
 800281e:	60fb      	str	r3, [r7, #12]
 8002820:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_IRQn, 0, 0);
 8002822:	2200      	movs	r2, #0
 8002824:	2100      	movs	r1, #0
 8002826:	2036      	movs	r0, #54	; 0x36
 8002828:	f001 faa9 	bl	8003d7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 800282c:	2036      	movs	r0, #54	; 0x36
 800282e:	f001 fac2 	bl	8003db6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8002832:	bf00      	nop
 8002834:	3710      	adds	r7, #16
 8002836:	46bd      	mov	sp, r7
 8002838:	bd80      	pop	{r7, pc}
 800283a:	bf00      	nop
 800283c:	40001000 	.word	0x40001000
 8002840:	40021000 	.word	0x40021000

08002844 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b08a      	sub	sp, #40	; 0x28
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800284c:	f107 0318 	add.w	r3, r7, #24
 8002850:	2200      	movs	r2, #0
 8002852:	601a      	str	r2, [r3, #0]
 8002854:	605a      	str	r2, [r3, #4]
 8002856:	609a      	str	r2, [r3, #8]
 8002858:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4a3f      	ldr	r2, [pc, #252]	; (800295c <HAL_UART_MspInit+0x118>)
 8002860:	4293      	cmp	r3, r2
 8002862:	d13a      	bne.n	80028da <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002864:	4b3e      	ldr	r3, [pc, #248]	; (8002960 <HAL_UART_MspInit+0x11c>)
 8002866:	699b      	ldr	r3, [r3, #24]
 8002868:	4a3d      	ldr	r2, [pc, #244]	; (8002960 <HAL_UART_MspInit+0x11c>)
 800286a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800286e:	6193      	str	r3, [r2, #24]
 8002870:	4b3b      	ldr	r3, [pc, #236]	; (8002960 <HAL_UART_MspInit+0x11c>)
 8002872:	699b      	ldr	r3, [r3, #24]
 8002874:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002878:	617b      	str	r3, [r7, #20]
 800287a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800287c:	4b38      	ldr	r3, [pc, #224]	; (8002960 <HAL_UART_MspInit+0x11c>)
 800287e:	699b      	ldr	r3, [r3, #24]
 8002880:	4a37      	ldr	r2, [pc, #220]	; (8002960 <HAL_UART_MspInit+0x11c>)
 8002882:	f043 0304 	orr.w	r3, r3, #4
 8002886:	6193      	str	r3, [r2, #24]
 8002888:	4b35      	ldr	r3, [pc, #212]	; (8002960 <HAL_UART_MspInit+0x11c>)
 800288a:	699b      	ldr	r3, [r3, #24]
 800288c:	f003 0304 	and.w	r3, r3, #4
 8002890:	613b      	str	r3, [r7, #16]
 8002892:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002894:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002898:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800289a:	2302      	movs	r3, #2
 800289c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800289e:	2303      	movs	r3, #3
 80028a0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028a2:	f107 0318 	add.w	r3, r7, #24
 80028a6:	4619      	mov	r1, r3
 80028a8:	482e      	ldr	r0, [pc, #184]	; (8002964 <HAL_UART_MspInit+0x120>)
 80028aa:	f001 fcc5 	bl	8004238 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80028ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80028b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80028b4:	2300      	movs	r3, #0
 80028b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028b8:	2300      	movs	r3, #0
 80028ba:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028bc:	f107 0318 	add.w	r3, r7, #24
 80028c0:	4619      	mov	r1, r3
 80028c2:	4828      	ldr	r0, [pc, #160]	; (8002964 <HAL_UART_MspInit+0x120>)
 80028c4:	f001 fcb8 	bl	8004238 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80028c8:	2200      	movs	r2, #0
 80028ca:	2100      	movs	r1, #0
 80028cc:	2025      	movs	r0, #37	; 0x25
 80028ce:	f001 fa56 	bl	8003d7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80028d2:	2025      	movs	r0, #37	; 0x25
 80028d4:	f001 fa6f 	bl	8003db6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80028d8:	e03c      	b.n	8002954 <HAL_UART_MspInit+0x110>
  else if(huart->Instance==USART2)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4a22      	ldr	r2, [pc, #136]	; (8002968 <HAL_UART_MspInit+0x124>)
 80028e0:	4293      	cmp	r3, r2
 80028e2:	d137      	bne.n	8002954 <HAL_UART_MspInit+0x110>
    __HAL_RCC_USART2_CLK_ENABLE();
 80028e4:	4b1e      	ldr	r3, [pc, #120]	; (8002960 <HAL_UART_MspInit+0x11c>)
 80028e6:	69db      	ldr	r3, [r3, #28]
 80028e8:	4a1d      	ldr	r2, [pc, #116]	; (8002960 <HAL_UART_MspInit+0x11c>)
 80028ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028ee:	61d3      	str	r3, [r2, #28]
 80028f0:	4b1b      	ldr	r3, [pc, #108]	; (8002960 <HAL_UART_MspInit+0x11c>)
 80028f2:	69db      	ldr	r3, [r3, #28]
 80028f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028f8:	60fb      	str	r3, [r7, #12]
 80028fa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028fc:	4b18      	ldr	r3, [pc, #96]	; (8002960 <HAL_UART_MspInit+0x11c>)
 80028fe:	699b      	ldr	r3, [r3, #24]
 8002900:	4a17      	ldr	r2, [pc, #92]	; (8002960 <HAL_UART_MspInit+0x11c>)
 8002902:	f043 0304 	orr.w	r3, r3, #4
 8002906:	6193      	str	r3, [r2, #24]
 8002908:	4b15      	ldr	r3, [pc, #84]	; (8002960 <HAL_UART_MspInit+0x11c>)
 800290a:	699b      	ldr	r3, [r3, #24]
 800290c:	f003 0304 	and.w	r3, r3, #4
 8002910:	60bb      	str	r3, [r7, #8]
 8002912:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002914:	2304      	movs	r3, #4
 8002916:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002918:	2302      	movs	r3, #2
 800291a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800291c:	2303      	movs	r3, #3
 800291e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002920:	f107 0318 	add.w	r3, r7, #24
 8002924:	4619      	mov	r1, r3
 8002926:	480f      	ldr	r0, [pc, #60]	; (8002964 <HAL_UART_MspInit+0x120>)
 8002928:	f001 fc86 	bl	8004238 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800292c:	2308      	movs	r3, #8
 800292e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002930:	2300      	movs	r3, #0
 8002932:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002934:	2300      	movs	r3, #0
 8002936:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002938:	f107 0318 	add.w	r3, r7, #24
 800293c:	4619      	mov	r1, r3
 800293e:	4809      	ldr	r0, [pc, #36]	; (8002964 <HAL_UART_MspInit+0x120>)
 8002940:	f001 fc7a 	bl	8004238 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002944:	2200      	movs	r2, #0
 8002946:	2100      	movs	r1, #0
 8002948:	2026      	movs	r0, #38	; 0x26
 800294a:	f001 fa18 	bl	8003d7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800294e:	2026      	movs	r0, #38	; 0x26
 8002950:	f001 fa31 	bl	8003db6 <HAL_NVIC_EnableIRQ>
}
 8002954:	bf00      	nop
 8002956:	3728      	adds	r7, #40	; 0x28
 8002958:	46bd      	mov	sp, r7
 800295a:	bd80      	pop	{r7, pc}
 800295c:	40013800 	.word	0x40013800
 8002960:	40021000 	.word	0x40021000
 8002964:	40010800 	.word	0x40010800
 8002968:	40004400 	.word	0x40004400

0800296c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800296c:	b480      	push	{r7}
 800296e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002970:	e7fe      	b.n	8002970 <NMI_Handler+0x4>

08002972 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002972:	b480      	push	{r7}
 8002974:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002976:	e7fe      	b.n	8002976 <HardFault_Handler+0x4>

08002978 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002978:	b480      	push	{r7}
 800297a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800297c:	e7fe      	b.n	800297c <MemManage_Handler+0x4>

0800297e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800297e:	b480      	push	{r7}
 8002980:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002982:	e7fe      	b.n	8002982 <BusFault_Handler+0x4>

08002984 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002984:	b480      	push	{r7}
 8002986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002988:	e7fe      	b.n	8002988 <UsageFault_Handler+0x4>

0800298a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800298a:	b480      	push	{r7}
 800298c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800298e:	bf00      	nop
 8002990:	46bd      	mov	sp, r7
 8002992:	bc80      	pop	{r7}
 8002994:	4770      	bx	lr

08002996 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002996:	b480      	push	{r7}
 8002998:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800299a:	bf00      	nop
 800299c:	46bd      	mov	sp, r7
 800299e:	bc80      	pop	{r7}
 80029a0:	4770      	bx	lr

080029a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80029a2:	b480      	push	{r7}
 80029a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80029a6:	bf00      	nop
 80029a8:	46bd      	mov	sp, r7
 80029aa:	bc80      	pop	{r7}
 80029ac:	4770      	bx	lr

080029ae <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80029ae:	b580      	push	{r7, lr}
 80029b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80029b2:	f000 febb 	bl	800372c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80029b6:	bf00      	nop
 80029b8:	bd80      	pop	{r7, pc}
	...

080029bc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80029c0:	4802      	ldr	r0, [pc, #8]	; (80029cc <USART1_IRQHandler+0x10>)
 80029c2:	f003 fd6d 	bl	80064a0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80029c6:	bf00      	nop
 80029c8:	bd80      	pop	{r7, pc}
 80029ca:	bf00      	nop
 80029cc:	200002d4 	.word	0x200002d4

080029d0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80029d4:	4802      	ldr	r0, [pc, #8]	; (80029e0 <USART2_IRQHandler+0x10>)
 80029d6:	f003 fd63 	bl	80064a0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80029da:	bf00      	nop
 80029dc:	bd80      	pop	{r7, pc}
 80029de:	bf00      	nop
 80029e0:	200003cc 	.word	0x200003cc

080029e4 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80029e8:	4802      	ldr	r0, [pc, #8]	; (80029f4 <TIM6_IRQHandler+0x10>)
 80029ea:	f003 fa39 	bl	8005e60 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 80029ee:	bf00      	nop
 80029f0:	bd80      	pop	{r7, pc}
 80029f2:	bf00      	nop
 80029f4:	2000032c 	.word	0x2000032c

080029f8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80029f8:	b480      	push	{r7}
 80029fa:	af00      	add	r7, sp, #0
	return 1;
 80029fc:	2301      	movs	r3, #1
}
 80029fe:	4618      	mov	r0, r3
 8002a00:	46bd      	mov	sp, r7
 8002a02:	bc80      	pop	{r7}
 8002a04:	4770      	bx	lr

08002a06 <_kill>:

int _kill(int pid, int sig)
{
 8002a06:	b580      	push	{r7, lr}
 8002a08:	b082      	sub	sp, #8
 8002a0a:	af00      	add	r7, sp, #0
 8002a0c:	6078      	str	r0, [r7, #4]
 8002a0e:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002a10:	f004 f96e 	bl	8006cf0 <__errno>
 8002a14:	4603      	mov	r3, r0
 8002a16:	2216      	movs	r2, #22
 8002a18:	601a      	str	r2, [r3, #0]
	return -1;
 8002a1a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002a1e:	4618      	mov	r0, r3
 8002a20:	3708      	adds	r7, #8
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bd80      	pop	{r7, pc}

08002a26 <_exit>:

void _exit (int status)
{
 8002a26:	b580      	push	{r7, lr}
 8002a28:	b082      	sub	sp, #8
 8002a2a:	af00      	add	r7, sp, #0
 8002a2c:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002a2e:	f04f 31ff 	mov.w	r1, #4294967295
 8002a32:	6878      	ldr	r0, [r7, #4]
 8002a34:	f7ff ffe7 	bl	8002a06 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002a38:	e7fe      	b.n	8002a38 <_exit+0x12>

08002a3a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002a3a:	b580      	push	{r7, lr}
 8002a3c:	b086      	sub	sp, #24
 8002a3e:	af00      	add	r7, sp, #0
 8002a40:	60f8      	str	r0, [r7, #12]
 8002a42:	60b9      	str	r1, [r7, #8]
 8002a44:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a46:	2300      	movs	r3, #0
 8002a48:	617b      	str	r3, [r7, #20]
 8002a4a:	e00a      	b.n	8002a62 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002a4c:	f3af 8000 	nop.w
 8002a50:	4601      	mov	r1, r0
 8002a52:	68bb      	ldr	r3, [r7, #8]
 8002a54:	1c5a      	adds	r2, r3, #1
 8002a56:	60ba      	str	r2, [r7, #8]
 8002a58:	b2ca      	uxtb	r2, r1
 8002a5a:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a5c:	697b      	ldr	r3, [r7, #20]
 8002a5e:	3301      	adds	r3, #1
 8002a60:	617b      	str	r3, [r7, #20]
 8002a62:	697a      	ldr	r2, [r7, #20]
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	429a      	cmp	r2, r3
 8002a68:	dbf0      	blt.n	8002a4c <_read+0x12>
	}

return len;
 8002a6a:	687b      	ldr	r3, [r7, #4]
}
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	3718      	adds	r7, #24
 8002a70:	46bd      	mov	sp, r7
 8002a72:	bd80      	pop	{r7, pc}

08002a74 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b086      	sub	sp, #24
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	60f8      	str	r0, [r7, #12]
 8002a7c:	60b9      	str	r1, [r7, #8]
 8002a7e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a80:	2300      	movs	r3, #0
 8002a82:	617b      	str	r3, [r7, #20]
 8002a84:	e009      	b.n	8002a9a <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002a86:	68bb      	ldr	r3, [r7, #8]
 8002a88:	1c5a      	adds	r2, r3, #1
 8002a8a:	60ba      	str	r2, [r7, #8]
 8002a8c:	781b      	ldrb	r3, [r3, #0]
 8002a8e:	4618      	mov	r0, r3
 8002a90:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a94:	697b      	ldr	r3, [r7, #20]
 8002a96:	3301      	adds	r3, #1
 8002a98:	617b      	str	r3, [r7, #20]
 8002a9a:	697a      	ldr	r2, [r7, #20]
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	429a      	cmp	r2, r3
 8002aa0:	dbf1      	blt.n	8002a86 <_write+0x12>
	}
	return len;
 8002aa2:	687b      	ldr	r3, [r7, #4]
}
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	3718      	adds	r7, #24
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	bd80      	pop	{r7, pc}

08002aac <_close>:

int _close(int file)
{
 8002aac:	b480      	push	{r7}
 8002aae:	b083      	sub	sp, #12
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
	return -1;
 8002ab4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002ab8:	4618      	mov	r0, r3
 8002aba:	370c      	adds	r7, #12
 8002abc:	46bd      	mov	sp, r7
 8002abe:	bc80      	pop	{r7}
 8002ac0:	4770      	bx	lr

08002ac2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002ac2:	b480      	push	{r7}
 8002ac4:	b083      	sub	sp, #12
 8002ac6:	af00      	add	r7, sp, #0
 8002ac8:	6078      	str	r0, [r7, #4]
 8002aca:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002ad2:	605a      	str	r2, [r3, #4]
	return 0;
 8002ad4:	2300      	movs	r3, #0
}
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	370c      	adds	r7, #12
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bc80      	pop	{r7}
 8002ade:	4770      	bx	lr

08002ae0 <_isatty>:

int _isatty(int file)
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	b083      	sub	sp, #12
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
	return 1;
 8002ae8:	2301      	movs	r3, #1
}
 8002aea:	4618      	mov	r0, r3
 8002aec:	370c      	adds	r7, #12
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bc80      	pop	{r7}
 8002af2:	4770      	bx	lr

08002af4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002af4:	b480      	push	{r7}
 8002af6:	b085      	sub	sp, #20
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	60f8      	str	r0, [r7, #12]
 8002afc:	60b9      	str	r1, [r7, #8]
 8002afe:	607a      	str	r2, [r7, #4]
	return 0;
 8002b00:	2300      	movs	r3, #0
}
 8002b02:	4618      	mov	r0, r3
 8002b04:	3714      	adds	r7, #20
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bc80      	pop	{r7}
 8002b0a:	4770      	bx	lr

08002b0c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b086      	sub	sp, #24
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002b14:	4a14      	ldr	r2, [pc, #80]	; (8002b68 <_sbrk+0x5c>)
 8002b16:	4b15      	ldr	r3, [pc, #84]	; (8002b6c <_sbrk+0x60>)
 8002b18:	1ad3      	subs	r3, r2, r3
 8002b1a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002b1c:	697b      	ldr	r3, [r7, #20]
 8002b1e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002b20:	4b13      	ldr	r3, [pc, #76]	; (8002b70 <_sbrk+0x64>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d102      	bne.n	8002b2e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002b28:	4b11      	ldr	r3, [pc, #68]	; (8002b70 <_sbrk+0x64>)
 8002b2a:	4a12      	ldr	r2, [pc, #72]	; (8002b74 <_sbrk+0x68>)
 8002b2c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002b2e:	4b10      	ldr	r3, [pc, #64]	; (8002b70 <_sbrk+0x64>)
 8002b30:	681a      	ldr	r2, [r3, #0]
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	4413      	add	r3, r2
 8002b36:	693a      	ldr	r2, [r7, #16]
 8002b38:	429a      	cmp	r2, r3
 8002b3a:	d207      	bcs.n	8002b4c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002b3c:	f004 f8d8 	bl	8006cf0 <__errno>
 8002b40:	4603      	mov	r3, r0
 8002b42:	220c      	movs	r2, #12
 8002b44:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002b46:	f04f 33ff 	mov.w	r3, #4294967295
 8002b4a:	e009      	b.n	8002b60 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002b4c:	4b08      	ldr	r3, [pc, #32]	; (8002b70 <_sbrk+0x64>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002b52:	4b07      	ldr	r3, [pc, #28]	; (8002b70 <_sbrk+0x64>)
 8002b54:	681a      	ldr	r2, [r3, #0]
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	4413      	add	r3, r2
 8002b5a:	4a05      	ldr	r2, [pc, #20]	; (8002b70 <_sbrk+0x64>)
 8002b5c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
}
 8002b60:	4618      	mov	r0, r3
 8002b62:	3718      	adds	r7, #24
 8002b64:	46bd      	mov	sp, r7
 8002b66:	bd80      	pop	{r7, pc}
 8002b68:	20010000 	.word	0x20010000
 8002b6c:	00000400 	.word	0x00000400
 8002b70:	200001fc 	.word	0x200001fc
 8002b74:	20000428 	.word	0x20000428

08002b78 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002b7c:	bf00      	nop
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bc80      	pop	{r7}
 8002b82:	4770      	bx	lr

08002b84 <print_float>:

struct UARTMembers uart;
fuse         fus;               // Struct for all things fuse related
timing       tim;               // Struct for all things timing related

void print_float (float number, uint8_t action) {
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b086      	sub	sp, #24
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
 8002b8c:	460b      	mov	r3, r1
 8002b8e:	70fb      	strb	r3, [r7, #3]
    char temp_buffer[8];        //Define the array that will hold the ASCII values
    char c = '\0';
 8002b90:	2300      	movs	r3, #0
 8002b92:	73fb      	strb	r3, [r7, #15]

    /* USE SPRINT F TO BUILD THE ARRAY OF ASCII CHARACTERS */
    sprintf(temp_buffer, "%.4f", number);   //f tells the function we want to print a float value
 8002b94:	6878      	ldr	r0, [r7, #4]
 8002b96:	f7fd fd67 	bl	8000668 <__aeabi_f2d>
 8002b9a:	4602      	mov	r2, r0
 8002b9c:	460b      	mov	r3, r1
 8002b9e:	f107 0010 	add.w	r0, r7, #16
 8002ba2:	491a      	ldr	r1, [pc, #104]	; (8002c0c <print_float+0x88>)
 8002ba4:	f004 ff4c 	bl	8007a40 <siprintf>

    HAL_UART_Transmit(&huart1, (uint8_t *) temp_buffer, sizeof(temp_buffer), HAL_MAX_DELAY);
 8002ba8:	f107 0110 	add.w	r1, r7, #16
 8002bac:	f04f 33ff 	mov.w	r3, #4294967295
 8002bb0:	2208      	movs	r2, #8
 8002bb2:	4817      	ldr	r0, [pc, #92]	; (8002c10 <print_float+0x8c>)
 8002bb4:	f003 fbb1 	bl	800631a <HAL_UART_Transmit>

    /* CHECK TO SEE IF THE USER WISHES TO CREATE A NEW LINE */
    if(action == LF) {
 8002bb8:	78fb      	ldrb	r3, [r7, #3]
 8002bba:	2b01      	cmp	r3, #1
 8002bbc:	d114      	bne.n	8002be8 <print_float+0x64>
        c = '\r';  HAL_UART_Transmit(&huart1,(uint8_t *) &c, (uint16_t) 0x01, HAL_MAX_DELAY);
 8002bbe:	230d      	movs	r3, #13
 8002bc0:	73fb      	strb	r3, [r7, #15]
 8002bc2:	f107 010f 	add.w	r1, r7, #15
 8002bc6:	f04f 33ff 	mov.w	r3, #4294967295
 8002bca:	2201      	movs	r2, #1
 8002bcc:	4810      	ldr	r0, [pc, #64]	; (8002c10 <print_float+0x8c>)
 8002bce:	f003 fba4 	bl	800631a <HAL_UART_Transmit>
        c = '\n';  HAL_UART_Transmit(&huart1, (uint8_t *) &c, (uint16_t) 0x01, HAL_MAX_DELAY);
 8002bd2:	230a      	movs	r3, #10
 8002bd4:	73fb      	strb	r3, [r7, #15]
 8002bd6:	f107 010f 	add.w	r1, r7, #15
 8002bda:	f04f 33ff 	mov.w	r3, #4294967295
 8002bde:	2201      	movs	r2, #1
 8002be0:	480b      	ldr	r0, [pc, #44]	; (8002c10 <print_float+0x8c>)
 8002be2:	f003 fb9a 	bl	800631a <HAL_UART_Transmit>
    }
    else if(action == CR) {
        c = '\r';  HAL_UART_Transmit(&huart1,(uint8_t *) &c, (uint16_t) 0x01, HAL_MAX_DELAY);
    }
}
 8002be6:	e00c      	b.n	8002c02 <print_float+0x7e>
    else if(action == CR) {
 8002be8:	78fb      	ldrb	r3, [r7, #3]
 8002bea:	2b02      	cmp	r3, #2
 8002bec:	d109      	bne.n	8002c02 <print_float+0x7e>
        c = '\r';  HAL_UART_Transmit(&huart1,(uint8_t *) &c, (uint16_t) 0x01, HAL_MAX_DELAY);
 8002bee:	230d      	movs	r3, #13
 8002bf0:	73fb      	strb	r3, [r7, #15]
 8002bf2:	f107 010f 	add.w	r1, r7, #15
 8002bf6:	f04f 33ff 	mov.w	r3, #4294967295
 8002bfa:	2201      	movs	r2, #1
 8002bfc:	4804      	ldr	r0, [pc, #16]	; (8002c10 <print_float+0x8c>)
 8002bfe:	f003 fb8c 	bl	800631a <HAL_UART_Transmit>
}
 8002c02:	bf00      	nop
 8002c04:	3718      	adds	r7, #24
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bd80      	pop	{r7, pc}
 8002c0a:	bf00      	nop
 8002c0c:	0800c0fc 	.word	0x0800c0fc
 8002c10:	200002d4 	.word	0x200002d4

08002c14 <print_16b_binary_rep>:
    else if(action == CR) {
        c = '\r';  HAL_UART_Transmit(&huart1,(uint8_t *) &c, (uint16_t) 0x01, HAL_MAX_DELAY);
    }
}

void print_16b_binary_rep (uint16_t number, uint8_t action) {
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b084      	sub	sp, #16
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	460a      	mov	r2, r1
 8002c1e:	80fb      	strh	r3, [r7, #6]
 8002c20:	4613      	mov	r3, r2
 8002c22:	717b      	strb	r3, [r7, #5]
    uint16_t i;
    uint16_t tx_char;
    char c = '\0';
 8002c24:	2300      	movs	r3, #0
 8002c26:	72fb      	strb	r3, [r7, #11]

    for(i = 16; i > 0; i--) {
 8002c28:	2310      	movs	r3, #16
 8002c2a:	81fb      	strh	r3, [r7, #14]
 8002c2c:	e01a      	b.n	8002c64 <print_16b_binary_rep+0x50>
        tx_char = (uint16_t)(number >> (i - 1));
 8002c2e:	88fa      	ldrh	r2, [r7, #6]
 8002c30:	89fb      	ldrh	r3, [r7, #14]
 8002c32:	3b01      	subs	r3, #1
 8002c34:	fa42 f303 	asr.w	r3, r2, r3
 8002c38:	81bb      	strh	r3, [r7, #12]
        tx_char = (uint16_t)(tx_char & 0x01);
 8002c3a:	89bb      	ldrh	r3, [r7, #12]
 8002c3c:	f003 0301 	and.w	r3, r3, #1
 8002c40:	81bb      	strh	r3, [r7, #12]
        tx_char = (uint16_t)(tx_char + 0x30);         //Turn this into an ASCII value
 8002c42:	89bb      	ldrh	r3, [r7, #12]
 8002c44:	3330      	adds	r3, #48	; 0x30
 8002c46:	81bb      	strh	r3, [r7, #12]
        c = (char)tx_char;
 8002c48:	89bb      	ldrh	r3, [r7, #12]
 8002c4a:	b2db      	uxtb	r3, r3
 8002c4c:	72fb      	strb	r3, [r7, #11]

        HAL_UART_Transmit(&huart1, (uint8_t *) &c, (uint16_t) 0x01, HAL_MAX_DELAY);
 8002c4e:	f107 010b 	add.w	r1, r7, #11
 8002c52:	f04f 33ff 	mov.w	r3, #4294967295
 8002c56:	2201      	movs	r2, #1
 8002c58:	4818      	ldr	r0, [pc, #96]	; (8002cbc <print_16b_binary_rep+0xa8>)
 8002c5a:	f003 fb5e 	bl	800631a <HAL_UART_Transmit>
    for(i = 16; i > 0; i--) {
 8002c5e:	89fb      	ldrh	r3, [r7, #14]
 8002c60:	3b01      	subs	r3, #1
 8002c62:	81fb      	strh	r3, [r7, #14]
 8002c64:	89fb      	ldrh	r3, [r7, #14]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d1e1      	bne.n	8002c2e <print_16b_binary_rep+0x1a>
    }

    /* CHECK TO SEE IF THE USER WISHES TO CREATE A NEW LINE */
    if(action == LF) {
 8002c6a:	797b      	ldrb	r3, [r7, #5]
 8002c6c:	2b01      	cmp	r3, #1
 8002c6e:	d114      	bne.n	8002c9a <print_16b_binary_rep+0x86>
        c = '\r';  HAL_UART_Transmit(&huart1,(uint8_t *) &c, (uint16_t) 0x01, HAL_MAX_DELAY);
 8002c70:	230d      	movs	r3, #13
 8002c72:	72fb      	strb	r3, [r7, #11]
 8002c74:	f107 010b 	add.w	r1, r7, #11
 8002c78:	f04f 33ff 	mov.w	r3, #4294967295
 8002c7c:	2201      	movs	r2, #1
 8002c7e:	480f      	ldr	r0, [pc, #60]	; (8002cbc <print_16b_binary_rep+0xa8>)
 8002c80:	f003 fb4b 	bl	800631a <HAL_UART_Transmit>
        c = '\n';  HAL_UART_Transmit(&huart1, (uint8_t *) &c, (uint16_t) 0x01, HAL_MAX_DELAY);
 8002c84:	230a      	movs	r3, #10
 8002c86:	72fb      	strb	r3, [r7, #11]
 8002c88:	f107 010b 	add.w	r1, r7, #11
 8002c8c:	f04f 33ff 	mov.w	r3, #4294967295
 8002c90:	2201      	movs	r2, #1
 8002c92:	480a      	ldr	r0, [pc, #40]	; (8002cbc <print_16b_binary_rep+0xa8>)
 8002c94:	f003 fb41 	bl	800631a <HAL_UART_Transmit>
    }
    else if(action == CR) {
        c = '\r';  HAL_UART_Transmit(&huart1,(uint8_t *) &c, (uint16_t) 0x01, HAL_MAX_DELAY);
    }
}
 8002c98:	e00c      	b.n	8002cb4 <print_16b_binary_rep+0xa0>
    else if(action == CR) {
 8002c9a:	797b      	ldrb	r3, [r7, #5]
 8002c9c:	2b02      	cmp	r3, #2
 8002c9e:	d109      	bne.n	8002cb4 <print_16b_binary_rep+0xa0>
        c = '\r';  HAL_UART_Transmit(&huart1,(uint8_t *) &c, (uint16_t) 0x01, HAL_MAX_DELAY);
 8002ca0:	230d      	movs	r3, #13
 8002ca2:	72fb      	strb	r3, [r7, #11]
 8002ca4:	f107 010b 	add.w	r1, r7, #11
 8002ca8:	f04f 33ff 	mov.w	r3, #4294967295
 8002cac:	2201      	movs	r2, #1
 8002cae:	4803      	ldr	r0, [pc, #12]	; (8002cbc <print_16b_binary_rep+0xa8>)
 8002cb0:	f003 fb33 	bl	800631a <HAL_UART_Transmit>
}
 8002cb4:	bf00      	nop
 8002cb6:	3710      	adds	r7, #16
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bd80      	pop	{r7, pc}
 8002cbc:	200002d4 	.word	0x200002d4

08002cc0 <print_string>:

void print_string(const char * s, uint8_t action) {
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b084      	sub	sp, #16
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
 8002cc8:	460b      	mov	r3, r1
 8002cca:	70fb      	strb	r3, [r7, #3]
    char c = '\0';
 8002ccc:	2300      	movs	r3, #0
 8002cce:	73fb      	strb	r3, [r7, #15]

    while(*s != '\0') {
 8002cd0:	e009      	b.n	8002ce6 <print_string+0x26>
        HAL_UART_Transmit(&huart1, (uint8_t *) s, (uint16_t) 0x01, HAL_MAX_DELAY);
 8002cd2:	f04f 33ff 	mov.w	r3, #4294967295
 8002cd6:	2201      	movs	r2, #1
 8002cd8:	6879      	ldr	r1, [r7, #4]
 8002cda:	4819      	ldr	r0, [pc, #100]	; (8002d40 <print_string+0x80>)
 8002cdc:	f003 fb1d 	bl	800631a <HAL_UART_Transmit>
        s++;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	3301      	adds	r3, #1
 8002ce4:	607b      	str	r3, [r7, #4]
    while(*s != '\0') {
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	781b      	ldrb	r3, [r3, #0]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d1f1      	bne.n	8002cd2 <print_string+0x12>
    }

    /* CHECK TO SEE IF THE USER WISHES TO CREATE A NEW LINE */
    if(action == LF) {
 8002cee:	78fb      	ldrb	r3, [r7, #3]
 8002cf0:	2b01      	cmp	r3, #1
 8002cf2:	d114      	bne.n	8002d1e <print_string+0x5e>
        c = '\r';  HAL_UART_Transmit(&huart1,(uint8_t *) &c, (uint16_t) 0x01, HAL_MAX_DELAY);
 8002cf4:	230d      	movs	r3, #13
 8002cf6:	73fb      	strb	r3, [r7, #15]
 8002cf8:	f107 010f 	add.w	r1, r7, #15
 8002cfc:	f04f 33ff 	mov.w	r3, #4294967295
 8002d00:	2201      	movs	r2, #1
 8002d02:	480f      	ldr	r0, [pc, #60]	; (8002d40 <print_string+0x80>)
 8002d04:	f003 fb09 	bl	800631a <HAL_UART_Transmit>
        c = '\n';  HAL_UART_Transmit(&huart1, (uint8_t *) &c, (uint16_t) 0x01, HAL_MAX_DELAY);
 8002d08:	230a      	movs	r3, #10
 8002d0a:	73fb      	strb	r3, [r7, #15]
 8002d0c:	f107 010f 	add.w	r1, r7, #15
 8002d10:	f04f 33ff 	mov.w	r3, #4294967295
 8002d14:	2201      	movs	r2, #1
 8002d16:	480a      	ldr	r0, [pc, #40]	; (8002d40 <print_string+0x80>)
 8002d18:	f003 faff 	bl	800631a <HAL_UART_Transmit>
    }
    else if(action == CR) {
        c = '\r';  HAL_UART_Transmit(&huart1,(uint8_t *) &c, (uint16_t) 0x01, HAL_MAX_DELAY);
    }

}
 8002d1c:	e00c      	b.n	8002d38 <print_string+0x78>
    else if(action == CR) {
 8002d1e:	78fb      	ldrb	r3, [r7, #3]
 8002d20:	2b02      	cmp	r3, #2
 8002d22:	d109      	bne.n	8002d38 <print_string+0x78>
        c = '\r';  HAL_UART_Transmit(&huart1,(uint8_t *) &c, (uint16_t) 0x01, HAL_MAX_DELAY);
 8002d24:	230d      	movs	r3, #13
 8002d26:	73fb      	strb	r3, [r7, #15]
 8002d28:	f107 010f 	add.w	r1, r7, #15
 8002d2c:	f04f 33ff 	mov.w	r3, #4294967295
 8002d30:	2201      	movs	r2, #1
 8002d32:	4803      	ldr	r0, [pc, #12]	; (8002d40 <print_string+0x80>)
 8002d34:	f003 faf1 	bl	800631a <HAL_UART_Transmit>
}
 8002d38:	bf00      	nop
 8002d3a:	3710      	adds	r7, #16
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	bd80      	pop	{r7, pc}
 8002d40:	200002d4 	.word	0x200002d4

08002d44 <print_unsigned_decimal>:

void print_unsigned_decimal (uint16_t number, uint8_t action) {
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b086      	sub	sp, #24
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	460a      	mov	r2, r1
 8002d4e:	80fb      	strh	r3, [r7, #6]
 8002d50:	4613      	mov	r3, r2
 8002d52:	717b      	strb	r3, [r7, #5]
    char temphex[5];        //Define the array that will hold the ASCII values
    char c = '\r';
 8002d54:	230d      	movs	r3, #13
 8002d56:	73fb      	strb	r3, [r7, #15]
    uint8_t i;                
    uint8_t decimal_count;    //This is how many digits are written

    /* USE SPRINT F TO BUILD THE ARRAY OF ASCII CHARACTERS */
    decimal_count = (uint8_t)(sprintf(temphex, "%u", number)); //u tells the function we want an unsigned decimal number
 8002d58:	88fa      	ldrh	r2, [r7, #6]
 8002d5a:	f107 0310 	add.w	r3, r7, #16
 8002d5e:	4920      	ldr	r1, [pc, #128]	; (8002de0 <print_unsigned_decimal+0x9c>)
 8002d60:	4618      	mov	r0, r3
 8002d62:	f004 fe6d 	bl	8007a40 <siprintf>
 8002d66:	4603      	mov	r3, r0
 8002d68:	75bb      	strb	r3, [r7, #22]

    for(i = 0; i < decimal_count; i++) {    //Print out the array of ASCII characters.
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	75fb      	strb	r3, [r7, #23]
 8002d6e:	e00c      	b.n	8002d8a <print_unsigned_decimal+0x46>
        // TXREG1 = (temphex[i]);
        HAL_UART_Transmit(&huart1,(uint8_t *) &temphex[i], (uint16_t) 0x01, HAL_MAX_DELAY);
 8002d70:	7dfb      	ldrb	r3, [r7, #23]
 8002d72:	f107 0210 	add.w	r2, r7, #16
 8002d76:	18d1      	adds	r1, r2, r3
 8002d78:	f04f 33ff 	mov.w	r3, #4294967295
 8002d7c:	2201      	movs	r2, #1
 8002d7e:	4819      	ldr	r0, [pc, #100]	; (8002de4 <print_unsigned_decimal+0xa0>)
 8002d80:	f003 facb 	bl	800631a <HAL_UART_Transmit>
    for(i = 0; i < decimal_count; i++) {    //Print out the array of ASCII characters.
 8002d84:	7dfb      	ldrb	r3, [r7, #23]
 8002d86:	3301      	adds	r3, #1
 8002d88:	75fb      	strb	r3, [r7, #23]
 8002d8a:	7dfa      	ldrb	r2, [r7, #23]
 8002d8c:	7dbb      	ldrb	r3, [r7, #22]
 8002d8e:	429a      	cmp	r2, r3
 8002d90:	d3ee      	bcc.n	8002d70 <print_unsigned_decimal+0x2c>
    }

    /* CHECK TO SEE IF THE USER WISHES TO CREATE A NEW LINE */
    if(action == LF) {
 8002d92:	797b      	ldrb	r3, [r7, #5]
 8002d94:	2b01      	cmp	r3, #1
 8002d96:	d112      	bne.n	8002dbe <print_unsigned_decimal+0x7a>
        HAL_UART_Transmit(&huart1,(uint8_t *) &c, (uint16_t) 0x01, HAL_MAX_DELAY);
 8002d98:	f107 010f 	add.w	r1, r7, #15
 8002d9c:	f04f 33ff 	mov.w	r3, #4294967295
 8002da0:	2201      	movs	r2, #1
 8002da2:	4810      	ldr	r0, [pc, #64]	; (8002de4 <print_unsigned_decimal+0xa0>)
 8002da4:	f003 fab9 	bl	800631a <HAL_UART_Transmit>
        c = '\n';  HAL_UART_Transmit(&huart1, (uint8_t *) &c, (uint16_t) 0x01, HAL_MAX_DELAY);
 8002da8:	230a      	movs	r3, #10
 8002daa:	73fb      	strb	r3, [r7, #15]
 8002dac:	f107 010f 	add.w	r1, r7, #15
 8002db0:	f04f 33ff 	mov.w	r3, #4294967295
 8002db4:	2201      	movs	r2, #1
 8002db6:	480b      	ldr	r0, [pc, #44]	; (8002de4 <print_unsigned_decimal+0xa0>)
 8002db8:	f003 faaf 	bl	800631a <HAL_UART_Transmit>
    }
    else if(action == CR) {
        c = '\r';  HAL_UART_Transmit(&huart1,(uint8_t *) &c, (uint16_t) 0x01, HAL_MAX_DELAY);
    }
}
 8002dbc:	e00c      	b.n	8002dd8 <print_unsigned_decimal+0x94>
    else if(action == CR) {
 8002dbe:	797b      	ldrb	r3, [r7, #5]
 8002dc0:	2b02      	cmp	r3, #2
 8002dc2:	d109      	bne.n	8002dd8 <print_unsigned_decimal+0x94>
        c = '\r';  HAL_UART_Transmit(&huart1,(uint8_t *) &c, (uint16_t) 0x01, HAL_MAX_DELAY);
 8002dc4:	230d      	movs	r3, #13
 8002dc6:	73fb      	strb	r3, [r7, #15]
 8002dc8:	f107 010f 	add.w	r1, r7, #15
 8002dcc:	f04f 33ff 	mov.w	r3, #4294967295
 8002dd0:	2201      	movs	r2, #1
 8002dd2:	4804      	ldr	r0, [pc, #16]	; (8002de4 <print_unsigned_decimal+0xa0>)
 8002dd4:	f003 faa1 	bl	800631a <HAL_UART_Transmit>
}
 8002dd8:	bf00      	nop
 8002dda:	3718      	adds	r7, #24
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	bd80      	pop	{r7, pc}
 8002de0:	0800c104 	.word	0x0800c104
 8002de4:	200002d4 	.word	0x200002d4

08002de8 <CursorTopLeft>:
    HAL_UART_Transmit(&huart1,(uint8_t *) &c, (uint16_t) 0x01, HAL_MAX_DELAY);
    print_string("[2K",0);        //Send the rest of the sequence to clear the screen

}

void CursorTopLeft( void ) {
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b082      	sub	sp, #8
 8002dec:	af00      	add	r7, sp, #0
    char c = 0x1B;
 8002dee:	231b      	movs	r3, #27
 8002df0:	71fb      	strb	r3, [r7, #7]
    HAL_UART_Transmit(&huart1,(uint8_t *) &c, (uint16_t) 0x01, HAL_MAX_DELAY);
 8002df2:	1df9      	adds	r1, r7, #7
 8002df4:	f04f 33ff 	mov.w	r3, #4294967295
 8002df8:	2201      	movs	r2, #1
 8002dfa:	4805      	ldr	r0, [pc, #20]	; (8002e10 <CursorTopLeft+0x28>)
 8002dfc:	f003 fa8d 	bl	800631a <HAL_UART_Transmit>
    print_string("[H",0);     //Send the rest of the sequence to clear the screen
 8002e00:	2100      	movs	r1, #0
 8002e02:	4804      	ldr	r0, [pc, #16]	; (8002e14 <CursorTopLeft+0x2c>)
 8002e04:	f7ff ff5c 	bl	8002cc0 <print_string>
}
 8002e08:	bf00      	nop
 8002e0a:	3708      	adds	r7, #8
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	bd80      	pop	{r7, pc}
 8002e10:	200002d4 	.word	0x200002d4
 8002e14:	0800c114 	.word	0x0800c114

08002e18 <ResetTerminal>:

void ResetTerminal( void ) {
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b082      	sub	sp, #8
 8002e1c:	af00      	add	r7, sp, #0
    char c = 0x1B;
 8002e1e:	231b      	movs	r3, #27
 8002e20:	71fb      	strb	r3, [r7, #7]
    HAL_UART_Transmit(&huart1,(uint8_t *) &c, (uint16_t) 0x01, HAL_MAX_DELAY);
 8002e22:	1df9      	adds	r1, r7, #7
 8002e24:	f04f 33ff 	mov.w	r3, #4294967295
 8002e28:	2201      	movs	r2, #1
 8002e2a:	4805      	ldr	r0, [pc, #20]	; (8002e40 <ResetTerminal+0x28>)
 8002e2c:	f003 fa75 	bl	800631a <HAL_UART_Transmit>
    print_string("c",0);      //Send the rest of the sequence to clear the screen
 8002e30:	2100      	movs	r1, #0
 8002e32:	4804      	ldr	r0, [pc, #16]	; (8002e44 <ResetTerminal+0x2c>)
 8002e34:	f7ff ff44 	bl	8002cc0 <print_string>
}
 8002e38:	bf00      	nop
 8002e3a:	3708      	adds	r7, #8
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	bd80      	pop	{r7, pc}
 8002e40:	200002d4 	.word	0x200002d4
 8002e44:	0800c118 	.word	0x0800c118

08002e48 <InsertLineFeed>:

void InsertLineFeed( uint8_t line_feeds ) {
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b084      	sub	sp, #16
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	4603      	mov	r3, r0
 8002e50:	71fb      	strb	r3, [r7, #7]
    uint8_t i = 0;         //Use this as a counter
 8002e52:	2300      	movs	r3, #0
 8002e54:	73fb      	strb	r3, [r7, #15]
    char c = '\r';
 8002e56:	230d      	movs	r3, #13
 8002e58:	73bb      	strb	r3, [r7, #14]
    
    for(i = 0; i < line_feeds; i++){
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	73fb      	strb	r3, [r7, #15]
 8002e5e:	e014      	b.n	8002e8a <InsertLineFeed+0x42>
        HAL_UART_Transmit(&huart1,(uint8_t *) &c, (uint16_t) 0x01, HAL_MAX_DELAY);
 8002e60:	f107 010e 	add.w	r1, r7, #14
 8002e64:	f04f 33ff 	mov.w	r3, #4294967295
 8002e68:	2201      	movs	r2, #1
 8002e6a:	480c      	ldr	r0, [pc, #48]	; (8002e9c <InsertLineFeed+0x54>)
 8002e6c:	f003 fa55 	bl	800631a <HAL_UART_Transmit>
        c = '\n'; 
 8002e70:	230a      	movs	r3, #10
 8002e72:	73bb      	strb	r3, [r7, #14]
        HAL_UART_Transmit(&huart1,(uint8_t *) &c, (uint16_t) 0x01, HAL_MAX_DELAY);
 8002e74:	f107 010e 	add.w	r1, r7, #14
 8002e78:	f04f 33ff 	mov.w	r3, #4294967295
 8002e7c:	2201      	movs	r2, #1
 8002e7e:	4807      	ldr	r0, [pc, #28]	; (8002e9c <InsertLineFeed+0x54>)
 8002e80:	f003 fa4b 	bl	800631a <HAL_UART_Transmit>
    for(i = 0; i < line_feeds; i++){
 8002e84:	7bfb      	ldrb	r3, [r7, #15]
 8002e86:	3301      	adds	r3, #1
 8002e88:	73fb      	strb	r3, [r7, #15]
 8002e8a:	7bfa      	ldrb	r2, [r7, #15]
 8002e8c:	79fb      	ldrb	r3, [r7, #7]
 8002e8e:	429a      	cmp	r2, r3
 8002e90:	d3e6      	bcc.n	8002e60 <InsertLineFeed+0x18>
    }
}
 8002e92:	bf00      	nop
 8002e94:	bf00      	nop
 8002e96:	3710      	adds	r7, #16
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	bd80      	pop	{r7, pc}
 8002e9c:	200002d4 	.word	0x200002d4

08002ea0 <InsertLineSeparator>:

void InsertLineSeparator( void ) {
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	af00      	add	r7, sp, #0
    print_string("---------------------------------------", LF);
 8002ea4:	2101      	movs	r1, #1
 8002ea6:	4802      	ldr	r0, [pc, #8]	; (8002eb0 <InsertLineSeparator+0x10>)
 8002ea8:	f7ff ff0a 	bl	8002cc0 <print_string>
}
 8002eac:	bf00      	nop
 8002eae:	bd80      	pop	{r7, pc}
 8002eb0:	0800c11c 	.word	0x0800c11c

08002eb4 <ResetRxBuffer>:

void ResetRxBuffer( void ) {
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	af00      	add	r7, sp, #0

    uart.consumer_index = uart.producer_index = 0;                              //Reset the pointers
 8002eb8:	4b0a      	ldr	r3, [pc, #40]	; (8002ee4 <ResetRxBuffer+0x30>)
 8002eba:	2200      	movs	r2, #0
 8002ebc:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 8002ec0:	4b08      	ldr	r3, [pc, #32]	; (8002ee4 <ResetRxBuffer+0x30>)
 8002ec2:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8002ec6:	4b07      	ldr	r3, [pc, #28]	; (8002ee4 <ResetRxBuffer+0x30>)
 8002ec8:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
    uart.byte_counter = 0;                                            //Reset the data counter
 8002ecc:	4b05      	ldr	r3, [pc, #20]	; (8002ee4 <ResetRxBuffer+0x30>)
 8002ece:	2200      	movs	r2, #0
 8002ed0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    memset(uart.rxbuf,'\0',MAX_ELEMENTS);                           //Null out the buffer
 8002ed4:	2221      	movs	r2, #33	; 0x21
 8002ed6:	2100      	movs	r1, #0
 8002ed8:	4802      	ldr	r0, [pc, #8]	; (8002ee4 <ResetRxBuffer+0x30>)
 8002eda:	f003 ff33 	bl	8006d44 <memset>
} /* End of ResetRxBuffer */
 8002ede:	bf00      	nop
 8002ee0:	bd80      	pop	{r7, pc}
 8002ee2:	bf00      	nop
 8002ee4:	20000220 	.word	0x20000220

08002ee8 <HandleByte>:

void HandleByte( void ) {     
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	af00      	add	r7, sp, #0

    switch(uart.msg_state) {
 8002eec:	4b65      	ldr	r3, [pc, #404]	; (8003084 <HandleByte+0x19c>)
 8002eee:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8002ef2:	3b01      	subs	r3, #1
 8002ef4:	2b03      	cmp	r3, #3
 8002ef6:	f200 80c3 	bhi.w	8003080 <HandleByte+0x198>
 8002efa:	a201      	add	r2, pc, #4	; (adr r2, 8002f00 <HandleByte+0x18>)
 8002efc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f00:	08002f11 	.word	0x08002f11
 8002f04:	08002f67 	.word	0x08002f67
 8002f08:	08002fa5 	.word	0x08002fa5
 8002f0c:	08002fd9 	.word	0x08002fd9
        case(STATESTART):                                   //Have yet to receive a valid SOF
            uart.len_verify = 0;                            //Good place to reset the length verify counter
 8002f10:	4b5c      	ldr	r3, [pc, #368]	; (8003084 <HandleByte+0x19c>)
 8002f12:	2200      	movs	r2, #0
 8002f14:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
            if(uart.rxbuf[uart.consumer_index] == RXSOF) {
 8002f18:	4b5a      	ldr	r3, [pc, #360]	; (8003084 <HandleByte+0x19c>)
 8002f1a:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8002f1e:	461a      	mov	r2, r3
 8002f20:	4b58      	ldr	r3, [pc, #352]	; (8003084 <HandleByte+0x19c>)
 8002f22:	5c9b      	ldrb	r3, [r3, r2]
 8002f24:	2bfc      	cmp	r3, #252	; 0xfc
 8002f26:	d106      	bne.n	8002f36 <HandleByte+0x4e>
                uart.msg_state = SOFRXED;                   //Advance state if we receive SOF
 8002f28:	4b56      	ldr	r3, [pc, #344]	; (8003084 <HandleByte+0x19c>)
 8002f2a:	2202      	movs	r2, #2
 8002f2c:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
                IncrementConsumer();
 8002f30:	f000 f9f4 	bl	800331c <IncrementConsumer>
                uart.inmenu = false;                     //Clear this now that the sensors have been calibrated
            }
            else {
                IncrementConsumer();                        //Not a valid byte, keep looking
            }
        break;
 8002f34:	e0a4      	b.n	8003080 <HandleByte+0x198>
            else if(uart.rxbuf[uart.consumer_index] == 'z') {     //User wishes to run calibration routine
 8002f36:	4b53      	ldr	r3, [pc, #332]	; (8003084 <HandleByte+0x19c>)
 8002f38:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8002f3c:	461a      	mov	r2, r3
 8002f3e:	4b51      	ldr	r3, [pc, #324]	; (8003084 <HandleByte+0x19c>)
 8002f40:	5c9b      	ldrb	r3, [r3, r2]
 8002f42:	2b7a      	cmp	r3, #122	; 0x7a
 8002f44:	d10c      	bne.n	8002f60 <HandleByte+0x78>
                uart.inmenu = true;                      //Set this flag so that we don't mess up the rxbuffer
 8002f46:	4b4f      	ldr	r3, [pc, #316]	; (8003084 <HandleByte+0x19c>)
 8002f48:	2201      	movs	r2, #1
 8002f4a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
                ResetRxBuffer();                            //Reset this because messaging handling didn't occur while calibrating
 8002f4e:	f7ff ffb1 	bl	8002eb4 <ResetRxBuffer>
                MainMenu();                         //Run the calibration routine
 8002f52:	f7fe fb93 	bl	800167c <MainMenu>
                uart.inmenu = false;                     //Clear this now that the sensors have been calibrated
 8002f56:	4b4b      	ldr	r3, [pc, #300]	; (8003084 <HandleByte+0x19c>)
 8002f58:	2200      	movs	r2, #0
 8002f5a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
        break;
 8002f5e:	e08f      	b.n	8003080 <HandleByte+0x198>
                IncrementConsumer();                        //Not a valid byte, keep looking
 8002f60:	f000 f9dc 	bl	800331c <IncrementConsumer>
        break;
 8002f64:	e08c      	b.n	8003080 <HandleByte+0x198>

        case(SOFRXED):                                   //Now we should be looking at the ID value
            uart.msg_id = uart.rxbuf[uart.consumer_index];
 8002f66:	4b47      	ldr	r3, [pc, #284]	; (8003084 <HandleByte+0x19c>)
 8002f68:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8002f6c:	461a      	mov	r2, r3
 8002f6e:	4b45      	ldr	r3, [pc, #276]	; (8003084 <HandleByte+0x19c>)
 8002f70:	5c9a      	ldrb	r2, [r3, r2]
 8002f72:	4b44      	ldr	r3, [pc, #272]	; (8003084 <HandleByte+0x19c>)
 8002f74:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
            IncrementConsumer(); 
 8002f78:	f000 f9d0 	bl	800331c <IncrementConsumer>
            /* Check that a valid ID byte was received */         
            if(uart.msg_id > 0x00 && uart.msg_id <= 0x06) {
 8002f7c:	4b41      	ldr	r3, [pc, #260]	; (8003084 <HandleByte+0x19c>)
 8002f7e:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d009      	beq.n	8002f9a <HandleByte+0xb2>
 8002f86:	4b3f      	ldr	r3, [pc, #252]	; (8003084 <HandleByte+0x19c>)
 8002f88:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8002f8c:	2b06      	cmp	r3, #6
 8002f8e:	d804      	bhi.n	8002f9a <HandleByte+0xb2>
                uart.msg_state = IDRXED;                        //We have received a valid message ID
 8002f90:	4b3c      	ldr	r3, [pc, #240]	; (8003084 <HandleByte+0x19c>)
 8002f92:	2203      	movs	r2, #3
 8002f94:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
            }
            else{
                uart.msg_state = STATESTART;                    //Garbage, so start looking for SOF
            }
        break;
 8002f98:	e072      	b.n	8003080 <HandleByte+0x198>
                uart.msg_state = STATESTART;                    //Garbage, so start looking for SOF
 8002f9a:	4b3a      	ldr	r3, [pc, #232]	; (8003084 <HandleByte+0x19c>)
 8002f9c:	2201      	movs	r2, #1
 8002f9e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
        break;
 8002fa2:	e06d      	b.n	8003080 <HandleByte+0x198>

        case(IDRXED):                                    //Now we should be looking at the length value
            uart.msg_len = uart.rxbuf[uart.consumer_index];
 8002fa4:	4b37      	ldr	r3, [pc, #220]	; (8003084 <HandleByte+0x19c>)
 8002fa6:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8002faa:	461a      	mov	r2, r3
 8002fac:	4b35      	ldr	r3, [pc, #212]	; (8003084 <HandleByte+0x19c>)
 8002fae:	5c9a      	ldrb	r2, [r3, r2]
 8002fb0:	4b34      	ldr	r3, [pc, #208]	; (8003084 <HandleByte+0x19c>)
 8002fb2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
            IncrementConsumer();
 8002fb6:	f000 f9b1 	bl	800331c <IncrementConsumer>
            if(uart.msg_len <= 0x05) {                  //Put some restriction on this so we know data is valid
 8002fba:	4b32      	ldr	r3, [pc, #200]	; (8003084 <HandleByte+0x19c>)
 8002fbc:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8002fc0:	2b05      	cmp	r3, #5
 8002fc2:	d804      	bhi.n	8002fce <HandleByte+0xe6>
                uart.msg_state = LENRXED;                        //We have received a valid message ID
 8002fc4:	4b2f      	ldr	r3, [pc, #188]	; (8003084 <HandleByte+0x19c>)
 8002fc6:	2204      	movs	r2, #4
 8002fc8:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
            }
            else {
                uart.msg_state = STATESTART;                //Garbage, so start looking for SOF.
            }
        break;
 8002fcc:	e058      	b.n	8003080 <HandleByte+0x198>
                uart.msg_state = STATESTART;                //Garbage, so start looking for SOF.
 8002fce:	4b2d      	ldr	r3, [pc, #180]	; (8003084 <HandleByte+0x19c>)
 8002fd0:	2201      	movs	r2, #1
 8002fd2:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
        break;
 8002fd6:	e053      	b.n	8003080 <HandleByte+0x198>

        case(LENRXED):                                       //Now we can collect the data
            if((uart.rxbuf[uart.consumer_index] != FRAMEEND) && uart.len_verify == 0) {          //Still collecting data
 8002fd8:	4b2a      	ldr	r3, [pc, #168]	; (8003084 <HandleByte+0x19c>)
 8002fda:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8002fde:	461a      	mov	r2, r3
 8002fe0:	4b28      	ldr	r3, [pc, #160]	; (8003084 <HandleByte+0x19c>)
 8002fe2:	5c9b      	ldrb	r3, [r3, r2]
 8002fe4:	2bf6      	cmp	r3, #246	; 0xf6
 8002fe6:	d00b      	beq.n	8003000 <HandleByte+0x118>
 8002fe8:	4b26      	ldr	r3, [pc, #152]	; (8003084 <HandleByte+0x19c>)
 8002fea:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d106      	bne.n	8003000 <HandleByte+0x118>
                uart.data_index = uart.consumer_index;            //Define where data starts in queue
 8002ff2:	4b24      	ldr	r3, [pc, #144]	; (8003084 <HandleByte+0x19c>)
 8002ff4:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 8002ff8:	4b22      	ldr	r3, [pc, #136]	; (8003084 <HandleByte+0x19c>)
 8002ffa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002ffe:	e034      	b.n	800306a <HandleByte+0x182>
            }
            
            else if((uart.rxbuf[uart.consumer_index] == FRAMEEND) && (uart.len_verify == uart.msg_len)){   //We have reached the EOF framing byte
 8003000:	4b20      	ldr	r3, [pc, #128]	; (8003084 <HandleByte+0x19c>)
 8003002:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8003006:	461a      	mov	r2, r3
 8003008:	4b1e      	ldr	r3, [pc, #120]	; (8003084 <HandleByte+0x19c>)
 800300a:	5c9b      	ldrb	r3, [r3, r2]
 800300c:	2bf6      	cmp	r3, #246	; 0xf6
 800300e:	d118      	bne.n	8003042 <HandleByte+0x15a>
 8003010:	4b1c      	ldr	r3, [pc, #112]	; (8003084 <HandleByte+0x19c>)
 8003012:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 8003016:	4b1b      	ldr	r3, [pc, #108]	; (8003084 <HandleByte+0x19c>)
 8003018:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800301c:	429a      	cmp	r2, r3
 800301e:	d110      	bne.n	8003042 <HandleByte+0x15a>
                uart.data_end = uart.consumer_index-1;              //Define where data ends in queue
 8003020:	4b18      	ldr	r3, [pc, #96]	; (8003084 <HandleByte+0x19c>)
 8003022:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8003026:	3b01      	subs	r3, #1
 8003028:	b2da      	uxtb	r2, r3
 800302a:	4b16      	ldr	r3, [pc, #88]	; (8003084 <HandleByte+0x19c>)
 800302c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
                uart.msg_state = STATESTART;                //Begin looking for SOF
 8003030:	4b14      	ldr	r3, [pc, #80]	; (8003084 <HandleByte+0x19c>)
 8003032:	2201      	movs	r2, #1
 8003034:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
                uart.validmsg = true;                       //Valid message confirmed
 8003038:	4b12      	ldr	r3, [pc, #72]	; (8003084 <HandleByte+0x19c>)
 800303a:	2201      	movs	r2, #1
 800303c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8003040:	e013      	b.n	800306a <HandleByte+0x182>
            }
            else if((uart.rxbuf[uart.consumer_index] != FRAMEEND) && (uart.len_verify >= uart.msg_len)) {
 8003042:	4b10      	ldr	r3, [pc, #64]	; (8003084 <HandleByte+0x19c>)
 8003044:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8003048:	461a      	mov	r2, r3
 800304a:	4b0e      	ldr	r3, [pc, #56]	; (8003084 <HandleByte+0x19c>)
 800304c:	5c9b      	ldrb	r3, [r3, r2]
 800304e:	2bf6      	cmp	r3, #246	; 0xf6
 8003050:	d00b      	beq.n	800306a <HandleByte+0x182>
 8003052:	4b0c      	ldr	r3, [pc, #48]	; (8003084 <HandleByte+0x19c>)
 8003054:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 8003058:	4b0a      	ldr	r3, [pc, #40]	; (8003084 <HandleByte+0x19c>)
 800305a:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800305e:	429a      	cmp	r2, r3
 8003060:	d303      	bcc.n	800306a <HandleByte+0x182>
                uart.msg_state = STATESTART;
 8003062:	4b08      	ldr	r3, [pc, #32]	; (8003084 <HandleByte+0x19c>)
 8003064:	2201      	movs	r2, #1
 8003066:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
            }

            uart.len_verify++;                           //Used to validate the length byte received
 800306a:	4b06      	ldr	r3, [pc, #24]	; (8003084 <HandleByte+0x19c>)
 800306c:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003070:	3301      	adds	r3, #1
 8003072:	b2da      	uxtb	r2, r3
 8003074:	4b03      	ldr	r3, [pc, #12]	; (8003084 <HandleByte+0x19c>)
 8003076:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
            IncrementConsumer();                        //Move pointer
 800307a:	f000 f94f 	bl	800331c <IncrementConsumer>
        break;
 800307e:	bf00      	nop
    }
} /* End of HandleByte */
 8003080:	bf00      	nop
 8003082:	bd80      	pop	{r7, pc}
 8003084:	20000220 	.word	0x20000220

08003088 <ProcessMessage>:

void ProcessMessage( void ) {
 8003088:	b590      	push	{r4, r7, lr}
 800308a:	b08d      	sub	sp, #52	; 0x34
 800308c:	af00      	add	r7, sp, #0
    uint8_t     temp_length_u8      = 0;
 800308e:	2300      	movs	r3, #0
 8003090:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    uint8_t     i                   = 0;
 8003094:	2300      	movs	r3, #0
 8003096:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    uint8_t     array_size_u8       = 0;
 800309a:	2300      	movs	r3, #0
 800309c:	77fb      	strb	r3, [r7, #31]
    uint8_t     fuse_number_u8      = 0;
 800309e:	2300      	movs	r3, #0
 80030a0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    uint16_t    dac_data_value_u16  = 0x0000;
 80030a4:	2300      	movs	r3, #0
 80030a6:	853b      	strh	r3, [r7, #40]	; 0x28
    uint16_t    fuse_status_u16     = 0x0000;
 80030a8:	2300      	movs	r3, #0
 80030aa:	84fb      	strh	r3, [r7, #38]	; 0x26
    uint16_t    tmp_fus_cur_u16    = 0x0000;
 80030ac:	2300      	movs	r3, #0
 80030ae:	857b      	strh	r3, [r7, #42]	; 0x2a
    float       temp_float          = 0.0;
 80030b0:	f04f 0300 	mov.w	r3, #0
 80030b4:	623b      	str	r3, [r7, #32]
    char        txmessage[MAX_TX_ELEMENTS];                      // Used for sending info to the PTE PC
    char        bcd_array[5];

    uart.errorflag = false;                         // Make sure this is reset
 80030b6:	4b8d      	ldr	r3, [pc, #564]	; (80032ec <ProcessMessage+0x264>)
 80030b8:	2200      	movs	r2, #0
 80030ba:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
    temp_length_u8 = uart.msg_len;                      // Represents number of bytes in data field only
 80030be:	4b8b      	ldr	r3, [pc, #556]	; (80032ec <ProcessMessage+0x264>)
 80030c0:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 80030c4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    switch(uart.msg_id){
 80030c8:	4b88      	ldr	r3, [pc, #544]	; (80032ec <ProcessMessage+0x264>)
 80030ca:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80030ce:	3b01      	subs	r3, #1
 80030d0:	2b03      	cmp	r3, #3
 80030d2:	f200 8101 	bhi.w	80032d8 <ProcessMessage+0x250>
 80030d6:	a201      	add	r2, pc, #4	; (adr r2, 80030dc <ProcessMessage+0x54>)
 80030d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030dc:	080030ed 	.word	0x080030ed
 80030e0:	08003161 	.word	0x08003161
 80030e4:	080031df 	.word	0x080031df
 80030e8:	08003253 	.word	0x08003253
        case(ID_FUSESTATUS):
            fuse_status_u16 = get_status_all_fuses(&fus);
 80030ec:	4880      	ldr	r0, [pc, #512]	; (80032f0 <ProcessMessage+0x268>)
 80030ee:	f7ff f82d 	bl	800214c <get_status_all_fuses>
 80030f2:	4603      	mov	r3, r0
 80030f4:	84fb      	strh	r3, [r7, #38]	; 0x26

            memset(txmessage,0xFF,MAX_TX_ELEMENTS);                             //"Null" out the array -- 0xFF is forbidden
 80030f6:	f107 030c 	add.w	r3, r7, #12
 80030fa:	2210      	movs	r2, #16
 80030fc:	21ff      	movs	r1, #255	; 0xff
 80030fe:	4618      	mov	r0, r3
 8003100:	f003 fe20 	bl	8006d44 <memset>
			txmessage[0]= TXSOF;
 8003104:	23f2      	movs	r3, #242	; 0xf2
 8003106:	733b      	strb	r3, [r7, #12]
			txmessage[1]= uart.msg_id;
 8003108:	4b78      	ldr	r3, [pc, #480]	; (80032ec <ProcessMessage+0x264>)
 800310a:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 800310e:	737b      	strb	r3, [r7, #13]
			txmessage[2]= 0x04;                                                 // Length of the message in bytes (not including EOF)
 8003110:	2304      	movs	r3, #4
 8003112:	73bb      	strb	r3, [r7, #14]
			txmessage[3]= (uint8_t)((fuse_status_u16 >> 12) & 0x0F);          
 8003114:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003116:	0b1b      	lsrs	r3, r3, #12
 8003118:	b29b      	uxth	r3, r3
 800311a:	b2db      	uxtb	r3, r3
 800311c:	f003 030f 	and.w	r3, r3, #15
 8003120:	b2db      	uxtb	r3, r3
 8003122:	73fb      	strb	r3, [r7, #15]
			txmessage[4]= (uint8_t)((fuse_status_u16 >> 8) & 0x0F);
 8003124:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003126:	0a1b      	lsrs	r3, r3, #8
 8003128:	b29b      	uxth	r3, r3
 800312a:	b2db      	uxtb	r3, r3
 800312c:	f003 030f 	and.w	r3, r3, #15
 8003130:	b2db      	uxtb	r3, r3
 8003132:	743b      	strb	r3, [r7, #16]
			txmessage[5]= (uint8_t)((fuse_status_u16 >> 4) & 0x0F);
 8003134:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003136:	091b      	lsrs	r3, r3, #4
 8003138:	b29b      	uxth	r3, r3
 800313a:	b2db      	uxtb	r3, r3
 800313c:	f003 030f 	and.w	r3, r3, #15
 8003140:	b2db      	uxtb	r3, r3
 8003142:	747b      	strb	r3, [r7, #17]
			txmessage[6]= (uint8_t)(fuse_status_u16 & 0x0F);
 8003144:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003146:	b2db      	uxtb	r3, r3
 8003148:	f003 030f 	and.w	r3, r3, #15
 800314c:	b2db      	uxtb	r3, r3
 800314e:	74bb      	strb	r3, [r7, #18]
			txmessage[7]= FRAMEEND;
 8003150:	23f6      	movs	r3, #246	; 0xf6
 8003152:	74fb      	strb	r3, [r7, #19]
			xbee_tx(txmessage);
 8003154:	f107 030c 	add.w	r3, r7, #12
 8003158:	4618      	mov	r0, r3
 800315a:	f000 f90b 	bl	8003374 <xbee_tx>
        
        break;
 800315e:	e0c0      	b.n	80032e2 <ProcessMessage+0x25a>

        case(ID_IGNITE_FUSE):
            xbee_send_ack();
 8003160:	f000 f8cc 	bl	80032fc <xbee_send_ack>

            /**
             * From the message 
             * determine which fuse shall be lit 
             */
			fuse_number_u8 = 0;
 8003164:	2300      	movs	r3, #0
 8003166:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
            while(temp_length_u8 > 0){
 800316a:	e02c      	b.n	80031c6 <ProcessMessage+0x13e>
                fuse_number_u8 = (uart.rxbuf[uart.data_index] * Pow10LU(temp_length_u8-1)) + fuse_number_u8;        
 800316c:	4b5f      	ldr	r3, [pc, #380]	; (80032ec <ProcessMessage+0x264>)
 800316e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003172:	461a      	mov	r2, r3
 8003174:	4b5d      	ldr	r3, [pc, #372]	; (80032ec <ProcessMessage+0x264>)
 8003176:	5c9c      	ldrb	r4, [r3, r2]
 8003178:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800317c:	3b01      	subs	r3, #1
 800317e:	b2db      	uxtb	r3, r3
 8003180:	4618      	mov	r0, r3
 8003182:	f000 f917 	bl	80033b4 <Pow10LU>
 8003186:	4603      	mov	r3, r0
 8003188:	fb03 f304 	mul.w	r3, r3, r4
 800318c:	b2da      	uxtb	r2, r3
 800318e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003192:	4413      	add	r3, r2
 8003194:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
                (uart.data_index >= MAX_RX_BUF_INDEX) ? (uart.data_index = 0):(uart.data_index++);                        
 8003198:	4b54      	ldr	r3, [pc, #336]	; (80032ec <ProcessMessage+0x264>)
 800319a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800319e:	2b1f      	cmp	r3, #31
 80031a0:	d904      	bls.n	80031ac <ProcessMessage+0x124>
 80031a2:	4b52      	ldr	r3, [pc, #328]	; (80032ec <ProcessMessage+0x264>)
 80031a4:	2200      	movs	r2, #0
 80031a6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80031aa:	e007      	b.n	80031bc <ProcessMessage+0x134>
 80031ac:	4b4f      	ldr	r3, [pc, #316]	; (80032ec <ProcessMessage+0x264>)
 80031ae:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80031b2:	3301      	adds	r3, #1
 80031b4:	b2da      	uxtb	r2, r3
 80031b6:	4b4d      	ldr	r3, [pc, #308]	; (80032ec <ProcessMessage+0x264>)
 80031b8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
                temp_length_u8--;
 80031bc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80031c0:	3b01      	subs	r3, #1
 80031c2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            while(temp_length_u8 > 0){
 80031c6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d1ce      	bne.n	800316c <ProcessMessage+0xe4>
            }
            
            ignite_fuse (&tim, &fus, fuse_number_u8);
 80031ce:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80031d2:	461a      	mov	r2, r3
 80031d4:	4946      	ldr	r1, [pc, #280]	; (80032f0 <ProcessMessage+0x268>)
 80031d6:	4847      	ldr	r0, [pc, #284]	; (80032f4 <ProcessMessage+0x26c>)
 80031d8:	f7fe ff72 	bl	80020c0 <ignite_fuse>
        break;
 80031dc:	e081      	b.n	80032e2 <ProcessMessage+0x25a>

        /**
         * Set the fuse current
         */
        case(ID_SET_FUSE_CURRENT):
            xbee_send_ack();
 80031de:	f000 f88d 	bl	80032fc <xbee_send_ack>
            /**
             * From the message 
             * determine what the fuse
             * current shall be set to 
             */
			tmp_fus_cur_u16 = 0;
 80031e2:	2300      	movs	r3, #0
 80031e4:	857b      	strh	r3, [r7, #42]	; 0x2a
            while(temp_length_u8 > 0){
 80031e6:	e02c      	b.n	8003242 <ProcessMessage+0x1ba>
                tmp_fus_cur_u16 = (uart.rxbuf[uart.data_index] * Pow10LU(temp_length_u8-1)) + tmp_fus_cur_u16;        
 80031e8:	4b40      	ldr	r3, [pc, #256]	; (80032ec <ProcessMessage+0x264>)
 80031ea:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80031ee:	461a      	mov	r2, r3
 80031f0:	4b3e      	ldr	r3, [pc, #248]	; (80032ec <ProcessMessage+0x264>)
 80031f2:	5c9b      	ldrb	r3, [r3, r2]
 80031f4:	b29c      	uxth	r4, r3
 80031f6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80031fa:	3b01      	subs	r3, #1
 80031fc:	b2db      	uxtb	r3, r3
 80031fe:	4618      	mov	r0, r3
 8003200:	f000 f8d8 	bl	80033b4 <Pow10LU>
 8003204:	4603      	mov	r3, r0
 8003206:	b29b      	uxth	r3, r3
 8003208:	fb03 f304 	mul.w	r3, r3, r4
 800320c:	b29a      	uxth	r2, r3
 800320e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003210:	4413      	add	r3, r2
 8003212:	857b      	strh	r3, [r7, #42]	; 0x2a
                (uart.data_index >= MAX_RX_BUF_INDEX) ? (uart.data_index = 0):(uart.data_index++);                        
 8003214:	4b35      	ldr	r3, [pc, #212]	; (80032ec <ProcessMessage+0x264>)
 8003216:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800321a:	2b1f      	cmp	r3, #31
 800321c:	d904      	bls.n	8003228 <ProcessMessage+0x1a0>
 800321e:	4b33      	ldr	r3, [pc, #204]	; (80032ec <ProcessMessage+0x264>)
 8003220:	2200      	movs	r2, #0
 8003222:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003226:	e007      	b.n	8003238 <ProcessMessage+0x1b0>
 8003228:	4b30      	ldr	r3, [pc, #192]	; (80032ec <ProcessMessage+0x264>)
 800322a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800322e:	3301      	adds	r3, #1
 8003230:	b2da      	uxtb	r2, r3
 8003232:	4b2e      	ldr	r3, [pc, #184]	; (80032ec <ProcessMessage+0x264>)
 8003234:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
                temp_length_u8--;
 8003238:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800323c:	3b01      	subs	r3, #1
 800323e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            while(temp_length_u8 > 0){
 8003242:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003246:	2b00      	cmp	r3, #0
 8003248:	d1ce      	bne.n	80031e8 <ProcessMessage+0x160>
            }
            fus.fuse_current_u16 = tmp_fus_cur_u16;
 800324a:	4a29      	ldr	r2, [pc, #164]	; (80032f0 <ProcessMessage+0x268>)
 800324c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800324e:	8013      	strh	r3, [r2, #0]
        break;
 8003250:	e047      	b.n	80032e2 <ProcessMessage+0x25a>
        /**
         * Report current fuse current 
         * setting
         */
        case(ID_GET_FUSE_CURRENT):
            memset(txmessage,0xFF,MAX_TX_ELEMENTS);
 8003252:	f107 030c 	add.w	r3, r7, #12
 8003256:	2210      	movs	r2, #16
 8003258:	21ff      	movs	r1, #255	; 0xff
 800325a:	4618      	mov	r0, r3
 800325c:	f003 fd72 	bl	8006d44 <memset>
            txmessage[0]= TXSOF;
 8003260:	23f2      	movs	r3, #242	; 0xf2
 8003262:	733b      	strb	r3, [r7, #12]
            txmessage[1]= uart.msg_id;
 8003264:	4b21      	ldr	r3, [pc, #132]	; (80032ec <ProcessMessage+0x264>)
 8003266:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 800326a:	737b      	strb	r3, [r7, #13]
            dec_to_bcd(fus.fuse_current_u16, bcd_array, &array_size_u8);            //Convert speed value to BCD
 800326c:	4b20      	ldr	r3, [pc, #128]	; (80032f0 <ProcessMessage+0x268>)
 800326e:	881b      	ldrh	r3, [r3, #0]
 8003270:	4618      	mov	r0, r3
 8003272:	f107 021f 	add.w	r2, r7, #31
 8003276:	1d3b      	adds	r3, r7, #4
 8003278:	4619      	mov	r1, r3
 800327a:	f000 f8bb 	bl	80033f4 <dec_to_bcd>
            txmessage[2]= array_size_u8;
 800327e:	7ffb      	ldrb	r3, [r7, #31]
 8003280:	73bb      	strb	r3, [r7, #14]
            for(i=0;i<array_size_u8;i++){
 8003282:	2300      	movs	r3, #0
 8003284:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8003288:	e013      	b.n	80032b2 <ProcessMessage+0x22a>
                txmessage[3+i] = bcd_array[i];
 800328a:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800328e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8003292:	3303      	adds	r3, #3
 8003294:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8003298:	440a      	add	r2, r1
 800329a:	f812 2c2c 	ldrb.w	r2, [r2, #-44]
 800329e:	f107 0130 	add.w	r1, r7, #48	; 0x30
 80032a2:	440b      	add	r3, r1
 80032a4:	f803 2c24 	strb.w	r2, [r3, #-36]
            for(i=0;i<array_size_u8;i++){
 80032a8:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80032ac:	3301      	adds	r3, #1
 80032ae:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 80032b2:	7ffb      	ldrb	r3, [r7, #31]
 80032b4:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 80032b8:	429a      	cmp	r2, r3
 80032ba:	d3e6      	bcc.n	800328a <ProcessMessage+0x202>
            }
            txmessage[3 + array_size_u8] = FRAMEEND;
 80032bc:	7ffb      	ldrb	r3, [r7, #31]
 80032be:	3303      	adds	r3, #3
 80032c0:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80032c4:	4413      	add	r3, r2
 80032c6:	22f6      	movs	r2, #246	; 0xf6
 80032c8:	f803 2c24 	strb.w	r2, [r3, #-36]
            xbee_tx(txmessage);
 80032cc:	f107 030c 	add.w	r3, r7, #12
 80032d0:	4618      	mov	r0, r3
 80032d2:	f000 f84f 	bl	8003374 <xbee_tx>
        
        break;
 80032d6:	e004      	b.n	80032e2 <ProcessMessage+0x25a>


        default:
            print_string("Process Message Error.",LF);
 80032d8:	2101      	movs	r1, #1
 80032da:	4807      	ldr	r0, [pc, #28]	; (80032f8 <ProcessMessage+0x270>)
 80032dc:	f7ff fcf0 	bl	8002cc0 <print_string>
    
    }

}
 80032e0:	bf00      	nop
 80032e2:	bf00      	nop
 80032e4:	3734      	adds	r7, #52	; 0x34
 80032e6:	46bd      	mov	sp, r7
 80032e8:	bd90      	pop	{r4, r7, pc}
 80032ea:	bf00      	nop
 80032ec:	20000220 	.word	0x20000220
 80032f0:	2000021c 	.word	0x2000021c
 80032f4:	20000208 	.word	0x20000208
 80032f8:	0800c144 	.word	0x0800c144

080032fc <xbee_send_ack>:

void xbee_send_ack( void ){
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b082      	sub	sp, #8
 8003300:	af00      	add	r7, sp, #0
    const char ACK[4] = {0xF2,0x00,0xF6,0xFF};     //0xFF is a terminator, and thus is not transmitted
 8003302:	4b05      	ldr	r3, [pc, #20]	; (8003318 <xbee_send_ack+0x1c>)
 8003304:	607b      	str	r3, [r7, #4]
    xbee_tx(ACK);                                 
 8003306:	1d3b      	adds	r3, r7, #4
 8003308:	4618      	mov	r0, r3
 800330a:	f000 f833 	bl	8003374 <xbee_tx>
} /* End of xbee_send_ack */
 800330e:	bf00      	nop
 8003310:	3708      	adds	r7, #8
 8003312:	46bd      	mov	sp, r7
 8003314:	bd80      	pop	{r7, pc}
 8003316:	bf00      	nop
 8003318:	fff600f2 	.word	0xfff600f2

0800331c <IncrementConsumer>:

void IncrementConsumer( void ) {
 800331c:	b480      	push	{r7}
 800331e:	af00      	add	r7, sp, #0
    uart.consumer_index >= MAX_RX_BUF_INDEX ? (uart.consumer_index = 0):(uart.consumer_index++);                        // Either roll over or increment the "consumer" pointer
 8003320:	4b13      	ldr	r3, [pc, #76]	; (8003370 <IncrementConsumer+0x54>)
 8003322:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8003326:	2b1f      	cmp	r3, #31
 8003328:	d904      	bls.n	8003334 <IncrementConsumer+0x18>
 800332a:	4b11      	ldr	r3, [pc, #68]	; (8003370 <IncrementConsumer+0x54>)
 800332c:	2200      	movs	r2, #0
 800332e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
 8003332:	e007      	b.n	8003344 <IncrementConsumer+0x28>
 8003334:	4b0e      	ldr	r3, [pc, #56]	; (8003370 <IncrementConsumer+0x54>)
 8003336:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800333a:	3301      	adds	r3, #1
 800333c:	b2da      	uxtb	r2, r3
 800333e:	4b0c      	ldr	r3, [pc, #48]	; (8003370 <IncrementConsumer+0x54>)
 8003340:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
    (uart.byte_counter <= 1) ? (uart.byte_counter = 0):(uart.byte_counter--);                                           //Decrement data counter
 8003344:	4b0a      	ldr	r3, [pc, #40]	; (8003370 <IncrementConsumer+0x54>)
 8003346:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800334a:	2b01      	cmp	r3, #1
 800334c:	d804      	bhi.n	8003358 <IncrementConsumer+0x3c>
 800334e:	4b08      	ldr	r3, [pc, #32]	; (8003370 <IncrementConsumer+0x54>)
 8003350:	2200      	movs	r2, #0
 8003352:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
} /* End of IncrementConsumer */
 8003356:	e007      	b.n	8003368 <IncrementConsumer+0x4c>
    (uart.byte_counter <= 1) ? (uart.byte_counter = 0):(uart.byte_counter--);                                           //Decrement data counter
 8003358:	4b05      	ldr	r3, [pc, #20]	; (8003370 <IncrementConsumer+0x54>)
 800335a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800335e:	3b01      	subs	r3, #1
 8003360:	b2da      	uxtb	r2, r3
 8003362:	4b03      	ldr	r3, [pc, #12]	; (8003370 <IncrementConsumer+0x54>)
 8003364:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
} /* End of IncrementConsumer */
 8003368:	bf00      	nop
 800336a:	46bd      	mov	sp, r7
 800336c:	bc80      	pop	{r7}
 800336e:	4770      	bx	lr
 8003370:	20000220 	.word	0x20000220

08003374 <xbee_tx>:

void xbee_tx(const char *y){
 8003374:	b580      	push	{r7, lr}
 8003376:	b084      	sub	sp, #16
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
    char c = '\0';
 800337c:	2300      	movs	r3, #0
 800337e:	73fb      	strb	r3, [r7, #15]
    
    while(*y != 0xFF)
 8003380:	e00d      	b.n	800339e <xbee_tx+0x2a>
    {
        c = *y;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	781b      	ldrb	r3, [r3, #0]
 8003386:	73fb      	strb	r3, [r7, #15]
        HAL_UART_Transmit(&huart2, (uint8_t *) &c, (uint16_t) 0x01, HAL_MAX_DELAY);  
 8003388:	f107 010f 	add.w	r1, r7, #15
 800338c:	f04f 33ff 	mov.w	r3, #4294967295
 8003390:	2201      	movs	r2, #1
 8003392:	4807      	ldr	r0, [pc, #28]	; (80033b0 <xbee_tx+0x3c>)
 8003394:	f002 ffc1 	bl	800631a <HAL_UART_Transmit>
        y++;                           //Increment the pointer memory address
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	3301      	adds	r3, #1
 800339c:	607b      	str	r3, [r7, #4]
    while(*y != 0xFF)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	781b      	ldrb	r3, [r3, #0]
 80033a2:	2bff      	cmp	r3, #255	; 0xff
 80033a4:	d1ed      	bne.n	8003382 <xbee_tx+0xe>
    }
} /* End of xbee_tx */
 80033a6:	bf00      	nop
 80033a8:	bf00      	nop
 80033aa:	3710      	adds	r7, #16
 80033ac:	46bd      	mov	sp, r7
 80033ae:	bd80      	pop	{r7, pc}
 80033b0:	200003cc 	.word	0x200003cc

080033b4 <Pow10LU>:

uint8_t Pow10LU(uint8_t power){
 80033b4:	b480      	push	{r7}
 80033b6:	b085      	sub	sp, #20
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	4603      	mov	r3, r0
 80033bc:	71fb      	strb	r3, [r7, #7]
    uint8_t rtnval;               //Created to fix a compiler warning
    if(power > 2){
 80033be:	79fb      	ldrb	r3, [r7, #7]
 80033c0:	2b02      	cmp	r3, #2
 80033c2:	d905      	bls.n	80033d0 <Pow10LU+0x1c>
        uart.errorflag = true;
 80033c4:	4b09      	ldr	r3, [pc, #36]	; (80033ec <Pow10LU+0x38>)
 80033c6:	2201      	movs	r2, #1
 80033c8:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
    }
    else {
        const uint8_t Lookup[4] = {1,10,100,1000};
        return (Lookup[power]);
    }
    return(1);      //Return 1 to prevent compiler warning
 80033cc:	2301      	movs	r3, #1
 80033ce:	e007      	b.n	80033e0 <Pow10LU+0x2c>
        const uint8_t Lookup[4] = {1,10,100,1000};
 80033d0:	4b07      	ldr	r3, [pc, #28]	; (80033f0 <Pow10LU+0x3c>)
 80033d2:	60fb      	str	r3, [r7, #12]
        return (Lookup[power]);
 80033d4:	79fb      	ldrb	r3, [r7, #7]
 80033d6:	f107 0210 	add.w	r2, r7, #16
 80033da:	4413      	add	r3, r2
 80033dc:	f813 3c04 	ldrb.w	r3, [r3, #-4]
}
 80033e0:	4618      	mov	r0, r3
 80033e2:	3714      	adds	r7, #20
 80033e4:	46bd      	mov	sp, r7
 80033e6:	bc80      	pop	{r7}
 80033e8:	4770      	bx	lr
 80033ea:	bf00      	nop
 80033ec:	20000220 	.word	0x20000220
 80033f0:	e8640a01 	.word	0xe8640a01

080033f4 <dec_to_bcd>:

void dec_to_bcd(uint32_t in_val, char bcd_array[], uint8_t * pSizeBCD){
 80033f4:	b480      	push	{r7}
 80033f6:	b089      	sub	sp, #36	; 0x24
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	60f8      	str	r0, [r7, #12]
 80033fc:	60b9      	str	r1, [r7, #8]
 80033fe:	607a      	str	r2, [r7, #4]
    uint8_t i = 0;
 8003400:	2300      	movs	r3, #0
 8003402:	77fb      	strb	r3, [r7, #31]
    uint8_t Digits = 1;               //Used to keep track of how many digits are in the number
 8003404:	2301      	movs	r3, #1
 8003406:	77bb      	strb	r3, [r7, #30]
    uint32_t test_val = in_val;          //Used to determine how many digits large the BCD value is
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	61bb      	str	r3, [r7, #24]

    uint8_t Hunthousands = 0x00;       //Used to keep track of the hundred thousands digits
 800340c:	2300      	movs	r3, #0
 800340e:	75fb      	strb	r3, [r7, #23]
    uint8_t Tenthousands = 0x00;       //Used to keep track of the ten thousands digits
 8003410:	2300      	movs	r3, #0
 8003412:	75bb      	strb	r3, [r7, #22]
    uint8_t Thousands    = 0x00;       //Used to keep track of the thousands digits
 8003414:	2300      	movs	r3, #0
 8003416:	757b      	strb	r3, [r7, #21]
    uint8_t Hundreds     = 0x00;       //Used to keep track of the hundreds digits
 8003418:	2300      	movs	r3, #0
 800341a:	753b      	strb	r3, [r7, #20]
    uint8_t Tens         = 0x00;       //Used to keep track of the tens digits
 800341c:	2300      	movs	r3, #0
 800341e:	74fb      	strb	r3, [r7, #19]
    uint8_t Ones         = 0x00;       //Used to keep track of the ones digits
 8003420:	2300      	movs	r3, #0
 8003422:	74bb      	strb	r3, [r7, #18]

    while(test_val >= 10){           //Determine number of BCD digits
 8003424:	e008      	b.n	8003438 <dec_to_bcd+0x44>
        test_val = test_val / 10;
 8003426:	69bb      	ldr	r3, [r7, #24]
 8003428:	4a89      	ldr	r2, [pc, #548]	; (8003650 <dec_to_bcd+0x25c>)
 800342a:	fba2 2303 	umull	r2, r3, r2, r3
 800342e:	08db      	lsrs	r3, r3, #3
 8003430:	61bb      	str	r3, [r7, #24]
        Digits++;                   //Initialized to zero, thus no need to add one after this
 8003432:	7fbb      	ldrb	r3, [r7, #30]
 8003434:	3301      	adds	r3, #1
 8003436:	77bb      	strb	r3, [r7, #30]
    while(test_val >= 10){           //Determine number of BCD digits
 8003438:	69bb      	ldr	r3, [r7, #24]
 800343a:	2b09      	cmp	r3, #9
 800343c:	d8f3      	bhi.n	8003426 <dec_to_bcd+0x32>
    }

    for(i = 0; i < 32; i++){        //Perform "if column greater than 5, then increase by 3" operation
 800343e:	2300      	movs	r3, #0
 8003440:	77fb      	strb	r3, [r7, #31]
 8003442:	e0b7      	b.n	80035b4 <dec_to_bcd+0x1c0>
        if(Hunthousands >= 5){
 8003444:	7dfb      	ldrb	r3, [r7, #23]
 8003446:	2b04      	cmp	r3, #4
 8003448:	d905      	bls.n	8003456 <dec_to_bcd+0x62>
            Hunthousands = (Hunthousands + 3) & 0x0F;
 800344a:	7dfb      	ldrb	r3, [r7, #23]
 800344c:	3303      	adds	r3, #3
 800344e:	b2db      	uxtb	r3, r3
 8003450:	f003 030f 	and.w	r3, r3, #15
 8003454:	75fb      	strb	r3, [r7, #23]
        }
        if(Tenthousands >= 5){
 8003456:	7dbb      	ldrb	r3, [r7, #22]
 8003458:	2b04      	cmp	r3, #4
 800345a:	d905      	bls.n	8003468 <dec_to_bcd+0x74>
            Tenthousands = (Tenthousands + 3) & 0x0F;
 800345c:	7dbb      	ldrb	r3, [r7, #22]
 800345e:	3303      	adds	r3, #3
 8003460:	b2db      	uxtb	r3, r3
 8003462:	f003 030f 	and.w	r3, r3, #15
 8003466:	75bb      	strb	r3, [r7, #22]
        }
        if(Thousands >= 5){
 8003468:	7d7b      	ldrb	r3, [r7, #21]
 800346a:	2b04      	cmp	r3, #4
 800346c:	d905      	bls.n	800347a <dec_to_bcd+0x86>
            Thousands = (Thousands + 3) & 0x0F;
 800346e:	7d7b      	ldrb	r3, [r7, #21]
 8003470:	3303      	adds	r3, #3
 8003472:	b2db      	uxtb	r3, r3
 8003474:	f003 030f 	and.w	r3, r3, #15
 8003478:	757b      	strb	r3, [r7, #21]
        }
        if(Hundreds >= 5){
 800347a:	7d3b      	ldrb	r3, [r7, #20]
 800347c:	2b04      	cmp	r3, #4
 800347e:	d905      	bls.n	800348c <dec_to_bcd+0x98>
            Hundreds = (Hundreds + 3) & 0x0F;
 8003480:	7d3b      	ldrb	r3, [r7, #20]
 8003482:	3303      	adds	r3, #3
 8003484:	b2db      	uxtb	r3, r3
 8003486:	f003 030f 	and.w	r3, r3, #15
 800348a:	753b      	strb	r3, [r7, #20]
        }
        if(Tens >= 5){
 800348c:	7cfb      	ldrb	r3, [r7, #19]
 800348e:	2b04      	cmp	r3, #4
 8003490:	d905      	bls.n	800349e <dec_to_bcd+0xaa>
            Tens = (Tens + 3) & 0x0F;
 8003492:	7cfb      	ldrb	r3, [r7, #19]
 8003494:	3303      	adds	r3, #3
 8003496:	b2db      	uxtb	r3, r3
 8003498:	f003 030f 	and.w	r3, r3, #15
 800349c:	74fb      	strb	r3, [r7, #19]
        }
        if(Ones >= 5){
 800349e:	7cbb      	ldrb	r3, [r7, #18]
 80034a0:	2b04      	cmp	r3, #4
 80034a2:	d905      	bls.n	80034b0 <dec_to_bcd+0xbc>
            Ones = (Ones + 3) & 0x0F;
 80034a4:	7cbb      	ldrb	r3, [r7, #18]
 80034a6:	3303      	adds	r3, #3
 80034a8:	b2db      	uxtb	r3, r3
 80034aa:	f003 030f 	and.w	r3, r3, #15
 80034ae:	74bb      	strb	r3, [r7, #18]
        }

        Hunthousands = (uint8_t)((Hunthousands << 1) & 0x0F);                              //Shift hundred thousands to the left by one bit
 80034b0:	7dfb      	ldrb	r3, [r7, #23]
 80034b2:	005b      	lsls	r3, r3, #1
 80034b4:	b2db      	uxtb	r3, r3
 80034b6:	f003 030f 	and.w	r3, r3, #15
 80034ba:	75fb      	strb	r3, [r7, #23]
        Hunthousands = (uint8_t)((Hunthousands | ((Tenthousands >> 3) & 0x01)) & 0x0F);    //Replace hundred thousands[0] with ten thousands[3]
 80034bc:	7dbb      	ldrb	r3, [r7, #22]
 80034be:	08db      	lsrs	r3, r3, #3
 80034c0:	b2db      	uxtb	r3, r3
 80034c2:	b25b      	sxtb	r3, r3
 80034c4:	f003 0301 	and.w	r3, r3, #1
 80034c8:	b25a      	sxtb	r2, r3
 80034ca:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80034ce:	4313      	orrs	r3, r2
 80034d0:	b25b      	sxtb	r3, r3
 80034d2:	b2db      	uxtb	r3, r3
 80034d4:	f003 030f 	and.w	r3, r3, #15
 80034d8:	75fb      	strb	r3, [r7, #23]

        Tenthousands = (uint8_t)((Tenthousands << 1) & 0x0F);                              //Shift ten thousands to the left by one bit
 80034da:	7dbb      	ldrb	r3, [r7, #22]
 80034dc:	005b      	lsls	r3, r3, #1
 80034de:	b2db      	uxtb	r3, r3
 80034e0:	f003 030f 	and.w	r3, r3, #15
 80034e4:	75bb      	strb	r3, [r7, #22]
        Tenthousands = (uint8_t)((Tenthousands | ((Thousands >> 3) & 0x01)) & 0x0F);       //Replace ten thousands[0] with thousands[3]
 80034e6:	7d7b      	ldrb	r3, [r7, #21]
 80034e8:	08db      	lsrs	r3, r3, #3
 80034ea:	b2db      	uxtb	r3, r3
 80034ec:	b25b      	sxtb	r3, r3
 80034ee:	f003 0301 	and.w	r3, r3, #1
 80034f2:	b25a      	sxtb	r2, r3
 80034f4:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80034f8:	4313      	orrs	r3, r2
 80034fa:	b25b      	sxtb	r3, r3
 80034fc:	b2db      	uxtb	r3, r3
 80034fe:	f003 030f 	and.w	r3, r3, #15
 8003502:	75bb      	strb	r3, [r7, #22]

        Thousands = (uint8_t)((Thousands << 1) & 0x0F);                                    //Shift thousands to the left by one bit
 8003504:	7d7b      	ldrb	r3, [r7, #21]
 8003506:	005b      	lsls	r3, r3, #1
 8003508:	b2db      	uxtb	r3, r3
 800350a:	f003 030f 	and.w	r3, r3, #15
 800350e:	757b      	strb	r3, [r7, #21]
        Thousands = (uint8_t)((Thousands | ((Hundreds >> 3) & 0x01)) & 0x0F);              //Replace thousands[0] with hundreds[3]
 8003510:	7d3b      	ldrb	r3, [r7, #20]
 8003512:	08db      	lsrs	r3, r3, #3
 8003514:	b2db      	uxtb	r3, r3
 8003516:	b25b      	sxtb	r3, r3
 8003518:	f003 0301 	and.w	r3, r3, #1
 800351c:	b25a      	sxtb	r2, r3
 800351e:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8003522:	4313      	orrs	r3, r2
 8003524:	b25b      	sxtb	r3, r3
 8003526:	b2db      	uxtb	r3, r3
 8003528:	f003 030f 	and.w	r3, r3, #15
 800352c:	757b      	strb	r3, [r7, #21]

        Hundreds = (uint8_t)((Hundreds << 1) & 0x0F);                                      //Shift hundreds to the left by one bit
 800352e:	7d3b      	ldrb	r3, [r7, #20]
 8003530:	005b      	lsls	r3, r3, #1
 8003532:	b2db      	uxtb	r3, r3
 8003534:	f003 030f 	and.w	r3, r3, #15
 8003538:	753b      	strb	r3, [r7, #20]
        Hundreds = (uint8_t)((Hundreds | ((Tens >> 3) & 0x01)) & 0x0F);                    //Replace hundreds[0] with tens[3]
 800353a:	7cfb      	ldrb	r3, [r7, #19]
 800353c:	08db      	lsrs	r3, r3, #3
 800353e:	b2db      	uxtb	r3, r3
 8003540:	b25b      	sxtb	r3, r3
 8003542:	f003 0301 	and.w	r3, r3, #1
 8003546:	b25a      	sxtb	r2, r3
 8003548:	f997 3014 	ldrsb.w	r3, [r7, #20]
 800354c:	4313      	orrs	r3, r2
 800354e:	b25b      	sxtb	r3, r3
 8003550:	b2db      	uxtb	r3, r3
 8003552:	f003 030f 	and.w	r3, r3, #15
 8003556:	753b      	strb	r3, [r7, #20]

        Tens = (uint8_t)((Tens << 1) & 0x0F);                                              //Shift tens to the left by one bit
 8003558:	7cfb      	ldrb	r3, [r7, #19]
 800355a:	005b      	lsls	r3, r3, #1
 800355c:	b2db      	uxtb	r3, r3
 800355e:	f003 030f 	and.w	r3, r3, #15
 8003562:	74fb      	strb	r3, [r7, #19]
        Tens = (uint8_t)((Tens | ((Ones >> 3) & 0x01)) & 0x0F);                            //Replace tens[0] with ones[3]
 8003564:	7cbb      	ldrb	r3, [r7, #18]
 8003566:	08db      	lsrs	r3, r3, #3
 8003568:	b2db      	uxtb	r3, r3
 800356a:	b25b      	sxtb	r3, r3
 800356c:	f003 0301 	and.w	r3, r3, #1
 8003570:	b25a      	sxtb	r2, r3
 8003572:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8003576:	4313      	orrs	r3, r2
 8003578:	b25b      	sxtb	r3, r3
 800357a:	b2db      	uxtb	r3, r3
 800357c:	f003 030f 	and.w	r3, r3, #15
 8003580:	74fb      	strb	r3, [r7, #19]

        Ones = (uint8_t)((Ones << 1) & 0x0F);                                              //Shift tens to the left by one bit
 8003582:	7cbb      	ldrb	r3, [r7, #18]
 8003584:	005b      	lsls	r3, r3, #1
 8003586:	b2db      	uxtb	r3, r3
 8003588:	f003 030f 	and.w	r3, r3, #15
 800358c:	74bb      	strb	r3, [r7, #18]
        Ones = (uint8_t)((Ones | ((in_val >> (31-i)) & 0x01)) & 0x0F);                      //Replace ones[0] with input value[MSB - itterations]
 800358e:	7ffb      	ldrb	r3, [r7, #31]
 8003590:	f1c3 031f 	rsb	r3, r3, #31
 8003594:	68fa      	ldr	r2, [r7, #12]
 8003596:	fa22 f303 	lsr.w	r3, r2, r3
 800359a:	b2db      	uxtb	r3, r3
 800359c:	f003 0301 	and.w	r3, r3, #1
 80035a0:	b2da      	uxtb	r2, r3
 80035a2:	7cbb      	ldrb	r3, [r7, #18]
 80035a4:	4313      	orrs	r3, r2
 80035a6:	b2db      	uxtb	r3, r3
 80035a8:	f003 030f 	and.w	r3, r3, #15
 80035ac:	74bb      	strb	r3, [r7, #18]
    for(i = 0; i < 32; i++){        //Perform "if column greater than 5, then increase by 3" operation
 80035ae:	7ffb      	ldrb	r3, [r7, #31]
 80035b0:	3301      	adds	r3, #1
 80035b2:	77fb      	strb	r3, [r7, #31]
 80035b4:	7ffb      	ldrb	r3, [r7, #31]
 80035b6:	2b1f      	cmp	r3, #31
 80035b8:	f67f af44 	bls.w	8003444 <dec_to_bcd+0x50>

    }

    i = 0;
 80035bc:	2300      	movs	r3, #0
 80035be:	77fb      	strb	r3, [r7, #31]
    if(Digits > 5){                             //Stuff BCD array according based off of the number of digits
 80035c0:	7fbb      	ldrb	r3, [r7, #30]
 80035c2:	2b05      	cmp	r3, #5
 80035c4:	d907      	bls.n	80035d6 <dec_to_bcd+0x1e2>
        bcd_array[i] = Hunthousands;
 80035c6:	7ffb      	ldrb	r3, [r7, #31]
 80035c8:	68ba      	ldr	r2, [r7, #8]
 80035ca:	4413      	add	r3, r2
 80035cc:	7dfa      	ldrb	r2, [r7, #23]
 80035ce:	701a      	strb	r2, [r3, #0]
        i++;
 80035d0:	7ffb      	ldrb	r3, [r7, #31]
 80035d2:	3301      	adds	r3, #1
 80035d4:	77fb      	strb	r3, [r7, #31]
    }
    if(Digits > 4){
 80035d6:	7fbb      	ldrb	r3, [r7, #30]
 80035d8:	2b04      	cmp	r3, #4
 80035da:	d907      	bls.n	80035ec <dec_to_bcd+0x1f8>
        bcd_array[i] = Tenthousands;
 80035dc:	7ffb      	ldrb	r3, [r7, #31]
 80035de:	68ba      	ldr	r2, [r7, #8]
 80035e0:	4413      	add	r3, r2
 80035e2:	7dba      	ldrb	r2, [r7, #22]
 80035e4:	701a      	strb	r2, [r3, #0]
        i++;
 80035e6:	7ffb      	ldrb	r3, [r7, #31]
 80035e8:	3301      	adds	r3, #1
 80035ea:	77fb      	strb	r3, [r7, #31]
    }
    if(Digits > 3){
 80035ec:	7fbb      	ldrb	r3, [r7, #30]
 80035ee:	2b03      	cmp	r3, #3
 80035f0:	d907      	bls.n	8003602 <dec_to_bcd+0x20e>
        bcd_array[i] = Thousands;
 80035f2:	7ffb      	ldrb	r3, [r7, #31]
 80035f4:	68ba      	ldr	r2, [r7, #8]
 80035f6:	4413      	add	r3, r2
 80035f8:	7d7a      	ldrb	r2, [r7, #21]
 80035fa:	701a      	strb	r2, [r3, #0]
        i++;
 80035fc:	7ffb      	ldrb	r3, [r7, #31]
 80035fe:	3301      	adds	r3, #1
 8003600:	77fb      	strb	r3, [r7, #31]
    }
    if(Digits > 2){
 8003602:	7fbb      	ldrb	r3, [r7, #30]
 8003604:	2b02      	cmp	r3, #2
 8003606:	d907      	bls.n	8003618 <dec_to_bcd+0x224>
        bcd_array[i] = Hundreds;
 8003608:	7ffb      	ldrb	r3, [r7, #31]
 800360a:	68ba      	ldr	r2, [r7, #8]
 800360c:	4413      	add	r3, r2
 800360e:	7d3a      	ldrb	r2, [r7, #20]
 8003610:	701a      	strb	r2, [r3, #0]
        i++;
 8003612:	7ffb      	ldrb	r3, [r7, #31]
 8003614:	3301      	adds	r3, #1
 8003616:	77fb      	strb	r3, [r7, #31]
    }
    if(Digits > 1){
 8003618:	7fbb      	ldrb	r3, [r7, #30]
 800361a:	2b01      	cmp	r3, #1
 800361c:	d907      	bls.n	800362e <dec_to_bcd+0x23a>
        bcd_array[i] = Tens;
 800361e:	7ffb      	ldrb	r3, [r7, #31]
 8003620:	68ba      	ldr	r2, [r7, #8]
 8003622:	4413      	add	r3, r2
 8003624:	7cfa      	ldrb	r2, [r7, #19]
 8003626:	701a      	strb	r2, [r3, #0]
        i++;
 8003628:	7ffb      	ldrb	r3, [r7, #31]
 800362a:	3301      	adds	r3, #1
 800362c:	77fb      	strb	r3, [r7, #31]
    }
    bcd_array[i] = Ones;
 800362e:	7ffb      	ldrb	r3, [r7, #31]
 8003630:	68ba      	ldr	r2, [r7, #8]
 8003632:	4413      	add	r3, r2
 8003634:	7cba      	ldrb	r2, [r7, #18]
 8003636:	701a      	strb	r2, [r3, #0]
    i++;
 8003638:	7ffb      	ldrb	r3, [r7, #31]
 800363a:	3301      	adds	r3, #1
 800363c:	77fb      	strb	r3, [r7, #31]

    *pSizeBCD = i;                  //Point to how many elements are in the BCD array
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	7ffa      	ldrb	r2, [r7, #31]
 8003642:	701a      	strb	r2, [r3, #0]
 8003644:	bf00      	nop
 8003646:	3724      	adds	r7, #36	; 0x24
 8003648:	46bd      	mov	sp, r7
 800364a:	bc80      	pop	{r7}
 800364c:	4770      	bx	lr
 800364e:	bf00      	nop
 8003650:	cccccccd 	.word	0xcccccccd

08003654 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003654:	480c      	ldr	r0, [pc, #48]	; (8003688 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003656:	490d      	ldr	r1, [pc, #52]	; (800368c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003658:	4a0d      	ldr	r2, [pc, #52]	; (8003690 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800365a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800365c:	e002      	b.n	8003664 <LoopCopyDataInit>

0800365e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800365e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003660:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003662:	3304      	adds	r3, #4

08003664 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003664:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003666:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003668:	d3f9      	bcc.n	800365e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800366a:	4a0a      	ldr	r2, [pc, #40]	; (8003694 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800366c:	4c0a      	ldr	r4, [pc, #40]	; (8003698 <LoopFillZerobss+0x22>)
  movs r3, #0
 800366e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003670:	e001      	b.n	8003676 <LoopFillZerobss>

08003672 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003672:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003674:	3204      	adds	r2, #4

08003676 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003676:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003678:	d3fb      	bcc.n	8003672 <FillZerobss>
/* Call the clock system intitialization function.*/
    bl  SystemInit
 800367a:	f7ff fa7d 	bl	8002b78 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800367e:	f003 fb3d 	bl	8006cfc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003682:	f7fe f9c9 	bl	8001a18 <main>
  bx lr
 8003686:	4770      	bx	lr
  ldr r0, =_sdata
 8003688:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800368c:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8003690:	0800c67c 	.word	0x0800c67c
  ldr r2, =_sbss
 8003694:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8003698:	20000428 	.word	0x20000428

0800369c <ADC1_2_IRQHandler>:
 * @retval None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800369c:	e7fe      	b.n	800369c <ADC1_2_IRQHandler>
	...

080036a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80036a4:	4b08      	ldr	r3, [pc, #32]	; (80036c8 <HAL_Init+0x28>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4a07      	ldr	r2, [pc, #28]	; (80036c8 <HAL_Init+0x28>)
 80036aa:	f043 0310 	orr.w	r3, r3, #16
 80036ae:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80036b0:	2003      	movs	r0, #3
 80036b2:	f000 fb59 	bl	8003d68 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80036b6:	200f      	movs	r0, #15
 80036b8:	f000 f808 	bl	80036cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80036bc:	f7fe ff68 	bl	8002590 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80036c0:	2300      	movs	r3, #0
}
 80036c2:	4618      	mov	r0, r3
 80036c4:	bd80      	pop	{r7, pc}
 80036c6:	bf00      	nop
 80036c8:	40022000 	.word	0x40022000

080036cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b082      	sub	sp, #8
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80036d4:	4b12      	ldr	r3, [pc, #72]	; (8003720 <HAL_InitTick+0x54>)
 80036d6:	681a      	ldr	r2, [r3, #0]
 80036d8:	4b12      	ldr	r3, [pc, #72]	; (8003724 <HAL_InitTick+0x58>)
 80036da:	781b      	ldrb	r3, [r3, #0]
 80036dc:	4619      	mov	r1, r3
 80036de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80036e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80036e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80036ea:	4618      	mov	r0, r3
 80036ec:	f000 fb71 	bl	8003dd2 <HAL_SYSTICK_Config>
 80036f0:	4603      	mov	r3, r0
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d001      	beq.n	80036fa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80036f6:	2301      	movs	r3, #1
 80036f8:	e00e      	b.n	8003718 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2b0f      	cmp	r3, #15
 80036fe:	d80a      	bhi.n	8003716 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003700:	2200      	movs	r2, #0
 8003702:	6879      	ldr	r1, [r7, #4]
 8003704:	f04f 30ff 	mov.w	r0, #4294967295
 8003708:	f000 fb39 	bl	8003d7e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800370c:	4a06      	ldr	r2, [pc, #24]	; (8003728 <HAL_InitTick+0x5c>)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003712:	2300      	movs	r3, #0
 8003714:	e000      	b.n	8003718 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003716:	2301      	movs	r3, #1
}
 8003718:	4618      	mov	r0, r3
 800371a:	3708      	adds	r7, #8
 800371c:	46bd      	mov	sp, r7
 800371e:	bd80      	pop	{r7, pc}
 8003720:	20000000 	.word	0x20000000
 8003724:	20000008 	.word	0x20000008
 8003728:	20000004 	.word	0x20000004

0800372c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800372c:	b480      	push	{r7}
 800372e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003730:	4b05      	ldr	r3, [pc, #20]	; (8003748 <HAL_IncTick+0x1c>)
 8003732:	781b      	ldrb	r3, [r3, #0]
 8003734:	461a      	mov	r2, r3
 8003736:	4b05      	ldr	r3, [pc, #20]	; (800374c <HAL_IncTick+0x20>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	4413      	add	r3, r2
 800373c:	4a03      	ldr	r2, [pc, #12]	; (800374c <HAL_IncTick+0x20>)
 800373e:	6013      	str	r3, [r2, #0]
}
 8003740:	bf00      	nop
 8003742:	46bd      	mov	sp, r7
 8003744:	bc80      	pop	{r7}
 8003746:	4770      	bx	lr
 8003748:	20000008 	.word	0x20000008
 800374c:	20000414 	.word	0x20000414

08003750 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003750:	b480      	push	{r7}
 8003752:	af00      	add	r7, sp, #0
  return uwTick;
 8003754:	4b02      	ldr	r3, [pc, #8]	; (8003760 <HAL_GetTick+0x10>)
 8003756:	681b      	ldr	r3, [r3, #0]
}
 8003758:	4618      	mov	r0, r3
 800375a:	46bd      	mov	sp, r7
 800375c:	bc80      	pop	{r7}
 800375e:	4770      	bx	lr
 8003760:	20000414 	.word	0x20000414

08003764 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b084      	sub	sp, #16
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800376c:	f7ff fff0 	bl	8003750 <HAL_GetTick>
 8003770:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	f1b3 3fff 	cmp.w	r3, #4294967295
 800377c:	d005      	beq.n	800378a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800377e:	4b0a      	ldr	r3, [pc, #40]	; (80037a8 <HAL_Delay+0x44>)
 8003780:	781b      	ldrb	r3, [r3, #0]
 8003782:	461a      	mov	r2, r3
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	4413      	add	r3, r2
 8003788:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800378a:	bf00      	nop
 800378c:	f7ff ffe0 	bl	8003750 <HAL_GetTick>
 8003790:	4602      	mov	r2, r0
 8003792:	68bb      	ldr	r3, [r7, #8]
 8003794:	1ad3      	subs	r3, r2, r3
 8003796:	68fa      	ldr	r2, [r7, #12]
 8003798:	429a      	cmp	r2, r3
 800379a:	d8f7      	bhi.n	800378c <HAL_Delay+0x28>
  {
  }
}
 800379c:	bf00      	nop
 800379e:	bf00      	nop
 80037a0:	3710      	adds	r7, #16
 80037a2:	46bd      	mov	sp, r7
 80037a4:	bd80      	pop	{r7, pc}
 80037a6:	bf00      	nop
 80037a8:	20000008 	.word	0x20000008

080037ac <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b086      	sub	sp, #24
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80037b4:	2300      	movs	r3, #0
 80037b6:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80037b8:	2300      	movs	r3, #0
 80037ba:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80037bc:	2300      	movs	r3, #0
 80037be:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80037c0:	2300      	movs	r3, #0
 80037c2:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d101      	bne.n	80037ce <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80037ca:	2301      	movs	r3, #1
 80037cc:	e0be      	b.n	800394c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	689b      	ldr	r3, [r3, #8]
 80037d2:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d109      	bne.n	80037f0 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2200      	movs	r2, #0
 80037e0:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2200      	movs	r2, #0
 80037e6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80037ea:	6878      	ldr	r0, [r7, #4]
 80037ec:	f7fe ff02 	bl	80025f4 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80037f0:	6878      	ldr	r0, [r7, #4]
 80037f2:	f000 f9ab 	bl	8003b4c <ADC_ConversionStop_Disable>
 80037f6:	4603      	mov	r3, r0
 80037f8:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037fe:	f003 0310 	and.w	r3, r3, #16
 8003802:	2b00      	cmp	r3, #0
 8003804:	f040 8099 	bne.w	800393a <HAL_ADC_Init+0x18e>
 8003808:	7dfb      	ldrb	r3, [r7, #23]
 800380a:	2b00      	cmp	r3, #0
 800380c:	f040 8095 	bne.w	800393a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003814:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003818:	f023 0302 	bic.w	r3, r3, #2
 800381c:	f043 0202 	orr.w	r2, r3, #2
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800382c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	7b1b      	ldrb	r3, [r3, #12]
 8003832:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8003834:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003836:	68ba      	ldr	r2, [r7, #8]
 8003838:	4313      	orrs	r3, r2
 800383a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	689b      	ldr	r3, [r3, #8]
 8003840:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003844:	d003      	beq.n	800384e <HAL_ADC_Init+0xa2>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	689b      	ldr	r3, [r3, #8]
 800384a:	2b01      	cmp	r3, #1
 800384c:	d102      	bne.n	8003854 <HAL_ADC_Init+0xa8>
 800384e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003852:	e000      	b.n	8003856 <HAL_ADC_Init+0xaa>
 8003854:	2300      	movs	r3, #0
 8003856:	693a      	ldr	r2, [r7, #16]
 8003858:	4313      	orrs	r3, r2
 800385a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	7d1b      	ldrb	r3, [r3, #20]
 8003860:	2b01      	cmp	r3, #1
 8003862:	d119      	bne.n	8003898 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	7b1b      	ldrb	r3, [r3, #12]
 8003868:	2b00      	cmp	r3, #0
 800386a:	d109      	bne.n	8003880 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	699b      	ldr	r3, [r3, #24]
 8003870:	3b01      	subs	r3, #1
 8003872:	035a      	lsls	r2, r3, #13
 8003874:	693b      	ldr	r3, [r7, #16]
 8003876:	4313      	orrs	r3, r2
 8003878:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800387c:	613b      	str	r3, [r7, #16]
 800387e:	e00b      	b.n	8003898 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003884:	f043 0220 	orr.w	r2, r3, #32
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003890:	f043 0201 	orr.w	r2, r3, #1
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	685b      	ldr	r3, [r3, #4]
 800389e:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	693a      	ldr	r2, [r7, #16]
 80038a8:	430a      	orrs	r2, r1
 80038aa:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	689a      	ldr	r2, [r3, #8]
 80038b2:	4b28      	ldr	r3, [pc, #160]	; (8003954 <HAL_ADC_Init+0x1a8>)
 80038b4:	4013      	ands	r3, r2
 80038b6:	687a      	ldr	r2, [r7, #4]
 80038b8:	6812      	ldr	r2, [r2, #0]
 80038ba:	68b9      	ldr	r1, [r7, #8]
 80038bc:	430b      	orrs	r3, r1
 80038be:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	689b      	ldr	r3, [r3, #8]
 80038c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80038c8:	d003      	beq.n	80038d2 <HAL_ADC_Init+0x126>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	689b      	ldr	r3, [r3, #8]
 80038ce:	2b01      	cmp	r3, #1
 80038d0:	d104      	bne.n	80038dc <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	691b      	ldr	r3, [r3, #16]
 80038d6:	3b01      	subs	r3, #1
 80038d8:	051b      	lsls	r3, r3, #20
 80038da:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038e2:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	68fa      	ldr	r2, [r7, #12]
 80038ec:	430a      	orrs	r2, r1
 80038ee:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	689a      	ldr	r2, [r3, #8]
 80038f6:	4b18      	ldr	r3, [pc, #96]	; (8003958 <HAL_ADC_Init+0x1ac>)
 80038f8:	4013      	ands	r3, r2
 80038fa:	68ba      	ldr	r2, [r7, #8]
 80038fc:	429a      	cmp	r2, r3
 80038fe:	d10b      	bne.n	8003918 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2200      	movs	r2, #0
 8003904:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800390a:	f023 0303 	bic.w	r3, r3, #3
 800390e:	f043 0201 	orr.w	r2, r3, #1
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003916:	e018      	b.n	800394a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800391c:	f023 0312 	bic.w	r3, r3, #18
 8003920:	f043 0210 	orr.w	r2, r3, #16
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800392c:	f043 0201 	orr.w	r2, r3, #1
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8003934:	2301      	movs	r3, #1
 8003936:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003938:	e007      	b.n	800394a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800393e:	f043 0210 	orr.w	r2, r3, #16
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8003946:	2301      	movs	r3, #1
 8003948:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800394a:	7dfb      	ldrb	r3, [r7, #23]
}
 800394c:	4618      	mov	r0, r3
 800394e:	3718      	adds	r7, #24
 8003950:	46bd      	mov	sp, r7
 8003952:	bd80      	pop	{r7, pc}
 8003954:	ffe1f7fd 	.word	0xffe1f7fd
 8003958:	ff1f0efe 	.word	0xff1f0efe

0800395c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 800395c:	b480      	push	{r7}
 800395e:	b085      	sub	sp, #20
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
 8003964:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003966:	2300      	movs	r3, #0
 8003968:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800396a:	2300      	movs	r3, #0
 800396c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003974:	2b01      	cmp	r3, #1
 8003976:	d101      	bne.n	800397c <HAL_ADC_ConfigChannel+0x20>
 8003978:	2302      	movs	r3, #2
 800397a:	e0dc      	b.n	8003b36 <HAL_ADC_ConfigChannel+0x1da>
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2201      	movs	r2, #1
 8003980:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	685b      	ldr	r3, [r3, #4]
 8003988:	2b06      	cmp	r3, #6
 800398a:	d81c      	bhi.n	80039c6 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	685a      	ldr	r2, [r3, #4]
 8003996:	4613      	mov	r3, r2
 8003998:	009b      	lsls	r3, r3, #2
 800399a:	4413      	add	r3, r2
 800399c:	3b05      	subs	r3, #5
 800399e:	221f      	movs	r2, #31
 80039a0:	fa02 f303 	lsl.w	r3, r2, r3
 80039a4:	43db      	mvns	r3, r3
 80039a6:	4019      	ands	r1, r3
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	6818      	ldr	r0, [r3, #0]
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	685a      	ldr	r2, [r3, #4]
 80039b0:	4613      	mov	r3, r2
 80039b2:	009b      	lsls	r3, r3, #2
 80039b4:	4413      	add	r3, r2
 80039b6:	3b05      	subs	r3, #5
 80039b8:	fa00 f203 	lsl.w	r2, r0, r3
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	430a      	orrs	r2, r1
 80039c2:	635a      	str	r2, [r3, #52]	; 0x34
 80039c4:	e03c      	b.n	8003a40 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	685b      	ldr	r3, [r3, #4]
 80039ca:	2b0c      	cmp	r3, #12
 80039cc:	d81c      	bhi.n	8003a08 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	685a      	ldr	r2, [r3, #4]
 80039d8:	4613      	mov	r3, r2
 80039da:	009b      	lsls	r3, r3, #2
 80039dc:	4413      	add	r3, r2
 80039de:	3b23      	subs	r3, #35	; 0x23
 80039e0:	221f      	movs	r2, #31
 80039e2:	fa02 f303 	lsl.w	r3, r2, r3
 80039e6:	43db      	mvns	r3, r3
 80039e8:	4019      	ands	r1, r3
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	6818      	ldr	r0, [r3, #0]
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	685a      	ldr	r2, [r3, #4]
 80039f2:	4613      	mov	r3, r2
 80039f4:	009b      	lsls	r3, r3, #2
 80039f6:	4413      	add	r3, r2
 80039f8:	3b23      	subs	r3, #35	; 0x23
 80039fa:	fa00 f203 	lsl.w	r2, r0, r3
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	430a      	orrs	r2, r1
 8003a04:	631a      	str	r2, [r3, #48]	; 0x30
 8003a06:	e01b      	b.n	8003a40 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	685a      	ldr	r2, [r3, #4]
 8003a12:	4613      	mov	r3, r2
 8003a14:	009b      	lsls	r3, r3, #2
 8003a16:	4413      	add	r3, r2
 8003a18:	3b41      	subs	r3, #65	; 0x41
 8003a1a:	221f      	movs	r2, #31
 8003a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a20:	43db      	mvns	r3, r3
 8003a22:	4019      	ands	r1, r3
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	6818      	ldr	r0, [r3, #0]
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	685a      	ldr	r2, [r3, #4]
 8003a2c:	4613      	mov	r3, r2
 8003a2e:	009b      	lsls	r3, r3, #2
 8003a30:	4413      	add	r3, r2
 8003a32:	3b41      	subs	r3, #65	; 0x41
 8003a34:	fa00 f203 	lsl.w	r2, r0, r3
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	430a      	orrs	r2, r1
 8003a3e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	2b09      	cmp	r3, #9
 8003a46:	d91c      	bls.n	8003a82 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	68d9      	ldr	r1, [r3, #12]
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	681a      	ldr	r2, [r3, #0]
 8003a52:	4613      	mov	r3, r2
 8003a54:	005b      	lsls	r3, r3, #1
 8003a56:	4413      	add	r3, r2
 8003a58:	3b1e      	subs	r3, #30
 8003a5a:	2207      	movs	r2, #7
 8003a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a60:	43db      	mvns	r3, r3
 8003a62:	4019      	ands	r1, r3
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	6898      	ldr	r0, [r3, #8]
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	681a      	ldr	r2, [r3, #0]
 8003a6c:	4613      	mov	r3, r2
 8003a6e:	005b      	lsls	r3, r3, #1
 8003a70:	4413      	add	r3, r2
 8003a72:	3b1e      	subs	r3, #30
 8003a74:	fa00 f203 	lsl.w	r2, r0, r3
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	430a      	orrs	r2, r1
 8003a7e:	60da      	str	r2, [r3, #12]
 8003a80:	e019      	b.n	8003ab6 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	6919      	ldr	r1, [r3, #16]
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	681a      	ldr	r2, [r3, #0]
 8003a8c:	4613      	mov	r3, r2
 8003a8e:	005b      	lsls	r3, r3, #1
 8003a90:	4413      	add	r3, r2
 8003a92:	2207      	movs	r2, #7
 8003a94:	fa02 f303 	lsl.w	r3, r2, r3
 8003a98:	43db      	mvns	r3, r3
 8003a9a:	4019      	ands	r1, r3
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	6898      	ldr	r0, [r3, #8]
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	681a      	ldr	r2, [r3, #0]
 8003aa4:	4613      	mov	r3, r2
 8003aa6:	005b      	lsls	r3, r3, #1
 8003aa8:	4413      	add	r3, r2
 8003aaa:	fa00 f203 	lsl.w	r2, r0, r3
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	430a      	orrs	r2, r1
 8003ab4:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	2b10      	cmp	r3, #16
 8003abc:	d003      	beq.n	8003ac6 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003ac2:	2b11      	cmp	r3, #17
 8003ac4:	d132      	bne.n	8003b2c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	4a1d      	ldr	r2, [pc, #116]	; (8003b40 <HAL_ADC_ConfigChannel+0x1e4>)
 8003acc:	4293      	cmp	r3, r2
 8003ace:	d125      	bne.n	8003b1c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	689b      	ldr	r3, [r3, #8]
 8003ad6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d126      	bne.n	8003b2c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	689a      	ldr	r2, [r3, #8]
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8003aec:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	2b10      	cmp	r3, #16
 8003af4:	d11a      	bne.n	8003b2c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003af6:	4b13      	ldr	r3, [pc, #76]	; (8003b44 <HAL_ADC_ConfigChannel+0x1e8>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	4a13      	ldr	r2, [pc, #76]	; (8003b48 <HAL_ADC_ConfigChannel+0x1ec>)
 8003afc:	fba2 2303 	umull	r2, r3, r2, r3
 8003b00:	0c9a      	lsrs	r2, r3, #18
 8003b02:	4613      	mov	r3, r2
 8003b04:	009b      	lsls	r3, r3, #2
 8003b06:	4413      	add	r3, r2
 8003b08:	005b      	lsls	r3, r3, #1
 8003b0a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003b0c:	e002      	b.n	8003b14 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8003b0e:	68bb      	ldr	r3, [r7, #8]
 8003b10:	3b01      	subs	r3, #1
 8003b12:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003b14:	68bb      	ldr	r3, [r7, #8]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d1f9      	bne.n	8003b0e <HAL_ADC_ConfigChannel+0x1b2>
 8003b1a:	e007      	b.n	8003b2c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b20:	f043 0220 	orr.w	r2, r3, #32
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8003b28:	2301      	movs	r3, #1
 8003b2a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2200      	movs	r2, #0
 8003b30:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8003b34:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b36:	4618      	mov	r0, r3
 8003b38:	3714      	adds	r7, #20
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	bc80      	pop	{r7}
 8003b3e:	4770      	bx	lr
 8003b40:	40012400 	.word	0x40012400
 8003b44:	20000000 	.word	0x20000000
 8003b48:	431bde83 	.word	0x431bde83

08003b4c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b084      	sub	sp, #16
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003b54:	2300      	movs	r3, #0
 8003b56:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	689b      	ldr	r3, [r3, #8]
 8003b5e:	f003 0301 	and.w	r3, r3, #1
 8003b62:	2b01      	cmp	r3, #1
 8003b64:	d12e      	bne.n	8003bc4 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	689a      	ldr	r2, [r3, #8]
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f022 0201 	bic.w	r2, r2, #1
 8003b74:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003b76:	f7ff fdeb 	bl	8003750 <HAL_GetTick>
 8003b7a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003b7c:	e01b      	b.n	8003bb6 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003b7e:	f7ff fde7 	bl	8003750 <HAL_GetTick>
 8003b82:	4602      	mov	r2, r0
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	1ad3      	subs	r3, r2, r3
 8003b88:	2b02      	cmp	r3, #2
 8003b8a:	d914      	bls.n	8003bb6 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	689b      	ldr	r3, [r3, #8]
 8003b92:	f003 0301 	and.w	r3, r3, #1
 8003b96:	2b01      	cmp	r3, #1
 8003b98:	d10d      	bne.n	8003bb6 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b9e:	f043 0210 	orr.w	r2, r3, #16
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003baa:	f043 0201 	orr.w	r2, r3, #1
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	e007      	b.n	8003bc6 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	689b      	ldr	r3, [r3, #8]
 8003bbc:	f003 0301 	and.w	r3, r3, #1
 8003bc0:	2b01      	cmp	r3, #1
 8003bc2:	d0dc      	beq.n	8003b7e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003bc4:	2300      	movs	r3, #0
}
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	3710      	adds	r7, #16
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	bd80      	pop	{r7, pc}
	...

08003bd0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003bd0:	b480      	push	{r7}
 8003bd2:	b085      	sub	sp, #20
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	f003 0307 	and.w	r3, r3, #7
 8003bde:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003be0:	4b0c      	ldr	r3, [pc, #48]	; (8003c14 <__NVIC_SetPriorityGrouping+0x44>)
 8003be2:	68db      	ldr	r3, [r3, #12]
 8003be4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003be6:	68ba      	ldr	r2, [r7, #8]
 8003be8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003bec:	4013      	ands	r3, r2
 8003bee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003bf4:	68bb      	ldr	r3, [r7, #8]
 8003bf6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003bf8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003bfc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003c02:	4a04      	ldr	r2, [pc, #16]	; (8003c14 <__NVIC_SetPriorityGrouping+0x44>)
 8003c04:	68bb      	ldr	r3, [r7, #8]
 8003c06:	60d3      	str	r3, [r2, #12]
}
 8003c08:	bf00      	nop
 8003c0a:	3714      	adds	r7, #20
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	bc80      	pop	{r7}
 8003c10:	4770      	bx	lr
 8003c12:	bf00      	nop
 8003c14:	e000ed00 	.word	0xe000ed00

08003c18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003c18:	b480      	push	{r7}
 8003c1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003c1c:	4b04      	ldr	r3, [pc, #16]	; (8003c30 <__NVIC_GetPriorityGrouping+0x18>)
 8003c1e:	68db      	ldr	r3, [r3, #12]
 8003c20:	0a1b      	lsrs	r3, r3, #8
 8003c22:	f003 0307 	and.w	r3, r3, #7
}
 8003c26:	4618      	mov	r0, r3
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	bc80      	pop	{r7}
 8003c2c:	4770      	bx	lr
 8003c2e:	bf00      	nop
 8003c30:	e000ed00 	.word	0xe000ed00

08003c34 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c34:	b480      	push	{r7}
 8003c36:	b083      	sub	sp, #12
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	4603      	mov	r3, r0
 8003c3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	db0b      	blt.n	8003c5e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003c46:	79fb      	ldrb	r3, [r7, #7]
 8003c48:	f003 021f 	and.w	r2, r3, #31
 8003c4c:	4906      	ldr	r1, [pc, #24]	; (8003c68 <__NVIC_EnableIRQ+0x34>)
 8003c4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c52:	095b      	lsrs	r3, r3, #5
 8003c54:	2001      	movs	r0, #1
 8003c56:	fa00 f202 	lsl.w	r2, r0, r2
 8003c5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003c5e:	bf00      	nop
 8003c60:	370c      	adds	r7, #12
 8003c62:	46bd      	mov	sp, r7
 8003c64:	bc80      	pop	{r7}
 8003c66:	4770      	bx	lr
 8003c68:	e000e100 	.word	0xe000e100

08003c6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003c6c:	b480      	push	{r7}
 8003c6e:	b083      	sub	sp, #12
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	4603      	mov	r3, r0
 8003c74:	6039      	str	r1, [r7, #0]
 8003c76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	db0a      	blt.n	8003c96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	b2da      	uxtb	r2, r3
 8003c84:	490c      	ldr	r1, [pc, #48]	; (8003cb8 <__NVIC_SetPriority+0x4c>)
 8003c86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c8a:	0112      	lsls	r2, r2, #4
 8003c8c:	b2d2      	uxtb	r2, r2
 8003c8e:	440b      	add	r3, r1
 8003c90:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003c94:	e00a      	b.n	8003cac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	b2da      	uxtb	r2, r3
 8003c9a:	4908      	ldr	r1, [pc, #32]	; (8003cbc <__NVIC_SetPriority+0x50>)
 8003c9c:	79fb      	ldrb	r3, [r7, #7]
 8003c9e:	f003 030f 	and.w	r3, r3, #15
 8003ca2:	3b04      	subs	r3, #4
 8003ca4:	0112      	lsls	r2, r2, #4
 8003ca6:	b2d2      	uxtb	r2, r2
 8003ca8:	440b      	add	r3, r1
 8003caa:	761a      	strb	r2, [r3, #24]
}
 8003cac:	bf00      	nop
 8003cae:	370c      	adds	r7, #12
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	bc80      	pop	{r7}
 8003cb4:	4770      	bx	lr
 8003cb6:	bf00      	nop
 8003cb8:	e000e100 	.word	0xe000e100
 8003cbc:	e000ed00 	.word	0xe000ed00

08003cc0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003cc0:	b480      	push	{r7}
 8003cc2:	b089      	sub	sp, #36	; 0x24
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	60f8      	str	r0, [r7, #12]
 8003cc8:	60b9      	str	r1, [r7, #8]
 8003cca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	f003 0307 	and.w	r3, r3, #7
 8003cd2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003cd4:	69fb      	ldr	r3, [r7, #28]
 8003cd6:	f1c3 0307 	rsb	r3, r3, #7
 8003cda:	2b04      	cmp	r3, #4
 8003cdc:	bf28      	it	cs
 8003cde:	2304      	movcs	r3, #4
 8003ce0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003ce2:	69fb      	ldr	r3, [r7, #28]
 8003ce4:	3304      	adds	r3, #4
 8003ce6:	2b06      	cmp	r3, #6
 8003ce8:	d902      	bls.n	8003cf0 <NVIC_EncodePriority+0x30>
 8003cea:	69fb      	ldr	r3, [r7, #28]
 8003cec:	3b03      	subs	r3, #3
 8003cee:	e000      	b.n	8003cf2 <NVIC_EncodePriority+0x32>
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003cf4:	f04f 32ff 	mov.w	r2, #4294967295
 8003cf8:	69bb      	ldr	r3, [r7, #24]
 8003cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8003cfe:	43da      	mvns	r2, r3
 8003d00:	68bb      	ldr	r3, [r7, #8]
 8003d02:	401a      	ands	r2, r3
 8003d04:	697b      	ldr	r3, [r7, #20]
 8003d06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003d08:	f04f 31ff 	mov.w	r1, #4294967295
 8003d0c:	697b      	ldr	r3, [r7, #20]
 8003d0e:	fa01 f303 	lsl.w	r3, r1, r3
 8003d12:	43d9      	mvns	r1, r3
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d18:	4313      	orrs	r3, r2
         );
}
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	3724      	adds	r7, #36	; 0x24
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	bc80      	pop	{r7}
 8003d22:	4770      	bx	lr

08003d24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b082      	sub	sp, #8
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	3b01      	subs	r3, #1
 8003d30:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003d34:	d301      	bcc.n	8003d3a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003d36:	2301      	movs	r3, #1
 8003d38:	e00f      	b.n	8003d5a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003d3a:	4a0a      	ldr	r2, [pc, #40]	; (8003d64 <SysTick_Config+0x40>)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	3b01      	subs	r3, #1
 8003d40:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003d42:	210f      	movs	r1, #15
 8003d44:	f04f 30ff 	mov.w	r0, #4294967295
 8003d48:	f7ff ff90 	bl	8003c6c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003d4c:	4b05      	ldr	r3, [pc, #20]	; (8003d64 <SysTick_Config+0x40>)
 8003d4e:	2200      	movs	r2, #0
 8003d50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003d52:	4b04      	ldr	r3, [pc, #16]	; (8003d64 <SysTick_Config+0x40>)
 8003d54:	2207      	movs	r2, #7
 8003d56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003d58:	2300      	movs	r3, #0
}
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	3708      	adds	r7, #8
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	bd80      	pop	{r7, pc}
 8003d62:	bf00      	nop
 8003d64:	e000e010 	.word	0xe000e010

08003d68 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b082      	sub	sp, #8
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003d70:	6878      	ldr	r0, [r7, #4]
 8003d72:	f7ff ff2d 	bl	8003bd0 <__NVIC_SetPriorityGrouping>
}
 8003d76:	bf00      	nop
 8003d78:	3708      	adds	r7, #8
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	bd80      	pop	{r7, pc}

08003d7e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003d7e:	b580      	push	{r7, lr}
 8003d80:	b086      	sub	sp, #24
 8003d82:	af00      	add	r7, sp, #0
 8003d84:	4603      	mov	r3, r0
 8003d86:	60b9      	str	r1, [r7, #8]
 8003d88:	607a      	str	r2, [r7, #4]
 8003d8a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003d90:	f7ff ff42 	bl	8003c18 <__NVIC_GetPriorityGrouping>
 8003d94:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003d96:	687a      	ldr	r2, [r7, #4]
 8003d98:	68b9      	ldr	r1, [r7, #8]
 8003d9a:	6978      	ldr	r0, [r7, #20]
 8003d9c:	f7ff ff90 	bl	8003cc0 <NVIC_EncodePriority>
 8003da0:	4602      	mov	r2, r0
 8003da2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003da6:	4611      	mov	r1, r2
 8003da8:	4618      	mov	r0, r3
 8003daa:	f7ff ff5f 	bl	8003c6c <__NVIC_SetPriority>
}
 8003dae:	bf00      	nop
 8003db0:	3718      	adds	r7, #24
 8003db2:	46bd      	mov	sp, r7
 8003db4:	bd80      	pop	{r7, pc}

08003db6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003db6:	b580      	push	{r7, lr}
 8003db8:	b082      	sub	sp, #8
 8003dba:	af00      	add	r7, sp, #0
 8003dbc:	4603      	mov	r3, r0
 8003dbe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003dc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	f7ff ff35 	bl	8003c34 <__NVIC_EnableIRQ>
}
 8003dca:	bf00      	nop
 8003dcc:	3708      	adds	r7, #8
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	bd80      	pop	{r7, pc}

08003dd2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003dd2:	b580      	push	{r7, lr}
 8003dd4:	b082      	sub	sp, #8
 8003dd6:	af00      	add	r7, sp, #0
 8003dd8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003dda:	6878      	ldr	r0, [r7, #4]
 8003ddc:	f7ff ffa2 	bl	8003d24 <SysTick_Config>
 8003de0:	4603      	mov	r3, r0
}
 8003de2:	4618      	mov	r0, r3
 8003de4:	3708      	adds	r7, #8
 8003de6:	46bd      	mov	sp, r7
 8003de8:	bd80      	pop	{r7, pc}

08003dea <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8003dea:	b580      	push	{r7, lr}
 8003dec:	b082      	sub	sp, #8
 8003dee:	af00      	add	r7, sp, #0
 8003df0:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d101      	bne.n	8003dfc <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8003df8:	2301      	movs	r3, #1
 8003dfa:	e014      	b.n	8003e26 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	791b      	ldrb	r3, [r3, #4]
 8003e00:	b2db      	uxtb	r3, r3
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d105      	bne.n	8003e12 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	2200      	movs	r2, #0
 8003e0a:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003e0c:	6878      	ldr	r0, [r7, #4]
 8003e0e:	f7fe fc2d 	bl	800266c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2202      	movs	r2, #2
 8003e16:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2201      	movs	r2, #1
 8003e22:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8003e24:	2300      	movs	r3, #0
}
 8003e26:	4618      	mov	r0, r3
 8003e28:	3708      	adds	r7, #8
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	bd80      	pop	{r7, pc}

08003e2e <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8003e2e:	b480      	push	{r7}
 8003e30:	b083      	sub	sp, #12
 8003e32:	af00      	add	r7, sp, #0
 8003e34:	6078      	str	r0, [r7, #4]
 8003e36:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	795b      	ldrb	r3, [r3, #5]
 8003e3c:	2b01      	cmp	r3, #1
 8003e3e:	d101      	bne.n	8003e44 <HAL_DAC_Start+0x16>
 8003e40:	2302      	movs	r3, #2
 8003e42:	e040      	b.n	8003ec6 <HAL_DAC_Start+0x98>
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2201      	movs	r2, #1
 8003e48:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2202      	movs	r2, #2
 8003e4e:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	6819      	ldr	r1, [r3, #0]
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	f003 0310 	and.w	r3, r3, #16
 8003e5c:	2201      	movs	r2, #1
 8003e5e:	409a      	lsls	r2, r3
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	430a      	orrs	r2, r1
 8003e66:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d10f      	bne.n	8003e8e <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8003e78:	2b3c      	cmp	r3, #60	; 0x3c
 8003e7a:	d11d      	bne.n	8003eb8 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	685a      	ldr	r2, [r3, #4]
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f042 0201 	orr.w	r2, r2, #1
 8003e8a:	605a      	str	r2, [r3, #4]
 8003e8c:	e014      	b.n	8003eb8 <HAL_DAC_Start+0x8a>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	f003 0310 	and.w	r3, r3, #16
 8003e9e:	213c      	movs	r1, #60	; 0x3c
 8003ea0:	fa01 f303 	lsl.w	r3, r1, r3
 8003ea4:	429a      	cmp	r2, r3
 8003ea6:	d107      	bne.n	8003eb8 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	685a      	ldr	r2, [r3, #4]
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f042 0202 	orr.w	r2, r2, #2
 8003eb6:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2201      	movs	r2, #1
 8003ebc:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003ec4:	2300      	movs	r3, #0
}
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	370c      	adds	r7, #12
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	bc80      	pop	{r7}
 8003ece:	4770      	bx	lr

08003ed0 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8003ed0:	b480      	push	{r7}
 8003ed2:	b087      	sub	sp, #28
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	60f8      	str	r0, [r7, #12]
 8003ed8:	60b9      	str	r1, [r7, #8]
 8003eda:	607a      	str	r2, [r7, #4]
 8003edc:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8003ede:	2300      	movs	r3, #0
 8003ee0:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8003ee8:	68bb      	ldr	r3, [r7, #8]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d105      	bne.n	8003efa <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8003eee:	697a      	ldr	r2, [r7, #20]
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	4413      	add	r3, r2
 8003ef4:	3308      	adds	r3, #8
 8003ef6:	617b      	str	r3, [r7, #20]
 8003ef8:	e004      	b.n	8003f04 <HAL_DAC_SetValue+0x34>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8003efa:	697a      	ldr	r2, [r7, #20]
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	4413      	add	r3, r2
 8003f00:	3314      	adds	r3, #20
 8003f02:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8003f04:	697b      	ldr	r3, [r7, #20]
 8003f06:	461a      	mov	r2, r3
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8003f0c:	2300      	movs	r3, #0
}
 8003f0e:	4618      	mov	r0, r3
 8003f10:	371c      	adds	r7, #28
 8003f12:	46bd      	mov	sp, r7
 8003f14:	bc80      	pop	{r7}
 8003f16:	4770      	bx	lr

08003f18 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8003f18:	b480      	push	{r7}
 8003f1a:	b087      	sub	sp, #28
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	60f8      	str	r0, [r7, #12]
 8003f20:	60b9      	str	r1, [r7, #8]
 8003f22:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	795b      	ldrb	r3, [r3, #5]
 8003f28:	2b01      	cmp	r3, #1
 8003f2a:	d101      	bne.n	8003f30 <HAL_DAC_ConfigChannel+0x18>
 8003f2c:	2302      	movs	r3, #2
 8003f2e:	e03c      	b.n	8003faa <HAL_DAC_ConfigChannel+0x92>
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	2201      	movs	r2, #1
 8003f34:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	2202      	movs	r2, #2
 8003f3a:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	f003 0310 	and.w	r3, r3, #16
 8003f4a:	f640 72fe 	movw	r2, #4094	; 0xffe
 8003f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f52:	43db      	mvns	r3, r3
 8003f54:	697a      	ldr	r2, [r7, #20]
 8003f56:	4013      	ands	r3, r2
 8003f58:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8003f5a:	68bb      	ldr	r3, [r7, #8]
 8003f5c:	681a      	ldr	r2, [r3, #0]
 8003f5e:	68bb      	ldr	r3, [r7, #8]
 8003f60:	685b      	ldr	r3, [r3, #4]
 8003f62:	4313      	orrs	r3, r2
 8003f64:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	f003 0310 	and.w	r3, r3, #16
 8003f6c:	693a      	ldr	r2, [r7, #16]
 8003f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f72:	697a      	ldr	r2, [r7, #20]
 8003f74:	4313      	orrs	r3, r2
 8003f76:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	697a      	ldr	r2, [r7, #20]
 8003f7e:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	6819      	ldr	r1, [r3, #0]
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	f003 0310 	and.w	r3, r3, #16
 8003f8c:	22c0      	movs	r2, #192	; 0xc0
 8003f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f92:	43da      	mvns	r2, r3
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	400a      	ands	r2, r1
 8003f9a:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	2201      	movs	r2, #1
 8003fa0:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003fa8:	2300      	movs	r3, #0
}
 8003faa:	4618      	mov	r0, r3
 8003fac:	371c      	adds	r7, #28
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	bc80      	pop	{r7}
 8003fb2:	4770      	bx	lr

08003fb4 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003fb4:	b480      	push	{r7}
 8003fb6:	b085      	sub	sp, #20
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003fc6:	2b02      	cmp	r3, #2
 8003fc8:	d008      	beq.n	8003fdc <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	2204      	movs	r2, #4
 8003fce:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8003fd8:	2301      	movs	r3, #1
 8003fda:	e020      	b.n	800401e <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	681a      	ldr	r2, [r3, #0]
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f022 020e 	bic.w	r2, r2, #14
 8003fea:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	681a      	ldr	r2, [r3, #0]
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f022 0201 	bic.w	r2, r2, #1
 8003ffa:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004004:	2101      	movs	r1, #1
 8004006:	fa01 f202 	lsl.w	r2, r1, r2
 800400a:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2201      	movs	r2, #1
 8004010:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2200      	movs	r2, #0
 8004018:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800401c:	7bfb      	ldrb	r3, [r7, #15]
}
 800401e:	4618      	mov	r0, r3
 8004020:	3714      	adds	r7, #20
 8004022:	46bd      	mov	sp, r7
 8004024:	bc80      	pop	{r7}
 8004026:	4770      	bx	lr

08004028 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8004028:	b580      	push	{r7, lr}
 800402a:	b084      	sub	sp, #16
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004030:	2300      	movs	r3, #0
 8004032:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800403a:	2b02      	cmp	r3, #2
 800403c:	d005      	beq.n	800404a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2204      	movs	r2, #4
 8004042:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8004044:	2301      	movs	r3, #1
 8004046:	73fb      	strb	r3, [r7, #15]
 8004048:	e0d6      	b.n	80041f8 <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	681a      	ldr	r2, [r3, #0]
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f022 020e 	bic.w	r2, r2, #14
 8004058:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	681a      	ldr	r2, [r3, #0]
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f022 0201 	bic.w	r2, r2, #1
 8004068:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	461a      	mov	r2, r3
 8004070:	4b64      	ldr	r3, [pc, #400]	; (8004204 <HAL_DMA_Abort_IT+0x1dc>)
 8004072:	429a      	cmp	r2, r3
 8004074:	d958      	bls.n	8004128 <HAL_DMA_Abort_IT+0x100>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	4a63      	ldr	r2, [pc, #396]	; (8004208 <HAL_DMA_Abort_IT+0x1e0>)
 800407c:	4293      	cmp	r3, r2
 800407e:	d04f      	beq.n	8004120 <HAL_DMA_Abort_IT+0xf8>
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	4a61      	ldr	r2, [pc, #388]	; (800420c <HAL_DMA_Abort_IT+0x1e4>)
 8004086:	4293      	cmp	r3, r2
 8004088:	d048      	beq.n	800411c <HAL_DMA_Abort_IT+0xf4>
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	4a60      	ldr	r2, [pc, #384]	; (8004210 <HAL_DMA_Abort_IT+0x1e8>)
 8004090:	4293      	cmp	r3, r2
 8004092:	d040      	beq.n	8004116 <HAL_DMA_Abort_IT+0xee>
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	4a5e      	ldr	r2, [pc, #376]	; (8004214 <HAL_DMA_Abort_IT+0x1ec>)
 800409a:	4293      	cmp	r3, r2
 800409c:	d038      	beq.n	8004110 <HAL_DMA_Abort_IT+0xe8>
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	4a5d      	ldr	r2, [pc, #372]	; (8004218 <HAL_DMA_Abort_IT+0x1f0>)
 80040a4:	4293      	cmp	r3, r2
 80040a6:	d030      	beq.n	800410a <HAL_DMA_Abort_IT+0xe2>
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	4a5b      	ldr	r2, [pc, #364]	; (800421c <HAL_DMA_Abort_IT+0x1f4>)
 80040ae:	4293      	cmp	r3, r2
 80040b0:	d028      	beq.n	8004104 <HAL_DMA_Abort_IT+0xdc>
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	4a53      	ldr	r2, [pc, #332]	; (8004204 <HAL_DMA_Abort_IT+0x1dc>)
 80040b8:	4293      	cmp	r3, r2
 80040ba:	d020      	beq.n	80040fe <HAL_DMA_Abort_IT+0xd6>
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	4a57      	ldr	r2, [pc, #348]	; (8004220 <HAL_DMA_Abort_IT+0x1f8>)
 80040c2:	4293      	cmp	r3, r2
 80040c4:	d019      	beq.n	80040fa <HAL_DMA_Abort_IT+0xd2>
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	4a56      	ldr	r2, [pc, #344]	; (8004224 <HAL_DMA_Abort_IT+0x1fc>)
 80040cc:	4293      	cmp	r3, r2
 80040ce:	d012      	beq.n	80040f6 <HAL_DMA_Abort_IT+0xce>
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	4a54      	ldr	r2, [pc, #336]	; (8004228 <HAL_DMA_Abort_IT+0x200>)
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d00a      	beq.n	80040f0 <HAL_DMA_Abort_IT+0xc8>
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	4a53      	ldr	r2, [pc, #332]	; (800422c <HAL_DMA_Abort_IT+0x204>)
 80040e0:	4293      	cmp	r3, r2
 80040e2:	d102      	bne.n	80040ea <HAL_DMA_Abort_IT+0xc2>
 80040e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80040e8:	e01b      	b.n	8004122 <HAL_DMA_Abort_IT+0xfa>
 80040ea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80040ee:	e018      	b.n	8004122 <HAL_DMA_Abort_IT+0xfa>
 80040f0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80040f4:	e015      	b.n	8004122 <HAL_DMA_Abort_IT+0xfa>
 80040f6:	2310      	movs	r3, #16
 80040f8:	e013      	b.n	8004122 <HAL_DMA_Abort_IT+0xfa>
 80040fa:	2301      	movs	r3, #1
 80040fc:	e011      	b.n	8004122 <HAL_DMA_Abort_IT+0xfa>
 80040fe:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004102:	e00e      	b.n	8004122 <HAL_DMA_Abort_IT+0xfa>
 8004104:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004108:	e00b      	b.n	8004122 <HAL_DMA_Abort_IT+0xfa>
 800410a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800410e:	e008      	b.n	8004122 <HAL_DMA_Abort_IT+0xfa>
 8004110:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004114:	e005      	b.n	8004122 <HAL_DMA_Abort_IT+0xfa>
 8004116:	f44f 7380 	mov.w	r3, #256	; 0x100
 800411a:	e002      	b.n	8004122 <HAL_DMA_Abort_IT+0xfa>
 800411c:	2310      	movs	r3, #16
 800411e:	e000      	b.n	8004122 <HAL_DMA_Abort_IT+0xfa>
 8004120:	2301      	movs	r3, #1
 8004122:	4a43      	ldr	r2, [pc, #268]	; (8004230 <HAL_DMA_Abort_IT+0x208>)
 8004124:	6053      	str	r3, [r2, #4]
 8004126:	e057      	b.n	80041d8 <HAL_DMA_Abort_IT+0x1b0>
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	4a36      	ldr	r2, [pc, #216]	; (8004208 <HAL_DMA_Abort_IT+0x1e0>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d04f      	beq.n	80041d2 <HAL_DMA_Abort_IT+0x1aa>
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	4a35      	ldr	r2, [pc, #212]	; (800420c <HAL_DMA_Abort_IT+0x1e4>)
 8004138:	4293      	cmp	r3, r2
 800413a:	d048      	beq.n	80041ce <HAL_DMA_Abort_IT+0x1a6>
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	4a33      	ldr	r2, [pc, #204]	; (8004210 <HAL_DMA_Abort_IT+0x1e8>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d040      	beq.n	80041c8 <HAL_DMA_Abort_IT+0x1a0>
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	4a32      	ldr	r2, [pc, #200]	; (8004214 <HAL_DMA_Abort_IT+0x1ec>)
 800414c:	4293      	cmp	r3, r2
 800414e:	d038      	beq.n	80041c2 <HAL_DMA_Abort_IT+0x19a>
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	4a30      	ldr	r2, [pc, #192]	; (8004218 <HAL_DMA_Abort_IT+0x1f0>)
 8004156:	4293      	cmp	r3, r2
 8004158:	d030      	beq.n	80041bc <HAL_DMA_Abort_IT+0x194>
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	4a2f      	ldr	r2, [pc, #188]	; (800421c <HAL_DMA_Abort_IT+0x1f4>)
 8004160:	4293      	cmp	r3, r2
 8004162:	d028      	beq.n	80041b6 <HAL_DMA_Abort_IT+0x18e>
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	4a26      	ldr	r2, [pc, #152]	; (8004204 <HAL_DMA_Abort_IT+0x1dc>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d020      	beq.n	80041b0 <HAL_DMA_Abort_IT+0x188>
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	4a2b      	ldr	r2, [pc, #172]	; (8004220 <HAL_DMA_Abort_IT+0x1f8>)
 8004174:	4293      	cmp	r3, r2
 8004176:	d019      	beq.n	80041ac <HAL_DMA_Abort_IT+0x184>
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	4a29      	ldr	r2, [pc, #164]	; (8004224 <HAL_DMA_Abort_IT+0x1fc>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d012      	beq.n	80041a8 <HAL_DMA_Abort_IT+0x180>
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	4a28      	ldr	r2, [pc, #160]	; (8004228 <HAL_DMA_Abort_IT+0x200>)
 8004188:	4293      	cmp	r3, r2
 800418a:	d00a      	beq.n	80041a2 <HAL_DMA_Abort_IT+0x17a>
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	4a26      	ldr	r2, [pc, #152]	; (800422c <HAL_DMA_Abort_IT+0x204>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d102      	bne.n	800419c <HAL_DMA_Abort_IT+0x174>
 8004196:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800419a:	e01b      	b.n	80041d4 <HAL_DMA_Abort_IT+0x1ac>
 800419c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80041a0:	e018      	b.n	80041d4 <HAL_DMA_Abort_IT+0x1ac>
 80041a2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80041a6:	e015      	b.n	80041d4 <HAL_DMA_Abort_IT+0x1ac>
 80041a8:	2310      	movs	r3, #16
 80041aa:	e013      	b.n	80041d4 <HAL_DMA_Abort_IT+0x1ac>
 80041ac:	2301      	movs	r3, #1
 80041ae:	e011      	b.n	80041d4 <HAL_DMA_Abort_IT+0x1ac>
 80041b0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80041b4:	e00e      	b.n	80041d4 <HAL_DMA_Abort_IT+0x1ac>
 80041b6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80041ba:	e00b      	b.n	80041d4 <HAL_DMA_Abort_IT+0x1ac>
 80041bc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80041c0:	e008      	b.n	80041d4 <HAL_DMA_Abort_IT+0x1ac>
 80041c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80041c6:	e005      	b.n	80041d4 <HAL_DMA_Abort_IT+0x1ac>
 80041c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80041cc:	e002      	b.n	80041d4 <HAL_DMA_Abort_IT+0x1ac>
 80041ce:	2310      	movs	r3, #16
 80041d0:	e000      	b.n	80041d4 <HAL_DMA_Abort_IT+0x1ac>
 80041d2:	2301      	movs	r3, #1
 80041d4:	4a17      	ldr	r2, [pc, #92]	; (8004234 <HAL_DMA_Abort_IT+0x20c>)
 80041d6:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2201      	movs	r2, #1
 80041dc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2200      	movs	r2, #0
 80041e4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d003      	beq.n	80041f8 <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041f4:	6878      	ldr	r0, [r7, #4]
 80041f6:	4798      	blx	r3
    } 
  }
  return status;
 80041f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80041fa:	4618      	mov	r0, r3
 80041fc:	3710      	adds	r7, #16
 80041fe:	46bd      	mov	sp, r7
 8004200:	bd80      	pop	{r7, pc}
 8004202:	bf00      	nop
 8004204:	40020080 	.word	0x40020080
 8004208:	40020008 	.word	0x40020008
 800420c:	4002001c 	.word	0x4002001c
 8004210:	40020030 	.word	0x40020030
 8004214:	40020044 	.word	0x40020044
 8004218:	40020058 	.word	0x40020058
 800421c:	4002006c 	.word	0x4002006c
 8004220:	40020408 	.word	0x40020408
 8004224:	4002041c 	.word	0x4002041c
 8004228:	40020430 	.word	0x40020430
 800422c:	40020444 	.word	0x40020444
 8004230:	40020400 	.word	0x40020400
 8004234:	40020000 	.word	0x40020000

08004238 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004238:	b480      	push	{r7}
 800423a:	b08b      	sub	sp, #44	; 0x2c
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
 8004240:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004242:	2300      	movs	r3, #0
 8004244:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8004246:	2300      	movs	r3, #0
 8004248:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800424a:	e169      	b.n	8004520 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800424c:	2201      	movs	r2, #1
 800424e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004250:	fa02 f303 	lsl.w	r3, r2, r3
 8004254:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	69fa      	ldr	r2, [r7, #28]
 800425c:	4013      	ands	r3, r2
 800425e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8004260:	69ba      	ldr	r2, [r7, #24]
 8004262:	69fb      	ldr	r3, [r7, #28]
 8004264:	429a      	cmp	r2, r3
 8004266:	f040 8158 	bne.w	800451a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	685b      	ldr	r3, [r3, #4]
 800426e:	4a9a      	ldr	r2, [pc, #616]	; (80044d8 <HAL_GPIO_Init+0x2a0>)
 8004270:	4293      	cmp	r3, r2
 8004272:	d05e      	beq.n	8004332 <HAL_GPIO_Init+0xfa>
 8004274:	4a98      	ldr	r2, [pc, #608]	; (80044d8 <HAL_GPIO_Init+0x2a0>)
 8004276:	4293      	cmp	r3, r2
 8004278:	d875      	bhi.n	8004366 <HAL_GPIO_Init+0x12e>
 800427a:	4a98      	ldr	r2, [pc, #608]	; (80044dc <HAL_GPIO_Init+0x2a4>)
 800427c:	4293      	cmp	r3, r2
 800427e:	d058      	beq.n	8004332 <HAL_GPIO_Init+0xfa>
 8004280:	4a96      	ldr	r2, [pc, #600]	; (80044dc <HAL_GPIO_Init+0x2a4>)
 8004282:	4293      	cmp	r3, r2
 8004284:	d86f      	bhi.n	8004366 <HAL_GPIO_Init+0x12e>
 8004286:	4a96      	ldr	r2, [pc, #600]	; (80044e0 <HAL_GPIO_Init+0x2a8>)
 8004288:	4293      	cmp	r3, r2
 800428a:	d052      	beq.n	8004332 <HAL_GPIO_Init+0xfa>
 800428c:	4a94      	ldr	r2, [pc, #592]	; (80044e0 <HAL_GPIO_Init+0x2a8>)
 800428e:	4293      	cmp	r3, r2
 8004290:	d869      	bhi.n	8004366 <HAL_GPIO_Init+0x12e>
 8004292:	4a94      	ldr	r2, [pc, #592]	; (80044e4 <HAL_GPIO_Init+0x2ac>)
 8004294:	4293      	cmp	r3, r2
 8004296:	d04c      	beq.n	8004332 <HAL_GPIO_Init+0xfa>
 8004298:	4a92      	ldr	r2, [pc, #584]	; (80044e4 <HAL_GPIO_Init+0x2ac>)
 800429a:	4293      	cmp	r3, r2
 800429c:	d863      	bhi.n	8004366 <HAL_GPIO_Init+0x12e>
 800429e:	4a92      	ldr	r2, [pc, #584]	; (80044e8 <HAL_GPIO_Init+0x2b0>)
 80042a0:	4293      	cmp	r3, r2
 80042a2:	d046      	beq.n	8004332 <HAL_GPIO_Init+0xfa>
 80042a4:	4a90      	ldr	r2, [pc, #576]	; (80044e8 <HAL_GPIO_Init+0x2b0>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d85d      	bhi.n	8004366 <HAL_GPIO_Init+0x12e>
 80042aa:	2b12      	cmp	r3, #18
 80042ac:	d82a      	bhi.n	8004304 <HAL_GPIO_Init+0xcc>
 80042ae:	2b12      	cmp	r3, #18
 80042b0:	d859      	bhi.n	8004366 <HAL_GPIO_Init+0x12e>
 80042b2:	a201      	add	r2, pc, #4	; (adr r2, 80042b8 <HAL_GPIO_Init+0x80>)
 80042b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042b8:	08004333 	.word	0x08004333
 80042bc:	0800430d 	.word	0x0800430d
 80042c0:	0800431f 	.word	0x0800431f
 80042c4:	08004361 	.word	0x08004361
 80042c8:	08004367 	.word	0x08004367
 80042cc:	08004367 	.word	0x08004367
 80042d0:	08004367 	.word	0x08004367
 80042d4:	08004367 	.word	0x08004367
 80042d8:	08004367 	.word	0x08004367
 80042dc:	08004367 	.word	0x08004367
 80042e0:	08004367 	.word	0x08004367
 80042e4:	08004367 	.word	0x08004367
 80042e8:	08004367 	.word	0x08004367
 80042ec:	08004367 	.word	0x08004367
 80042f0:	08004367 	.word	0x08004367
 80042f4:	08004367 	.word	0x08004367
 80042f8:	08004367 	.word	0x08004367
 80042fc:	08004315 	.word	0x08004315
 8004300:	08004329 	.word	0x08004329
 8004304:	4a79      	ldr	r2, [pc, #484]	; (80044ec <HAL_GPIO_Init+0x2b4>)
 8004306:	4293      	cmp	r3, r2
 8004308:	d013      	beq.n	8004332 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800430a:	e02c      	b.n	8004366 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	68db      	ldr	r3, [r3, #12]
 8004310:	623b      	str	r3, [r7, #32]
          break;
 8004312:	e029      	b.n	8004368 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	68db      	ldr	r3, [r3, #12]
 8004318:	3304      	adds	r3, #4
 800431a:	623b      	str	r3, [r7, #32]
          break;
 800431c:	e024      	b.n	8004368 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	68db      	ldr	r3, [r3, #12]
 8004322:	3308      	adds	r3, #8
 8004324:	623b      	str	r3, [r7, #32]
          break;
 8004326:	e01f      	b.n	8004368 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	68db      	ldr	r3, [r3, #12]
 800432c:	330c      	adds	r3, #12
 800432e:	623b      	str	r3, [r7, #32]
          break;
 8004330:	e01a      	b.n	8004368 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	689b      	ldr	r3, [r3, #8]
 8004336:	2b00      	cmp	r3, #0
 8004338:	d102      	bne.n	8004340 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800433a:	2304      	movs	r3, #4
 800433c:	623b      	str	r3, [r7, #32]
          break;
 800433e:	e013      	b.n	8004368 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	689b      	ldr	r3, [r3, #8]
 8004344:	2b01      	cmp	r3, #1
 8004346:	d105      	bne.n	8004354 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004348:	2308      	movs	r3, #8
 800434a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	69fa      	ldr	r2, [r7, #28]
 8004350:	611a      	str	r2, [r3, #16]
          break;
 8004352:	e009      	b.n	8004368 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004354:	2308      	movs	r3, #8
 8004356:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	69fa      	ldr	r2, [r7, #28]
 800435c:	615a      	str	r2, [r3, #20]
          break;
 800435e:	e003      	b.n	8004368 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8004360:	2300      	movs	r3, #0
 8004362:	623b      	str	r3, [r7, #32]
          break;
 8004364:	e000      	b.n	8004368 <HAL_GPIO_Init+0x130>
          break;
 8004366:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004368:	69bb      	ldr	r3, [r7, #24]
 800436a:	2bff      	cmp	r3, #255	; 0xff
 800436c:	d801      	bhi.n	8004372 <HAL_GPIO_Init+0x13a>
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	e001      	b.n	8004376 <HAL_GPIO_Init+0x13e>
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	3304      	adds	r3, #4
 8004376:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004378:	69bb      	ldr	r3, [r7, #24]
 800437a:	2bff      	cmp	r3, #255	; 0xff
 800437c:	d802      	bhi.n	8004384 <HAL_GPIO_Init+0x14c>
 800437e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004380:	009b      	lsls	r3, r3, #2
 8004382:	e002      	b.n	800438a <HAL_GPIO_Init+0x152>
 8004384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004386:	3b08      	subs	r3, #8
 8004388:	009b      	lsls	r3, r3, #2
 800438a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800438c:	697b      	ldr	r3, [r7, #20]
 800438e:	681a      	ldr	r2, [r3, #0]
 8004390:	210f      	movs	r1, #15
 8004392:	693b      	ldr	r3, [r7, #16]
 8004394:	fa01 f303 	lsl.w	r3, r1, r3
 8004398:	43db      	mvns	r3, r3
 800439a:	401a      	ands	r2, r3
 800439c:	6a39      	ldr	r1, [r7, #32]
 800439e:	693b      	ldr	r3, [r7, #16]
 80043a0:	fa01 f303 	lsl.w	r3, r1, r3
 80043a4:	431a      	orrs	r2, r3
 80043a6:	697b      	ldr	r3, [r7, #20]
 80043a8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	685b      	ldr	r3, [r3, #4]
 80043ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	f000 80b1 	beq.w	800451a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80043b8:	4b4d      	ldr	r3, [pc, #308]	; (80044f0 <HAL_GPIO_Init+0x2b8>)
 80043ba:	699b      	ldr	r3, [r3, #24]
 80043bc:	4a4c      	ldr	r2, [pc, #304]	; (80044f0 <HAL_GPIO_Init+0x2b8>)
 80043be:	f043 0301 	orr.w	r3, r3, #1
 80043c2:	6193      	str	r3, [r2, #24]
 80043c4:	4b4a      	ldr	r3, [pc, #296]	; (80044f0 <HAL_GPIO_Init+0x2b8>)
 80043c6:	699b      	ldr	r3, [r3, #24]
 80043c8:	f003 0301 	and.w	r3, r3, #1
 80043cc:	60bb      	str	r3, [r7, #8]
 80043ce:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80043d0:	4a48      	ldr	r2, [pc, #288]	; (80044f4 <HAL_GPIO_Init+0x2bc>)
 80043d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043d4:	089b      	lsrs	r3, r3, #2
 80043d6:	3302      	adds	r3, #2
 80043d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80043dc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80043de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043e0:	f003 0303 	and.w	r3, r3, #3
 80043e4:	009b      	lsls	r3, r3, #2
 80043e6:	220f      	movs	r2, #15
 80043e8:	fa02 f303 	lsl.w	r3, r2, r3
 80043ec:	43db      	mvns	r3, r3
 80043ee:	68fa      	ldr	r2, [r7, #12]
 80043f0:	4013      	ands	r3, r2
 80043f2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	4a40      	ldr	r2, [pc, #256]	; (80044f8 <HAL_GPIO_Init+0x2c0>)
 80043f8:	4293      	cmp	r3, r2
 80043fa:	d013      	beq.n	8004424 <HAL_GPIO_Init+0x1ec>
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	4a3f      	ldr	r2, [pc, #252]	; (80044fc <HAL_GPIO_Init+0x2c4>)
 8004400:	4293      	cmp	r3, r2
 8004402:	d00d      	beq.n	8004420 <HAL_GPIO_Init+0x1e8>
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	4a3e      	ldr	r2, [pc, #248]	; (8004500 <HAL_GPIO_Init+0x2c8>)
 8004408:	4293      	cmp	r3, r2
 800440a:	d007      	beq.n	800441c <HAL_GPIO_Init+0x1e4>
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	4a3d      	ldr	r2, [pc, #244]	; (8004504 <HAL_GPIO_Init+0x2cc>)
 8004410:	4293      	cmp	r3, r2
 8004412:	d101      	bne.n	8004418 <HAL_GPIO_Init+0x1e0>
 8004414:	2303      	movs	r3, #3
 8004416:	e006      	b.n	8004426 <HAL_GPIO_Init+0x1ee>
 8004418:	2304      	movs	r3, #4
 800441a:	e004      	b.n	8004426 <HAL_GPIO_Init+0x1ee>
 800441c:	2302      	movs	r3, #2
 800441e:	e002      	b.n	8004426 <HAL_GPIO_Init+0x1ee>
 8004420:	2301      	movs	r3, #1
 8004422:	e000      	b.n	8004426 <HAL_GPIO_Init+0x1ee>
 8004424:	2300      	movs	r3, #0
 8004426:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004428:	f002 0203 	and.w	r2, r2, #3
 800442c:	0092      	lsls	r2, r2, #2
 800442e:	4093      	lsls	r3, r2
 8004430:	68fa      	ldr	r2, [r7, #12]
 8004432:	4313      	orrs	r3, r2
 8004434:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8004436:	492f      	ldr	r1, [pc, #188]	; (80044f4 <HAL_GPIO_Init+0x2bc>)
 8004438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800443a:	089b      	lsrs	r3, r3, #2
 800443c:	3302      	adds	r3, #2
 800443e:	68fa      	ldr	r2, [r7, #12]
 8004440:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	685b      	ldr	r3, [r3, #4]
 8004448:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800444c:	2b00      	cmp	r3, #0
 800444e:	d006      	beq.n	800445e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8004450:	4b2d      	ldr	r3, [pc, #180]	; (8004508 <HAL_GPIO_Init+0x2d0>)
 8004452:	681a      	ldr	r2, [r3, #0]
 8004454:	492c      	ldr	r1, [pc, #176]	; (8004508 <HAL_GPIO_Init+0x2d0>)
 8004456:	69bb      	ldr	r3, [r7, #24]
 8004458:	4313      	orrs	r3, r2
 800445a:	600b      	str	r3, [r1, #0]
 800445c:	e006      	b.n	800446c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800445e:	4b2a      	ldr	r3, [pc, #168]	; (8004508 <HAL_GPIO_Init+0x2d0>)
 8004460:	681a      	ldr	r2, [r3, #0]
 8004462:	69bb      	ldr	r3, [r7, #24]
 8004464:	43db      	mvns	r3, r3
 8004466:	4928      	ldr	r1, [pc, #160]	; (8004508 <HAL_GPIO_Init+0x2d0>)
 8004468:	4013      	ands	r3, r2
 800446a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	685b      	ldr	r3, [r3, #4]
 8004470:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004474:	2b00      	cmp	r3, #0
 8004476:	d006      	beq.n	8004486 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8004478:	4b23      	ldr	r3, [pc, #140]	; (8004508 <HAL_GPIO_Init+0x2d0>)
 800447a:	685a      	ldr	r2, [r3, #4]
 800447c:	4922      	ldr	r1, [pc, #136]	; (8004508 <HAL_GPIO_Init+0x2d0>)
 800447e:	69bb      	ldr	r3, [r7, #24]
 8004480:	4313      	orrs	r3, r2
 8004482:	604b      	str	r3, [r1, #4]
 8004484:	e006      	b.n	8004494 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8004486:	4b20      	ldr	r3, [pc, #128]	; (8004508 <HAL_GPIO_Init+0x2d0>)
 8004488:	685a      	ldr	r2, [r3, #4]
 800448a:	69bb      	ldr	r3, [r7, #24]
 800448c:	43db      	mvns	r3, r3
 800448e:	491e      	ldr	r1, [pc, #120]	; (8004508 <HAL_GPIO_Init+0x2d0>)
 8004490:	4013      	ands	r3, r2
 8004492:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	685b      	ldr	r3, [r3, #4]
 8004498:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800449c:	2b00      	cmp	r3, #0
 800449e:	d006      	beq.n	80044ae <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80044a0:	4b19      	ldr	r3, [pc, #100]	; (8004508 <HAL_GPIO_Init+0x2d0>)
 80044a2:	689a      	ldr	r2, [r3, #8]
 80044a4:	4918      	ldr	r1, [pc, #96]	; (8004508 <HAL_GPIO_Init+0x2d0>)
 80044a6:	69bb      	ldr	r3, [r7, #24]
 80044a8:	4313      	orrs	r3, r2
 80044aa:	608b      	str	r3, [r1, #8]
 80044ac:	e006      	b.n	80044bc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80044ae:	4b16      	ldr	r3, [pc, #88]	; (8004508 <HAL_GPIO_Init+0x2d0>)
 80044b0:	689a      	ldr	r2, [r3, #8]
 80044b2:	69bb      	ldr	r3, [r7, #24]
 80044b4:	43db      	mvns	r3, r3
 80044b6:	4914      	ldr	r1, [pc, #80]	; (8004508 <HAL_GPIO_Init+0x2d0>)
 80044b8:	4013      	ands	r3, r2
 80044ba:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	685b      	ldr	r3, [r3, #4]
 80044c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d021      	beq.n	800450c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80044c8:	4b0f      	ldr	r3, [pc, #60]	; (8004508 <HAL_GPIO_Init+0x2d0>)
 80044ca:	68da      	ldr	r2, [r3, #12]
 80044cc:	490e      	ldr	r1, [pc, #56]	; (8004508 <HAL_GPIO_Init+0x2d0>)
 80044ce:	69bb      	ldr	r3, [r7, #24]
 80044d0:	4313      	orrs	r3, r2
 80044d2:	60cb      	str	r3, [r1, #12]
 80044d4:	e021      	b.n	800451a <HAL_GPIO_Init+0x2e2>
 80044d6:	bf00      	nop
 80044d8:	10320000 	.word	0x10320000
 80044dc:	10310000 	.word	0x10310000
 80044e0:	10220000 	.word	0x10220000
 80044e4:	10210000 	.word	0x10210000
 80044e8:	10120000 	.word	0x10120000
 80044ec:	10110000 	.word	0x10110000
 80044f0:	40021000 	.word	0x40021000
 80044f4:	40010000 	.word	0x40010000
 80044f8:	40010800 	.word	0x40010800
 80044fc:	40010c00 	.word	0x40010c00
 8004500:	40011000 	.word	0x40011000
 8004504:	40011400 	.word	0x40011400
 8004508:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800450c:	4b0b      	ldr	r3, [pc, #44]	; (800453c <HAL_GPIO_Init+0x304>)
 800450e:	68da      	ldr	r2, [r3, #12]
 8004510:	69bb      	ldr	r3, [r7, #24]
 8004512:	43db      	mvns	r3, r3
 8004514:	4909      	ldr	r1, [pc, #36]	; (800453c <HAL_GPIO_Init+0x304>)
 8004516:	4013      	ands	r3, r2
 8004518:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800451a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800451c:	3301      	adds	r3, #1
 800451e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	681a      	ldr	r2, [r3, #0]
 8004524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004526:	fa22 f303 	lsr.w	r3, r2, r3
 800452a:	2b00      	cmp	r3, #0
 800452c:	f47f ae8e 	bne.w	800424c <HAL_GPIO_Init+0x14>
  }
}
 8004530:	bf00      	nop
 8004532:	bf00      	nop
 8004534:	372c      	adds	r7, #44	; 0x2c
 8004536:	46bd      	mov	sp, r7
 8004538:	bc80      	pop	{r7}
 800453a:	4770      	bx	lr
 800453c:	40010400 	.word	0x40010400

08004540 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004540:	b480      	push	{r7}
 8004542:	b083      	sub	sp, #12
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
 8004548:	460b      	mov	r3, r1
 800454a:	807b      	strh	r3, [r7, #2]
 800454c:	4613      	mov	r3, r2
 800454e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004550:	787b      	ldrb	r3, [r7, #1]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d003      	beq.n	800455e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004556:	887a      	ldrh	r2, [r7, #2]
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800455c:	e003      	b.n	8004566 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800455e:	887b      	ldrh	r3, [r7, #2]
 8004560:	041a      	lsls	r2, r3, #16
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	611a      	str	r2, [r3, #16]
}
 8004566:	bf00      	nop
 8004568:	370c      	adds	r7, #12
 800456a:	46bd      	mov	sp, r7
 800456c:	bc80      	pop	{r7}
 800456e:	4770      	bx	lr

08004570 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004570:	b480      	push	{r7}
 8004572:	b085      	sub	sp, #20
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
 8004578:	460b      	mov	r3, r1
 800457a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	68db      	ldr	r3, [r3, #12]
 8004580:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004582:	887a      	ldrh	r2, [r7, #2]
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	4013      	ands	r3, r2
 8004588:	041a      	lsls	r2, r3, #16
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	43d9      	mvns	r1, r3
 800458e:	887b      	ldrh	r3, [r7, #2]
 8004590:	400b      	ands	r3, r1
 8004592:	431a      	orrs	r2, r3
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	611a      	str	r2, [r3, #16]
}
 8004598:	bf00      	nop
 800459a:	3714      	adds	r7, #20
 800459c:	46bd      	mov	sp, r7
 800459e:	bc80      	pop	{r7}
 80045a0:	4770      	bx	lr
	...

080045a4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b084      	sub	sp, #16
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d101      	bne.n	80045b6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80045b2:	2301      	movs	r3, #1
 80045b4:	e12b      	b.n	800480e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045bc:	b2db      	uxtb	r3, r3
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d106      	bne.n	80045d0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	2200      	movs	r2, #0
 80045c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80045ca:	6878      	ldr	r0, [r7, #4]
 80045cc:	f7fe f88a 	bl	80026e4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2224      	movs	r2, #36	; 0x24
 80045d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	681a      	ldr	r2, [r3, #0]
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f022 0201 	bic.w	r2, r2, #1
 80045e6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	681a      	ldr	r2, [r3, #0]
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80045f6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	681a      	ldr	r2, [r3, #0]
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004606:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004608:	f000 fe00 	bl	800520c <HAL_RCC_GetPCLK1Freq>
 800460c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	685b      	ldr	r3, [r3, #4]
 8004612:	4a81      	ldr	r2, [pc, #516]	; (8004818 <HAL_I2C_Init+0x274>)
 8004614:	4293      	cmp	r3, r2
 8004616:	d807      	bhi.n	8004628 <HAL_I2C_Init+0x84>
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	4a80      	ldr	r2, [pc, #512]	; (800481c <HAL_I2C_Init+0x278>)
 800461c:	4293      	cmp	r3, r2
 800461e:	bf94      	ite	ls
 8004620:	2301      	movls	r3, #1
 8004622:	2300      	movhi	r3, #0
 8004624:	b2db      	uxtb	r3, r3
 8004626:	e006      	b.n	8004636 <HAL_I2C_Init+0x92>
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	4a7d      	ldr	r2, [pc, #500]	; (8004820 <HAL_I2C_Init+0x27c>)
 800462c:	4293      	cmp	r3, r2
 800462e:	bf94      	ite	ls
 8004630:	2301      	movls	r3, #1
 8004632:	2300      	movhi	r3, #0
 8004634:	b2db      	uxtb	r3, r3
 8004636:	2b00      	cmp	r3, #0
 8004638:	d001      	beq.n	800463e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800463a:	2301      	movs	r3, #1
 800463c:	e0e7      	b.n	800480e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	4a78      	ldr	r2, [pc, #480]	; (8004824 <HAL_I2C_Init+0x280>)
 8004642:	fba2 2303 	umull	r2, r3, r2, r3
 8004646:	0c9b      	lsrs	r3, r3, #18
 8004648:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	685b      	ldr	r3, [r3, #4]
 8004650:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	68ba      	ldr	r2, [r7, #8]
 800465a:	430a      	orrs	r2, r1
 800465c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	6a1b      	ldr	r3, [r3, #32]
 8004664:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	685b      	ldr	r3, [r3, #4]
 800466c:	4a6a      	ldr	r2, [pc, #424]	; (8004818 <HAL_I2C_Init+0x274>)
 800466e:	4293      	cmp	r3, r2
 8004670:	d802      	bhi.n	8004678 <HAL_I2C_Init+0xd4>
 8004672:	68bb      	ldr	r3, [r7, #8]
 8004674:	3301      	adds	r3, #1
 8004676:	e009      	b.n	800468c <HAL_I2C_Init+0xe8>
 8004678:	68bb      	ldr	r3, [r7, #8]
 800467a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800467e:	fb02 f303 	mul.w	r3, r2, r3
 8004682:	4a69      	ldr	r2, [pc, #420]	; (8004828 <HAL_I2C_Init+0x284>)
 8004684:	fba2 2303 	umull	r2, r3, r2, r3
 8004688:	099b      	lsrs	r3, r3, #6
 800468a:	3301      	adds	r3, #1
 800468c:	687a      	ldr	r2, [r7, #4]
 800468e:	6812      	ldr	r2, [r2, #0]
 8004690:	430b      	orrs	r3, r1
 8004692:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	69db      	ldr	r3, [r3, #28]
 800469a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800469e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	685b      	ldr	r3, [r3, #4]
 80046a6:	495c      	ldr	r1, [pc, #368]	; (8004818 <HAL_I2C_Init+0x274>)
 80046a8:	428b      	cmp	r3, r1
 80046aa:	d819      	bhi.n	80046e0 <HAL_I2C_Init+0x13c>
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	1e59      	subs	r1, r3, #1
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	685b      	ldr	r3, [r3, #4]
 80046b4:	005b      	lsls	r3, r3, #1
 80046b6:	fbb1 f3f3 	udiv	r3, r1, r3
 80046ba:	1c59      	adds	r1, r3, #1
 80046bc:	f640 73fc 	movw	r3, #4092	; 0xffc
 80046c0:	400b      	ands	r3, r1
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d00a      	beq.n	80046dc <HAL_I2C_Init+0x138>
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	1e59      	subs	r1, r3, #1
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	685b      	ldr	r3, [r3, #4]
 80046ce:	005b      	lsls	r3, r3, #1
 80046d0:	fbb1 f3f3 	udiv	r3, r1, r3
 80046d4:	3301      	adds	r3, #1
 80046d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80046da:	e051      	b.n	8004780 <HAL_I2C_Init+0x1dc>
 80046dc:	2304      	movs	r3, #4
 80046de:	e04f      	b.n	8004780 <HAL_I2C_Init+0x1dc>
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	689b      	ldr	r3, [r3, #8]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d111      	bne.n	800470c <HAL_I2C_Init+0x168>
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	1e58      	subs	r0, r3, #1
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6859      	ldr	r1, [r3, #4]
 80046f0:	460b      	mov	r3, r1
 80046f2:	005b      	lsls	r3, r3, #1
 80046f4:	440b      	add	r3, r1
 80046f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80046fa:	3301      	adds	r3, #1
 80046fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004700:	2b00      	cmp	r3, #0
 8004702:	bf0c      	ite	eq
 8004704:	2301      	moveq	r3, #1
 8004706:	2300      	movne	r3, #0
 8004708:	b2db      	uxtb	r3, r3
 800470a:	e012      	b.n	8004732 <HAL_I2C_Init+0x18e>
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	1e58      	subs	r0, r3, #1
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6859      	ldr	r1, [r3, #4]
 8004714:	460b      	mov	r3, r1
 8004716:	009b      	lsls	r3, r3, #2
 8004718:	440b      	add	r3, r1
 800471a:	0099      	lsls	r1, r3, #2
 800471c:	440b      	add	r3, r1
 800471e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004722:	3301      	adds	r3, #1
 8004724:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004728:	2b00      	cmp	r3, #0
 800472a:	bf0c      	ite	eq
 800472c:	2301      	moveq	r3, #1
 800472e:	2300      	movne	r3, #0
 8004730:	b2db      	uxtb	r3, r3
 8004732:	2b00      	cmp	r3, #0
 8004734:	d001      	beq.n	800473a <HAL_I2C_Init+0x196>
 8004736:	2301      	movs	r3, #1
 8004738:	e022      	b.n	8004780 <HAL_I2C_Init+0x1dc>
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	689b      	ldr	r3, [r3, #8]
 800473e:	2b00      	cmp	r3, #0
 8004740:	d10e      	bne.n	8004760 <HAL_I2C_Init+0x1bc>
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	1e58      	subs	r0, r3, #1
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6859      	ldr	r1, [r3, #4]
 800474a:	460b      	mov	r3, r1
 800474c:	005b      	lsls	r3, r3, #1
 800474e:	440b      	add	r3, r1
 8004750:	fbb0 f3f3 	udiv	r3, r0, r3
 8004754:	3301      	adds	r3, #1
 8004756:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800475a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800475e:	e00f      	b.n	8004780 <HAL_I2C_Init+0x1dc>
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	1e58      	subs	r0, r3, #1
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6859      	ldr	r1, [r3, #4]
 8004768:	460b      	mov	r3, r1
 800476a:	009b      	lsls	r3, r3, #2
 800476c:	440b      	add	r3, r1
 800476e:	0099      	lsls	r1, r3, #2
 8004770:	440b      	add	r3, r1
 8004772:	fbb0 f3f3 	udiv	r3, r0, r3
 8004776:	3301      	adds	r3, #1
 8004778:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800477c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004780:	6879      	ldr	r1, [r7, #4]
 8004782:	6809      	ldr	r1, [r1, #0]
 8004784:	4313      	orrs	r3, r2
 8004786:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	69da      	ldr	r2, [r3, #28]
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6a1b      	ldr	r3, [r3, #32]
 800479a:	431a      	orrs	r2, r3
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	430a      	orrs	r2, r1
 80047a2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	689b      	ldr	r3, [r3, #8]
 80047aa:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80047ae:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80047b2:	687a      	ldr	r2, [r7, #4]
 80047b4:	6911      	ldr	r1, [r2, #16]
 80047b6:	687a      	ldr	r2, [r7, #4]
 80047b8:	68d2      	ldr	r2, [r2, #12]
 80047ba:	4311      	orrs	r1, r2
 80047bc:	687a      	ldr	r2, [r7, #4]
 80047be:	6812      	ldr	r2, [r2, #0]
 80047c0:	430b      	orrs	r3, r1
 80047c2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	68db      	ldr	r3, [r3, #12]
 80047ca:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	695a      	ldr	r2, [r3, #20]
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	699b      	ldr	r3, [r3, #24]
 80047d6:	431a      	orrs	r2, r3
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	430a      	orrs	r2, r1
 80047de:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	681a      	ldr	r2, [r3, #0]
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f042 0201 	orr.w	r2, r2, #1
 80047ee:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2200      	movs	r2, #0
 80047f4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2220      	movs	r2, #32
 80047fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	2200      	movs	r2, #0
 8004802:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2200      	movs	r2, #0
 8004808:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800480c:	2300      	movs	r3, #0
}
 800480e:	4618      	mov	r0, r3
 8004810:	3710      	adds	r7, #16
 8004812:	46bd      	mov	sp, r7
 8004814:	bd80      	pop	{r7, pc}
 8004816:	bf00      	nop
 8004818:	000186a0 	.word	0x000186a0
 800481c:	001e847f 	.word	0x001e847f
 8004820:	003d08ff 	.word	0x003d08ff
 8004824:	431bde83 	.word	0x431bde83
 8004828:	10624dd3 	.word	0x10624dd3

0800482c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800482c:	b580      	push	{r7, lr}
 800482e:	b086      	sub	sp, #24
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2b00      	cmp	r3, #0
 8004838:	d101      	bne.n	800483e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800483a:	2301      	movs	r3, #1
 800483c:	e304      	b.n	8004e48 <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f003 0301 	and.w	r3, r3, #1
 8004846:	2b00      	cmp	r3, #0
 8004848:	f000 8087 	beq.w	800495a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800484c:	4b92      	ldr	r3, [pc, #584]	; (8004a98 <HAL_RCC_OscConfig+0x26c>)
 800484e:	685b      	ldr	r3, [r3, #4]
 8004850:	f003 030c 	and.w	r3, r3, #12
 8004854:	2b04      	cmp	r3, #4
 8004856:	d00c      	beq.n	8004872 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004858:	4b8f      	ldr	r3, [pc, #572]	; (8004a98 <HAL_RCC_OscConfig+0x26c>)
 800485a:	685b      	ldr	r3, [r3, #4]
 800485c:	f003 030c 	and.w	r3, r3, #12
 8004860:	2b08      	cmp	r3, #8
 8004862:	d112      	bne.n	800488a <HAL_RCC_OscConfig+0x5e>
 8004864:	4b8c      	ldr	r3, [pc, #560]	; (8004a98 <HAL_RCC_OscConfig+0x26c>)
 8004866:	685b      	ldr	r3, [r3, #4]
 8004868:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800486c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004870:	d10b      	bne.n	800488a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004872:	4b89      	ldr	r3, [pc, #548]	; (8004a98 <HAL_RCC_OscConfig+0x26c>)
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800487a:	2b00      	cmp	r3, #0
 800487c:	d06c      	beq.n	8004958 <HAL_RCC_OscConfig+0x12c>
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	689b      	ldr	r3, [r3, #8]
 8004882:	2b00      	cmp	r3, #0
 8004884:	d168      	bne.n	8004958 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004886:	2301      	movs	r3, #1
 8004888:	e2de      	b.n	8004e48 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	689b      	ldr	r3, [r3, #8]
 800488e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004892:	d106      	bne.n	80048a2 <HAL_RCC_OscConfig+0x76>
 8004894:	4b80      	ldr	r3, [pc, #512]	; (8004a98 <HAL_RCC_OscConfig+0x26c>)
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	4a7f      	ldr	r2, [pc, #508]	; (8004a98 <HAL_RCC_OscConfig+0x26c>)
 800489a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800489e:	6013      	str	r3, [r2, #0]
 80048a0:	e02e      	b.n	8004900 <HAL_RCC_OscConfig+0xd4>
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	689b      	ldr	r3, [r3, #8]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d10c      	bne.n	80048c4 <HAL_RCC_OscConfig+0x98>
 80048aa:	4b7b      	ldr	r3, [pc, #492]	; (8004a98 <HAL_RCC_OscConfig+0x26c>)
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	4a7a      	ldr	r2, [pc, #488]	; (8004a98 <HAL_RCC_OscConfig+0x26c>)
 80048b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80048b4:	6013      	str	r3, [r2, #0]
 80048b6:	4b78      	ldr	r3, [pc, #480]	; (8004a98 <HAL_RCC_OscConfig+0x26c>)
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	4a77      	ldr	r2, [pc, #476]	; (8004a98 <HAL_RCC_OscConfig+0x26c>)
 80048bc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80048c0:	6013      	str	r3, [r2, #0]
 80048c2:	e01d      	b.n	8004900 <HAL_RCC_OscConfig+0xd4>
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	689b      	ldr	r3, [r3, #8]
 80048c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80048cc:	d10c      	bne.n	80048e8 <HAL_RCC_OscConfig+0xbc>
 80048ce:	4b72      	ldr	r3, [pc, #456]	; (8004a98 <HAL_RCC_OscConfig+0x26c>)
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	4a71      	ldr	r2, [pc, #452]	; (8004a98 <HAL_RCC_OscConfig+0x26c>)
 80048d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80048d8:	6013      	str	r3, [r2, #0]
 80048da:	4b6f      	ldr	r3, [pc, #444]	; (8004a98 <HAL_RCC_OscConfig+0x26c>)
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	4a6e      	ldr	r2, [pc, #440]	; (8004a98 <HAL_RCC_OscConfig+0x26c>)
 80048e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048e4:	6013      	str	r3, [r2, #0]
 80048e6:	e00b      	b.n	8004900 <HAL_RCC_OscConfig+0xd4>
 80048e8:	4b6b      	ldr	r3, [pc, #428]	; (8004a98 <HAL_RCC_OscConfig+0x26c>)
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	4a6a      	ldr	r2, [pc, #424]	; (8004a98 <HAL_RCC_OscConfig+0x26c>)
 80048ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80048f2:	6013      	str	r3, [r2, #0]
 80048f4:	4b68      	ldr	r3, [pc, #416]	; (8004a98 <HAL_RCC_OscConfig+0x26c>)
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	4a67      	ldr	r2, [pc, #412]	; (8004a98 <HAL_RCC_OscConfig+0x26c>)
 80048fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80048fe:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	689b      	ldr	r3, [r3, #8]
 8004904:	2b00      	cmp	r3, #0
 8004906:	d013      	beq.n	8004930 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004908:	f7fe ff22 	bl	8003750 <HAL_GetTick>
 800490c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800490e:	e008      	b.n	8004922 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004910:	f7fe ff1e 	bl	8003750 <HAL_GetTick>
 8004914:	4602      	mov	r2, r0
 8004916:	693b      	ldr	r3, [r7, #16]
 8004918:	1ad3      	subs	r3, r2, r3
 800491a:	2b64      	cmp	r3, #100	; 0x64
 800491c:	d901      	bls.n	8004922 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800491e:	2303      	movs	r3, #3
 8004920:	e292      	b.n	8004e48 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004922:	4b5d      	ldr	r3, [pc, #372]	; (8004a98 <HAL_RCC_OscConfig+0x26c>)
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800492a:	2b00      	cmp	r3, #0
 800492c:	d0f0      	beq.n	8004910 <HAL_RCC_OscConfig+0xe4>
 800492e:	e014      	b.n	800495a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004930:	f7fe ff0e 	bl	8003750 <HAL_GetTick>
 8004934:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004936:	e008      	b.n	800494a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004938:	f7fe ff0a 	bl	8003750 <HAL_GetTick>
 800493c:	4602      	mov	r2, r0
 800493e:	693b      	ldr	r3, [r7, #16]
 8004940:	1ad3      	subs	r3, r2, r3
 8004942:	2b64      	cmp	r3, #100	; 0x64
 8004944:	d901      	bls.n	800494a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004946:	2303      	movs	r3, #3
 8004948:	e27e      	b.n	8004e48 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800494a:	4b53      	ldr	r3, [pc, #332]	; (8004a98 <HAL_RCC_OscConfig+0x26c>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004952:	2b00      	cmp	r3, #0
 8004954:	d1f0      	bne.n	8004938 <HAL_RCC_OscConfig+0x10c>
 8004956:	e000      	b.n	800495a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004958:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f003 0302 	and.w	r3, r3, #2
 8004962:	2b00      	cmp	r3, #0
 8004964:	d063      	beq.n	8004a2e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004966:	4b4c      	ldr	r3, [pc, #304]	; (8004a98 <HAL_RCC_OscConfig+0x26c>)
 8004968:	685b      	ldr	r3, [r3, #4]
 800496a:	f003 030c 	and.w	r3, r3, #12
 800496e:	2b00      	cmp	r3, #0
 8004970:	d00b      	beq.n	800498a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004972:	4b49      	ldr	r3, [pc, #292]	; (8004a98 <HAL_RCC_OscConfig+0x26c>)
 8004974:	685b      	ldr	r3, [r3, #4]
 8004976:	f003 030c 	and.w	r3, r3, #12
 800497a:	2b08      	cmp	r3, #8
 800497c:	d11c      	bne.n	80049b8 <HAL_RCC_OscConfig+0x18c>
 800497e:	4b46      	ldr	r3, [pc, #280]	; (8004a98 <HAL_RCC_OscConfig+0x26c>)
 8004980:	685b      	ldr	r3, [r3, #4]
 8004982:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004986:	2b00      	cmp	r3, #0
 8004988:	d116      	bne.n	80049b8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800498a:	4b43      	ldr	r3, [pc, #268]	; (8004a98 <HAL_RCC_OscConfig+0x26c>)
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f003 0302 	and.w	r3, r3, #2
 8004992:	2b00      	cmp	r3, #0
 8004994:	d005      	beq.n	80049a2 <HAL_RCC_OscConfig+0x176>
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	695b      	ldr	r3, [r3, #20]
 800499a:	2b01      	cmp	r3, #1
 800499c:	d001      	beq.n	80049a2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800499e:	2301      	movs	r3, #1
 80049a0:	e252      	b.n	8004e48 <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049a2:	4b3d      	ldr	r3, [pc, #244]	; (8004a98 <HAL_RCC_OscConfig+0x26c>)
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	699b      	ldr	r3, [r3, #24]
 80049ae:	00db      	lsls	r3, r3, #3
 80049b0:	4939      	ldr	r1, [pc, #228]	; (8004a98 <HAL_RCC_OscConfig+0x26c>)
 80049b2:	4313      	orrs	r3, r2
 80049b4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80049b6:	e03a      	b.n	8004a2e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	695b      	ldr	r3, [r3, #20]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d020      	beq.n	8004a02 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80049c0:	4b36      	ldr	r3, [pc, #216]	; (8004a9c <HAL_RCC_OscConfig+0x270>)
 80049c2:	2201      	movs	r2, #1
 80049c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049c6:	f7fe fec3 	bl	8003750 <HAL_GetTick>
 80049ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049cc:	e008      	b.n	80049e0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80049ce:	f7fe febf 	bl	8003750 <HAL_GetTick>
 80049d2:	4602      	mov	r2, r0
 80049d4:	693b      	ldr	r3, [r7, #16]
 80049d6:	1ad3      	subs	r3, r2, r3
 80049d8:	2b02      	cmp	r3, #2
 80049da:	d901      	bls.n	80049e0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80049dc:	2303      	movs	r3, #3
 80049de:	e233      	b.n	8004e48 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049e0:	4b2d      	ldr	r3, [pc, #180]	; (8004a98 <HAL_RCC_OscConfig+0x26c>)
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f003 0302 	and.w	r3, r3, #2
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d0f0      	beq.n	80049ce <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049ec:	4b2a      	ldr	r3, [pc, #168]	; (8004a98 <HAL_RCC_OscConfig+0x26c>)
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	699b      	ldr	r3, [r3, #24]
 80049f8:	00db      	lsls	r3, r3, #3
 80049fa:	4927      	ldr	r1, [pc, #156]	; (8004a98 <HAL_RCC_OscConfig+0x26c>)
 80049fc:	4313      	orrs	r3, r2
 80049fe:	600b      	str	r3, [r1, #0]
 8004a00:	e015      	b.n	8004a2e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004a02:	4b26      	ldr	r3, [pc, #152]	; (8004a9c <HAL_RCC_OscConfig+0x270>)
 8004a04:	2200      	movs	r2, #0
 8004a06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a08:	f7fe fea2 	bl	8003750 <HAL_GetTick>
 8004a0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a0e:	e008      	b.n	8004a22 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004a10:	f7fe fe9e 	bl	8003750 <HAL_GetTick>
 8004a14:	4602      	mov	r2, r0
 8004a16:	693b      	ldr	r3, [r7, #16]
 8004a18:	1ad3      	subs	r3, r2, r3
 8004a1a:	2b02      	cmp	r3, #2
 8004a1c:	d901      	bls.n	8004a22 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004a1e:	2303      	movs	r3, #3
 8004a20:	e212      	b.n	8004e48 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a22:	4b1d      	ldr	r3, [pc, #116]	; (8004a98 <HAL_RCC_OscConfig+0x26c>)
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f003 0302 	and.w	r3, r3, #2
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d1f0      	bne.n	8004a10 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f003 0308 	and.w	r3, r3, #8
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d03a      	beq.n	8004ab0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	69db      	ldr	r3, [r3, #28]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d019      	beq.n	8004a76 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004a42:	4b17      	ldr	r3, [pc, #92]	; (8004aa0 <HAL_RCC_OscConfig+0x274>)
 8004a44:	2201      	movs	r2, #1
 8004a46:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a48:	f7fe fe82 	bl	8003750 <HAL_GetTick>
 8004a4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a4e:	e008      	b.n	8004a62 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004a50:	f7fe fe7e 	bl	8003750 <HAL_GetTick>
 8004a54:	4602      	mov	r2, r0
 8004a56:	693b      	ldr	r3, [r7, #16]
 8004a58:	1ad3      	subs	r3, r2, r3
 8004a5a:	2b02      	cmp	r3, #2
 8004a5c:	d901      	bls.n	8004a62 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004a5e:	2303      	movs	r3, #3
 8004a60:	e1f2      	b.n	8004e48 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a62:	4b0d      	ldr	r3, [pc, #52]	; (8004a98 <HAL_RCC_OscConfig+0x26c>)
 8004a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a66:	f003 0302 	and.w	r3, r3, #2
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d0f0      	beq.n	8004a50 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004a6e:	2001      	movs	r0, #1
 8004a70:	f000 fbf4 	bl	800525c <RCC_Delay>
 8004a74:	e01c      	b.n	8004ab0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004a76:	4b0a      	ldr	r3, [pc, #40]	; (8004aa0 <HAL_RCC_OscConfig+0x274>)
 8004a78:	2200      	movs	r2, #0
 8004a7a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a7c:	f7fe fe68 	bl	8003750 <HAL_GetTick>
 8004a80:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a82:	e00f      	b.n	8004aa4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004a84:	f7fe fe64 	bl	8003750 <HAL_GetTick>
 8004a88:	4602      	mov	r2, r0
 8004a8a:	693b      	ldr	r3, [r7, #16]
 8004a8c:	1ad3      	subs	r3, r2, r3
 8004a8e:	2b02      	cmp	r3, #2
 8004a90:	d908      	bls.n	8004aa4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004a92:	2303      	movs	r3, #3
 8004a94:	e1d8      	b.n	8004e48 <HAL_RCC_OscConfig+0x61c>
 8004a96:	bf00      	nop
 8004a98:	40021000 	.word	0x40021000
 8004a9c:	42420000 	.word	0x42420000
 8004aa0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004aa4:	4b9b      	ldr	r3, [pc, #620]	; (8004d14 <HAL_RCC_OscConfig+0x4e8>)
 8004aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aa8:	f003 0302 	and.w	r3, r3, #2
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d1e9      	bne.n	8004a84 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f003 0304 	and.w	r3, r3, #4
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	f000 80a6 	beq.w	8004c0a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004abe:	2300      	movs	r3, #0
 8004ac0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004ac2:	4b94      	ldr	r3, [pc, #592]	; (8004d14 <HAL_RCC_OscConfig+0x4e8>)
 8004ac4:	69db      	ldr	r3, [r3, #28]
 8004ac6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d10d      	bne.n	8004aea <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ace:	4b91      	ldr	r3, [pc, #580]	; (8004d14 <HAL_RCC_OscConfig+0x4e8>)
 8004ad0:	69db      	ldr	r3, [r3, #28]
 8004ad2:	4a90      	ldr	r2, [pc, #576]	; (8004d14 <HAL_RCC_OscConfig+0x4e8>)
 8004ad4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ad8:	61d3      	str	r3, [r2, #28]
 8004ada:	4b8e      	ldr	r3, [pc, #568]	; (8004d14 <HAL_RCC_OscConfig+0x4e8>)
 8004adc:	69db      	ldr	r3, [r3, #28]
 8004ade:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ae2:	60bb      	str	r3, [r7, #8]
 8004ae4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004ae6:	2301      	movs	r3, #1
 8004ae8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004aea:	4b8b      	ldr	r3, [pc, #556]	; (8004d18 <HAL_RCC_OscConfig+0x4ec>)
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d118      	bne.n	8004b28 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004af6:	4b88      	ldr	r3, [pc, #544]	; (8004d18 <HAL_RCC_OscConfig+0x4ec>)
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	4a87      	ldr	r2, [pc, #540]	; (8004d18 <HAL_RCC_OscConfig+0x4ec>)
 8004afc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b00:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004b02:	f7fe fe25 	bl	8003750 <HAL_GetTick>
 8004b06:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b08:	e008      	b.n	8004b1c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b0a:	f7fe fe21 	bl	8003750 <HAL_GetTick>
 8004b0e:	4602      	mov	r2, r0
 8004b10:	693b      	ldr	r3, [r7, #16]
 8004b12:	1ad3      	subs	r3, r2, r3
 8004b14:	2b64      	cmp	r3, #100	; 0x64
 8004b16:	d901      	bls.n	8004b1c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004b18:	2303      	movs	r3, #3
 8004b1a:	e195      	b.n	8004e48 <HAL_RCC_OscConfig+0x61c>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b1c:	4b7e      	ldr	r3, [pc, #504]	; (8004d18 <HAL_RCC_OscConfig+0x4ec>)
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d0f0      	beq.n	8004b0a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	691b      	ldr	r3, [r3, #16]
 8004b2c:	2b01      	cmp	r3, #1
 8004b2e:	d106      	bne.n	8004b3e <HAL_RCC_OscConfig+0x312>
 8004b30:	4b78      	ldr	r3, [pc, #480]	; (8004d14 <HAL_RCC_OscConfig+0x4e8>)
 8004b32:	6a1b      	ldr	r3, [r3, #32]
 8004b34:	4a77      	ldr	r2, [pc, #476]	; (8004d14 <HAL_RCC_OscConfig+0x4e8>)
 8004b36:	f043 0301 	orr.w	r3, r3, #1
 8004b3a:	6213      	str	r3, [r2, #32]
 8004b3c:	e02d      	b.n	8004b9a <HAL_RCC_OscConfig+0x36e>
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	691b      	ldr	r3, [r3, #16]
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d10c      	bne.n	8004b60 <HAL_RCC_OscConfig+0x334>
 8004b46:	4b73      	ldr	r3, [pc, #460]	; (8004d14 <HAL_RCC_OscConfig+0x4e8>)
 8004b48:	6a1b      	ldr	r3, [r3, #32]
 8004b4a:	4a72      	ldr	r2, [pc, #456]	; (8004d14 <HAL_RCC_OscConfig+0x4e8>)
 8004b4c:	f023 0301 	bic.w	r3, r3, #1
 8004b50:	6213      	str	r3, [r2, #32]
 8004b52:	4b70      	ldr	r3, [pc, #448]	; (8004d14 <HAL_RCC_OscConfig+0x4e8>)
 8004b54:	6a1b      	ldr	r3, [r3, #32]
 8004b56:	4a6f      	ldr	r2, [pc, #444]	; (8004d14 <HAL_RCC_OscConfig+0x4e8>)
 8004b58:	f023 0304 	bic.w	r3, r3, #4
 8004b5c:	6213      	str	r3, [r2, #32]
 8004b5e:	e01c      	b.n	8004b9a <HAL_RCC_OscConfig+0x36e>
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	691b      	ldr	r3, [r3, #16]
 8004b64:	2b05      	cmp	r3, #5
 8004b66:	d10c      	bne.n	8004b82 <HAL_RCC_OscConfig+0x356>
 8004b68:	4b6a      	ldr	r3, [pc, #424]	; (8004d14 <HAL_RCC_OscConfig+0x4e8>)
 8004b6a:	6a1b      	ldr	r3, [r3, #32]
 8004b6c:	4a69      	ldr	r2, [pc, #420]	; (8004d14 <HAL_RCC_OscConfig+0x4e8>)
 8004b6e:	f043 0304 	orr.w	r3, r3, #4
 8004b72:	6213      	str	r3, [r2, #32]
 8004b74:	4b67      	ldr	r3, [pc, #412]	; (8004d14 <HAL_RCC_OscConfig+0x4e8>)
 8004b76:	6a1b      	ldr	r3, [r3, #32]
 8004b78:	4a66      	ldr	r2, [pc, #408]	; (8004d14 <HAL_RCC_OscConfig+0x4e8>)
 8004b7a:	f043 0301 	orr.w	r3, r3, #1
 8004b7e:	6213      	str	r3, [r2, #32]
 8004b80:	e00b      	b.n	8004b9a <HAL_RCC_OscConfig+0x36e>
 8004b82:	4b64      	ldr	r3, [pc, #400]	; (8004d14 <HAL_RCC_OscConfig+0x4e8>)
 8004b84:	6a1b      	ldr	r3, [r3, #32]
 8004b86:	4a63      	ldr	r2, [pc, #396]	; (8004d14 <HAL_RCC_OscConfig+0x4e8>)
 8004b88:	f023 0301 	bic.w	r3, r3, #1
 8004b8c:	6213      	str	r3, [r2, #32]
 8004b8e:	4b61      	ldr	r3, [pc, #388]	; (8004d14 <HAL_RCC_OscConfig+0x4e8>)
 8004b90:	6a1b      	ldr	r3, [r3, #32]
 8004b92:	4a60      	ldr	r2, [pc, #384]	; (8004d14 <HAL_RCC_OscConfig+0x4e8>)
 8004b94:	f023 0304 	bic.w	r3, r3, #4
 8004b98:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	691b      	ldr	r3, [r3, #16]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d015      	beq.n	8004bce <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ba2:	f7fe fdd5 	bl	8003750 <HAL_GetTick>
 8004ba6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ba8:	e00a      	b.n	8004bc0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004baa:	f7fe fdd1 	bl	8003750 <HAL_GetTick>
 8004bae:	4602      	mov	r2, r0
 8004bb0:	693b      	ldr	r3, [r7, #16]
 8004bb2:	1ad3      	subs	r3, r2, r3
 8004bb4:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bb8:	4293      	cmp	r3, r2
 8004bba:	d901      	bls.n	8004bc0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004bbc:	2303      	movs	r3, #3
 8004bbe:	e143      	b.n	8004e48 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004bc0:	4b54      	ldr	r3, [pc, #336]	; (8004d14 <HAL_RCC_OscConfig+0x4e8>)
 8004bc2:	6a1b      	ldr	r3, [r3, #32]
 8004bc4:	f003 0302 	and.w	r3, r3, #2
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d0ee      	beq.n	8004baa <HAL_RCC_OscConfig+0x37e>
 8004bcc:	e014      	b.n	8004bf8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004bce:	f7fe fdbf 	bl	8003750 <HAL_GetTick>
 8004bd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004bd4:	e00a      	b.n	8004bec <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004bd6:	f7fe fdbb 	bl	8003750 <HAL_GetTick>
 8004bda:	4602      	mov	r2, r0
 8004bdc:	693b      	ldr	r3, [r7, #16]
 8004bde:	1ad3      	subs	r3, r2, r3
 8004be0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004be4:	4293      	cmp	r3, r2
 8004be6:	d901      	bls.n	8004bec <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004be8:	2303      	movs	r3, #3
 8004bea:	e12d      	b.n	8004e48 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004bec:	4b49      	ldr	r3, [pc, #292]	; (8004d14 <HAL_RCC_OscConfig+0x4e8>)
 8004bee:	6a1b      	ldr	r3, [r3, #32]
 8004bf0:	f003 0302 	and.w	r3, r3, #2
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d1ee      	bne.n	8004bd6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004bf8:	7dfb      	ldrb	r3, [r7, #23]
 8004bfa:	2b01      	cmp	r3, #1
 8004bfc:	d105      	bne.n	8004c0a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004bfe:	4b45      	ldr	r3, [pc, #276]	; (8004d14 <HAL_RCC_OscConfig+0x4e8>)
 8004c00:	69db      	ldr	r3, [r3, #28]
 8004c02:	4a44      	ldr	r2, [pc, #272]	; (8004d14 <HAL_RCC_OscConfig+0x4e8>)
 8004c04:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c08:	61d3      	str	r3, [r2, #28]

#if defined(RCC_CR_PLL2ON)
  /*-------------------------------- PLL2 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL2(RCC_OscInitStruct->PLL2.PLL2State));
  if ((RCC_OscInitStruct->PLL2.PLL2State) != RCC_PLL2_NONE)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	f000 808c 	beq.w	8004d2c <HAL_RCC_OscConfig+0x500>
  {
    /* This bit can not be cleared if the PLL2 clock is used indirectly as system
      clock (i.e. it is used as PLL clock entry that is used as system clock). */
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 8004c14:	4b3f      	ldr	r3, [pc, #252]	; (8004d14 <HAL_RCC_OscConfig+0x4e8>)
 8004c16:	685b      	ldr	r3, [r3, #4]
 8004c18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c20:	d10e      	bne.n	8004c40 <HAL_RCC_OscConfig+0x414>
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 8004c22:	4b3c      	ldr	r3, [pc, #240]	; (8004d14 <HAL_RCC_OscConfig+0x4e8>)
 8004c24:	685b      	ldr	r3, [r3, #4]
 8004c26:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 8004c2a:	2b08      	cmp	r3, #8
 8004c2c:	d108      	bne.n	8004c40 <HAL_RCC_OscConfig+0x414>
        ((READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC)) == RCC_CFGR2_PREDIV1SRC_PLL2))
 8004c2e:	4b39      	ldr	r3, [pc, #228]	; (8004d14 <HAL_RCC_OscConfig+0x4e8>)
 8004c30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c32:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 8004c36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c3a:	d101      	bne.n	8004c40 <HAL_RCC_OscConfig+0x414>
    {
      return HAL_ERROR;
 8004c3c:	2301      	movs	r3, #1
 8004c3e:	e103      	b.n	8004e48 <HAL_RCC_OscConfig+0x61c>
    }
    else
    {
      if ((RCC_OscInitStruct->PLL2.PLL2State) == RCC_PLL2_ON)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c44:	2b02      	cmp	r3, #2
 8004c46:	d14e      	bne.n	8004ce6 <HAL_RCC_OscConfig+0x4ba>
        assert_param(IS_RCC_PLL2_MUL(RCC_OscInitStruct->PLL2.PLL2MUL));
        assert_param(IS_RCC_HSE_PREDIV2(RCC_OscInitStruct->PLL2.HSEPrediv2Value));

        /* Prediv2 can be written only when the PLLI2S is disabled. */
        /* Return an error only if new value is different from the programmed value */
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 8004c48:	4b32      	ldr	r3, [pc, #200]	; (8004d14 <HAL_RCC_OscConfig+0x4e8>)
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d009      	beq.n	8004c68 <HAL_RCC_OscConfig+0x43c>
            (__HAL_RCC_HSE_GET_PREDIV2() != RCC_OscInitStruct->PLL2.HSEPrediv2Value))
 8004c54:	4b2f      	ldr	r3, [pc, #188]	; (8004d14 <HAL_RCC_OscConfig+0x4e8>)
 8004c56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c58:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 8004c60:	429a      	cmp	r2, r3
 8004c62:	d001      	beq.n	8004c68 <HAL_RCC_OscConfig+0x43c>
        {
          return HAL_ERROR;
 8004c64:	2301      	movs	r3, #1
 8004c66:	e0ef      	b.n	8004e48 <HAL_RCC_OscConfig+0x61c>
        }

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 8004c68:	4b2c      	ldr	r3, [pc, #176]	; (8004d1c <HAL_RCC_OscConfig+0x4f0>)
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c6e:	f7fe fd6f 	bl	8003750 <HAL_GetTick>
 8004c72:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8004c74:	e008      	b.n	8004c88 <HAL_RCC_OscConfig+0x45c>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004c76:	f7fe fd6b 	bl	8003750 <HAL_GetTick>
 8004c7a:	4602      	mov	r2, r0
 8004c7c:	693b      	ldr	r3, [r7, #16]
 8004c7e:	1ad3      	subs	r3, r2, r3
 8004c80:	2b64      	cmp	r3, #100	; 0x64
 8004c82:	d901      	bls.n	8004c88 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004c84:	2303      	movs	r3, #3
 8004c86:	e0df      	b.n	8004e48 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8004c88:	4b22      	ldr	r3, [pc, #136]	; (8004d14 <HAL_RCC_OscConfig+0x4e8>)
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d1f0      	bne.n	8004c76 <HAL_RCC_OscConfig+0x44a>
          }
        }

        /* Configure the HSE prediv2 factor --------------------------------*/
        __HAL_RCC_HSE_PREDIV2_CONFIG(RCC_OscInitStruct->PLL2.HSEPrediv2Value);
 8004c94:	4b1f      	ldr	r3, [pc, #124]	; (8004d14 <HAL_RCC_OscConfig+0x4e8>)
 8004c96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c98:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ca0:	491c      	ldr	r1, [pc, #112]	; (8004d14 <HAL_RCC_OscConfig+0x4e8>)
 8004ca2:	4313      	orrs	r3, r2
 8004ca4:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Configure the main PLL2 multiplication factors. */
        __HAL_RCC_PLL2_CONFIG(RCC_OscInitStruct->PLL2.PLL2MUL);
 8004ca6:	4b1b      	ldr	r3, [pc, #108]	; (8004d14 <HAL_RCC_OscConfig+0x4e8>)
 8004ca8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004caa:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cb2:	4918      	ldr	r1, [pc, #96]	; (8004d14 <HAL_RCC_OscConfig+0x4e8>)
 8004cb4:	4313      	orrs	r3, r2
 8004cb6:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable the main PLL2. */
        __HAL_RCC_PLL2_ENABLE();
 8004cb8:	4b18      	ldr	r3, [pc, #96]	; (8004d1c <HAL_RCC_OscConfig+0x4f0>)
 8004cba:	2201      	movs	r2, #1
 8004cbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cbe:	f7fe fd47 	bl	8003750 <HAL_GetTick>
 8004cc2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 8004cc4:	e008      	b.n	8004cd8 <HAL_RCC_OscConfig+0x4ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004cc6:	f7fe fd43 	bl	8003750 <HAL_GetTick>
 8004cca:	4602      	mov	r2, r0
 8004ccc:	693b      	ldr	r3, [r7, #16]
 8004cce:	1ad3      	subs	r3, r2, r3
 8004cd0:	2b64      	cmp	r3, #100	; 0x64
 8004cd2:	d901      	bls.n	8004cd8 <HAL_RCC_OscConfig+0x4ac>
          {
            return HAL_TIMEOUT;
 8004cd4:	2303      	movs	r3, #3
 8004cd6:	e0b7      	b.n	8004e48 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 8004cd8:	4b0e      	ldr	r3, [pc, #56]	; (8004d14 <HAL_RCC_OscConfig+0x4e8>)
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d0f0      	beq.n	8004cc6 <HAL_RCC_OscConfig+0x49a>
 8004ce4:	e022      	b.n	8004d2c <HAL_RCC_OscConfig+0x500>
        }
      }
      else
      {
        /* Set PREDIV1 source to HSE */
        CLEAR_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC);
 8004ce6:	4b0b      	ldr	r3, [pc, #44]	; (8004d14 <HAL_RCC_OscConfig+0x4e8>)
 8004ce8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cea:	4a0a      	ldr	r2, [pc, #40]	; (8004d14 <HAL_RCC_OscConfig+0x4e8>)
 8004cec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004cf0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 8004cf2:	4b0a      	ldr	r3, [pc, #40]	; (8004d1c <HAL_RCC_OscConfig+0x4f0>)
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cf8:	f7fe fd2a 	bl	8003750 <HAL_GetTick>
 8004cfc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 8004cfe:	e00f      	b.n	8004d20 <HAL_RCC_OscConfig+0x4f4>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004d00:	f7fe fd26 	bl	8003750 <HAL_GetTick>
 8004d04:	4602      	mov	r2, r0
 8004d06:	693b      	ldr	r3, [r7, #16]
 8004d08:	1ad3      	subs	r3, r2, r3
 8004d0a:	2b64      	cmp	r3, #100	; 0x64
 8004d0c:	d908      	bls.n	8004d20 <HAL_RCC_OscConfig+0x4f4>
          {
            return HAL_TIMEOUT;
 8004d0e:	2303      	movs	r3, #3
 8004d10:	e09a      	b.n	8004e48 <HAL_RCC_OscConfig+0x61c>
 8004d12:	bf00      	nop
 8004d14:	40021000 	.word	0x40021000
 8004d18:	40007000 	.word	0x40007000
 8004d1c:	42420068 	.word	0x42420068
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 8004d20:	4b4b      	ldr	r3, [pc, #300]	; (8004e50 <HAL_RCC_OscConfig+0x624>)
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d1e9      	bne.n	8004d00 <HAL_RCC_OscConfig+0x4d4>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	6a1b      	ldr	r3, [r3, #32]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	f000 8088 	beq.w	8004e46 <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004d36:	4b46      	ldr	r3, [pc, #280]	; (8004e50 <HAL_RCC_OscConfig+0x624>)
 8004d38:	685b      	ldr	r3, [r3, #4]
 8004d3a:	f003 030c 	and.w	r3, r3, #12
 8004d3e:	2b08      	cmp	r3, #8
 8004d40:	d068      	beq.n	8004e14 <HAL_RCC_OscConfig+0x5e8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6a1b      	ldr	r3, [r3, #32]
 8004d46:	2b02      	cmp	r3, #2
 8004d48:	d14d      	bne.n	8004de6 <HAL_RCC_OscConfig+0x5ba>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d4a:	4b42      	ldr	r3, [pc, #264]	; (8004e54 <HAL_RCC_OscConfig+0x628>)
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d50:	f7fe fcfe 	bl	8003750 <HAL_GetTick>
 8004d54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004d56:	e008      	b.n	8004d6a <HAL_RCC_OscConfig+0x53e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d58:	f7fe fcfa 	bl	8003750 <HAL_GetTick>
 8004d5c:	4602      	mov	r2, r0
 8004d5e:	693b      	ldr	r3, [r7, #16]
 8004d60:	1ad3      	subs	r3, r2, r3
 8004d62:	2b02      	cmp	r3, #2
 8004d64:	d901      	bls.n	8004d6a <HAL_RCC_OscConfig+0x53e>
          {
            return HAL_TIMEOUT;
 8004d66:	2303      	movs	r3, #3
 8004d68:	e06e      	b.n	8004e48 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004d6a:	4b39      	ldr	r3, [pc, #228]	; (8004e50 <HAL_RCC_OscConfig+0x624>)
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d1f0      	bne.n	8004d58 <HAL_RCC_OscConfig+0x52c>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d7e:	d10f      	bne.n	8004da0 <HAL_RCC_OscConfig+0x574>
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
#if defined(RCC_CFGR2_PREDIV1SRC)
          assert_param(IS_RCC_PREDIV1_SOURCE(RCC_OscInitStruct->Prediv1Source));

          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
 8004d80:	4b33      	ldr	r3, [pc, #204]	; (8004e50 <HAL_RCC_OscConfig+0x624>)
 8004d82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	685b      	ldr	r3, [r3, #4]
 8004d88:	4931      	ldr	r1, [pc, #196]	; (8004e50 <HAL_RCC_OscConfig+0x624>)
 8004d8a:	4313      	orrs	r3, r2
 8004d8c:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004d8e:	4b30      	ldr	r3, [pc, #192]	; (8004e50 <HAL_RCC_OscConfig+0x624>)
 8004d90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d92:	f023 020f 	bic.w	r2, r3, #15
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	68db      	ldr	r3, [r3, #12]
 8004d9a:	492d      	ldr	r1, [pc, #180]	; (8004e50 <HAL_RCC_OscConfig+0x624>)
 8004d9c:	4313      	orrs	r3, r2
 8004d9e:	62cb      	str	r3, [r1, #44]	; 0x2c
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004da0:	4b2b      	ldr	r3, [pc, #172]	; (8004e50 <HAL_RCC_OscConfig+0x624>)
 8004da2:	685b      	ldr	r3, [r3, #4]
 8004da4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004db0:	430b      	orrs	r3, r1
 8004db2:	4927      	ldr	r1, [pc, #156]	; (8004e50 <HAL_RCC_OscConfig+0x624>)
 8004db4:	4313      	orrs	r3, r2
 8004db6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004db8:	4b26      	ldr	r3, [pc, #152]	; (8004e54 <HAL_RCC_OscConfig+0x628>)
 8004dba:	2201      	movs	r2, #1
 8004dbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004dbe:	f7fe fcc7 	bl	8003750 <HAL_GetTick>
 8004dc2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004dc4:	e008      	b.n	8004dd8 <HAL_RCC_OscConfig+0x5ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004dc6:	f7fe fcc3 	bl	8003750 <HAL_GetTick>
 8004dca:	4602      	mov	r2, r0
 8004dcc:	693b      	ldr	r3, [r7, #16]
 8004dce:	1ad3      	subs	r3, r2, r3
 8004dd0:	2b02      	cmp	r3, #2
 8004dd2:	d901      	bls.n	8004dd8 <HAL_RCC_OscConfig+0x5ac>
          {
            return HAL_TIMEOUT;
 8004dd4:	2303      	movs	r3, #3
 8004dd6:	e037      	b.n	8004e48 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004dd8:	4b1d      	ldr	r3, [pc, #116]	; (8004e50 <HAL_RCC_OscConfig+0x624>)
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d0f0      	beq.n	8004dc6 <HAL_RCC_OscConfig+0x59a>
 8004de4:	e02f      	b.n	8004e46 <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004de6:	4b1b      	ldr	r3, [pc, #108]	; (8004e54 <HAL_RCC_OscConfig+0x628>)
 8004de8:	2200      	movs	r2, #0
 8004dea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004dec:	f7fe fcb0 	bl	8003750 <HAL_GetTick>
 8004df0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004df2:	e008      	b.n	8004e06 <HAL_RCC_OscConfig+0x5da>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004df4:	f7fe fcac 	bl	8003750 <HAL_GetTick>
 8004df8:	4602      	mov	r2, r0
 8004dfa:	693b      	ldr	r3, [r7, #16]
 8004dfc:	1ad3      	subs	r3, r2, r3
 8004dfe:	2b02      	cmp	r3, #2
 8004e00:	d901      	bls.n	8004e06 <HAL_RCC_OscConfig+0x5da>
          {
            return HAL_TIMEOUT;
 8004e02:	2303      	movs	r3, #3
 8004e04:	e020      	b.n	8004e48 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004e06:	4b12      	ldr	r3, [pc, #72]	; (8004e50 <HAL_RCC_OscConfig+0x624>)
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d1f0      	bne.n	8004df4 <HAL_RCC_OscConfig+0x5c8>
 8004e12:	e018      	b.n	8004e46 <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	6a1b      	ldr	r3, [r3, #32]
 8004e18:	2b01      	cmp	r3, #1
 8004e1a:	d101      	bne.n	8004e20 <HAL_RCC_OscConfig+0x5f4>
      {
        return HAL_ERROR;
 8004e1c:	2301      	movs	r3, #1
 8004e1e:	e013      	b.n	8004e48 <HAL_RCC_OscConfig+0x61c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004e20:	4b0b      	ldr	r3, [pc, #44]	; (8004e50 <HAL_RCC_OscConfig+0x624>)
 8004e22:	685b      	ldr	r3, [r3, #4]
 8004e24:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e30:	429a      	cmp	r2, r3
 8004e32:	d106      	bne.n	8004e42 <HAL_RCC_OscConfig+0x616>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e3e:	429a      	cmp	r2, r3
 8004e40:	d001      	beq.n	8004e46 <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 8004e42:	2301      	movs	r3, #1
 8004e44:	e000      	b.n	8004e48 <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }

  return HAL_OK;
 8004e46:	2300      	movs	r3, #0
}
 8004e48:	4618      	mov	r0, r3
 8004e4a:	3718      	adds	r7, #24
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	bd80      	pop	{r7, pc}
 8004e50:	40021000 	.word	0x40021000
 8004e54:	42420060 	.word	0x42420060

08004e58 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	b084      	sub	sp, #16
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
 8004e60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d101      	bne.n	8004e6c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004e68:	2301      	movs	r3, #1
 8004e6a:	e0d0      	b.n	800500e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004e6c:	4b6a      	ldr	r3, [pc, #424]	; (8005018 <HAL_RCC_ClockConfig+0x1c0>)
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f003 0307 	and.w	r3, r3, #7
 8004e74:	683a      	ldr	r2, [r7, #0]
 8004e76:	429a      	cmp	r2, r3
 8004e78:	d910      	bls.n	8004e9c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e7a:	4b67      	ldr	r3, [pc, #412]	; (8005018 <HAL_RCC_ClockConfig+0x1c0>)
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f023 0207 	bic.w	r2, r3, #7
 8004e82:	4965      	ldr	r1, [pc, #404]	; (8005018 <HAL_RCC_ClockConfig+0x1c0>)
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	4313      	orrs	r3, r2
 8004e88:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e8a:	4b63      	ldr	r3, [pc, #396]	; (8005018 <HAL_RCC_ClockConfig+0x1c0>)
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f003 0307 	and.w	r3, r3, #7
 8004e92:	683a      	ldr	r2, [r7, #0]
 8004e94:	429a      	cmp	r2, r3
 8004e96:	d001      	beq.n	8004e9c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004e98:	2301      	movs	r3, #1
 8004e9a:	e0b8      	b.n	800500e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f003 0302 	and.w	r3, r3, #2
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d020      	beq.n	8004eea <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f003 0304 	and.w	r3, r3, #4
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d005      	beq.n	8004ec0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004eb4:	4b59      	ldr	r3, [pc, #356]	; (800501c <HAL_RCC_ClockConfig+0x1c4>)
 8004eb6:	685b      	ldr	r3, [r3, #4]
 8004eb8:	4a58      	ldr	r2, [pc, #352]	; (800501c <HAL_RCC_ClockConfig+0x1c4>)
 8004eba:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004ebe:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f003 0308 	and.w	r3, r3, #8
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d005      	beq.n	8004ed8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004ecc:	4b53      	ldr	r3, [pc, #332]	; (800501c <HAL_RCC_ClockConfig+0x1c4>)
 8004ece:	685b      	ldr	r3, [r3, #4]
 8004ed0:	4a52      	ldr	r2, [pc, #328]	; (800501c <HAL_RCC_ClockConfig+0x1c4>)
 8004ed2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004ed6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ed8:	4b50      	ldr	r3, [pc, #320]	; (800501c <HAL_RCC_ClockConfig+0x1c4>)
 8004eda:	685b      	ldr	r3, [r3, #4]
 8004edc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	689b      	ldr	r3, [r3, #8]
 8004ee4:	494d      	ldr	r1, [pc, #308]	; (800501c <HAL_RCC_ClockConfig+0x1c4>)
 8004ee6:	4313      	orrs	r3, r2
 8004ee8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f003 0301 	and.w	r3, r3, #1
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d040      	beq.n	8004f78 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	685b      	ldr	r3, [r3, #4]
 8004efa:	2b01      	cmp	r3, #1
 8004efc:	d107      	bne.n	8004f0e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004efe:	4b47      	ldr	r3, [pc, #284]	; (800501c <HAL_RCC_ClockConfig+0x1c4>)
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d115      	bne.n	8004f36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f0a:	2301      	movs	r3, #1
 8004f0c:	e07f      	b.n	800500e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	685b      	ldr	r3, [r3, #4]
 8004f12:	2b02      	cmp	r3, #2
 8004f14:	d107      	bne.n	8004f26 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f16:	4b41      	ldr	r3, [pc, #260]	; (800501c <HAL_RCC_ClockConfig+0x1c4>)
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d109      	bne.n	8004f36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f22:	2301      	movs	r3, #1
 8004f24:	e073      	b.n	800500e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f26:	4b3d      	ldr	r3, [pc, #244]	; (800501c <HAL_RCC_ClockConfig+0x1c4>)
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f003 0302 	and.w	r3, r3, #2
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d101      	bne.n	8004f36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f32:	2301      	movs	r3, #1
 8004f34:	e06b      	b.n	800500e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004f36:	4b39      	ldr	r3, [pc, #228]	; (800501c <HAL_RCC_ClockConfig+0x1c4>)
 8004f38:	685b      	ldr	r3, [r3, #4]
 8004f3a:	f023 0203 	bic.w	r2, r3, #3
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	685b      	ldr	r3, [r3, #4]
 8004f42:	4936      	ldr	r1, [pc, #216]	; (800501c <HAL_RCC_ClockConfig+0x1c4>)
 8004f44:	4313      	orrs	r3, r2
 8004f46:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004f48:	f7fe fc02 	bl	8003750 <HAL_GetTick>
 8004f4c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f4e:	e00a      	b.n	8004f66 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f50:	f7fe fbfe 	bl	8003750 <HAL_GetTick>
 8004f54:	4602      	mov	r2, r0
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	1ad3      	subs	r3, r2, r3
 8004f5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	d901      	bls.n	8004f66 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004f62:	2303      	movs	r3, #3
 8004f64:	e053      	b.n	800500e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f66:	4b2d      	ldr	r3, [pc, #180]	; (800501c <HAL_RCC_ClockConfig+0x1c4>)
 8004f68:	685b      	ldr	r3, [r3, #4]
 8004f6a:	f003 020c 	and.w	r2, r3, #12
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	685b      	ldr	r3, [r3, #4]
 8004f72:	009b      	lsls	r3, r3, #2
 8004f74:	429a      	cmp	r2, r3
 8004f76:	d1eb      	bne.n	8004f50 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004f78:	4b27      	ldr	r3, [pc, #156]	; (8005018 <HAL_RCC_ClockConfig+0x1c0>)
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f003 0307 	and.w	r3, r3, #7
 8004f80:	683a      	ldr	r2, [r7, #0]
 8004f82:	429a      	cmp	r2, r3
 8004f84:	d210      	bcs.n	8004fa8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f86:	4b24      	ldr	r3, [pc, #144]	; (8005018 <HAL_RCC_ClockConfig+0x1c0>)
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f023 0207 	bic.w	r2, r3, #7
 8004f8e:	4922      	ldr	r1, [pc, #136]	; (8005018 <HAL_RCC_ClockConfig+0x1c0>)
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	4313      	orrs	r3, r2
 8004f94:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f96:	4b20      	ldr	r3, [pc, #128]	; (8005018 <HAL_RCC_ClockConfig+0x1c0>)
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f003 0307 	and.w	r3, r3, #7
 8004f9e:	683a      	ldr	r2, [r7, #0]
 8004fa0:	429a      	cmp	r2, r3
 8004fa2:	d001      	beq.n	8004fa8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004fa4:	2301      	movs	r3, #1
 8004fa6:	e032      	b.n	800500e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f003 0304 	and.w	r3, r3, #4
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d008      	beq.n	8004fc6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004fb4:	4b19      	ldr	r3, [pc, #100]	; (800501c <HAL_RCC_ClockConfig+0x1c4>)
 8004fb6:	685b      	ldr	r3, [r3, #4]
 8004fb8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	68db      	ldr	r3, [r3, #12]
 8004fc0:	4916      	ldr	r1, [pc, #88]	; (800501c <HAL_RCC_ClockConfig+0x1c4>)
 8004fc2:	4313      	orrs	r3, r2
 8004fc4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f003 0308 	and.w	r3, r3, #8
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d009      	beq.n	8004fe6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004fd2:	4b12      	ldr	r3, [pc, #72]	; (800501c <HAL_RCC_ClockConfig+0x1c4>)
 8004fd4:	685b      	ldr	r3, [r3, #4]
 8004fd6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	691b      	ldr	r3, [r3, #16]
 8004fde:	00db      	lsls	r3, r3, #3
 8004fe0:	490e      	ldr	r1, [pc, #56]	; (800501c <HAL_RCC_ClockConfig+0x1c4>)
 8004fe2:	4313      	orrs	r3, r2
 8004fe4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004fe6:	f000 f821 	bl	800502c <HAL_RCC_GetSysClockFreq>
 8004fea:	4602      	mov	r2, r0
 8004fec:	4b0b      	ldr	r3, [pc, #44]	; (800501c <HAL_RCC_ClockConfig+0x1c4>)
 8004fee:	685b      	ldr	r3, [r3, #4]
 8004ff0:	091b      	lsrs	r3, r3, #4
 8004ff2:	f003 030f 	and.w	r3, r3, #15
 8004ff6:	490a      	ldr	r1, [pc, #40]	; (8005020 <HAL_RCC_ClockConfig+0x1c8>)
 8004ff8:	5ccb      	ldrb	r3, [r1, r3]
 8004ffa:	fa22 f303 	lsr.w	r3, r2, r3
 8004ffe:	4a09      	ldr	r2, [pc, #36]	; (8005024 <HAL_RCC_ClockConfig+0x1cc>)
 8005000:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005002:	4b09      	ldr	r3, [pc, #36]	; (8005028 <HAL_RCC_ClockConfig+0x1d0>)
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	4618      	mov	r0, r3
 8005008:	f7fe fb60 	bl	80036cc <HAL_InitTick>

  return HAL_OK;
 800500c:	2300      	movs	r3, #0
}
 800500e:	4618      	mov	r0, r3
 8005010:	3710      	adds	r7, #16
 8005012:	46bd      	mov	sp, r7
 8005014:	bd80      	pop	{r7, pc}
 8005016:	bf00      	nop
 8005018:	40022000 	.word	0x40022000
 800501c:	40021000 	.word	0x40021000
 8005020:	0800c188 	.word	0x0800c188
 8005024:	20000000 	.word	0x20000000
 8005028:	20000004 	.word	0x20000004

0800502c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800502c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005030:	b091      	sub	sp, #68	; 0x44
 8005032:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
 8005034:	4b6a      	ldr	r3, [pc, #424]	; (80051e0 <HAL_RCC_GetSysClockFreq+0x1b4>)
 8005036:	f107 0414 	add.w	r4, r7, #20
 800503a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800503c:	c407      	stmia	r4!, {r0, r1, r2}
 800503e:	8023      	strh	r3, [r4, #0]
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
 8005040:	4b68      	ldr	r3, [pc, #416]	; (80051e4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005042:	1d3c      	adds	r4, r7, #4
 8005044:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005046:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800504a:	2300      	movs	r3, #0
 800504c:	637b      	str	r3, [r7, #52]	; 0x34
 800504e:	2300      	movs	r3, #0
 8005050:	633b      	str	r3, [r7, #48]	; 0x30
 8005052:	2300      	movs	r3, #0
 8005054:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005056:	2300      	movs	r3, #0
 8005058:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t sysclockfreq = 0U;
 800505a:	2300      	movs	r3, #0
 800505c:	63bb      	str	r3, [r7, #56]	; 0x38
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
 800505e:	2300      	movs	r3, #0
 8005060:	62bb      	str	r3, [r7, #40]	; 0x28
 8005062:	2300      	movs	r3, #0
 8005064:	627b      	str	r3, [r7, #36]	; 0x24
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005066:	4b60      	ldr	r3, [pc, #384]	; (80051e8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8005068:	685b      	ldr	r3, [r3, #4]
 800506a:	637b      	str	r3, [r7, #52]	; 0x34

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800506c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800506e:	f003 030c 	and.w	r3, r3, #12
 8005072:	2b04      	cmp	r3, #4
 8005074:	d002      	beq.n	800507c <HAL_RCC_GetSysClockFreq+0x50>
 8005076:	2b08      	cmp	r3, #8
 8005078:	d003      	beq.n	8005082 <HAL_RCC_GetSysClockFreq+0x56>
 800507a:	e0a8      	b.n	80051ce <HAL_RCC_GetSysClockFreq+0x1a2>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800507c:	4b5b      	ldr	r3, [pc, #364]	; (80051ec <HAL_RCC_GetSysClockFreq+0x1c0>)
 800507e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005080:	e0a8      	b.n	80051d4 <HAL_RCC_GetSysClockFreq+0x1a8>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005082:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005084:	0c9b      	lsrs	r3, r3, #18
 8005086:	f003 030f 	and.w	r3, r3, #15
 800508a:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800508e:	4413      	add	r3, r2
 8005090:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 8005094:	62fb      	str	r3, [r7, #44]	; 0x2c
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005096:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005098:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800509c:	2b00      	cmp	r3, #0
 800509e:	f000 808e 	beq.w	80051be <HAL_RCC_GetSysClockFreq+0x192>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 80050a2:	4b51      	ldr	r3, [pc, #324]	; (80051e8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80050a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050a6:	f003 030f 	and.w	r3, r3, #15
 80050aa:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80050ae:	4413      	add	r3, r2
 80050b0:	f813 3c3c 	ldrb.w	r3, [r3, #-60]
 80050b4:	633b      	str	r3, [r7, #48]	; 0x30
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
#endif /*RCC_CFGR2_PREDIV1*/
#if defined(RCC_CFGR2_PREDIV1SRC)

        if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC))
 80050b6:	4b4c      	ldr	r3, [pc, #304]	; (80051e8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80050b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d06b      	beq.n	800519a <HAL_RCC_GetSysClockFreq+0x16e>
        {
          /* PLL2 selected as Prediv1 source */
          /* PLLCLK = PLL2CLK / PREDIV1 * PLLMUL with PLL2CLK = HSE/PREDIV2 * PLL2MUL */
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 80050c2:	4b49      	ldr	r3, [pc, #292]	; (80051e8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80050c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050c6:	091b      	lsrs	r3, r3, #4
 80050c8:	f003 030f 	and.w	r3, r3, #15
 80050cc:	3301      	adds	r3, #1
 80050ce:	62bb      	str	r3, [r7, #40]	; 0x28
          pll2mul = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> RCC_CFGR2_PLL2MUL_Pos) + 2;
 80050d0:	4b45      	ldr	r3, [pc, #276]	; (80051e8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80050d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050d4:	0a1b      	lsrs	r3, r3, #8
 80050d6:	f003 030f 	and.w	r3, r3, #15
 80050da:	3302      	adds	r3, #2
 80050dc:	627b      	str	r3, [r7, #36]	; 0x24
          pllclk = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pll2mul * (uint64_t)pllmul) / ((uint64_t)prediv2 * (uint64_t)prediv));
 80050de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050e0:	4618      	mov	r0, r3
 80050e2:	f04f 0100 	mov.w	r1, #0
 80050e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050e8:	461a      	mov	r2, r3
 80050ea:	f04f 0300 	mov.w	r3, #0
 80050ee:	fb02 f501 	mul.w	r5, r2, r1
 80050f2:	fb00 f403 	mul.w	r4, r0, r3
 80050f6:	192e      	adds	r6, r5, r4
 80050f8:	fba0 4502 	umull	r4, r5, r0, r2
 80050fc:	1973      	adds	r3, r6, r5
 80050fe:	461d      	mov	r5, r3
 8005100:	4620      	mov	r0, r4
 8005102:	4629      	mov	r1, r5
 8005104:	f04f 0200 	mov.w	r2, #0
 8005108:	f04f 0300 	mov.w	r3, #0
 800510c:	014b      	lsls	r3, r1, #5
 800510e:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005112:	0142      	lsls	r2, r0, #5
 8005114:	4610      	mov	r0, r2
 8005116:	4619      	mov	r1, r3
 8005118:	1b00      	subs	r0, r0, r4
 800511a:	eb61 0105 	sbc.w	r1, r1, r5
 800511e:	f04f 0200 	mov.w	r2, #0
 8005122:	f04f 0300 	mov.w	r3, #0
 8005126:	018b      	lsls	r3, r1, #6
 8005128:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800512c:	0182      	lsls	r2, r0, #6
 800512e:	1a12      	subs	r2, r2, r0
 8005130:	eb63 0301 	sbc.w	r3, r3, r1
 8005134:	f04f 0000 	mov.w	r0, #0
 8005138:	f04f 0100 	mov.w	r1, #0
 800513c:	00d9      	lsls	r1, r3, #3
 800513e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005142:	00d0      	lsls	r0, r2, #3
 8005144:	4602      	mov	r2, r0
 8005146:	460b      	mov	r3, r1
 8005148:	1912      	adds	r2, r2, r4
 800514a:	eb45 0303 	adc.w	r3, r5, r3
 800514e:	f04f 0000 	mov.w	r0, #0
 8005152:	f04f 0100 	mov.w	r1, #0
 8005156:	0299      	lsls	r1, r3, #10
 8005158:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800515c:	0290      	lsls	r0, r2, #10
 800515e:	4602      	mov	r2, r0
 8005160:	460b      	mov	r3, r1
 8005162:	4690      	mov	r8, r2
 8005164:	4699      	mov	r9, r3
 8005166:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005168:	4618      	mov	r0, r3
 800516a:	f04f 0100 	mov.w	r1, #0
 800516e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005170:	461a      	mov	r2, r3
 8005172:	f04f 0300 	mov.w	r3, #0
 8005176:	fb02 f501 	mul.w	r5, r2, r1
 800517a:	fb00 f403 	mul.w	r4, r0, r3
 800517e:	442c      	add	r4, r5
 8005180:	fba0 2302 	umull	r2, r3, r0, r2
 8005184:	18e1      	adds	r1, r4, r3
 8005186:	460b      	mov	r3, r1
 8005188:	4640      	mov	r0, r8
 800518a:	4649      	mov	r1, r9
 800518c:	f7fb ff90 	bl	80010b0 <__aeabi_uldivmod>
 8005190:	4602      	mov	r2, r0
 8005192:	460b      	mov	r3, r1
 8005194:	4613      	mov	r3, r2
 8005196:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005198:	e007      	b.n	80051aa <HAL_RCC_GetSysClockFreq+0x17e>
        }
        else
        {
          /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
          pllclk = (uint32_t)((HSE_VALUE * pllmul) / prediv);
 800519a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800519c:	4a13      	ldr	r2, [pc, #76]	; (80051ec <HAL_RCC_GetSysClockFreq+0x1c0>)
 800519e:	fb02 f203 	mul.w	r2, r2, r3
 80051a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80051a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        /* If PLLMUL was set to 13 means that it was to cover the case PLLMUL 6.5 (avoid using float) */
        /* In this case need to divide pllclk by 2 */
        if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
 80051aa:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80051ae:	461a      	mov	r2, r3
 80051b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051b2:	4293      	cmp	r3, r2
 80051b4:	d108      	bne.n	80051c8 <HAL_RCC_GetSysClockFreq+0x19c>
        {
          pllclk = pllclk / 2;
 80051b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80051b8:	085b      	lsrs	r3, r3, #1
 80051ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 80051bc:	e004      	b.n	80051c8 <HAL_RCC_GetSysClockFreq+0x19c>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80051be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051c0:	4a0b      	ldr	r2, [pc, #44]	; (80051f0 <HAL_RCC_GetSysClockFreq+0x1c4>)
 80051c2:	fb02 f303 	mul.w	r3, r2, r3
 80051c6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      sysclockfreq = pllclk;
 80051c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80051ca:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80051cc:	e002      	b.n	80051d4 <HAL_RCC_GetSysClockFreq+0x1a8>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80051ce:	4b09      	ldr	r3, [pc, #36]	; (80051f4 <HAL_RCC_GetSysClockFreq+0x1c8>)
 80051d0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80051d2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80051d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80051d6:	4618      	mov	r0, r3
 80051d8:	3744      	adds	r7, #68	; 0x44
 80051da:	46bd      	mov	sp, r7
 80051dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80051e0:	0800c15c 	.word	0x0800c15c
 80051e4:	0800c16c 	.word	0x0800c16c
 80051e8:	40021000 	.word	0x40021000
 80051ec:	00f42400 	.word	0x00f42400
 80051f0:	003d0900 	.word	0x003d0900
 80051f4:	007a1200 	.word	0x007a1200

080051f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80051f8:	b480      	push	{r7}
 80051fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80051fc:	4b02      	ldr	r3, [pc, #8]	; (8005208 <HAL_RCC_GetHCLKFreq+0x10>)
 80051fe:	681b      	ldr	r3, [r3, #0]
}
 8005200:	4618      	mov	r0, r3
 8005202:	46bd      	mov	sp, r7
 8005204:	bc80      	pop	{r7}
 8005206:	4770      	bx	lr
 8005208:	20000000 	.word	0x20000000

0800520c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800520c:	b580      	push	{r7, lr}
 800520e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005210:	f7ff fff2 	bl	80051f8 <HAL_RCC_GetHCLKFreq>
 8005214:	4602      	mov	r2, r0
 8005216:	4b05      	ldr	r3, [pc, #20]	; (800522c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005218:	685b      	ldr	r3, [r3, #4]
 800521a:	0a1b      	lsrs	r3, r3, #8
 800521c:	f003 0307 	and.w	r3, r3, #7
 8005220:	4903      	ldr	r1, [pc, #12]	; (8005230 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005222:	5ccb      	ldrb	r3, [r1, r3]
 8005224:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005228:	4618      	mov	r0, r3
 800522a:	bd80      	pop	{r7, pc}
 800522c:	40021000 	.word	0x40021000
 8005230:	0800c198 	.word	0x0800c198

08005234 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005234:	b580      	push	{r7, lr}
 8005236:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005238:	f7ff ffde 	bl	80051f8 <HAL_RCC_GetHCLKFreq>
 800523c:	4602      	mov	r2, r0
 800523e:	4b05      	ldr	r3, [pc, #20]	; (8005254 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005240:	685b      	ldr	r3, [r3, #4]
 8005242:	0adb      	lsrs	r3, r3, #11
 8005244:	f003 0307 	and.w	r3, r3, #7
 8005248:	4903      	ldr	r1, [pc, #12]	; (8005258 <HAL_RCC_GetPCLK2Freq+0x24>)
 800524a:	5ccb      	ldrb	r3, [r1, r3]
 800524c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005250:	4618      	mov	r0, r3
 8005252:	bd80      	pop	{r7, pc}
 8005254:	40021000 	.word	0x40021000
 8005258:	0800c198 	.word	0x0800c198

0800525c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800525c:	b480      	push	{r7}
 800525e:	b085      	sub	sp, #20
 8005260:	af00      	add	r7, sp, #0
 8005262:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005264:	4b0a      	ldr	r3, [pc, #40]	; (8005290 <RCC_Delay+0x34>)
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	4a0a      	ldr	r2, [pc, #40]	; (8005294 <RCC_Delay+0x38>)
 800526a:	fba2 2303 	umull	r2, r3, r2, r3
 800526e:	0a5b      	lsrs	r3, r3, #9
 8005270:	687a      	ldr	r2, [r7, #4]
 8005272:	fb02 f303 	mul.w	r3, r2, r3
 8005276:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005278:	bf00      	nop
  }
  while (Delay --);
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	1e5a      	subs	r2, r3, #1
 800527e:	60fa      	str	r2, [r7, #12]
 8005280:	2b00      	cmp	r3, #0
 8005282:	d1f9      	bne.n	8005278 <RCC_Delay+0x1c>
}
 8005284:	bf00      	nop
 8005286:	bf00      	nop
 8005288:	3714      	adds	r7, #20
 800528a:	46bd      	mov	sp, r7
 800528c:	bc80      	pop	{r7}
 800528e:	4770      	bx	lr
 8005290:	20000000 	.word	0x20000000
 8005294:	10624dd3 	.word	0x10624dd3

08005298 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005298:	b580      	push	{r7, lr}
 800529a:	b088      	sub	sp, #32
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80052a0:	2300      	movs	r3, #0
 80052a2:	617b      	str	r3, [r7, #20]
 80052a4:	2300      	movs	r3, #0
 80052a6:	613b      	str	r3, [r7, #16]
#if defined(STM32F105xC) || defined(STM32F107xC)
  uint32_t  pllactive = 0U;
 80052a8:	2300      	movs	r3, #0
 80052aa:	61fb      	str	r3, [r7, #28]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f003 0301 	and.w	r3, r3, #1
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d07d      	beq.n	80053b4 <HAL_RCCEx_PeriphCLKConfig+0x11c>
  {
    FlagStatus pwrclkchanged = RESET;
 80052b8:	2300      	movs	r3, #0
 80052ba:	76fb      	strb	r3, [r7, #27]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80052bc:	4b8b      	ldr	r3, [pc, #556]	; (80054ec <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80052be:	69db      	ldr	r3, [r3, #28]
 80052c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d10d      	bne.n	80052e4 <HAL_RCCEx_PeriphCLKConfig+0x4c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80052c8:	4b88      	ldr	r3, [pc, #544]	; (80054ec <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80052ca:	69db      	ldr	r3, [r3, #28]
 80052cc:	4a87      	ldr	r2, [pc, #540]	; (80054ec <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80052ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80052d2:	61d3      	str	r3, [r2, #28]
 80052d4:	4b85      	ldr	r3, [pc, #532]	; (80054ec <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80052d6:	69db      	ldr	r3, [r3, #28]
 80052d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052dc:	60fb      	str	r3, [r7, #12]
 80052de:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80052e0:	2301      	movs	r3, #1
 80052e2:	76fb      	strb	r3, [r7, #27]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052e4:	4b82      	ldr	r3, [pc, #520]	; (80054f0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d118      	bne.n	8005322 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80052f0:	4b7f      	ldr	r3, [pc, #508]	; (80054f0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	4a7e      	ldr	r2, [pc, #504]	; (80054f0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80052f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80052fa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80052fc:	f7fe fa28 	bl	8003750 <HAL_GetTick>
 8005300:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005302:	e008      	b.n	8005316 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005304:	f7fe fa24 	bl	8003750 <HAL_GetTick>
 8005308:	4602      	mov	r2, r0
 800530a:	697b      	ldr	r3, [r7, #20]
 800530c:	1ad3      	subs	r3, r2, r3
 800530e:	2b64      	cmp	r3, #100	; 0x64
 8005310:	d901      	bls.n	8005316 <HAL_RCCEx_PeriphCLKConfig+0x7e>
        {
          return HAL_TIMEOUT;
 8005312:	2303      	movs	r3, #3
 8005314:	e0e5      	b.n	80054e2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005316:	4b76      	ldr	r3, [pc, #472]	; (80054f0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800531e:	2b00      	cmp	r3, #0
 8005320:	d0f0      	beq.n	8005304 <HAL_RCCEx_PeriphCLKConfig+0x6c>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005322:	4b72      	ldr	r3, [pc, #456]	; (80054ec <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005324:	6a1b      	ldr	r3, [r3, #32]
 8005326:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800532a:	613b      	str	r3, [r7, #16]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800532c:	693b      	ldr	r3, [r7, #16]
 800532e:	2b00      	cmp	r3, #0
 8005330:	d02e      	beq.n	8005390 <HAL_RCCEx_PeriphCLKConfig+0xf8>
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	685b      	ldr	r3, [r3, #4]
 8005336:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800533a:	693a      	ldr	r2, [r7, #16]
 800533c:	429a      	cmp	r2, r3
 800533e:	d027      	beq.n	8005390 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005340:	4b6a      	ldr	r3, [pc, #424]	; (80054ec <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005342:	6a1b      	ldr	r3, [r3, #32]
 8005344:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005348:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800534a:	4b6a      	ldr	r3, [pc, #424]	; (80054f4 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800534c:	2201      	movs	r2, #1
 800534e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005350:	4b68      	ldr	r3, [pc, #416]	; (80054f4 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8005352:	2200      	movs	r2, #0
 8005354:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005356:	4a65      	ldr	r2, [pc, #404]	; (80054ec <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005358:	693b      	ldr	r3, [r7, #16]
 800535a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800535c:	693b      	ldr	r3, [r7, #16]
 800535e:	f003 0301 	and.w	r3, r3, #1
 8005362:	2b00      	cmp	r3, #0
 8005364:	d014      	beq.n	8005390 <HAL_RCCEx_PeriphCLKConfig+0xf8>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005366:	f7fe f9f3 	bl	8003750 <HAL_GetTick>
 800536a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800536c:	e00a      	b.n	8005384 <HAL_RCCEx_PeriphCLKConfig+0xec>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800536e:	f7fe f9ef 	bl	8003750 <HAL_GetTick>
 8005372:	4602      	mov	r2, r0
 8005374:	697b      	ldr	r3, [r7, #20]
 8005376:	1ad3      	subs	r3, r2, r3
 8005378:	f241 3288 	movw	r2, #5000	; 0x1388
 800537c:	4293      	cmp	r3, r2
 800537e:	d901      	bls.n	8005384 <HAL_RCCEx_PeriphCLKConfig+0xec>
          {
            return HAL_TIMEOUT;
 8005380:	2303      	movs	r3, #3
 8005382:	e0ae      	b.n	80054e2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005384:	4b59      	ldr	r3, [pc, #356]	; (80054ec <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005386:	6a1b      	ldr	r3, [r3, #32]
 8005388:	f003 0302 	and.w	r3, r3, #2
 800538c:	2b00      	cmp	r3, #0
 800538e:	d0ee      	beq.n	800536e <HAL_RCCEx_PeriphCLKConfig+0xd6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005390:	4b56      	ldr	r3, [pc, #344]	; (80054ec <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005392:	6a1b      	ldr	r3, [r3, #32]
 8005394:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	685b      	ldr	r3, [r3, #4]
 800539c:	4953      	ldr	r1, [pc, #332]	; (80054ec <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800539e:	4313      	orrs	r3, r2
 80053a0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80053a2:	7efb      	ldrb	r3, [r7, #27]
 80053a4:	2b01      	cmp	r3, #1
 80053a6:	d105      	bne.n	80053b4 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80053a8:	4b50      	ldr	r3, [pc, #320]	; (80054ec <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80053aa:	69db      	ldr	r3, [r3, #28]
 80053ac:	4a4f      	ldr	r2, [pc, #316]	; (80054ec <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80053ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80053b2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f003 0302 	and.w	r3, r3, #2
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d008      	beq.n	80053d2 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80053c0:	4b4a      	ldr	r3, [pc, #296]	; (80054ec <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80053c2:	685b      	ldr	r3, [r3, #4]
 80053c4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	689b      	ldr	r3, [r3, #8]
 80053cc:	4947      	ldr	r1, [pc, #284]	; (80054ec <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80053ce:	4313      	orrs	r3, r2
 80053d0:	604b      	str	r3, [r1, #4]
  }

#if defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ I2S2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f003 0304 	and.w	r3, r3, #4
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d008      	beq.n	80053f0 <HAL_RCCEx_PeriphCLKConfig+0x158>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 80053de:	4b43      	ldr	r3, [pc, #268]	; (80054ec <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80053e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053e2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	68db      	ldr	r3, [r3, #12]
 80053ea:	4940      	ldr	r1, [pc, #256]	; (80054ec <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80053ec:	4313      	orrs	r3, r2
 80053ee:	62cb      	str	r3, [r1, #44]	; 0x2c
  }

  /*------------------------------ I2S3 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S3) == RCC_PERIPHCLK_I2S3)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f003 0308 	and.w	r3, r3, #8
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d008      	beq.n	800540e <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S3CLKSOURCE(PeriphClkInit->I2s3ClockSelection));

    /* Configure the I2S3 clock source */
    __HAL_RCC_I2S3_CONFIG(PeriphClkInit->I2s3ClockSelection);
 80053fc:	4b3b      	ldr	r3, [pc, #236]	; (80054ec <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80053fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005400:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	691b      	ldr	r3, [r3, #16]
 8005408:	4938      	ldr	r1, [pc, #224]	; (80054ec <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800540a:	4313      	orrs	r3, r2
 800540c:	62cb      	str	r3, [r1, #44]	; 0x2c
  }

  /*------------------------------ PLL I2S Configuration ----------------------*/
  /* Check that PLLI2S need to be enabled */
  if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_I2S2SRC) || HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_I2S3SRC))
 800540e:	4b37      	ldr	r3, [pc, #220]	; (80054ec <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005410:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005412:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005416:	2b00      	cmp	r3, #0
 8005418:	d105      	bne.n	8005426 <HAL_RCCEx_PeriphCLKConfig+0x18e>
 800541a:	4b34      	ldr	r3, [pc, #208]	; (80054ec <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800541c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800541e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005422:	2b00      	cmp	r3, #0
 8005424:	d001      	beq.n	800542a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Update flag to indicate that PLL I2S should be active */
    pllactive = 1;
 8005426:	2301      	movs	r3, #1
 8005428:	61fb      	str	r3, [r7, #28]
  }

  /* Check if PLL I2S need to be enabled */
  if (pllactive == 1)
 800542a:	69fb      	ldr	r3, [r7, #28]
 800542c:	2b01      	cmp	r3, #1
 800542e:	d148      	bne.n	80054c2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
  {
    /* Enable PLL I2S only if not active */
    if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_PLL3ON))
 8005430:	4b2e      	ldr	r3, [pc, #184]	; (80054ec <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005438:	2b00      	cmp	r3, #0
 800543a:	d138      	bne.n	80054ae <HAL_RCCEx_PeriphCLKConfig+0x216>
      assert_param(IS_RCC_PLLI2S_MUL(PeriphClkInit->PLLI2S.PLLI2SMUL));
      assert_param(IS_RCC_HSE_PREDIV2(PeriphClkInit->PLLI2S.HSEPrediv2Value));

      /* Prediv2 can be written only when the PLL2 is disabled. */
      /* Return an error only if new value is different from the programmed value */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2ON) && \
 800543c:	4b2b      	ldr	r3, [pc, #172]	; (80054ec <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005444:	2b00      	cmp	r3, #0
 8005446:	d009      	beq.n	800545c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
          (__HAL_RCC_HSE_GET_PREDIV2() != PeriphClkInit->PLLI2S.HSEPrediv2Value))
 8005448:	4b28      	ldr	r3, [pc, #160]	; (80054ec <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800544a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800544c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	699b      	ldr	r3, [r3, #24]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2ON) && \
 8005454:	429a      	cmp	r2, r3
 8005456:	d001      	beq.n	800545c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
      {
        return HAL_ERROR;
 8005458:	2301      	movs	r3, #1
 800545a:	e042      	b.n	80054e2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
      }

      /* Configure the HSE prediv2 factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV2_CONFIG(PeriphClkInit->PLLI2S.HSEPrediv2Value);
 800545c:	4b23      	ldr	r3, [pc, #140]	; (80054ec <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800545e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005460:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	699b      	ldr	r3, [r3, #24]
 8005468:	4920      	ldr	r1, [pc, #128]	; (80054ec <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800546a:	4313      	orrs	r3, r2
 800546c:	62cb      	str	r3, [r1, #44]	; 0x2c

      /* Configure the main PLLI2S multiplication factors. */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SMUL);
 800546e:	4b1f      	ldr	r3, [pc, #124]	; (80054ec <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005470:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005472:	f423 4270 	bic.w	r2, r3, #61440	; 0xf000
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	695b      	ldr	r3, [r3, #20]
 800547a:	491c      	ldr	r1, [pc, #112]	; (80054ec <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800547c:	4313      	orrs	r3, r2
 800547e:	62cb      	str	r3, [r1, #44]	; 0x2c

      /* Enable the main PLLI2S. */
      __HAL_RCC_PLLI2S_ENABLE();
 8005480:	4b1d      	ldr	r3, [pc, #116]	; (80054f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005482:	2201      	movs	r2, #1
 8005484:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005486:	f7fe f963 	bl	8003750 <HAL_GetTick>
 800548a:	6178      	str	r0, [r7, #20]

      /* Wait till PLLI2S is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800548c:	e008      	b.n	80054a0 <HAL_RCCEx_PeriphCLKConfig+0x208>
      {
        if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800548e:	f7fe f95f 	bl	8003750 <HAL_GetTick>
 8005492:	4602      	mov	r2, r0
 8005494:	697b      	ldr	r3, [r7, #20]
 8005496:	1ad3      	subs	r3, r2, r3
 8005498:	2b64      	cmp	r3, #100	; 0x64
 800549a:	d901      	bls.n	80054a0 <HAL_RCCEx_PeriphCLKConfig+0x208>
        {
          return HAL_TIMEOUT;
 800549c:	2303      	movs	r3, #3
 800549e:	e020      	b.n	80054e2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80054a0:	4b12      	ldr	r3, [pc, #72]	; (80054ec <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d0f0      	beq.n	800548e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 80054ac:	e009      	b.n	80054c2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
      }
    }
    else
    {
      /* Return an error only if user wants to change the PLLI2SMUL whereas PLLI2S is active */
      if (READ_BIT(RCC->CFGR2, RCC_CFGR2_PLL3MUL) != PeriphClkInit->PLLI2S.PLLI2SMUL)
 80054ae:	4b0f      	ldr	r3, [pc, #60]	; (80054ec <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80054b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054b2:	f403 4270 	and.w	r2, r3, #61440	; 0xf000
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	695b      	ldr	r3, [r3, #20]
 80054ba:	429a      	cmp	r2, r3
 80054bc:	d001      	beq.n	80054c2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
      {
        return HAL_ERROR;
 80054be:	2301      	movs	r3, #1
 80054c0:	e00f      	b.n	80054e2 <HAL_RCCEx_PeriphCLKConfig+0x24a>

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	f003 0310 	and.w	r3, r3, #16
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d008      	beq.n	80054e0 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80054ce:	4b07      	ldr	r3, [pc, #28]	; (80054ec <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80054d0:	685b      	ldr	r3, [r3, #4]
 80054d2:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	69db      	ldr	r3, [r3, #28]
 80054da:	4904      	ldr	r1, [pc, #16]	; (80054ec <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80054dc:	4313      	orrs	r3, r2
 80054de:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80054e0:	2300      	movs	r3, #0
}
 80054e2:	4618      	mov	r0, r3
 80054e4:	3720      	adds	r7, #32
 80054e6:	46bd      	mov	sp, r7
 80054e8:	bd80      	pop	{r7, pc}
 80054ea:	bf00      	nop
 80054ec:	40021000 	.word	0x40021000
 80054f0:	40007000 	.word	0x40007000
 80054f4:	42420440 	.word	0x42420440
 80054f8:	42420070 	.word	0x42420070

080054fc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80054fc:	b580      	push	{r7, lr}
 80054fe:	b082      	sub	sp, #8
 8005500:	af00      	add	r7, sp, #0
 8005502:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2b00      	cmp	r3, #0
 8005508:	d101      	bne.n	800550e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800550a:	2301      	movs	r3, #1
 800550c:	e076      	b.n	80055fc <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005512:	2b00      	cmp	r3, #0
 8005514:	d108      	bne.n	8005528 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	685b      	ldr	r3, [r3, #4]
 800551a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800551e:	d009      	beq.n	8005534 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2200      	movs	r2, #0
 8005524:	61da      	str	r2, [r3, #28]
 8005526:	e005      	b.n	8005534 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2200      	movs	r2, #0
 800552c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	2200      	movs	r2, #0
 8005532:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2200      	movs	r2, #0
 8005538:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005540:	b2db      	uxtb	r3, r3
 8005542:	2b00      	cmp	r3, #0
 8005544:	d106      	bne.n	8005554 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	2200      	movs	r2, #0
 800554a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800554e:	6878      	ldr	r0, [r7, #4]
 8005550:	f7fd f908 	bl	8002764 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2202      	movs	r2, #2
 8005558:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	681a      	ldr	r2, [r3, #0]
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800556a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	685b      	ldr	r3, [r3, #4]
 8005570:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	689b      	ldr	r3, [r3, #8]
 8005578:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800557c:	431a      	orrs	r2, r3
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	68db      	ldr	r3, [r3, #12]
 8005582:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005586:	431a      	orrs	r2, r3
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	691b      	ldr	r3, [r3, #16]
 800558c:	f003 0302 	and.w	r3, r3, #2
 8005590:	431a      	orrs	r2, r3
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	695b      	ldr	r3, [r3, #20]
 8005596:	f003 0301 	and.w	r3, r3, #1
 800559a:	431a      	orrs	r2, r3
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	699b      	ldr	r3, [r3, #24]
 80055a0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80055a4:	431a      	orrs	r2, r3
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	69db      	ldr	r3, [r3, #28]
 80055aa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80055ae:	431a      	orrs	r2, r3
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	6a1b      	ldr	r3, [r3, #32]
 80055b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055b8:	ea42 0103 	orr.w	r1, r2, r3
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055c0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	430a      	orrs	r2, r1
 80055ca:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	699b      	ldr	r3, [r3, #24]
 80055d0:	0c1a      	lsrs	r2, r3, #16
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f002 0204 	and.w	r2, r2, #4
 80055da:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	69da      	ldr	r2, [r3, #28]
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80055ea:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2200      	movs	r2, #0
 80055f0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	2201      	movs	r2, #1
 80055f6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80055fa:	2300      	movs	r3, #0
}
 80055fc:	4618      	mov	r0, r3
 80055fe:	3708      	adds	r7, #8
 8005600:	46bd      	mov	sp, r7
 8005602:	bd80      	pop	{r7, pc}

08005604 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005604:	b580      	push	{r7, lr}
 8005606:	b088      	sub	sp, #32
 8005608:	af00      	add	r7, sp, #0
 800560a:	60f8      	str	r0, [r7, #12]
 800560c:	60b9      	str	r1, [r7, #8]
 800560e:	603b      	str	r3, [r7, #0]
 8005610:	4613      	mov	r3, r2
 8005612:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005614:	2300      	movs	r3, #0
 8005616:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800561e:	2b01      	cmp	r3, #1
 8005620:	d101      	bne.n	8005626 <HAL_SPI_Transmit+0x22>
 8005622:	2302      	movs	r3, #2
 8005624:	e126      	b.n	8005874 <HAL_SPI_Transmit+0x270>
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	2201      	movs	r2, #1
 800562a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800562e:	f7fe f88f 	bl	8003750 <HAL_GetTick>
 8005632:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005634:	88fb      	ldrh	r3, [r7, #6]
 8005636:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800563e:	b2db      	uxtb	r3, r3
 8005640:	2b01      	cmp	r3, #1
 8005642:	d002      	beq.n	800564a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005644:	2302      	movs	r3, #2
 8005646:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005648:	e10b      	b.n	8005862 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800564a:	68bb      	ldr	r3, [r7, #8]
 800564c:	2b00      	cmp	r3, #0
 800564e:	d002      	beq.n	8005656 <HAL_SPI_Transmit+0x52>
 8005650:	88fb      	ldrh	r3, [r7, #6]
 8005652:	2b00      	cmp	r3, #0
 8005654:	d102      	bne.n	800565c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005656:	2301      	movs	r3, #1
 8005658:	77fb      	strb	r3, [r7, #31]
    goto error;
 800565a:	e102      	b.n	8005862 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	2203      	movs	r2, #3
 8005660:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	2200      	movs	r2, #0
 8005668:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	68ba      	ldr	r2, [r7, #8]
 800566e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	88fa      	ldrh	r2, [r7, #6]
 8005674:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	88fa      	ldrh	r2, [r7, #6]
 800567a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	2200      	movs	r2, #0
 8005680:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	2200      	movs	r2, #0
 8005686:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	2200      	movs	r2, #0
 800568c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	2200      	movs	r2, #0
 8005692:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	2200      	movs	r2, #0
 8005698:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	689b      	ldr	r3, [r3, #8]
 800569e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80056a2:	d10f      	bne.n	80056c4 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	681a      	ldr	r2, [r3, #0]
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80056b2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	681a      	ldr	r2, [r3, #0]
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80056c2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056ce:	2b40      	cmp	r3, #64	; 0x40
 80056d0:	d007      	beq.n	80056e2 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	681a      	ldr	r2, [r3, #0]
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80056e0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	68db      	ldr	r3, [r3, #12]
 80056e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80056ea:	d14b      	bne.n	8005784 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	685b      	ldr	r3, [r3, #4]
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d002      	beq.n	80056fa <HAL_SPI_Transmit+0xf6>
 80056f4:	8afb      	ldrh	r3, [r7, #22]
 80056f6:	2b01      	cmp	r3, #1
 80056f8:	d13e      	bne.n	8005778 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056fe:	881a      	ldrh	r2, [r3, #0]
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800570a:	1c9a      	adds	r2, r3, #2
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005714:	b29b      	uxth	r3, r3
 8005716:	3b01      	subs	r3, #1
 8005718:	b29a      	uxth	r2, r3
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800571e:	e02b      	b.n	8005778 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	689b      	ldr	r3, [r3, #8]
 8005726:	f003 0302 	and.w	r3, r3, #2
 800572a:	2b02      	cmp	r3, #2
 800572c:	d112      	bne.n	8005754 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005732:	881a      	ldrh	r2, [r3, #0]
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800573e:	1c9a      	adds	r2, r3, #2
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005748:	b29b      	uxth	r3, r3
 800574a:	3b01      	subs	r3, #1
 800574c:	b29a      	uxth	r2, r3
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	86da      	strh	r2, [r3, #54]	; 0x36
 8005752:	e011      	b.n	8005778 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005754:	f7fd fffc 	bl	8003750 <HAL_GetTick>
 8005758:	4602      	mov	r2, r0
 800575a:	69bb      	ldr	r3, [r7, #24]
 800575c:	1ad3      	subs	r3, r2, r3
 800575e:	683a      	ldr	r2, [r7, #0]
 8005760:	429a      	cmp	r2, r3
 8005762:	d803      	bhi.n	800576c <HAL_SPI_Transmit+0x168>
 8005764:	683b      	ldr	r3, [r7, #0]
 8005766:	f1b3 3fff 	cmp.w	r3, #4294967295
 800576a:	d102      	bne.n	8005772 <HAL_SPI_Transmit+0x16e>
 800576c:	683b      	ldr	r3, [r7, #0]
 800576e:	2b00      	cmp	r3, #0
 8005770:	d102      	bne.n	8005778 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8005772:	2303      	movs	r3, #3
 8005774:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005776:	e074      	b.n	8005862 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800577c:	b29b      	uxth	r3, r3
 800577e:	2b00      	cmp	r3, #0
 8005780:	d1ce      	bne.n	8005720 <HAL_SPI_Transmit+0x11c>
 8005782:	e04c      	b.n	800581e <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	685b      	ldr	r3, [r3, #4]
 8005788:	2b00      	cmp	r3, #0
 800578a:	d002      	beq.n	8005792 <HAL_SPI_Transmit+0x18e>
 800578c:	8afb      	ldrh	r3, [r7, #22]
 800578e:	2b01      	cmp	r3, #1
 8005790:	d140      	bne.n	8005814 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	330c      	adds	r3, #12
 800579c:	7812      	ldrb	r2, [r2, #0]
 800579e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057a4:	1c5a      	adds	r2, r3, #1
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80057ae:	b29b      	uxth	r3, r3
 80057b0:	3b01      	subs	r3, #1
 80057b2:	b29a      	uxth	r2, r3
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80057b8:	e02c      	b.n	8005814 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	689b      	ldr	r3, [r3, #8]
 80057c0:	f003 0302 	and.w	r3, r3, #2
 80057c4:	2b02      	cmp	r3, #2
 80057c6:	d113      	bne.n	80057f0 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	330c      	adds	r3, #12
 80057d2:	7812      	ldrb	r2, [r2, #0]
 80057d4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057da:	1c5a      	adds	r2, r3, #1
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80057e4:	b29b      	uxth	r3, r3
 80057e6:	3b01      	subs	r3, #1
 80057e8:	b29a      	uxth	r2, r3
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	86da      	strh	r2, [r3, #54]	; 0x36
 80057ee:	e011      	b.n	8005814 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80057f0:	f7fd ffae 	bl	8003750 <HAL_GetTick>
 80057f4:	4602      	mov	r2, r0
 80057f6:	69bb      	ldr	r3, [r7, #24]
 80057f8:	1ad3      	subs	r3, r2, r3
 80057fa:	683a      	ldr	r2, [r7, #0]
 80057fc:	429a      	cmp	r2, r3
 80057fe:	d803      	bhi.n	8005808 <HAL_SPI_Transmit+0x204>
 8005800:	683b      	ldr	r3, [r7, #0]
 8005802:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005806:	d102      	bne.n	800580e <HAL_SPI_Transmit+0x20a>
 8005808:	683b      	ldr	r3, [r7, #0]
 800580a:	2b00      	cmp	r3, #0
 800580c:	d102      	bne.n	8005814 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800580e:	2303      	movs	r3, #3
 8005810:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005812:	e026      	b.n	8005862 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005818:	b29b      	uxth	r3, r3
 800581a:	2b00      	cmp	r3, #0
 800581c:	d1cd      	bne.n	80057ba <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800581e:	69ba      	ldr	r2, [r7, #24]
 8005820:	6839      	ldr	r1, [r7, #0]
 8005822:	68f8      	ldr	r0, [r7, #12]
 8005824:	f000 fa54 	bl	8005cd0 <SPI_EndRxTxTransaction>
 8005828:	4603      	mov	r3, r0
 800582a:	2b00      	cmp	r3, #0
 800582c:	d002      	beq.n	8005834 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	2220      	movs	r2, #32
 8005832:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	689b      	ldr	r3, [r3, #8]
 8005838:	2b00      	cmp	r3, #0
 800583a:	d10a      	bne.n	8005852 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800583c:	2300      	movs	r3, #0
 800583e:	613b      	str	r3, [r7, #16]
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	68db      	ldr	r3, [r3, #12]
 8005846:	613b      	str	r3, [r7, #16]
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	689b      	ldr	r3, [r3, #8]
 800584e:	613b      	str	r3, [r7, #16]
 8005850:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005856:	2b00      	cmp	r3, #0
 8005858:	d002      	beq.n	8005860 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800585a:	2301      	movs	r3, #1
 800585c:	77fb      	strb	r3, [r7, #31]
 800585e:	e000      	b.n	8005862 <HAL_SPI_Transmit+0x25e>
  }

error:
 8005860:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	2201      	movs	r2, #1
 8005866:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	2200      	movs	r2, #0
 800586e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005872:	7ffb      	ldrb	r3, [r7, #31]
}
 8005874:	4618      	mov	r0, r3
 8005876:	3720      	adds	r7, #32
 8005878:	46bd      	mov	sp, r7
 800587a:	bd80      	pop	{r7, pc}

0800587c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800587c:	b580      	push	{r7, lr}
 800587e:	b08c      	sub	sp, #48	; 0x30
 8005880:	af00      	add	r7, sp, #0
 8005882:	60f8      	str	r0, [r7, #12]
 8005884:	60b9      	str	r1, [r7, #8]
 8005886:	607a      	str	r2, [r7, #4]
 8005888:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800588a:	2301      	movs	r3, #1
 800588c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800588e:	2300      	movs	r3, #0
 8005890:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800589a:	2b01      	cmp	r3, #1
 800589c:	d101      	bne.n	80058a2 <HAL_SPI_TransmitReceive+0x26>
 800589e:	2302      	movs	r3, #2
 80058a0:	e18a      	b.n	8005bb8 <HAL_SPI_TransmitReceive+0x33c>
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	2201      	movs	r2, #1
 80058a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80058aa:	f7fd ff51 	bl	8003750 <HAL_GetTick>
 80058ae:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80058b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	685b      	ldr	r3, [r3, #4]
 80058be:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80058c0:	887b      	ldrh	r3, [r7, #2]
 80058c2:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80058c4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80058c8:	2b01      	cmp	r3, #1
 80058ca:	d00f      	beq.n	80058ec <HAL_SPI_TransmitReceive+0x70>
 80058cc:	69fb      	ldr	r3, [r7, #28]
 80058ce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80058d2:	d107      	bne.n	80058e4 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	689b      	ldr	r3, [r3, #8]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d103      	bne.n	80058e4 <HAL_SPI_TransmitReceive+0x68>
 80058dc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80058e0:	2b04      	cmp	r3, #4
 80058e2:	d003      	beq.n	80058ec <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80058e4:	2302      	movs	r3, #2
 80058e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80058ea:	e15b      	b.n	8005ba4 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80058ec:	68bb      	ldr	r3, [r7, #8]
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d005      	beq.n	80058fe <HAL_SPI_TransmitReceive+0x82>
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d002      	beq.n	80058fe <HAL_SPI_TransmitReceive+0x82>
 80058f8:	887b      	ldrh	r3, [r7, #2]
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d103      	bne.n	8005906 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80058fe:	2301      	movs	r3, #1
 8005900:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005904:	e14e      	b.n	8005ba4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800590c:	b2db      	uxtb	r3, r3
 800590e:	2b04      	cmp	r3, #4
 8005910:	d003      	beq.n	800591a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	2205      	movs	r2, #5
 8005916:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	2200      	movs	r2, #0
 800591e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	687a      	ldr	r2, [r7, #4]
 8005924:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	887a      	ldrh	r2, [r7, #2]
 800592a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	887a      	ldrh	r2, [r7, #2]
 8005930:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	68ba      	ldr	r2, [r7, #8]
 8005936:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	887a      	ldrh	r2, [r7, #2]
 800593c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	887a      	ldrh	r2, [r7, #2]
 8005942:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	2200      	movs	r2, #0
 8005948:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	2200      	movs	r2, #0
 800594e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800595a:	2b40      	cmp	r3, #64	; 0x40
 800595c:	d007      	beq.n	800596e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	681a      	ldr	r2, [r3, #0]
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800596c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	68db      	ldr	r3, [r3, #12]
 8005972:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005976:	d178      	bne.n	8005a6a <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	685b      	ldr	r3, [r3, #4]
 800597c:	2b00      	cmp	r3, #0
 800597e:	d002      	beq.n	8005986 <HAL_SPI_TransmitReceive+0x10a>
 8005980:	8b7b      	ldrh	r3, [r7, #26]
 8005982:	2b01      	cmp	r3, #1
 8005984:	d166      	bne.n	8005a54 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800598a:	881a      	ldrh	r2, [r3, #0]
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005996:	1c9a      	adds	r2, r3, #2
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80059a0:	b29b      	uxth	r3, r3
 80059a2:	3b01      	subs	r3, #1
 80059a4:	b29a      	uxth	r2, r3
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80059aa:	e053      	b.n	8005a54 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	689b      	ldr	r3, [r3, #8]
 80059b2:	f003 0302 	and.w	r3, r3, #2
 80059b6:	2b02      	cmp	r3, #2
 80059b8:	d11b      	bne.n	80059f2 <HAL_SPI_TransmitReceive+0x176>
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80059be:	b29b      	uxth	r3, r3
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d016      	beq.n	80059f2 <HAL_SPI_TransmitReceive+0x176>
 80059c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059c6:	2b01      	cmp	r3, #1
 80059c8:	d113      	bne.n	80059f2 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059ce:	881a      	ldrh	r2, [r3, #0]
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059da:	1c9a      	adds	r2, r3, #2
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80059e4:	b29b      	uxth	r3, r3
 80059e6:	3b01      	subs	r3, #1
 80059e8:	b29a      	uxth	r2, r3
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80059ee:	2300      	movs	r3, #0
 80059f0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	689b      	ldr	r3, [r3, #8]
 80059f8:	f003 0301 	and.w	r3, r3, #1
 80059fc:	2b01      	cmp	r3, #1
 80059fe:	d119      	bne.n	8005a34 <HAL_SPI_TransmitReceive+0x1b8>
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a04:	b29b      	uxth	r3, r3
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d014      	beq.n	8005a34 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	68da      	ldr	r2, [r3, #12]
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a14:	b292      	uxth	r2, r2
 8005a16:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a1c:	1c9a      	adds	r2, r3, #2
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a26:	b29b      	uxth	r3, r3
 8005a28:	3b01      	subs	r3, #1
 8005a2a:	b29a      	uxth	r2, r3
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005a30:	2301      	movs	r3, #1
 8005a32:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005a34:	f7fd fe8c 	bl	8003750 <HAL_GetTick>
 8005a38:	4602      	mov	r2, r0
 8005a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a3c:	1ad3      	subs	r3, r2, r3
 8005a3e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005a40:	429a      	cmp	r2, r3
 8005a42:	d807      	bhi.n	8005a54 <HAL_SPI_TransmitReceive+0x1d8>
 8005a44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a4a:	d003      	beq.n	8005a54 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8005a4c:	2303      	movs	r3, #3
 8005a4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005a52:	e0a7      	b.n	8005ba4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005a58:	b29b      	uxth	r3, r3
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d1a6      	bne.n	80059ac <HAL_SPI_TransmitReceive+0x130>
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a62:	b29b      	uxth	r3, r3
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d1a1      	bne.n	80059ac <HAL_SPI_TransmitReceive+0x130>
 8005a68:	e07c      	b.n	8005b64 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	685b      	ldr	r3, [r3, #4]
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d002      	beq.n	8005a78 <HAL_SPI_TransmitReceive+0x1fc>
 8005a72:	8b7b      	ldrh	r3, [r7, #26]
 8005a74:	2b01      	cmp	r3, #1
 8005a76:	d16b      	bne.n	8005b50 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	330c      	adds	r3, #12
 8005a82:	7812      	ldrb	r2, [r2, #0]
 8005a84:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a8a:	1c5a      	adds	r2, r3, #1
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005a94:	b29b      	uxth	r3, r3
 8005a96:	3b01      	subs	r3, #1
 8005a98:	b29a      	uxth	r2, r3
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005a9e:	e057      	b.n	8005b50 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	689b      	ldr	r3, [r3, #8]
 8005aa6:	f003 0302 	and.w	r3, r3, #2
 8005aaa:	2b02      	cmp	r3, #2
 8005aac:	d11c      	bne.n	8005ae8 <HAL_SPI_TransmitReceive+0x26c>
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005ab2:	b29b      	uxth	r3, r3
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d017      	beq.n	8005ae8 <HAL_SPI_TransmitReceive+0x26c>
 8005ab8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005aba:	2b01      	cmp	r3, #1
 8005abc:	d114      	bne.n	8005ae8 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	330c      	adds	r3, #12
 8005ac8:	7812      	ldrb	r2, [r2, #0]
 8005aca:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ad0:	1c5a      	adds	r2, r3, #1
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005ada:	b29b      	uxth	r3, r3
 8005adc:	3b01      	subs	r3, #1
 8005ade:	b29a      	uxth	r2, r3
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005ae4:	2300      	movs	r3, #0
 8005ae6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	689b      	ldr	r3, [r3, #8]
 8005aee:	f003 0301 	and.w	r3, r3, #1
 8005af2:	2b01      	cmp	r3, #1
 8005af4:	d119      	bne.n	8005b2a <HAL_SPI_TransmitReceive+0x2ae>
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005afa:	b29b      	uxth	r3, r3
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d014      	beq.n	8005b2a <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	68da      	ldr	r2, [r3, #12]
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b0a:	b2d2      	uxtb	r2, r2
 8005b0c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b12:	1c5a      	adds	r2, r3, #1
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b1c:	b29b      	uxth	r3, r3
 8005b1e:	3b01      	subs	r3, #1
 8005b20:	b29a      	uxth	r2, r3
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005b26:	2301      	movs	r3, #1
 8005b28:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005b2a:	f7fd fe11 	bl	8003750 <HAL_GetTick>
 8005b2e:	4602      	mov	r2, r0
 8005b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b32:	1ad3      	subs	r3, r2, r3
 8005b34:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005b36:	429a      	cmp	r2, r3
 8005b38:	d803      	bhi.n	8005b42 <HAL_SPI_TransmitReceive+0x2c6>
 8005b3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b40:	d102      	bne.n	8005b48 <HAL_SPI_TransmitReceive+0x2cc>
 8005b42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d103      	bne.n	8005b50 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8005b48:	2303      	movs	r3, #3
 8005b4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005b4e:	e029      	b.n	8005ba4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005b54:	b29b      	uxth	r3, r3
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d1a2      	bne.n	8005aa0 <HAL_SPI_TransmitReceive+0x224>
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b5e:	b29b      	uxth	r3, r3
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d19d      	bne.n	8005aa0 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005b64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b66:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005b68:	68f8      	ldr	r0, [r7, #12]
 8005b6a:	f000 f8b1 	bl	8005cd0 <SPI_EndRxTxTransaction>
 8005b6e:	4603      	mov	r3, r0
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d006      	beq.n	8005b82 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8005b74:	2301      	movs	r3, #1
 8005b76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	2220      	movs	r2, #32
 8005b7e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8005b80:	e010      	b.n	8005ba4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	689b      	ldr	r3, [r3, #8]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d10b      	bne.n	8005ba2 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005b8a:	2300      	movs	r3, #0
 8005b8c:	617b      	str	r3, [r7, #20]
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	68db      	ldr	r3, [r3, #12]
 8005b94:	617b      	str	r3, [r7, #20]
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	689b      	ldr	r3, [r3, #8]
 8005b9c:	617b      	str	r3, [r7, #20]
 8005b9e:	697b      	ldr	r3, [r7, #20]
 8005ba0:	e000      	b.n	8005ba4 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8005ba2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	2201      	movs	r2, #1
 8005ba8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	2200      	movs	r2, #0
 8005bb0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005bb4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8005bb8:	4618      	mov	r0, r3
 8005bba:	3730      	adds	r7, #48	; 0x30
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	bd80      	pop	{r7, pc}

08005bc0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005bc0:	b580      	push	{r7, lr}
 8005bc2:	b088      	sub	sp, #32
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	60f8      	str	r0, [r7, #12]
 8005bc8:	60b9      	str	r1, [r7, #8]
 8005bca:	603b      	str	r3, [r7, #0]
 8005bcc:	4613      	mov	r3, r2
 8005bce:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005bd0:	f7fd fdbe 	bl	8003750 <HAL_GetTick>
 8005bd4:	4602      	mov	r2, r0
 8005bd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bd8:	1a9b      	subs	r3, r3, r2
 8005bda:	683a      	ldr	r2, [r7, #0]
 8005bdc:	4413      	add	r3, r2
 8005bde:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005be0:	f7fd fdb6 	bl	8003750 <HAL_GetTick>
 8005be4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005be6:	4b39      	ldr	r3, [pc, #228]	; (8005ccc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	015b      	lsls	r3, r3, #5
 8005bec:	0d1b      	lsrs	r3, r3, #20
 8005bee:	69fa      	ldr	r2, [r7, #28]
 8005bf0:	fb02 f303 	mul.w	r3, r2, r3
 8005bf4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005bf6:	e054      	b.n	8005ca2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005bf8:	683b      	ldr	r3, [r7, #0]
 8005bfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bfe:	d050      	beq.n	8005ca2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005c00:	f7fd fda6 	bl	8003750 <HAL_GetTick>
 8005c04:	4602      	mov	r2, r0
 8005c06:	69bb      	ldr	r3, [r7, #24]
 8005c08:	1ad3      	subs	r3, r2, r3
 8005c0a:	69fa      	ldr	r2, [r7, #28]
 8005c0c:	429a      	cmp	r2, r3
 8005c0e:	d902      	bls.n	8005c16 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005c10:	69fb      	ldr	r3, [r7, #28]
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d13d      	bne.n	8005c92 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	685a      	ldr	r2, [r3, #4]
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005c24:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	685b      	ldr	r3, [r3, #4]
 8005c2a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005c2e:	d111      	bne.n	8005c54 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	689b      	ldr	r3, [r3, #8]
 8005c34:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c38:	d004      	beq.n	8005c44 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	689b      	ldr	r3, [r3, #8]
 8005c3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c42:	d107      	bne.n	8005c54 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	681a      	ldr	r2, [r3, #0]
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005c52:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c58:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c5c:	d10f      	bne.n	8005c7e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	681a      	ldr	r2, [r3, #0]
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005c6c:	601a      	str	r2, [r3, #0]
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	681a      	ldr	r2, [r3, #0]
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005c7c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	2201      	movs	r2, #1
 8005c82:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	2200      	movs	r2, #0
 8005c8a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005c8e:	2303      	movs	r3, #3
 8005c90:	e017      	b.n	8005cc2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8005c92:	697b      	ldr	r3, [r7, #20]
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d101      	bne.n	8005c9c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005c98:	2300      	movs	r3, #0
 8005c9a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005c9c:	697b      	ldr	r3, [r7, #20]
 8005c9e:	3b01      	subs	r3, #1
 8005ca0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	689a      	ldr	r2, [r3, #8]
 8005ca8:	68bb      	ldr	r3, [r7, #8]
 8005caa:	4013      	ands	r3, r2
 8005cac:	68ba      	ldr	r2, [r7, #8]
 8005cae:	429a      	cmp	r2, r3
 8005cb0:	bf0c      	ite	eq
 8005cb2:	2301      	moveq	r3, #1
 8005cb4:	2300      	movne	r3, #0
 8005cb6:	b2db      	uxtb	r3, r3
 8005cb8:	461a      	mov	r2, r3
 8005cba:	79fb      	ldrb	r3, [r7, #7]
 8005cbc:	429a      	cmp	r2, r3
 8005cbe:	d19b      	bne.n	8005bf8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005cc0:	2300      	movs	r3, #0
}
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	3720      	adds	r7, #32
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	bd80      	pop	{r7, pc}
 8005cca:	bf00      	nop
 8005ccc:	20000000 	.word	0x20000000

08005cd0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005cd0:	b580      	push	{r7, lr}
 8005cd2:	b086      	sub	sp, #24
 8005cd4:	af02      	add	r7, sp, #8
 8005cd6:	60f8      	str	r0, [r7, #12]
 8005cd8:	60b9      	str	r1, [r7, #8]
 8005cda:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	9300      	str	r3, [sp, #0]
 8005ce0:	68bb      	ldr	r3, [r7, #8]
 8005ce2:	2200      	movs	r2, #0
 8005ce4:	2180      	movs	r1, #128	; 0x80
 8005ce6:	68f8      	ldr	r0, [r7, #12]
 8005ce8:	f7ff ff6a 	bl	8005bc0 <SPI_WaitFlagStateUntilTimeout>
 8005cec:	4603      	mov	r3, r0
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d007      	beq.n	8005d02 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cf6:	f043 0220 	orr.w	r2, r3, #32
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8005cfe:	2303      	movs	r3, #3
 8005d00:	e000      	b.n	8005d04 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8005d02:	2300      	movs	r3, #0
}
 8005d04:	4618      	mov	r0, r3
 8005d06:	3710      	adds	r7, #16
 8005d08:	46bd      	mov	sp, r7
 8005d0a:	bd80      	pop	{r7, pc}

08005d0c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005d0c:	b580      	push	{r7, lr}
 8005d0e:	b082      	sub	sp, #8
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d101      	bne.n	8005d1e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005d1a:	2301      	movs	r3, #1
 8005d1c:	e041      	b.n	8005da2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d24:	b2db      	uxtb	r3, r3
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d106      	bne.n	8005d38 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	2200      	movs	r2, #0
 8005d2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005d32:	6878      	ldr	r0, [r7, #4]
 8005d34:	f7fc fd60 	bl	80027f8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	2202      	movs	r2, #2
 8005d3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681a      	ldr	r2, [r3, #0]
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	3304      	adds	r3, #4
 8005d48:	4619      	mov	r1, r3
 8005d4a:	4610      	mov	r0, r2
 8005d4c:	f000 f9b4 	bl	80060b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2201      	movs	r2, #1
 8005d54:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2201      	movs	r2, #1
 8005d5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2201      	movs	r2, #1
 8005d64:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	2201      	movs	r2, #1
 8005d6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2201      	movs	r2, #1
 8005d74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2201      	movs	r2, #1
 8005d7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	2201      	movs	r2, #1
 8005d84:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	2201      	movs	r2, #1
 8005d8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	2201      	movs	r2, #1
 8005d94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2201      	movs	r2, #1
 8005d9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005da0:	2300      	movs	r3, #0
}
 8005da2:	4618      	mov	r0, r3
 8005da4:	3708      	adds	r7, #8
 8005da6:	46bd      	mov	sp, r7
 8005da8:	bd80      	pop	{r7, pc}
	...

08005dac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005dac:	b480      	push	{r7}
 8005dae:	b085      	sub	sp, #20
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005dba:	b2db      	uxtb	r3, r3
 8005dbc:	2b01      	cmp	r3, #1
 8005dbe:	d001      	beq.n	8005dc4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005dc0:	2301      	movs	r3, #1
 8005dc2:	e03f      	b.n	8005e44 <HAL_TIM_Base_Start_IT+0x98>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2202      	movs	r2, #2
 8005dc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	68da      	ldr	r2, [r3, #12]
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	f042 0201 	orr.w	r2, r2, #1
 8005dda:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	4a1b      	ldr	r2, [pc, #108]	; (8005e50 <HAL_TIM_Base_Start_IT+0xa4>)
 8005de2:	4293      	cmp	r3, r2
 8005de4:	d013      	beq.n	8005e0e <HAL_TIM_Base_Start_IT+0x62>
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005dee:	d00e      	beq.n	8005e0e <HAL_TIM_Base_Start_IT+0x62>
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	4a17      	ldr	r2, [pc, #92]	; (8005e54 <HAL_TIM_Base_Start_IT+0xa8>)
 8005df6:	4293      	cmp	r3, r2
 8005df8:	d009      	beq.n	8005e0e <HAL_TIM_Base_Start_IT+0x62>
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	4a16      	ldr	r2, [pc, #88]	; (8005e58 <HAL_TIM_Base_Start_IT+0xac>)
 8005e00:	4293      	cmp	r3, r2
 8005e02:	d004      	beq.n	8005e0e <HAL_TIM_Base_Start_IT+0x62>
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	4a14      	ldr	r2, [pc, #80]	; (8005e5c <HAL_TIM_Base_Start_IT+0xb0>)
 8005e0a:	4293      	cmp	r3, r2
 8005e0c:	d111      	bne.n	8005e32 <HAL_TIM_Base_Start_IT+0x86>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	689b      	ldr	r3, [r3, #8]
 8005e14:	f003 0307 	and.w	r3, r3, #7
 8005e18:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	2b06      	cmp	r3, #6
 8005e1e:	d010      	beq.n	8005e42 <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	681a      	ldr	r2, [r3, #0]
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	f042 0201 	orr.w	r2, r2, #1
 8005e2e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e30:	e007      	b.n	8005e42 <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	681a      	ldr	r2, [r3, #0]
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f042 0201 	orr.w	r2, r2, #1
 8005e40:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005e42:	2300      	movs	r3, #0
}
 8005e44:	4618      	mov	r0, r3
 8005e46:	3714      	adds	r7, #20
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	bc80      	pop	{r7}
 8005e4c:	4770      	bx	lr
 8005e4e:	bf00      	nop
 8005e50:	40012c00 	.word	0x40012c00
 8005e54:	40000400 	.word	0x40000400
 8005e58:	40000800 	.word	0x40000800
 8005e5c:	40000c00 	.word	0x40000c00

08005e60 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005e60:	b580      	push	{r7, lr}
 8005e62:	b082      	sub	sp, #8
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	691b      	ldr	r3, [r3, #16]
 8005e6e:	f003 0302 	and.w	r3, r3, #2
 8005e72:	2b02      	cmp	r3, #2
 8005e74:	d122      	bne.n	8005ebc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	68db      	ldr	r3, [r3, #12]
 8005e7c:	f003 0302 	and.w	r3, r3, #2
 8005e80:	2b02      	cmp	r3, #2
 8005e82:	d11b      	bne.n	8005ebc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	f06f 0202 	mvn.w	r2, #2
 8005e8c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	2201      	movs	r2, #1
 8005e92:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	699b      	ldr	r3, [r3, #24]
 8005e9a:	f003 0303 	and.w	r3, r3, #3
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d003      	beq.n	8005eaa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005ea2:	6878      	ldr	r0, [r7, #4]
 8005ea4:	f000 f8ed 	bl	8006082 <HAL_TIM_IC_CaptureCallback>
 8005ea8:	e005      	b.n	8005eb6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005eaa:	6878      	ldr	r0, [r7, #4]
 8005eac:	f000 f8e0 	bl	8006070 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005eb0:	6878      	ldr	r0, [r7, #4]
 8005eb2:	f000 f8ef 	bl	8006094 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	2200      	movs	r2, #0
 8005eba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	691b      	ldr	r3, [r3, #16]
 8005ec2:	f003 0304 	and.w	r3, r3, #4
 8005ec6:	2b04      	cmp	r3, #4
 8005ec8:	d122      	bne.n	8005f10 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	68db      	ldr	r3, [r3, #12]
 8005ed0:	f003 0304 	and.w	r3, r3, #4
 8005ed4:	2b04      	cmp	r3, #4
 8005ed6:	d11b      	bne.n	8005f10 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	f06f 0204 	mvn.w	r2, #4
 8005ee0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	2202      	movs	r2, #2
 8005ee6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	699b      	ldr	r3, [r3, #24]
 8005eee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d003      	beq.n	8005efe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ef6:	6878      	ldr	r0, [r7, #4]
 8005ef8:	f000 f8c3 	bl	8006082 <HAL_TIM_IC_CaptureCallback>
 8005efc:	e005      	b.n	8005f0a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005efe:	6878      	ldr	r0, [r7, #4]
 8005f00:	f000 f8b6 	bl	8006070 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f04:	6878      	ldr	r0, [r7, #4]
 8005f06:	f000 f8c5 	bl	8006094 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	2200      	movs	r2, #0
 8005f0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	691b      	ldr	r3, [r3, #16]
 8005f16:	f003 0308 	and.w	r3, r3, #8
 8005f1a:	2b08      	cmp	r3, #8
 8005f1c:	d122      	bne.n	8005f64 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	68db      	ldr	r3, [r3, #12]
 8005f24:	f003 0308 	and.w	r3, r3, #8
 8005f28:	2b08      	cmp	r3, #8
 8005f2a:	d11b      	bne.n	8005f64 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	f06f 0208 	mvn.w	r2, #8
 8005f34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	2204      	movs	r2, #4
 8005f3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	69db      	ldr	r3, [r3, #28]
 8005f42:	f003 0303 	and.w	r3, r3, #3
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d003      	beq.n	8005f52 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f4a:	6878      	ldr	r0, [r7, #4]
 8005f4c:	f000 f899 	bl	8006082 <HAL_TIM_IC_CaptureCallback>
 8005f50:	e005      	b.n	8005f5e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f52:	6878      	ldr	r0, [r7, #4]
 8005f54:	f000 f88c 	bl	8006070 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f58:	6878      	ldr	r0, [r7, #4]
 8005f5a:	f000 f89b 	bl	8006094 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	2200      	movs	r2, #0
 8005f62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	691b      	ldr	r3, [r3, #16]
 8005f6a:	f003 0310 	and.w	r3, r3, #16
 8005f6e:	2b10      	cmp	r3, #16
 8005f70:	d122      	bne.n	8005fb8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	68db      	ldr	r3, [r3, #12]
 8005f78:	f003 0310 	and.w	r3, r3, #16
 8005f7c:	2b10      	cmp	r3, #16
 8005f7e:	d11b      	bne.n	8005fb8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	f06f 0210 	mvn.w	r2, #16
 8005f88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	2208      	movs	r2, #8
 8005f8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	69db      	ldr	r3, [r3, #28]
 8005f96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d003      	beq.n	8005fa6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f9e:	6878      	ldr	r0, [r7, #4]
 8005fa0:	f000 f86f 	bl	8006082 <HAL_TIM_IC_CaptureCallback>
 8005fa4:	e005      	b.n	8005fb2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005fa6:	6878      	ldr	r0, [r7, #4]
 8005fa8:	f000 f862 	bl	8006070 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005fac:	6878      	ldr	r0, [r7, #4]
 8005fae:	f000 f871 	bl	8006094 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	2200      	movs	r2, #0
 8005fb6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	691b      	ldr	r3, [r3, #16]
 8005fbe:	f003 0301 	and.w	r3, r3, #1
 8005fc2:	2b01      	cmp	r3, #1
 8005fc4:	d10e      	bne.n	8005fe4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	68db      	ldr	r3, [r3, #12]
 8005fcc:	f003 0301 	and.w	r3, r3, #1
 8005fd0:	2b01      	cmp	r3, #1
 8005fd2:	d107      	bne.n	8005fe4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	f06f 0201 	mvn.w	r2, #1
 8005fdc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005fde:	6878      	ldr	r0, [r7, #4]
 8005fe0:	f7fc f962 	bl	80022a8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	691b      	ldr	r3, [r3, #16]
 8005fea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fee:	2b80      	cmp	r3, #128	; 0x80
 8005ff0:	d10e      	bne.n	8006010 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	68db      	ldr	r3, [r3, #12]
 8005ff8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ffc:	2b80      	cmp	r3, #128	; 0x80
 8005ffe:	d107      	bne.n	8006010 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006008:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800600a:	6878      	ldr	r0, [r7, #4]
 800600c:	f000 f92f 	bl	800626e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	691b      	ldr	r3, [r3, #16]
 8006016:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800601a:	2b40      	cmp	r3, #64	; 0x40
 800601c:	d10e      	bne.n	800603c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	68db      	ldr	r3, [r3, #12]
 8006024:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006028:	2b40      	cmp	r3, #64	; 0x40
 800602a:	d107      	bne.n	800603c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006034:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006036:	6878      	ldr	r0, [r7, #4]
 8006038:	f000 f835 	bl	80060a6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	691b      	ldr	r3, [r3, #16]
 8006042:	f003 0320 	and.w	r3, r3, #32
 8006046:	2b20      	cmp	r3, #32
 8006048:	d10e      	bne.n	8006068 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	68db      	ldr	r3, [r3, #12]
 8006050:	f003 0320 	and.w	r3, r3, #32
 8006054:	2b20      	cmp	r3, #32
 8006056:	d107      	bne.n	8006068 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	f06f 0220 	mvn.w	r2, #32
 8006060:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006062:	6878      	ldr	r0, [r7, #4]
 8006064:	f000 f8fa 	bl	800625c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006068:	bf00      	nop
 800606a:	3708      	adds	r7, #8
 800606c:	46bd      	mov	sp, r7
 800606e:	bd80      	pop	{r7, pc}

08006070 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006070:	b480      	push	{r7}
 8006072:	b083      	sub	sp, #12
 8006074:	af00      	add	r7, sp, #0
 8006076:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006078:	bf00      	nop
 800607a:	370c      	adds	r7, #12
 800607c:	46bd      	mov	sp, r7
 800607e:	bc80      	pop	{r7}
 8006080:	4770      	bx	lr

08006082 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006082:	b480      	push	{r7}
 8006084:	b083      	sub	sp, #12
 8006086:	af00      	add	r7, sp, #0
 8006088:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800608a:	bf00      	nop
 800608c:	370c      	adds	r7, #12
 800608e:	46bd      	mov	sp, r7
 8006090:	bc80      	pop	{r7}
 8006092:	4770      	bx	lr

08006094 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006094:	b480      	push	{r7}
 8006096:	b083      	sub	sp, #12
 8006098:	af00      	add	r7, sp, #0
 800609a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800609c:	bf00      	nop
 800609e:	370c      	adds	r7, #12
 80060a0:	46bd      	mov	sp, r7
 80060a2:	bc80      	pop	{r7}
 80060a4:	4770      	bx	lr

080060a6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80060a6:	b480      	push	{r7}
 80060a8:	b083      	sub	sp, #12
 80060aa:	af00      	add	r7, sp, #0
 80060ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80060ae:	bf00      	nop
 80060b0:	370c      	adds	r7, #12
 80060b2:	46bd      	mov	sp, r7
 80060b4:	bc80      	pop	{r7}
 80060b6:	4770      	bx	lr

080060b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80060b8:	b480      	push	{r7}
 80060ba:	b085      	sub	sp, #20
 80060bc:	af00      	add	r7, sp, #0
 80060be:	6078      	str	r0, [r7, #4]
 80060c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	4a2d      	ldr	r2, [pc, #180]	; (8006180 <TIM_Base_SetConfig+0xc8>)
 80060cc:	4293      	cmp	r3, r2
 80060ce:	d00f      	beq.n	80060f0 <TIM_Base_SetConfig+0x38>
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060d6:	d00b      	beq.n	80060f0 <TIM_Base_SetConfig+0x38>
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	4a2a      	ldr	r2, [pc, #168]	; (8006184 <TIM_Base_SetConfig+0xcc>)
 80060dc:	4293      	cmp	r3, r2
 80060de:	d007      	beq.n	80060f0 <TIM_Base_SetConfig+0x38>
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	4a29      	ldr	r2, [pc, #164]	; (8006188 <TIM_Base_SetConfig+0xd0>)
 80060e4:	4293      	cmp	r3, r2
 80060e6:	d003      	beq.n	80060f0 <TIM_Base_SetConfig+0x38>
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	4a28      	ldr	r2, [pc, #160]	; (800618c <TIM_Base_SetConfig+0xd4>)
 80060ec:	4293      	cmp	r3, r2
 80060ee:	d108      	bne.n	8006102 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80060f8:	683b      	ldr	r3, [r7, #0]
 80060fa:	685b      	ldr	r3, [r3, #4]
 80060fc:	68fa      	ldr	r2, [r7, #12]
 80060fe:	4313      	orrs	r3, r2
 8006100:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	4a1e      	ldr	r2, [pc, #120]	; (8006180 <TIM_Base_SetConfig+0xc8>)
 8006106:	4293      	cmp	r3, r2
 8006108:	d00f      	beq.n	800612a <TIM_Base_SetConfig+0x72>
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006110:	d00b      	beq.n	800612a <TIM_Base_SetConfig+0x72>
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	4a1b      	ldr	r2, [pc, #108]	; (8006184 <TIM_Base_SetConfig+0xcc>)
 8006116:	4293      	cmp	r3, r2
 8006118:	d007      	beq.n	800612a <TIM_Base_SetConfig+0x72>
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	4a1a      	ldr	r2, [pc, #104]	; (8006188 <TIM_Base_SetConfig+0xd0>)
 800611e:	4293      	cmp	r3, r2
 8006120:	d003      	beq.n	800612a <TIM_Base_SetConfig+0x72>
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	4a19      	ldr	r2, [pc, #100]	; (800618c <TIM_Base_SetConfig+0xd4>)
 8006126:	4293      	cmp	r3, r2
 8006128:	d108      	bne.n	800613c <TIM_Base_SetConfig+0x84>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006130:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006132:	683b      	ldr	r3, [r7, #0]
 8006134:	68db      	ldr	r3, [r3, #12]
 8006136:	68fa      	ldr	r2, [r7, #12]
 8006138:	4313      	orrs	r3, r2
 800613a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006142:	683b      	ldr	r3, [r7, #0]
 8006144:	695b      	ldr	r3, [r3, #20]
 8006146:	4313      	orrs	r3, r2
 8006148:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	68fa      	ldr	r2, [r7, #12]
 800614e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006150:	683b      	ldr	r3, [r7, #0]
 8006152:	689a      	ldr	r2, [r3, #8]
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006158:	683b      	ldr	r3, [r7, #0]
 800615a:	681a      	ldr	r2, [r3, #0]
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	4a07      	ldr	r2, [pc, #28]	; (8006180 <TIM_Base_SetConfig+0xc8>)
 8006164:	4293      	cmp	r3, r2
 8006166:	d103      	bne.n	8006170 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	691a      	ldr	r2, [r3, #16]
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2201      	movs	r2, #1
 8006174:	615a      	str	r2, [r3, #20]
}
 8006176:	bf00      	nop
 8006178:	3714      	adds	r7, #20
 800617a:	46bd      	mov	sp, r7
 800617c:	bc80      	pop	{r7}
 800617e:	4770      	bx	lr
 8006180:	40012c00 	.word	0x40012c00
 8006184:	40000400 	.word	0x40000400
 8006188:	40000800 	.word	0x40000800
 800618c:	40000c00 	.word	0x40000c00

08006190 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006190:	b480      	push	{r7}
 8006192:	b085      	sub	sp, #20
 8006194:	af00      	add	r7, sp, #0
 8006196:	6078      	str	r0, [r7, #4]
 8006198:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80061a0:	2b01      	cmp	r3, #1
 80061a2:	d101      	bne.n	80061a8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80061a4:	2302      	movs	r3, #2
 80061a6:	e04b      	b.n	8006240 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	2201      	movs	r2, #1
 80061ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	2202      	movs	r2, #2
 80061b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	685b      	ldr	r3, [r3, #4]
 80061be:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	689b      	ldr	r3, [r3, #8]
 80061c6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061ce:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80061d0:	683b      	ldr	r3, [r7, #0]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	68fa      	ldr	r2, [r7, #12]
 80061d6:	4313      	orrs	r3, r2
 80061d8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	68fa      	ldr	r2, [r7, #12]
 80061e0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	4a19      	ldr	r2, [pc, #100]	; (800624c <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 80061e8:	4293      	cmp	r3, r2
 80061ea:	d013      	beq.n	8006214 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061f4:	d00e      	beq.n	8006214 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	4a15      	ldr	r2, [pc, #84]	; (8006250 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 80061fc:	4293      	cmp	r3, r2
 80061fe:	d009      	beq.n	8006214 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	4a13      	ldr	r2, [pc, #76]	; (8006254 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8006206:	4293      	cmp	r3, r2
 8006208:	d004      	beq.n	8006214 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	4a12      	ldr	r2, [pc, #72]	; (8006258 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006210:	4293      	cmp	r3, r2
 8006212:	d10c      	bne.n	800622e <HAL_TIMEx_MasterConfigSynchronization+0x9e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006214:	68bb      	ldr	r3, [r7, #8]
 8006216:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800621a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800621c:	683b      	ldr	r3, [r7, #0]
 800621e:	685b      	ldr	r3, [r3, #4]
 8006220:	68ba      	ldr	r2, [r7, #8]
 8006222:	4313      	orrs	r3, r2
 8006224:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	68ba      	ldr	r2, [r7, #8]
 800622c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	2201      	movs	r2, #1
 8006232:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	2200      	movs	r2, #0
 800623a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800623e:	2300      	movs	r3, #0
}
 8006240:	4618      	mov	r0, r3
 8006242:	3714      	adds	r7, #20
 8006244:	46bd      	mov	sp, r7
 8006246:	bc80      	pop	{r7}
 8006248:	4770      	bx	lr
 800624a:	bf00      	nop
 800624c:	40012c00 	.word	0x40012c00
 8006250:	40000400 	.word	0x40000400
 8006254:	40000800 	.word	0x40000800
 8006258:	40000c00 	.word	0x40000c00

0800625c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800625c:	b480      	push	{r7}
 800625e:	b083      	sub	sp, #12
 8006260:	af00      	add	r7, sp, #0
 8006262:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006264:	bf00      	nop
 8006266:	370c      	adds	r7, #12
 8006268:	46bd      	mov	sp, r7
 800626a:	bc80      	pop	{r7}
 800626c:	4770      	bx	lr

0800626e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800626e:	b480      	push	{r7}
 8006270:	b083      	sub	sp, #12
 8006272:	af00      	add	r7, sp, #0
 8006274:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006276:	bf00      	nop
 8006278:	370c      	adds	r7, #12
 800627a:	46bd      	mov	sp, r7
 800627c:	bc80      	pop	{r7}
 800627e:	4770      	bx	lr

08006280 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006280:	b580      	push	{r7, lr}
 8006282:	b082      	sub	sp, #8
 8006284:	af00      	add	r7, sp, #0
 8006286:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2b00      	cmp	r3, #0
 800628c:	d101      	bne.n	8006292 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800628e:	2301      	movs	r3, #1
 8006290:	e03f      	b.n	8006312 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006298:	b2db      	uxtb	r3, r3
 800629a:	2b00      	cmp	r3, #0
 800629c:	d106      	bne.n	80062ac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	2200      	movs	r2, #0
 80062a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80062a6:	6878      	ldr	r0, [r7, #4]
 80062a8:	f7fc facc 	bl	8002844 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2224      	movs	r2, #36	; 0x24
 80062b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	68da      	ldr	r2, [r3, #12]
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80062c2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80062c4:	6878      	ldr	r0, [r7, #4]
 80062c6:	f000 fc85 	bl	8006bd4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	691a      	ldr	r2, [r3, #16]
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80062d8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	695a      	ldr	r2, [r3, #20]
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80062e8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	68da      	ldr	r2, [r3, #12]
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80062f8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	2200      	movs	r2, #0
 80062fe:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	2220      	movs	r2, #32
 8006304:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	2220      	movs	r2, #32
 800630c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006310:	2300      	movs	r3, #0
}
 8006312:	4618      	mov	r0, r3
 8006314:	3708      	adds	r7, #8
 8006316:	46bd      	mov	sp, r7
 8006318:	bd80      	pop	{r7, pc}

0800631a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800631a:	b580      	push	{r7, lr}
 800631c:	b08a      	sub	sp, #40	; 0x28
 800631e:	af02      	add	r7, sp, #8
 8006320:	60f8      	str	r0, [r7, #12]
 8006322:	60b9      	str	r1, [r7, #8]
 8006324:	603b      	str	r3, [r7, #0]
 8006326:	4613      	mov	r3, r2
 8006328:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800632a:	2300      	movs	r3, #0
 800632c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006334:	b2db      	uxtb	r3, r3
 8006336:	2b20      	cmp	r3, #32
 8006338:	d17c      	bne.n	8006434 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800633a:	68bb      	ldr	r3, [r7, #8]
 800633c:	2b00      	cmp	r3, #0
 800633e:	d002      	beq.n	8006346 <HAL_UART_Transmit+0x2c>
 8006340:	88fb      	ldrh	r3, [r7, #6]
 8006342:	2b00      	cmp	r3, #0
 8006344:	d101      	bne.n	800634a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006346:	2301      	movs	r3, #1
 8006348:	e075      	b.n	8006436 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006350:	2b01      	cmp	r3, #1
 8006352:	d101      	bne.n	8006358 <HAL_UART_Transmit+0x3e>
 8006354:	2302      	movs	r3, #2
 8006356:	e06e      	b.n	8006436 <HAL_UART_Transmit+0x11c>
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	2201      	movs	r2, #1
 800635c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	2200      	movs	r2, #0
 8006364:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	2221      	movs	r2, #33	; 0x21
 800636a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800636e:	f7fd f9ef 	bl	8003750 <HAL_GetTick>
 8006372:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	88fa      	ldrh	r2, [r7, #6]
 8006378:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	88fa      	ldrh	r2, [r7, #6]
 800637e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	689b      	ldr	r3, [r3, #8]
 8006384:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006388:	d108      	bne.n	800639c <HAL_UART_Transmit+0x82>
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	691b      	ldr	r3, [r3, #16]
 800638e:	2b00      	cmp	r3, #0
 8006390:	d104      	bne.n	800639c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8006392:	2300      	movs	r3, #0
 8006394:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006396:	68bb      	ldr	r3, [r7, #8]
 8006398:	61bb      	str	r3, [r7, #24]
 800639a:	e003      	b.n	80063a4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800639c:	68bb      	ldr	r3, [r7, #8]
 800639e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80063a0:	2300      	movs	r3, #0
 80063a2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	2200      	movs	r2, #0
 80063a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80063ac:	e02a      	b.n	8006404 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80063ae:	683b      	ldr	r3, [r7, #0]
 80063b0:	9300      	str	r3, [sp, #0]
 80063b2:	697b      	ldr	r3, [r7, #20]
 80063b4:	2200      	movs	r2, #0
 80063b6:	2180      	movs	r1, #128	; 0x80
 80063b8:	68f8      	ldr	r0, [r7, #12]
 80063ba:	f000 fa38 	bl	800682e <UART_WaitOnFlagUntilTimeout>
 80063be:	4603      	mov	r3, r0
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d001      	beq.n	80063c8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80063c4:	2303      	movs	r3, #3
 80063c6:	e036      	b.n	8006436 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80063c8:	69fb      	ldr	r3, [r7, #28]
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d10b      	bne.n	80063e6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80063ce:	69bb      	ldr	r3, [r7, #24]
 80063d0:	881b      	ldrh	r3, [r3, #0]
 80063d2:	461a      	mov	r2, r3
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80063dc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80063de:	69bb      	ldr	r3, [r7, #24]
 80063e0:	3302      	adds	r3, #2
 80063e2:	61bb      	str	r3, [r7, #24]
 80063e4:	e007      	b.n	80063f6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80063e6:	69fb      	ldr	r3, [r7, #28]
 80063e8:	781a      	ldrb	r2, [r3, #0]
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80063f0:	69fb      	ldr	r3, [r7, #28]
 80063f2:	3301      	adds	r3, #1
 80063f4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80063fa:	b29b      	uxth	r3, r3
 80063fc:	3b01      	subs	r3, #1
 80063fe:	b29a      	uxth	r2, r3
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006408:	b29b      	uxth	r3, r3
 800640a:	2b00      	cmp	r3, #0
 800640c:	d1cf      	bne.n	80063ae <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800640e:	683b      	ldr	r3, [r7, #0]
 8006410:	9300      	str	r3, [sp, #0]
 8006412:	697b      	ldr	r3, [r7, #20]
 8006414:	2200      	movs	r2, #0
 8006416:	2140      	movs	r1, #64	; 0x40
 8006418:	68f8      	ldr	r0, [r7, #12]
 800641a:	f000 fa08 	bl	800682e <UART_WaitOnFlagUntilTimeout>
 800641e:	4603      	mov	r3, r0
 8006420:	2b00      	cmp	r3, #0
 8006422:	d001      	beq.n	8006428 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006424:	2303      	movs	r3, #3
 8006426:	e006      	b.n	8006436 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	2220      	movs	r2, #32
 800642c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006430:	2300      	movs	r3, #0
 8006432:	e000      	b.n	8006436 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006434:	2302      	movs	r3, #2
  }
}
 8006436:	4618      	mov	r0, r3
 8006438:	3720      	adds	r7, #32
 800643a:	46bd      	mov	sp, r7
 800643c:	bd80      	pop	{r7, pc}

0800643e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800643e:	b580      	push	{r7, lr}
 8006440:	b084      	sub	sp, #16
 8006442:	af00      	add	r7, sp, #0
 8006444:	60f8      	str	r0, [r7, #12]
 8006446:	60b9      	str	r1, [r7, #8]
 8006448:	4613      	mov	r3, r2
 800644a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006452:	b2db      	uxtb	r3, r3
 8006454:	2b20      	cmp	r3, #32
 8006456:	d11d      	bne.n	8006494 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8006458:	68bb      	ldr	r3, [r7, #8]
 800645a:	2b00      	cmp	r3, #0
 800645c:	d002      	beq.n	8006464 <HAL_UART_Receive_IT+0x26>
 800645e:	88fb      	ldrh	r3, [r7, #6]
 8006460:	2b00      	cmp	r3, #0
 8006462:	d101      	bne.n	8006468 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006464:	2301      	movs	r3, #1
 8006466:	e016      	b.n	8006496 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800646e:	2b01      	cmp	r3, #1
 8006470:	d101      	bne.n	8006476 <HAL_UART_Receive_IT+0x38>
 8006472:	2302      	movs	r3, #2
 8006474:	e00f      	b.n	8006496 <HAL_UART_Receive_IT+0x58>
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	2201      	movs	r2, #1
 800647a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	2200      	movs	r2, #0
 8006482:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8006484:	88fb      	ldrh	r3, [r7, #6]
 8006486:	461a      	mov	r2, r3
 8006488:	68b9      	ldr	r1, [r7, #8]
 800648a:	68f8      	ldr	r0, [r7, #12]
 800648c:	f000 fa19 	bl	80068c2 <UART_Start_Receive_IT>
 8006490:	4603      	mov	r3, r0
 8006492:	e000      	b.n	8006496 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8006494:	2302      	movs	r3, #2
  }
}
 8006496:	4618      	mov	r0, r3
 8006498:	3710      	adds	r7, #16
 800649a:	46bd      	mov	sp, r7
 800649c:	bd80      	pop	{r7, pc}
	...

080064a0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80064a0:	b580      	push	{r7, lr}
 80064a2:	b08a      	sub	sp, #40	; 0x28
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	68db      	ldr	r3, [r3, #12]
 80064b6:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	695b      	ldr	r3, [r3, #20]
 80064be:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 80064c0:	2300      	movs	r3, #0
 80064c2:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 80064c4:	2300      	movs	r3, #0
 80064c6:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80064c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064ca:	f003 030f 	and.w	r3, r3, #15
 80064ce:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 80064d0:	69bb      	ldr	r3, [r7, #24]
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d10d      	bne.n	80064f2 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80064d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064d8:	f003 0320 	and.w	r3, r3, #32
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d008      	beq.n	80064f2 <HAL_UART_IRQHandler+0x52>
 80064e0:	6a3b      	ldr	r3, [r7, #32]
 80064e2:	f003 0320 	and.w	r3, r3, #32
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d003      	beq.n	80064f2 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80064ea:	6878      	ldr	r0, [r7, #4]
 80064ec:	f000 fac9 	bl	8006a82 <UART_Receive_IT>
      return;
 80064f0:	e17b      	b.n	80067ea <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80064f2:	69bb      	ldr	r3, [r7, #24]
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	f000 80b1 	beq.w	800665c <HAL_UART_IRQHandler+0x1bc>
 80064fa:	69fb      	ldr	r3, [r7, #28]
 80064fc:	f003 0301 	and.w	r3, r3, #1
 8006500:	2b00      	cmp	r3, #0
 8006502:	d105      	bne.n	8006510 <HAL_UART_IRQHandler+0x70>
 8006504:	6a3b      	ldr	r3, [r7, #32]
 8006506:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800650a:	2b00      	cmp	r3, #0
 800650c:	f000 80a6 	beq.w	800665c <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006512:	f003 0301 	and.w	r3, r3, #1
 8006516:	2b00      	cmp	r3, #0
 8006518:	d00a      	beq.n	8006530 <HAL_UART_IRQHandler+0x90>
 800651a:	6a3b      	ldr	r3, [r7, #32]
 800651c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006520:	2b00      	cmp	r3, #0
 8006522:	d005      	beq.n	8006530 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006528:	f043 0201 	orr.w	r2, r3, #1
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006532:	f003 0304 	and.w	r3, r3, #4
 8006536:	2b00      	cmp	r3, #0
 8006538:	d00a      	beq.n	8006550 <HAL_UART_IRQHandler+0xb0>
 800653a:	69fb      	ldr	r3, [r7, #28]
 800653c:	f003 0301 	and.w	r3, r3, #1
 8006540:	2b00      	cmp	r3, #0
 8006542:	d005      	beq.n	8006550 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006548:	f043 0202 	orr.w	r2, r3, #2
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006552:	f003 0302 	and.w	r3, r3, #2
 8006556:	2b00      	cmp	r3, #0
 8006558:	d00a      	beq.n	8006570 <HAL_UART_IRQHandler+0xd0>
 800655a:	69fb      	ldr	r3, [r7, #28]
 800655c:	f003 0301 	and.w	r3, r3, #1
 8006560:	2b00      	cmp	r3, #0
 8006562:	d005      	beq.n	8006570 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006568:	f043 0204 	orr.w	r2, r3, #4
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8006570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006572:	f003 0308 	and.w	r3, r3, #8
 8006576:	2b00      	cmp	r3, #0
 8006578:	d00f      	beq.n	800659a <HAL_UART_IRQHandler+0xfa>
 800657a:	6a3b      	ldr	r3, [r7, #32]
 800657c:	f003 0320 	and.w	r3, r3, #32
 8006580:	2b00      	cmp	r3, #0
 8006582:	d104      	bne.n	800658e <HAL_UART_IRQHandler+0xee>
 8006584:	69fb      	ldr	r3, [r7, #28]
 8006586:	f003 0301 	and.w	r3, r3, #1
 800658a:	2b00      	cmp	r3, #0
 800658c:	d005      	beq.n	800659a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006592:	f043 0208 	orr.w	r2, r3, #8
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800659e:	2b00      	cmp	r3, #0
 80065a0:	f000 811e 	beq.w	80067e0 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80065a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065a6:	f003 0320 	and.w	r3, r3, #32
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d007      	beq.n	80065be <HAL_UART_IRQHandler+0x11e>
 80065ae:	6a3b      	ldr	r3, [r7, #32]
 80065b0:	f003 0320 	and.w	r3, r3, #32
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d002      	beq.n	80065be <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 80065b8:	6878      	ldr	r0, [r7, #4]
 80065ba:	f000 fa62 	bl	8006a82 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	695b      	ldr	r3, [r3, #20]
 80065c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	bf14      	ite	ne
 80065cc:	2301      	movne	r3, #1
 80065ce:	2300      	moveq	r3, #0
 80065d0:	b2db      	uxtb	r3, r3
 80065d2:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065d8:	f003 0308 	and.w	r3, r3, #8
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d102      	bne.n	80065e6 <HAL_UART_IRQHandler+0x146>
 80065e0:	697b      	ldr	r3, [r7, #20]
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d031      	beq.n	800664a <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80065e6:	6878      	ldr	r0, [r7, #4]
 80065e8:	f000 f9a4 	bl	8006934 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	695b      	ldr	r3, [r3, #20]
 80065f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d023      	beq.n	8006642 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	695a      	ldr	r2, [r3, #20]
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006608:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800660e:	2b00      	cmp	r3, #0
 8006610:	d013      	beq.n	800663a <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006616:	4a76      	ldr	r2, [pc, #472]	; (80067f0 <HAL_UART_IRQHandler+0x350>)
 8006618:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800661e:	4618      	mov	r0, r3
 8006620:	f7fd fd02 	bl	8004028 <HAL_DMA_Abort_IT>
 8006624:	4603      	mov	r3, r0
 8006626:	2b00      	cmp	r3, #0
 8006628:	d016      	beq.n	8006658 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800662e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006630:	687a      	ldr	r2, [r7, #4]
 8006632:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006634:	4610      	mov	r0, r2
 8006636:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006638:	e00e      	b.n	8006658 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800663a:	6878      	ldr	r0, [r7, #4]
 800663c:	f000 f8e3 	bl	8006806 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006640:	e00a      	b.n	8006658 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006642:	6878      	ldr	r0, [r7, #4]
 8006644:	f000 f8df 	bl	8006806 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006648:	e006      	b.n	8006658 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800664a:	6878      	ldr	r0, [r7, #4]
 800664c:	f000 f8db 	bl	8006806 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	2200      	movs	r2, #0
 8006654:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8006656:	e0c3      	b.n	80067e0 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006658:	bf00      	nop
    return;
 800665a:	e0c1      	b.n	80067e0 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006660:	2b01      	cmp	r3, #1
 8006662:	f040 80a1 	bne.w	80067a8 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8006666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006668:	f003 0310 	and.w	r3, r3, #16
 800666c:	2b00      	cmp	r3, #0
 800666e:	f000 809b 	beq.w	80067a8 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8006672:	6a3b      	ldr	r3, [r7, #32]
 8006674:	f003 0310 	and.w	r3, r3, #16
 8006678:	2b00      	cmp	r3, #0
 800667a:	f000 8095 	beq.w	80067a8 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800667e:	2300      	movs	r3, #0
 8006680:	60fb      	str	r3, [r7, #12]
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	60fb      	str	r3, [r7, #12]
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	685b      	ldr	r3, [r3, #4]
 8006690:	60fb      	str	r3, [r7, #12]
 8006692:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	695b      	ldr	r3, [r3, #20]
 800669a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d04e      	beq.n	8006740 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	685b      	ldr	r3, [r3, #4]
 80066aa:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 80066ac:	8a3b      	ldrh	r3, [r7, #16]
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	f000 8098 	beq.w	80067e4 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80066b8:	8a3a      	ldrh	r2, [r7, #16]
 80066ba:	429a      	cmp	r2, r3
 80066bc:	f080 8092 	bcs.w	80067e4 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	8a3a      	ldrh	r2, [r7, #16]
 80066c4:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066ca:	699b      	ldr	r3, [r3, #24]
 80066cc:	2b20      	cmp	r3, #32
 80066ce:	d02b      	beq.n	8006728 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	68da      	ldr	r2, [r3, #12]
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80066de:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	695a      	ldr	r2, [r3, #20]
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	f022 0201 	bic.w	r2, r2, #1
 80066ee:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	695a      	ldr	r2, [r3, #20]
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80066fe:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	2220      	movs	r2, #32
 8006704:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	2200      	movs	r2, #0
 800670c:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	68da      	ldr	r2, [r3, #12]
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	f022 0210 	bic.w	r2, r2, #16
 800671c:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006722:	4618      	mov	r0, r3
 8006724:	f7fd fc46 	bl	8003fb4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006730:	b29b      	uxth	r3, r3
 8006732:	1ad3      	subs	r3, r2, r3
 8006734:	b29b      	uxth	r3, r3
 8006736:	4619      	mov	r1, r3
 8006738:	6878      	ldr	r0, [r7, #4]
 800673a:	f000 f86d 	bl	8006818 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800673e:	e051      	b.n	80067e4 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006748:	b29b      	uxth	r3, r3
 800674a:	1ad3      	subs	r3, r2, r3
 800674c:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006752:	b29b      	uxth	r3, r3
 8006754:	2b00      	cmp	r3, #0
 8006756:	d047      	beq.n	80067e8 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8006758:	8a7b      	ldrh	r3, [r7, #18]
 800675a:	2b00      	cmp	r3, #0
 800675c:	d044      	beq.n	80067e8 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	68da      	ldr	r2, [r3, #12]
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800676c:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	695a      	ldr	r2, [r3, #20]
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	f022 0201 	bic.w	r2, r2, #1
 800677c:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	2220      	movs	r2, #32
 8006782:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	2200      	movs	r2, #0
 800678a:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	68da      	ldr	r2, [r3, #12]
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	f022 0210 	bic.w	r2, r2, #16
 800679a:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800679c:	8a7b      	ldrh	r3, [r7, #18]
 800679e:	4619      	mov	r1, r3
 80067a0:	6878      	ldr	r0, [r7, #4]
 80067a2:	f000 f839 	bl	8006818 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80067a6:	e01f      	b.n	80067e8 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80067a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d008      	beq.n	80067c4 <HAL_UART_IRQHandler+0x324>
 80067b2:	6a3b      	ldr	r3, [r7, #32]
 80067b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d003      	beq.n	80067c4 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 80067bc:	6878      	ldr	r0, [r7, #4]
 80067be:	f000 f8f9 	bl	80069b4 <UART_Transmit_IT>
    return;
 80067c2:	e012      	b.n	80067ea <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80067c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d00d      	beq.n	80067ea <HAL_UART_IRQHandler+0x34a>
 80067ce:	6a3b      	ldr	r3, [r7, #32]
 80067d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d008      	beq.n	80067ea <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 80067d8:	6878      	ldr	r0, [r7, #4]
 80067da:	f000 f93a 	bl	8006a52 <UART_EndTransmit_IT>
    return;
 80067de:	e004      	b.n	80067ea <HAL_UART_IRQHandler+0x34a>
    return;
 80067e0:	bf00      	nop
 80067e2:	e002      	b.n	80067ea <HAL_UART_IRQHandler+0x34a>
      return;
 80067e4:	bf00      	nop
 80067e6:	e000      	b.n	80067ea <HAL_UART_IRQHandler+0x34a>
      return;
 80067e8:	bf00      	nop
  }
}
 80067ea:	3728      	adds	r7, #40	; 0x28
 80067ec:	46bd      	mov	sp, r7
 80067ee:	bd80      	pop	{r7, pc}
 80067f0:	0800698d 	.word	0x0800698d

080067f4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80067f4:	b480      	push	{r7}
 80067f6:	b083      	sub	sp, #12
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80067fc:	bf00      	nop
 80067fe:	370c      	adds	r7, #12
 8006800:	46bd      	mov	sp, r7
 8006802:	bc80      	pop	{r7}
 8006804:	4770      	bx	lr

08006806 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006806:	b480      	push	{r7}
 8006808:	b083      	sub	sp, #12
 800680a:	af00      	add	r7, sp, #0
 800680c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800680e:	bf00      	nop
 8006810:	370c      	adds	r7, #12
 8006812:	46bd      	mov	sp, r7
 8006814:	bc80      	pop	{r7}
 8006816:	4770      	bx	lr

08006818 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006818:	b480      	push	{r7}
 800681a:	b083      	sub	sp, #12
 800681c:	af00      	add	r7, sp, #0
 800681e:	6078      	str	r0, [r7, #4]
 8006820:	460b      	mov	r3, r1
 8006822:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006824:	bf00      	nop
 8006826:	370c      	adds	r7, #12
 8006828:	46bd      	mov	sp, r7
 800682a:	bc80      	pop	{r7}
 800682c:	4770      	bx	lr

0800682e <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800682e:	b580      	push	{r7, lr}
 8006830:	b084      	sub	sp, #16
 8006832:	af00      	add	r7, sp, #0
 8006834:	60f8      	str	r0, [r7, #12]
 8006836:	60b9      	str	r1, [r7, #8]
 8006838:	603b      	str	r3, [r7, #0]
 800683a:	4613      	mov	r3, r2
 800683c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800683e:	e02c      	b.n	800689a <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006840:	69bb      	ldr	r3, [r7, #24]
 8006842:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006846:	d028      	beq.n	800689a <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006848:	69bb      	ldr	r3, [r7, #24]
 800684a:	2b00      	cmp	r3, #0
 800684c:	d007      	beq.n	800685e <UART_WaitOnFlagUntilTimeout+0x30>
 800684e:	f7fc ff7f 	bl	8003750 <HAL_GetTick>
 8006852:	4602      	mov	r2, r0
 8006854:	683b      	ldr	r3, [r7, #0]
 8006856:	1ad3      	subs	r3, r2, r3
 8006858:	69ba      	ldr	r2, [r7, #24]
 800685a:	429a      	cmp	r2, r3
 800685c:	d21d      	bcs.n	800689a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	68da      	ldr	r2, [r3, #12]
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800686c:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	695a      	ldr	r2, [r3, #20]
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	f022 0201 	bic.w	r2, r2, #1
 800687c:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	2220      	movs	r2, #32
 8006882:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	2220      	movs	r2, #32
 800688a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	2200      	movs	r2, #0
 8006892:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006896:	2303      	movs	r3, #3
 8006898:	e00f      	b.n	80068ba <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	681a      	ldr	r2, [r3, #0]
 80068a0:	68bb      	ldr	r3, [r7, #8]
 80068a2:	4013      	ands	r3, r2
 80068a4:	68ba      	ldr	r2, [r7, #8]
 80068a6:	429a      	cmp	r2, r3
 80068a8:	bf0c      	ite	eq
 80068aa:	2301      	moveq	r3, #1
 80068ac:	2300      	movne	r3, #0
 80068ae:	b2db      	uxtb	r3, r3
 80068b0:	461a      	mov	r2, r3
 80068b2:	79fb      	ldrb	r3, [r7, #7]
 80068b4:	429a      	cmp	r2, r3
 80068b6:	d0c3      	beq.n	8006840 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80068b8:	2300      	movs	r3, #0
}
 80068ba:	4618      	mov	r0, r3
 80068bc:	3710      	adds	r7, #16
 80068be:	46bd      	mov	sp, r7
 80068c0:	bd80      	pop	{r7, pc}

080068c2 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80068c2:	b480      	push	{r7}
 80068c4:	b085      	sub	sp, #20
 80068c6:	af00      	add	r7, sp, #0
 80068c8:	60f8      	str	r0, [r7, #12]
 80068ca:	60b9      	str	r1, [r7, #8]
 80068cc:	4613      	mov	r3, r2
 80068ce:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	68ba      	ldr	r2, [r7, #8]
 80068d4:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	88fa      	ldrh	r2, [r7, #6]
 80068da:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	88fa      	ldrh	r2, [r7, #6]
 80068e0:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	2200      	movs	r2, #0
 80068e6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	2222      	movs	r2, #34	; 0x22
 80068ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	2200      	movs	r2, #0
 80068f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	68da      	ldr	r2, [r3, #12]
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006906:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	695a      	ldr	r2, [r3, #20]
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	f042 0201 	orr.w	r2, r2, #1
 8006916:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	68da      	ldr	r2, [r3, #12]
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	f042 0220 	orr.w	r2, r2, #32
 8006926:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006928:	2300      	movs	r3, #0
}
 800692a:	4618      	mov	r0, r3
 800692c:	3714      	adds	r7, #20
 800692e:	46bd      	mov	sp, r7
 8006930:	bc80      	pop	{r7}
 8006932:	4770      	bx	lr

08006934 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006934:	b480      	push	{r7}
 8006936:	b083      	sub	sp, #12
 8006938:	af00      	add	r7, sp, #0
 800693a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	68da      	ldr	r2, [r3, #12]
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800694a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	695a      	ldr	r2, [r3, #20]
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	f022 0201 	bic.w	r2, r2, #1
 800695a:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006960:	2b01      	cmp	r3, #1
 8006962:	d107      	bne.n	8006974 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	68da      	ldr	r2, [r3, #12]
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	f022 0210 	bic.w	r2, r2, #16
 8006972:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	2220      	movs	r2, #32
 8006978:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	2200      	movs	r2, #0
 8006980:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006982:	bf00      	nop
 8006984:	370c      	adds	r7, #12
 8006986:	46bd      	mov	sp, r7
 8006988:	bc80      	pop	{r7}
 800698a:	4770      	bx	lr

0800698c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800698c:	b580      	push	{r7, lr}
 800698e:	b084      	sub	sp, #16
 8006990:	af00      	add	r7, sp, #0
 8006992:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006998:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	2200      	movs	r2, #0
 800699e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	2200      	movs	r2, #0
 80069a4:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80069a6:	68f8      	ldr	r0, [r7, #12]
 80069a8:	f7ff ff2d 	bl	8006806 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80069ac:	bf00      	nop
 80069ae:	3710      	adds	r7, #16
 80069b0:	46bd      	mov	sp, r7
 80069b2:	bd80      	pop	{r7, pc}

080069b4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80069b4:	b480      	push	{r7}
 80069b6:	b085      	sub	sp, #20
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80069c2:	b2db      	uxtb	r3, r3
 80069c4:	2b21      	cmp	r3, #33	; 0x21
 80069c6:	d13e      	bne.n	8006a46 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	689b      	ldr	r3, [r3, #8]
 80069cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80069d0:	d114      	bne.n	80069fc <UART_Transmit_IT+0x48>
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	691b      	ldr	r3, [r3, #16]
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d110      	bne.n	80069fc <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	6a1b      	ldr	r3, [r3, #32]
 80069de:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	881b      	ldrh	r3, [r3, #0]
 80069e4:	461a      	mov	r2, r3
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80069ee:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	6a1b      	ldr	r3, [r3, #32]
 80069f4:	1c9a      	adds	r2, r3, #2
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	621a      	str	r2, [r3, #32]
 80069fa:	e008      	b.n	8006a0e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	6a1b      	ldr	r3, [r3, #32]
 8006a00:	1c59      	adds	r1, r3, #1
 8006a02:	687a      	ldr	r2, [r7, #4]
 8006a04:	6211      	str	r1, [r2, #32]
 8006a06:	781a      	ldrb	r2, [r3, #0]
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006a12:	b29b      	uxth	r3, r3
 8006a14:	3b01      	subs	r3, #1
 8006a16:	b29b      	uxth	r3, r3
 8006a18:	687a      	ldr	r2, [r7, #4]
 8006a1a:	4619      	mov	r1, r3
 8006a1c:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d10f      	bne.n	8006a42 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	68da      	ldr	r2, [r3, #12]
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006a30:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	68da      	ldr	r2, [r3, #12]
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006a40:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006a42:	2300      	movs	r3, #0
 8006a44:	e000      	b.n	8006a48 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006a46:	2302      	movs	r3, #2
  }
}
 8006a48:	4618      	mov	r0, r3
 8006a4a:	3714      	adds	r7, #20
 8006a4c:	46bd      	mov	sp, r7
 8006a4e:	bc80      	pop	{r7}
 8006a50:	4770      	bx	lr

08006a52 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006a52:	b580      	push	{r7, lr}
 8006a54:	b082      	sub	sp, #8
 8006a56:	af00      	add	r7, sp, #0
 8006a58:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	68da      	ldr	r2, [r3, #12]
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006a68:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	2220      	movs	r2, #32
 8006a6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006a72:	6878      	ldr	r0, [r7, #4]
 8006a74:	f7ff febe 	bl	80067f4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006a78:	2300      	movs	r3, #0
}
 8006a7a:	4618      	mov	r0, r3
 8006a7c:	3708      	adds	r7, #8
 8006a7e:	46bd      	mov	sp, r7
 8006a80:	bd80      	pop	{r7, pc}

08006a82 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006a82:	b580      	push	{r7, lr}
 8006a84:	b086      	sub	sp, #24
 8006a86:	af00      	add	r7, sp, #0
 8006a88:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006a90:	b2db      	uxtb	r3, r3
 8006a92:	2b22      	cmp	r3, #34	; 0x22
 8006a94:	f040 8099 	bne.w	8006bca <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	689b      	ldr	r3, [r3, #8]
 8006a9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006aa0:	d117      	bne.n	8006ad2 <UART_Receive_IT+0x50>
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	691b      	ldr	r3, [r3, #16]
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d113      	bne.n	8006ad2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006aaa:	2300      	movs	r3, #0
 8006aac:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ab2:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	685b      	ldr	r3, [r3, #4]
 8006aba:	b29b      	uxth	r3, r3
 8006abc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ac0:	b29a      	uxth	r2, r3
 8006ac2:	693b      	ldr	r3, [r7, #16]
 8006ac4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006aca:	1c9a      	adds	r2, r3, #2
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	629a      	str	r2, [r3, #40]	; 0x28
 8006ad0:	e026      	b.n	8006b20 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ad6:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8006ad8:	2300      	movs	r3, #0
 8006ada:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	689b      	ldr	r3, [r3, #8]
 8006ae0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ae4:	d007      	beq.n	8006af6 <UART_Receive_IT+0x74>
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	689b      	ldr	r3, [r3, #8]
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d10a      	bne.n	8006b04 <UART_Receive_IT+0x82>
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	691b      	ldr	r3, [r3, #16]
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d106      	bne.n	8006b04 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	685b      	ldr	r3, [r3, #4]
 8006afc:	b2da      	uxtb	r2, r3
 8006afe:	697b      	ldr	r3, [r7, #20]
 8006b00:	701a      	strb	r2, [r3, #0]
 8006b02:	e008      	b.n	8006b16 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	685b      	ldr	r3, [r3, #4]
 8006b0a:	b2db      	uxtb	r3, r3
 8006b0c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006b10:	b2da      	uxtb	r2, r3
 8006b12:	697b      	ldr	r3, [r7, #20]
 8006b14:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b1a:	1c5a      	adds	r2, r3, #1
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006b24:	b29b      	uxth	r3, r3
 8006b26:	3b01      	subs	r3, #1
 8006b28:	b29b      	uxth	r3, r3
 8006b2a:	687a      	ldr	r2, [r7, #4]
 8006b2c:	4619      	mov	r1, r3
 8006b2e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d148      	bne.n	8006bc6 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	68da      	ldr	r2, [r3, #12]
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	f022 0220 	bic.w	r2, r2, #32
 8006b42:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	68da      	ldr	r2, [r3, #12]
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006b52:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	695a      	ldr	r2, [r3, #20]
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	f022 0201 	bic.w	r2, r2, #1
 8006b62:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	2220      	movs	r2, #32
 8006b68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b70:	2b01      	cmp	r3, #1
 8006b72:	d123      	bne.n	8006bbc <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	2200      	movs	r2, #0
 8006b78:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	68da      	ldr	r2, [r3, #12]
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	f022 0210 	bic.w	r2, r2, #16
 8006b88:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	f003 0310 	and.w	r3, r3, #16
 8006b94:	2b10      	cmp	r3, #16
 8006b96:	d10a      	bne.n	8006bae <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006b98:	2300      	movs	r3, #0
 8006b9a:	60fb      	str	r3, [r7, #12]
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	60fb      	str	r3, [r7, #12]
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	685b      	ldr	r3, [r3, #4]
 8006baa:	60fb      	str	r3, [r7, #12]
 8006bac:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006bb2:	4619      	mov	r1, r3
 8006bb4:	6878      	ldr	r0, [r7, #4]
 8006bb6:	f7ff fe2f 	bl	8006818 <HAL_UARTEx_RxEventCallback>
 8006bba:	e002      	b.n	8006bc2 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8006bbc:	6878      	ldr	r0, [r7, #4]
 8006bbe:	f7fb fbc5 	bl	800234c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006bc2:	2300      	movs	r3, #0
 8006bc4:	e002      	b.n	8006bcc <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8006bc6:	2300      	movs	r3, #0
 8006bc8:	e000      	b.n	8006bcc <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8006bca:	2302      	movs	r3, #2
  }
}
 8006bcc:	4618      	mov	r0, r3
 8006bce:	3718      	adds	r7, #24
 8006bd0:	46bd      	mov	sp, r7
 8006bd2:	bd80      	pop	{r7, pc}

08006bd4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006bd4:	b580      	push	{r7, lr}
 8006bd6:	b084      	sub	sp, #16
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	691b      	ldr	r3, [r3, #16]
 8006be2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	68da      	ldr	r2, [r3, #12]
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	430a      	orrs	r2, r1
 8006bf0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	689a      	ldr	r2, [r3, #8]
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	691b      	ldr	r3, [r3, #16]
 8006bfa:	431a      	orrs	r2, r3
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	695b      	ldr	r3, [r3, #20]
 8006c00:	4313      	orrs	r3, r2
 8006c02:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	68db      	ldr	r3, [r3, #12]
 8006c0a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8006c0e:	f023 030c 	bic.w	r3, r3, #12
 8006c12:	687a      	ldr	r2, [r7, #4]
 8006c14:	6812      	ldr	r2, [r2, #0]
 8006c16:	68b9      	ldr	r1, [r7, #8]
 8006c18:	430b      	orrs	r3, r1
 8006c1a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	695b      	ldr	r3, [r3, #20]
 8006c22:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	699a      	ldr	r2, [r3, #24]
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	430a      	orrs	r2, r1
 8006c30:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	4a2c      	ldr	r2, [pc, #176]	; (8006ce8 <UART_SetConfig+0x114>)
 8006c38:	4293      	cmp	r3, r2
 8006c3a:	d103      	bne.n	8006c44 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006c3c:	f7fe fafa 	bl	8005234 <HAL_RCC_GetPCLK2Freq>
 8006c40:	60f8      	str	r0, [r7, #12]
 8006c42:	e002      	b.n	8006c4a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8006c44:	f7fe fae2 	bl	800520c <HAL_RCC_GetPCLK1Freq>
 8006c48:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006c4a:	68fa      	ldr	r2, [r7, #12]
 8006c4c:	4613      	mov	r3, r2
 8006c4e:	009b      	lsls	r3, r3, #2
 8006c50:	4413      	add	r3, r2
 8006c52:	009a      	lsls	r2, r3, #2
 8006c54:	441a      	add	r2, r3
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	685b      	ldr	r3, [r3, #4]
 8006c5a:	009b      	lsls	r3, r3, #2
 8006c5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c60:	4a22      	ldr	r2, [pc, #136]	; (8006cec <UART_SetConfig+0x118>)
 8006c62:	fba2 2303 	umull	r2, r3, r2, r3
 8006c66:	095b      	lsrs	r3, r3, #5
 8006c68:	0119      	lsls	r1, r3, #4
 8006c6a:	68fa      	ldr	r2, [r7, #12]
 8006c6c:	4613      	mov	r3, r2
 8006c6e:	009b      	lsls	r3, r3, #2
 8006c70:	4413      	add	r3, r2
 8006c72:	009a      	lsls	r2, r3, #2
 8006c74:	441a      	add	r2, r3
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	685b      	ldr	r3, [r3, #4]
 8006c7a:	009b      	lsls	r3, r3, #2
 8006c7c:	fbb2 f2f3 	udiv	r2, r2, r3
 8006c80:	4b1a      	ldr	r3, [pc, #104]	; (8006cec <UART_SetConfig+0x118>)
 8006c82:	fba3 0302 	umull	r0, r3, r3, r2
 8006c86:	095b      	lsrs	r3, r3, #5
 8006c88:	2064      	movs	r0, #100	; 0x64
 8006c8a:	fb00 f303 	mul.w	r3, r0, r3
 8006c8e:	1ad3      	subs	r3, r2, r3
 8006c90:	011b      	lsls	r3, r3, #4
 8006c92:	3332      	adds	r3, #50	; 0x32
 8006c94:	4a15      	ldr	r2, [pc, #84]	; (8006cec <UART_SetConfig+0x118>)
 8006c96:	fba2 2303 	umull	r2, r3, r2, r3
 8006c9a:	095b      	lsrs	r3, r3, #5
 8006c9c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006ca0:	4419      	add	r1, r3
 8006ca2:	68fa      	ldr	r2, [r7, #12]
 8006ca4:	4613      	mov	r3, r2
 8006ca6:	009b      	lsls	r3, r3, #2
 8006ca8:	4413      	add	r3, r2
 8006caa:	009a      	lsls	r2, r3, #2
 8006cac:	441a      	add	r2, r3
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	685b      	ldr	r3, [r3, #4]
 8006cb2:	009b      	lsls	r3, r3, #2
 8006cb4:	fbb2 f2f3 	udiv	r2, r2, r3
 8006cb8:	4b0c      	ldr	r3, [pc, #48]	; (8006cec <UART_SetConfig+0x118>)
 8006cba:	fba3 0302 	umull	r0, r3, r3, r2
 8006cbe:	095b      	lsrs	r3, r3, #5
 8006cc0:	2064      	movs	r0, #100	; 0x64
 8006cc2:	fb00 f303 	mul.w	r3, r0, r3
 8006cc6:	1ad3      	subs	r3, r2, r3
 8006cc8:	011b      	lsls	r3, r3, #4
 8006cca:	3332      	adds	r3, #50	; 0x32
 8006ccc:	4a07      	ldr	r2, [pc, #28]	; (8006cec <UART_SetConfig+0x118>)
 8006cce:	fba2 2303 	umull	r2, r3, r2, r3
 8006cd2:	095b      	lsrs	r3, r3, #5
 8006cd4:	f003 020f 	and.w	r2, r3, #15
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	440a      	add	r2, r1
 8006cde:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8006ce0:	bf00      	nop
 8006ce2:	3710      	adds	r7, #16
 8006ce4:	46bd      	mov	sp, r7
 8006ce6:	bd80      	pop	{r7, pc}
 8006ce8:	40013800 	.word	0x40013800
 8006cec:	51eb851f 	.word	0x51eb851f

08006cf0 <__errno>:
 8006cf0:	4b01      	ldr	r3, [pc, #4]	; (8006cf8 <__errno+0x8>)
 8006cf2:	6818      	ldr	r0, [r3, #0]
 8006cf4:	4770      	bx	lr
 8006cf6:	bf00      	nop
 8006cf8:	2000000c 	.word	0x2000000c

08006cfc <__libc_init_array>:
 8006cfc:	b570      	push	{r4, r5, r6, lr}
 8006cfe:	2600      	movs	r6, #0
 8006d00:	4d0c      	ldr	r5, [pc, #48]	; (8006d34 <__libc_init_array+0x38>)
 8006d02:	4c0d      	ldr	r4, [pc, #52]	; (8006d38 <__libc_init_array+0x3c>)
 8006d04:	1b64      	subs	r4, r4, r5
 8006d06:	10a4      	asrs	r4, r4, #2
 8006d08:	42a6      	cmp	r6, r4
 8006d0a:	d109      	bne.n	8006d20 <__libc_init_array+0x24>
 8006d0c:	f005 f862 	bl	800bdd4 <_init>
 8006d10:	2600      	movs	r6, #0
 8006d12:	4d0a      	ldr	r5, [pc, #40]	; (8006d3c <__libc_init_array+0x40>)
 8006d14:	4c0a      	ldr	r4, [pc, #40]	; (8006d40 <__libc_init_array+0x44>)
 8006d16:	1b64      	subs	r4, r4, r5
 8006d18:	10a4      	asrs	r4, r4, #2
 8006d1a:	42a6      	cmp	r6, r4
 8006d1c:	d105      	bne.n	8006d2a <__libc_init_array+0x2e>
 8006d1e:	bd70      	pop	{r4, r5, r6, pc}
 8006d20:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d24:	4798      	blx	r3
 8006d26:	3601      	adds	r6, #1
 8006d28:	e7ee      	b.n	8006d08 <__libc_init_array+0xc>
 8006d2a:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d2e:	4798      	blx	r3
 8006d30:	3601      	adds	r6, #1
 8006d32:	e7f2      	b.n	8006d1a <__libc_init_array+0x1e>
 8006d34:	0800c674 	.word	0x0800c674
 8006d38:	0800c674 	.word	0x0800c674
 8006d3c:	0800c674 	.word	0x0800c674
 8006d40:	0800c678 	.word	0x0800c678

08006d44 <memset>:
 8006d44:	4603      	mov	r3, r0
 8006d46:	4402      	add	r2, r0
 8006d48:	4293      	cmp	r3, r2
 8006d4a:	d100      	bne.n	8006d4e <memset+0xa>
 8006d4c:	4770      	bx	lr
 8006d4e:	f803 1b01 	strb.w	r1, [r3], #1
 8006d52:	e7f9      	b.n	8006d48 <memset+0x4>

08006d54 <__cvt>:
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006d5a:	461f      	mov	r7, r3
 8006d5c:	bfbb      	ittet	lt
 8006d5e:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8006d62:	461f      	movlt	r7, r3
 8006d64:	2300      	movge	r3, #0
 8006d66:	232d      	movlt	r3, #45	; 0x2d
 8006d68:	b088      	sub	sp, #32
 8006d6a:	4614      	mov	r4, r2
 8006d6c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006d6e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8006d70:	7013      	strb	r3, [r2, #0]
 8006d72:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006d74:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8006d78:	f023 0820 	bic.w	r8, r3, #32
 8006d7c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006d80:	d005      	beq.n	8006d8e <__cvt+0x3a>
 8006d82:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006d86:	d100      	bne.n	8006d8a <__cvt+0x36>
 8006d88:	3501      	adds	r5, #1
 8006d8a:	2302      	movs	r3, #2
 8006d8c:	e000      	b.n	8006d90 <__cvt+0x3c>
 8006d8e:	2303      	movs	r3, #3
 8006d90:	aa07      	add	r2, sp, #28
 8006d92:	9204      	str	r2, [sp, #16]
 8006d94:	aa06      	add	r2, sp, #24
 8006d96:	e9cd a202 	strd	sl, r2, [sp, #8]
 8006d9a:	e9cd 3500 	strd	r3, r5, [sp]
 8006d9e:	4622      	mov	r2, r4
 8006da0:	463b      	mov	r3, r7
 8006da2:	f001 fe31 	bl	8008a08 <_dtoa_r>
 8006da6:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006daa:	4606      	mov	r6, r0
 8006dac:	d102      	bne.n	8006db4 <__cvt+0x60>
 8006dae:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006db0:	07db      	lsls	r3, r3, #31
 8006db2:	d522      	bpl.n	8006dfa <__cvt+0xa6>
 8006db4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006db8:	eb06 0905 	add.w	r9, r6, r5
 8006dbc:	d110      	bne.n	8006de0 <__cvt+0x8c>
 8006dbe:	7833      	ldrb	r3, [r6, #0]
 8006dc0:	2b30      	cmp	r3, #48	; 0x30
 8006dc2:	d10a      	bne.n	8006dda <__cvt+0x86>
 8006dc4:	2200      	movs	r2, #0
 8006dc6:	2300      	movs	r3, #0
 8006dc8:	4620      	mov	r0, r4
 8006dca:	4639      	mov	r1, r7
 8006dcc:	f7f9 ff0c 	bl	8000be8 <__aeabi_dcmpeq>
 8006dd0:	b918      	cbnz	r0, 8006dda <__cvt+0x86>
 8006dd2:	f1c5 0501 	rsb	r5, r5, #1
 8006dd6:	f8ca 5000 	str.w	r5, [sl]
 8006dda:	f8da 3000 	ldr.w	r3, [sl]
 8006dde:	4499      	add	r9, r3
 8006de0:	2200      	movs	r2, #0
 8006de2:	2300      	movs	r3, #0
 8006de4:	4620      	mov	r0, r4
 8006de6:	4639      	mov	r1, r7
 8006de8:	f7f9 fefe 	bl	8000be8 <__aeabi_dcmpeq>
 8006dec:	b108      	cbz	r0, 8006df2 <__cvt+0x9e>
 8006dee:	f8cd 901c 	str.w	r9, [sp, #28]
 8006df2:	2230      	movs	r2, #48	; 0x30
 8006df4:	9b07      	ldr	r3, [sp, #28]
 8006df6:	454b      	cmp	r3, r9
 8006df8:	d307      	bcc.n	8006e0a <__cvt+0xb6>
 8006dfa:	4630      	mov	r0, r6
 8006dfc:	9b07      	ldr	r3, [sp, #28]
 8006dfe:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006e00:	1b9b      	subs	r3, r3, r6
 8006e02:	6013      	str	r3, [r2, #0]
 8006e04:	b008      	add	sp, #32
 8006e06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e0a:	1c59      	adds	r1, r3, #1
 8006e0c:	9107      	str	r1, [sp, #28]
 8006e0e:	701a      	strb	r2, [r3, #0]
 8006e10:	e7f0      	b.n	8006df4 <__cvt+0xa0>

08006e12 <__exponent>:
 8006e12:	4603      	mov	r3, r0
 8006e14:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006e16:	2900      	cmp	r1, #0
 8006e18:	f803 2b02 	strb.w	r2, [r3], #2
 8006e1c:	bfb6      	itet	lt
 8006e1e:	222d      	movlt	r2, #45	; 0x2d
 8006e20:	222b      	movge	r2, #43	; 0x2b
 8006e22:	4249      	neglt	r1, r1
 8006e24:	2909      	cmp	r1, #9
 8006e26:	7042      	strb	r2, [r0, #1]
 8006e28:	dd2b      	ble.n	8006e82 <__exponent+0x70>
 8006e2a:	f10d 0407 	add.w	r4, sp, #7
 8006e2e:	46a4      	mov	ip, r4
 8006e30:	270a      	movs	r7, #10
 8006e32:	fb91 f6f7 	sdiv	r6, r1, r7
 8006e36:	460a      	mov	r2, r1
 8006e38:	46a6      	mov	lr, r4
 8006e3a:	fb07 1516 	mls	r5, r7, r6, r1
 8006e3e:	2a63      	cmp	r2, #99	; 0x63
 8006e40:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8006e44:	4631      	mov	r1, r6
 8006e46:	f104 34ff 	add.w	r4, r4, #4294967295
 8006e4a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006e4e:	dcf0      	bgt.n	8006e32 <__exponent+0x20>
 8006e50:	3130      	adds	r1, #48	; 0x30
 8006e52:	f1ae 0502 	sub.w	r5, lr, #2
 8006e56:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006e5a:	4629      	mov	r1, r5
 8006e5c:	1c44      	adds	r4, r0, #1
 8006e5e:	4561      	cmp	r1, ip
 8006e60:	d30a      	bcc.n	8006e78 <__exponent+0x66>
 8006e62:	f10d 0209 	add.w	r2, sp, #9
 8006e66:	eba2 020e 	sub.w	r2, r2, lr
 8006e6a:	4565      	cmp	r5, ip
 8006e6c:	bf88      	it	hi
 8006e6e:	2200      	movhi	r2, #0
 8006e70:	4413      	add	r3, r2
 8006e72:	1a18      	subs	r0, r3, r0
 8006e74:	b003      	add	sp, #12
 8006e76:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006e78:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006e7c:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006e80:	e7ed      	b.n	8006e5e <__exponent+0x4c>
 8006e82:	2330      	movs	r3, #48	; 0x30
 8006e84:	3130      	adds	r1, #48	; 0x30
 8006e86:	7083      	strb	r3, [r0, #2]
 8006e88:	70c1      	strb	r1, [r0, #3]
 8006e8a:	1d03      	adds	r3, r0, #4
 8006e8c:	e7f1      	b.n	8006e72 <__exponent+0x60>
	...

08006e90 <_printf_float>:
 8006e90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e94:	b091      	sub	sp, #68	; 0x44
 8006e96:	460c      	mov	r4, r1
 8006e98:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8006e9c:	4616      	mov	r6, r2
 8006e9e:	461f      	mov	r7, r3
 8006ea0:	4605      	mov	r5, r0
 8006ea2:	f002 ff05 	bl	8009cb0 <_localeconv_r>
 8006ea6:	6803      	ldr	r3, [r0, #0]
 8006ea8:	4618      	mov	r0, r3
 8006eaa:	9309      	str	r3, [sp, #36]	; 0x24
 8006eac:	f7f9 f9bc 	bl	8000228 <strlen>
 8006eb0:	2300      	movs	r3, #0
 8006eb2:	930e      	str	r3, [sp, #56]	; 0x38
 8006eb4:	f8d8 3000 	ldr.w	r3, [r8]
 8006eb8:	900a      	str	r0, [sp, #40]	; 0x28
 8006eba:	3307      	adds	r3, #7
 8006ebc:	f023 0307 	bic.w	r3, r3, #7
 8006ec0:	f103 0208 	add.w	r2, r3, #8
 8006ec4:	f894 9018 	ldrb.w	r9, [r4, #24]
 8006ec8:	f8d4 b000 	ldr.w	fp, [r4]
 8006ecc:	f8c8 2000 	str.w	r2, [r8]
 8006ed0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ed4:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006ed8:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8006edc:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8006ee0:	930b      	str	r3, [sp, #44]	; 0x2c
 8006ee2:	f04f 32ff 	mov.w	r2, #4294967295
 8006ee6:	4640      	mov	r0, r8
 8006ee8:	4b9c      	ldr	r3, [pc, #624]	; (800715c <_printf_float+0x2cc>)
 8006eea:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006eec:	f7f9 feae 	bl	8000c4c <__aeabi_dcmpun>
 8006ef0:	bb70      	cbnz	r0, 8006f50 <_printf_float+0xc0>
 8006ef2:	f04f 32ff 	mov.w	r2, #4294967295
 8006ef6:	4640      	mov	r0, r8
 8006ef8:	4b98      	ldr	r3, [pc, #608]	; (800715c <_printf_float+0x2cc>)
 8006efa:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006efc:	f7f9 fe88 	bl	8000c10 <__aeabi_dcmple>
 8006f00:	bb30      	cbnz	r0, 8006f50 <_printf_float+0xc0>
 8006f02:	2200      	movs	r2, #0
 8006f04:	2300      	movs	r3, #0
 8006f06:	4640      	mov	r0, r8
 8006f08:	4651      	mov	r1, sl
 8006f0a:	f7f9 fe77 	bl	8000bfc <__aeabi_dcmplt>
 8006f0e:	b110      	cbz	r0, 8006f16 <_printf_float+0x86>
 8006f10:	232d      	movs	r3, #45	; 0x2d
 8006f12:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006f16:	4b92      	ldr	r3, [pc, #584]	; (8007160 <_printf_float+0x2d0>)
 8006f18:	4892      	ldr	r0, [pc, #584]	; (8007164 <_printf_float+0x2d4>)
 8006f1a:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8006f1e:	bf94      	ite	ls
 8006f20:	4698      	movls	r8, r3
 8006f22:	4680      	movhi	r8, r0
 8006f24:	2303      	movs	r3, #3
 8006f26:	f04f 0a00 	mov.w	sl, #0
 8006f2a:	6123      	str	r3, [r4, #16]
 8006f2c:	f02b 0304 	bic.w	r3, fp, #4
 8006f30:	6023      	str	r3, [r4, #0]
 8006f32:	4633      	mov	r3, r6
 8006f34:	4621      	mov	r1, r4
 8006f36:	4628      	mov	r0, r5
 8006f38:	9700      	str	r7, [sp, #0]
 8006f3a:	aa0f      	add	r2, sp, #60	; 0x3c
 8006f3c:	f000 f9d4 	bl	80072e8 <_printf_common>
 8006f40:	3001      	adds	r0, #1
 8006f42:	f040 8090 	bne.w	8007066 <_printf_float+0x1d6>
 8006f46:	f04f 30ff 	mov.w	r0, #4294967295
 8006f4a:	b011      	add	sp, #68	; 0x44
 8006f4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f50:	4642      	mov	r2, r8
 8006f52:	4653      	mov	r3, sl
 8006f54:	4640      	mov	r0, r8
 8006f56:	4651      	mov	r1, sl
 8006f58:	f7f9 fe78 	bl	8000c4c <__aeabi_dcmpun>
 8006f5c:	b148      	cbz	r0, 8006f72 <_printf_float+0xe2>
 8006f5e:	f1ba 0f00 	cmp.w	sl, #0
 8006f62:	bfb8      	it	lt
 8006f64:	232d      	movlt	r3, #45	; 0x2d
 8006f66:	4880      	ldr	r0, [pc, #512]	; (8007168 <_printf_float+0x2d8>)
 8006f68:	bfb8      	it	lt
 8006f6a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006f6e:	4b7f      	ldr	r3, [pc, #508]	; (800716c <_printf_float+0x2dc>)
 8006f70:	e7d3      	b.n	8006f1a <_printf_float+0x8a>
 8006f72:	6863      	ldr	r3, [r4, #4]
 8006f74:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8006f78:	1c5a      	adds	r2, r3, #1
 8006f7a:	d142      	bne.n	8007002 <_printf_float+0x172>
 8006f7c:	2306      	movs	r3, #6
 8006f7e:	6063      	str	r3, [r4, #4]
 8006f80:	2200      	movs	r2, #0
 8006f82:	9206      	str	r2, [sp, #24]
 8006f84:	aa0e      	add	r2, sp, #56	; 0x38
 8006f86:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8006f8a:	aa0d      	add	r2, sp, #52	; 0x34
 8006f8c:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8006f90:	9203      	str	r2, [sp, #12]
 8006f92:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8006f96:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8006f9a:	6023      	str	r3, [r4, #0]
 8006f9c:	6863      	ldr	r3, [r4, #4]
 8006f9e:	4642      	mov	r2, r8
 8006fa0:	9300      	str	r3, [sp, #0]
 8006fa2:	4628      	mov	r0, r5
 8006fa4:	4653      	mov	r3, sl
 8006fa6:	910b      	str	r1, [sp, #44]	; 0x2c
 8006fa8:	f7ff fed4 	bl	8006d54 <__cvt>
 8006fac:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006fae:	4680      	mov	r8, r0
 8006fb0:	2947      	cmp	r1, #71	; 0x47
 8006fb2:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006fb4:	d108      	bne.n	8006fc8 <_printf_float+0x138>
 8006fb6:	1cc8      	adds	r0, r1, #3
 8006fb8:	db02      	blt.n	8006fc0 <_printf_float+0x130>
 8006fba:	6863      	ldr	r3, [r4, #4]
 8006fbc:	4299      	cmp	r1, r3
 8006fbe:	dd40      	ble.n	8007042 <_printf_float+0x1b2>
 8006fc0:	f1a9 0902 	sub.w	r9, r9, #2
 8006fc4:	fa5f f989 	uxtb.w	r9, r9
 8006fc8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8006fcc:	d81f      	bhi.n	800700e <_printf_float+0x17e>
 8006fce:	464a      	mov	r2, r9
 8006fd0:	3901      	subs	r1, #1
 8006fd2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006fd6:	910d      	str	r1, [sp, #52]	; 0x34
 8006fd8:	f7ff ff1b 	bl	8006e12 <__exponent>
 8006fdc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006fde:	4682      	mov	sl, r0
 8006fe0:	1813      	adds	r3, r2, r0
 8006fe2:	2a01      	cmp	r2, #1
 8006fe4:	6123      	str	r3, [r4, #16]
 8006fe6:	dc02      	bgt.n	8006fee <_printf_float+0x15e>
 8006fe8:	6822      	ldr	r2, [r4, #0]
 8006fea:	07d2      	lsls	r2, r2, #31
 8006fec:	d501      	bpl.n	8006ff2 <_printf_float+0x162>
 8006fee:	3301      	adds	r3, #1
 8006ff0:	6123      	str	r3, [r4, #16]
 8006ff2:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d09b      	beq.n	8006f32 <_printf_float+0xa2>
 8006ffa:	232d      	movs	r3, #45	; 0x2d
 8006ffc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007000:	e797      	b.n	8006f32 <_printf_float+0xa2>
 8007002:	2947      	cmp	r1, #71	; 0x47
 8007004:	d1bc      	bne.n	8006f80 <_printf_float+0xf0>
 8007006:	2b00      	cmp	r3, #0
 8007008:	d1ba      	bne.n	8006f80 <_printf_float+0xf0>
 800700a:	2301      	movs	r3, #1
 800700c:	e7b7      	b.n	8006f7e <_printf_float+0xee>
 800700e:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8007012:	d118      	bne.n	8007046 <_printf_float+0x1b6>
 8007014:	2900      	cmp	r1, #0
 8007016:	6863      	ldr	r3, [r4, #4]
 8007018:	dd0b      	ble.n	8007032 <_printf_float+0x1a2>
 800701a:	6121      	str	r1, [r4, #16]
 800701c:	b913      	cbnz	r3, 8007024 <_printf_float+0x194>
 800701e:	6822      	ldr	r2, [r4, #0]
 8007020:	07d0      	lsls	r0, r2, #31
 8007022:	d502      	bpl.n	800702a <_printf_float+0x19a>
 8007024:	3301      	adds	r3, #1
 8007026:	440b      	add	r3, r1
 8007028:	6123      	str	r3, [r4, #16]
 800702a:	f04f 0a00 	mov.w	sl, #0
 800702e:	65a1      	str	r1, [r4, #88]	; 0x58
 8007030:	e7df      	b.n	8006ff2 <_printf_float+0x162>
 8007032:	b913      	cbnz	r3, 800703a <_printf_float+0x1aa>
 8007034:	6822      	ldr	r2, [r4, #0]
 8007036:	07d2      	lsls	r2, r2, #31
 8007038:	d501      	bpl.n	800703e <_printf_float+0x1ae>
 800703a:	3302      	adds	r3, #2
 800703c:	e7f4      	b.n	8007028 <_printf_float+0x198>
 800703e:	2301      	movs	r3, #1
 8007040:	e7f2      	b.n	8007028 <_printf_float+0x198>
 8007042:	f04f 0967 	mov.w	r9, #103	; 0x67
 8007046:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007048:	4299      	cmp	r1, r3
 800704a:	db05      	blt.n	8007058 <_printf_float+0x1c8>
 800704c:	6823      	ldr	r3, [r4, #0]
 800704e:	6121      	str	r1, [r4, #16]
 8007050:	07d8      	lsls	r0, r3, #31
 8007052:	d5ea      	bpl.n	800702a <_printf_float+0x19a>
 8007054:	1c4b      	adds	r3, r1, #1
 8007056:	e7e7      	b.n	8007028 <_printf_float+0x198>
 8007058:	2900      	cmp	r1, #0
 800705a:	bfcc      	ite	gt
 800705c:	2201      	movgt	r2, #1
 800705e:	f1c1 0202 	rsble	r2, r1, #2
 8007062:	4413      	add	r3, r2
 8007064:	e7e0      	b.n	8007028 <_printf_float+0x198>
 8007066:	6823      	ldr	r3, [r4, #0]
 8007068:	055a      	lsls	r2, r3, #21
 800706a:	d407      	bmi.n	800707c <_printf_float+0x1ec>
 800706c:	6923      	ldr	r3, [r4, #16]
 800706e:	4642      	mov	r2, r8
 8007070:	4631      	mov	r1, r6
 8007072:	4628      	mov	r0, r5
 8007074:	47b8      	blx	r7
 8007076:	3001      	adds	r0, #1
 8007078:	d12b      	bne.n	80070d2 <_printf_float+0x242>
 800707a:	e764      	b.n	8006f46 <_printf_float+0xb6>
 800707c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8007080:	f240 80dd 	bls.w	800723e <_printf_float+0x3ae>
 8007084:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007088:	2200      	movs	r2, #0
 800708a:	2300      	movs	r3, #0
 800708c:	f7f9 fdac 	bl	8000be8 <__aeabi_dcmpeq>
 8007090:	2800      	cmp	r0, #0
 8007092:	d033      	beq.n	80070fc <_printf_float+0x26c>
 8007094:	2301      	movs	r3, #1
 8007096:	4631      	mov	r1, r6
 8007098:	4628      	mov	r0, r5
 800709a:	4a35      	ldr	r2, [pc, #212]	; (8007170 <_printf_float+0x2e0>)
 800709c:	47b8      	blx	r7
 800709e:	3001      	adds	r0, #1
 80070a0:	f43f af51 	beq.w	8006f46 <_printf_float+0xb6>
 80070a4:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80070a8:	429a      	cmp	r2, r3
 80070aa:	db02      	blt.n	80070b2 <_printf_float+0x222>
 80070ac:	6823      	ldr	r3, [r4, #0]
 80070ae:	07d8      	lsls	r0, r3, #31
 80070b0:	d50f      	bpl.n	80070d2 <_printf_float+0x242>
 80070b2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80070b6:	4631      	mov	r1, r6
 80070b8:	4628      	mov	r0, r5
 80070ba:	47b8      	blx	r7
 80070bc:	3001      	adds	r0, #1
 80070be:	f43f af42 	beq.w	8006f46 <_printf_float+0xb6>
 80070c2:	f04f 0800 	mov.w	r8, #0
 80070c6:	f104 091a 	add.w	r9, r4, #26
 80070ca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80070cc:	3b01      	subs	r3, #1
 80070ce:	4543      	cmp	r3, r8
 80070d0:	dc09      	bgt.n	80070e6 <_printf_float+0x256>
 80070d2:	6823      	ldr	r3, [r4, #0]
 80070d4:	079b      	lsls	r3, r3, #30
 80070d6:	f100 8102 	bmi.w	80072de <_printf_float+0x44e>
 80070da:	68e0      	ldr	r0, [r4, #12]
 80070dc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80070de:	4298      	cmp	r0, r3
 80070e0:	bfb8      	it	lt
 80070e2:	4618      	movlt	r0, r3
 80070e4:	e731      	b.n	8006f4a <_printf_float+0xba>
 80070e6:	2301      	movs	r3, #1
 80070e8:	464a      	mov	r2, r9
 80070ea:	4631      	mov	r1, r6
 80070ec:	4628      	mov	r0, r5
 80070ee:	47b8      	blx	r7
 80070f0:	3001      	adds	r0, #1
 80070f2:	f43f af28 	beq.w	8006f46 <_printf_float+0xb6>
 80070f6:	f108 0801 	add.w	r8, r8, #1
 80070fa:	e7e6      	b.n	80070ca <_printf_float+0x23a>
 80070fc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80070fe:	2b00      	cmp	r3, #0
 8007100:	dc38      	bgt.n	8007174 <_printf_float+0x2e4>
 8007102:	2301      	movs	r3, #1
 8007104:	4631      	mov	r1, r6
 8007106:	4628      	mov	r0, r5
 8007108:	4a19      	ldr	r2, [pc, #100]	; (8007170 <_printf_float+0x2e0>)
 800710a:	47b8      	blx	r7
 800710c:	3001      	adds	r0, #1
 800710e:	f43f af1a 	beq.w	8006f46 <_printf_float+0xb6>
 8007112:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8007116:	4313      	orrs	r3, r2
 8007118:	d102      	bne.n	8007120 <_printf_float+0x290>
 800711a:	6823      	ldr	r3, [r4, #0]
 800711c:	07d9      	lsls	r1, r3, #31
 800711e:	d5d8      	bpl.n	80070d2 <_printf_float+0x242>
 8007120:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007124:	4631      	mov	r1, r6
 8007126:	4628      	mov	r0, r5
 8007128:	47b8      	blx	r7
 800712a:	3001      	adds	r0, #1
 800712c:	f43f af0b 	beq.w	8006f46 <_printf_float+0xb6>
 8007130:	f04f 0900 	mov.w	r9, #0
 8007134:	f104 0a1a 	add.w	sl, r4, #26
 8007138:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800713a:	425b      	negs	r3, r3
 800713c:	454b      	cmp	r3, r9
 800713e:	dc01      	bgt.n	8007144 <_printf_float+0x2b4>
 8007140:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007142:	e794      	b.n	800706e <_printf_float+0x1de>
 8007144:	2301      	movs	r3, #1
 8007146:	4652      	mov	r2, sl
 8007148:	4631      	mov	r1, r6
 800714a:	4628      	mov	r0, r5
 800714c:	47b8      	blx	r7
 800714e:	3001      	adds	r0, #1
 8007150:	f43f aef9 	beq.w	8006f46 <_printf_float+0xb6>
 8007154:	f109 0901 	add.w	r9, r9, #1
 8007158:	e7ee      	b.n	8007138 <_printf_float+0x2a8>
 800715a:	bf00      	nop
 800715c:	7fefffff 	.word	0x7fefffff
 8007160:	0800c1a4 	.word	0x0800c1a4
 8007164:	0800c1a8 	.word	0x0800c1a8
 8007168:	0800c1b0 	.word	0x0800c1b0
 800716c:	0800c1ac 	.word	0x0800c1ac
 8007170:	0800c5b9 	.word	0x0800c5b9
 8007174:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007176:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007178:	429a      	cmp	r2, r3
 800717a:	bfa8      	it	ge
 800717c:	461a      	movge	r2, r3
 800717e:	2a00      	cmp	r2, #0
 8007180:	4691      	mov	r9, r2
 8007182:	dc37      	bgt.n	80071f4 <_printf_float+0x364>
 8007184:	f04f 0b00 	mov.w	fp, #0
 8007188:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800718c:	f104 021a 	add.w	r2, r4, #26
 8007190:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8007194:	ebaa 0309 	sub.w	r3, sl, r9
 8007198:	455b      	cmp	r3, fp
 800719a:	dc33      	bgt.n	8007204 <_printf_float+0x374>
 800719c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80071a0:	429a      	cmp	r2, r3
 80071a2:	db3b      	blt.n	800721c <_printf_float+0x38c>
 80071a4:	6823      	ldr	r3, [r4, #0]
 80071a6:	07da      	lsls	r2, r3, #31
 80071a8:	d438      	bmi.n	800721c <_printf_float+0x38c>
 80071aa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80071ac:	990d      	ldr	r1, [sp, #52]	; 0x34
 80071ae:	eba2 030a 	sub.w	r3, r2, sl
 80071b2:	eba2 0901 	sub.w	r9, r2, r1
 80071b6:	4599      	cmp	r9, r3
 80071b8:	bfa8      	it	ge
 80071ba:	4699      	movge	r9, r3
 80071bc:	f1b9 0f00 	cmp.w	r9, #0
 80071c0:	dc34      	bgt.n	800722c <_printf_float+0x39c>
 80071c2:	f04f 0800 	mov.w	r8, #0
 80071c6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80071ca:	f104 0a1a 	add.w	sl, r4, #26
 80071ce:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80071d2:	1a9b      	subs	r3, r3, r2
 80071d4:	eba3 0309 	sub.w	r3, r3, r9
 80071d8:	4543      	cmp	r3, r8
 80071da:	f77f af7a 	ble.w	80070d2 <_printf_float+0x242>
 80071de:	2301      	movs	r3, #1
 80071e0:	4652      	mov	r2, sl
 80071e2:	4631      	mov	r1, r6
 80071e4:	4628      	mov	r0, r5
 80071e6:	47b8      	blx	r7
 80071e8:	3001      	adds	r0, #1
 80071ea:	f43f aeac 	beq.w	8006f46 <_printf_float+0xb6>
 80071ee:	f108 0801 	add.w	r8, r8, #1
 80071f2:	e7ec      	b.n	80071ce <_printf_float+0x33e>
 80071f4:	4613      	mov	r3, r2
 80071f6:	4631      	mov	r1, r6
 80071f8:	4642      	mov	r2, r8
 80071fa:	4628      	mov	r0, r5
 80071fc:	47b8      	blx	r7
 80071fe:	3001      	adds	r0, #1
 8007200:	d1c0      	bne.n	8007184 <_printf_float+0x2f4>
 8007202:	e6a0      	b.n	8006f46 <_printf_float+0xb6>
 8007204:	2301      	movs	r3, #1
 8007206:	4631      	mov	r1, r6
 8007208:	4628      	mov	r0, r5
 800720a:	920b      	str	r2, [sp, #44]	; 0x2c
 800720c:	47b8      	blx	r7
 800720e:	3001      	adds	r0, #1
 8007210:	f43f ae99 	beq.w	8006f46 <_printf_float+0xb6>
 8007214:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007216:	f10b 0b01 	add.w	fp, fp, #1
 800721a:	e7b9      	b.n	8007190 <_printf_float+0x300>
 800721c:	4631      	mov	r1, r6
 800721e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007222:	4628      	mov	r0, r5
 8007224:	47b8      	blx	r7
 8007226:	3001      	adds	r0, #1
 8007228:	d1bf      	bne.n	80071aa <_printf_float+0x31a>
 800722a:	e68c      	b.n	8006f46 <_printf_float+0xb6>
 800722c:	464b      	mov	r3, r9
 800722e:	4631      	mov	r1, r6
 8007230:	4628      	mov	r0, r5
 8007232:	eb08 020a 	add.w	r2, r8, sl
 8007236:	47b8      	blx	r7
 8007238:	3001      	adds	r0, #1
 800723a:	d1c2      	bne.n	80071c2 <_printf_float+0x332>
 800723c:	e683      	b.n	8006f46 <_printf_float+0xb6>
 800723e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007240:	2a01      	cmp	r2, #1
 8007242:	dc01      	bgt.n	8007248 <_printf_float+0x3b8>
 8007244:	07db      	lsls	r3, r3, #31
 8007246:	d537      	bpl.n	80072b8 <_printf_float+0x428>
 8007248:	2301      	movs	r3, #1
 800724a:	4642      	mov	r2, r8
 800724c:	4631      	mov	r1, r6
 800724e:	4628      	mov	r0, r5
 8007250:	47b8      	blx	r7
 8007252:	3001      	adds	r0, #1
 8007254:	f43f ae77 	beq.w	8006f46 <_printf_float+0xb6>
 8007258:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800725c:	4631      	mov	r1, r6
 800725e:	4628      	mov	r0, r5
 8007260:	47b8      	blx	r7
 8007262:	3001      	adds	r0, #1
 8007264:	f43f ae6f 	beq.w	8006f46 <_printf_float+0xb6>
 8007268:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800726c:	2200      	movs	r2, #0
 800726e:	2300      	movs	r3, #0
 8007270:	f7f9 fcba 	bl	8000be8 <__aeabi_dcmpeq>
 8007274:	b9d8      	cbnz	r0, 80072ae <_printf_float+0x41e>
 8007276:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007278:	f108 0201 	add.w	r2, r8, #1
 800727c:	3b01      	subs	r3, #1
 800727e:	4631      	mov	r1, r6
 8007280:	4628      	mov	r0, r5
 8007282:	47b8      	blx	r7
 8007284:	3001      	adds	r0, #1
 8007286:	d10e      	bne.n	80072a6 <_printf_float+0x416>
 8007288:	e65d      	b.n	8006f46 <_printf_float+0xb6>
 800728a:	2301      	movs	r3, #1
 800728c:	464a      	mov	r2, r9
 800728e:	4631      	mov	r1, r6
 8007290:	4628      	mov	r0, r5
 8007292:	47b8      	blx	r7
 8007294:	3001      	adds	r0, #1
 8007296:	f43f ae56 	beq.w	8006f46 <_printf_float+0xb6>
 800729a:	f108 0801 	add.w	r8, r8, #1
 800729e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80072a0:	3b01      	subs	r3, #1
 80072a2:	4543      	cmp	r3, r8
 80072a4:	dcf1      	bgt.n	800728a <_printf_float+0x3fa>
 80072a6:	4653      	mov	r3, sl
 80072a8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80072ac:	e6e0      	b.n	8007070 <_printf_float+0x1e0>
 80072ae:	f04f 0800 	mov.w	r8, #0
 80072b2:	f104 091a 	add.w	r9, r4, #26
 80072b6:	e7f2      	b.n	800729e <_printf_float+0x40e>
 80072b8:	2301      	movs	r3, #1
 80072ba:	4642      	mov	r2, r8
 80072bc:	e7df      	b.n	800727e <_printf_float+0x3ee>
 80072be:	2301      	movs	r3, #1
 80072c0:	464a      	mov	r2, r9
 80072c2:	4631      	mov	r1, r6
 80072c4:	4628      	mov	r0, r5
 80072c6:	47b8      	blx	r7
 80072c8:	3001      	adds	r0, #1
 80072ca:	f43f ae3c 	beq.w	8006f46 <_printf_float+0xb6>
 80072ce:	f108 0801 	add.w	r8, r8, #1
 80072d2:	68e3      	ldr	r3, [r4, #12]
 80072d4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80072d6:	1a5b      	subs	r3, r3, r1
 80072d8:	4543      	cmp	r3, r8
 80072da:	dcf0      	bgt.n	80072be <_printf_float+0x42e>
 80072dc:	e6fd      	b.n	80070da <_printf_float+0x24a>
 80072de:	f04f 0800 	mov.w	r8, #0
 80072e2:	f104 0919 	add.w	r9, r4, #25
 80072e6:	e7f4      	b.n	80072d2 <_printf_float+0x442>

080072e8 <_printf_common>:
 80072e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80072ec:	4616      	mov	r6, r2
 80072ee:	4699      	mov	r9, r3
 80072f0:	688a      	ldr	r2, [r1, #8]
 80072f2:	690b      	ldr	r3, [r1, #16]
 80072f4:	4607      	mov	r7, r0
 80072f6:	4293      	cmp	r3, r2
 80072f8:	bfb8      	it	lt
 80072fa:	4613      	movlt	r3, r2
 80072fc:	6033      	str	r3, [r6, #0]
 80072fe:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007302:	460c      	mov	r4, r1
 8007304:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007308:	b10a      	cbz	r2, 800730e <_printf_common+0x26>
 800730a:	3301      	adds	r3, #1
 800730c:	6033      	str	r3, [r6, #0]
 800730e:	6823      	ldr	r3, [r4, #0]
 8007310:	0699      	lsls	r1, r3, #26
 8007312:	bf42      	ittt	mi
 8007314:	6833      	ldrmi	r3, [r6, #0]
 8007316:	3302      	addmi	r3, #2
 8007318:	6033      	strmi	r3, [r6, #0]
 800731a:	6825      	ldr	r5, [r4, #0]
 800731c:	f015 0506 	ands.w	r5, r5, #6
 8007320:	d106      	bne.n	8007330 <_printf_common+0x48>
 8007322:	f104 0a19 	add.w	sl, r4, #25
 8007326:	68e3      	ldr	r3, [r4, #12]
 8007328:	6832      	ldr	r2, [r6, #0]
 800732a:	1a9b      	subs	r3, r3, r2
 800732c:	42ab      	cmp	r3, r5
 800732e:	dc28      	bgt.n	8007382 <_printf_common+0x9a>
 8007330:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007334:	1e13      	subs	r3, r2, #0
 8007336:	6822      	ldr	r2, [r4, #0]
 8007338:	bf18      	it	ne
 800733a:	2301      	movne	r3, #1
 800733c:	0692      	lsls	r2, r2, #26
 800733e:	d42d      	bmi.n	800739c <_printf_common+0xb4>
 8007340:	4649      	mov	r1, r9
 8007342:	4638      	mov	r0, r7
 8007344:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007348:	47c0      	blx	r8
 800734a:	3001      	adds	r0, #1
 800734c:	d020      	beq.n	8007390 <_printf_common+0xa8>
 800734e:	6823      	ldr	r3, [r4, #0]
 8007350:	68e5      	ldr	r5, [r4, #12]
 8007352:	f003 0306 	and.w	r3, r3, #6
 8007356:	2b04      	cmp	r3, #4
 8007358:	bf18      	it	ne
 800735a:	2500      	movne	r5, #0
 800735c:	6832      	ldr	r2, [r6, #0]
 800735e:	f04f 0600 	mov.w	r6, #0
 8007362:	68a3      	ldr	r3, [r4, #8]
 8007364:	bf08      	it	eq
 8007366:	1aad      	subeq	r5, r5, r2
 8007368:	6922      	ldr	r2, [r4, #16]
 800736a:	bf08      	it	eq
 800736c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007370:	4293      	cmp	r3, r2
 8007372:	bfc4      	itt	gt
 8007374:	1a9b      	subgt	r3, r3, r2
 8007376:	18ed      	addgt	r5, r5, r3
 8007378:	341a      	adds	r4, #26
 800737a:	42b5      	cmp	r5, r6
 800737c:	d11a      	bne.n	80073b4 <_printf_common+0xcc>
 800737e:	2000      	movs	r0, #0
 8007380:	e008      	b.n	8007394 <_printf_common+0xac>
 8007382:	2301      	movs	r3, #1
 8007384:	4652      	mov	r2, sl
 8007386:	4649      	mov	r1, r9
 8007388:	4638      	mov	r0, r7
 800738a:	47c0      	blx	r8
 800738c:	3001      	adds	r0, #1
 800738e:	d103      	bne.n	8007398 <_printf_common+0xb0>
 8007390:	f04f 30ff 	mov.w	r0, #4294967295
 8007394:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007398:	3501      	adds	r5, #1
 800739a:	e7c4      	b.n	8007326 <_printf_common+0x3e>
 800739c:	2030      	movs	r0, #48	; 0x30
 800739e:	18e1      	adds	r1, r4, r3
 80073a0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80073a4:	1c5a      	adds	r2, r3, #1
 80073a6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80073aa:	4422      	add	r2, r4
 80073ac:	3302      	adds	r3, #2
 80073ae:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80073b2:	e7c5      	b.n	8007340 <_printf_common+0x58>
 80073b4:	2301      	movs	r3, #1
 80073b6:	4622      	mov	r2, r4
 80073b8:	4649      	mov	r1, r9
 80073ba:	4638      	mov	r0, r7
 80073bc:	47c0      	blx	r8
 80073be:	3001      	adds	r0, #1
 80073c0:	d0e6      	beq.n	8007390 <_printf_common+0xa8>
 80073c2:	3601      	adds	r6, #1
 80073c4:	e7d9      	b.n	800737a <_printf_common+0x92>
	...

080073c8 <_printf_i>:
 80073c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80073cc:	460c      	mov	r4, r1
 80073ce:	7e27      	ldrb	r7, [r4, #24]
 80073d0:	4691      	mov	r9, r2
 80073d2:	2f78      	cmp	r7, #120	; 0x78
 80073d4:	4680      	mov	r8, r0
 80073d6:	469a      	mov	sl, r3
 80073d8:	990c      	ldr	r1, [sp, #48]	; 0x30
 80073da:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80073de:	d807      	bhi.n	80073f0 <_printf_i+0x28>
 80073e0:	2f62      	cmp	r7, #98	; 0x62
 80073e2:	d80a      	bhi.n	80073fa <_printf_i+0x32>
 80073e4:	2f00      	cmp	r7, #0
 80073e6:	f000 80d9 	beq.w	800759c <_printf_i+0x1d4>
 80073ea:	2f58      	cmp	r7, #88	; 0x58
 80073ec:	f000 80a4 	beq.w	8007538 <_printf_i+0x170>
 80073f0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80073f4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80073f8:	e03a      	b.n	8007470 <_printf_i+0xa8>
 80073fa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80073fe:	2b15      	cmp	r3, #21
 8007400:	d8f6      	bhi.n	80073f0 <_printf_i+0x28>
 8007402:	a001      	add	r0, pc, #4	; (adr r0, 8007408 <_printf_i+0x40>)
 8007404:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8007408:	08007461 	.word	0x08007461
 800740c:	08007475 	.word	0x08007475
 8007410:	080073f1 	.word	0x080073f1
 8007414:	080073f1 	.word	0x080073f1
 8007418:	080073f1 	.word	0x080073f1
 800741c:	080073f1 	.word	0x080073f1
 8007420:	08007475 	.word	0x08007475
 8007424:	080073f1 	.word	0x080073f1
 8007428:	080073f1 	.word	0x080073f1
 800742c:	080073f1 	.word	0x080073f1
 8007430:	080073f1 	.word	0x080073f1
 8007434:	08007583 	.word	0x08007583
 8007438:	080074a5 	.word	0x080074a5
 800743c:	08007565 	.word	0x08007565
 8007440:	080073f1 	.word	0x080073f1
 8007444:	080073f1 	.word	0x080073f1
 8007448:	080075a5 	.word	0x080075a5
 800744c:	080073f1 	.word	0x080073f1
 8007450:	080074a5 	.word	0x080074a5
 8007454:	080073f1 	.word	0x080073f1
 8007458:	080073f1 	.word	0x080073f1
 800745c:	0800756d 	.word	0x0800756d
 8007460:	680b      	ldr	r3, [r1, #0]
 8007462:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007466:	1d1a      	adds	r2, r3, #4
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	600a      	str	r2, [r1, #0]
 800746c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007470:	2301      	movs	r3, #1
 8007472:	e0a4      	b.n	80075be <_printf_i+0x1f6>
 8007474:	6825      	ldr	r5, [r4, #0]
 8007476:	6808      	ldr	r0, [r1, #0]
 8007478:	062e      	lsls	r6, r5, #24
 800747a:	f100 0304 	add.w	r3, r0, #4
 800747e:	d50a      	bpl.n	8007496 <_printf_i+0xce>
 8007480:	6805      	ldr	r5, [r0, #0]
 8007482:	600b      	str	r3, [r1, #0]
 8007484:	2d00      	cmp	r5, #0
 8007486:	da03      	bge.n	8007490 <_printf_i+0xc8>
 8007488:	232d      	movs	r3, #45	; 0x2d
 800748a:	426d      	negs	r5, r5
 800748c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007490:	230a      	movs	r3, #10
 8007492:	485e      	ldr	r0, [pc, #376]	; (800760c <_printf_i+0x244>)
 8007494:	e019      	b.n	80074ca <_printf_i+0x102>
 8007496:	f015 0f40 	tst.w	r5, #64	; 0x40
 800749a:	6805      	ldr	r5, [r0, #0]
 800749c:	600b      	str	r3, [r1, #0]
 800749e:	bf18      	it	ne
 80074a0:	b22d      	sxthne	r5, r5
 80074a2:	e7ef      	b.n	8007484 <_printf_i+0xbc>
 80074a4:	680b      	ldr	r3, [r1, #0]
 80074a6:	6825      	ldr	r5, [r4, #0]
 80074a8:	1d18      	adds	r0, r3, #4
 80074aa:	6008      	str	r0, [r1, #0]
 80074ac:	0628      	lsls	r0, r5, #24
 80074ae:	d501      	bpl.n	80074b4 <_printf_i+0xec>
 80074b0:	681d      	ldr	r5, [r3, #0]
 80074b2:	e002      	b.n	80074ba <_printf_i+0xf2>
 80074b4:	0669      	lsls	r1, r5, #25
 80074b6:	d5fb      	bpl.n	80074b0 <_printf_i+0xe8>
 80074b8:	881d      	ldrh	r5, [r3, #0]
 80074ba:	2f6f      	cmp	r7, #111	; 0x6f
 80074bc:	bf0c      	ite	eq
 80074be:	2308      	moveq	r3, #8
 80074c0:	230a      	movne	r3, #10
 80074c2:	4852      	ldr	r0, [pc, #328]	; (800760c <_printf_i+0x244>)
 80074c4:	2100      	movs	r1, #0
 80074c6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80074ca:	6866      	ldr	r6, [r4, #4]
 80074cc:	2e00      	cmp	r6, #0
 80074ce:	bfa8      	it	ge
 80074d0:	6821      	ldrge	r1, [r4, #0]
 80074d2:	60a6      	str	r6, [r4, #8]
 80074d4:	bfa4      	itt	ge
 80074d6:	f021 0104 	bicge.w	r1, r1, #4
 80074da:	6021      	strge	r1, [r4, #0]
 80074dc:	b90d      	cbnz	r5, 80074e2 <_printf_i+0x11a>
 80074de:	2e00      	cmp	r6, #0
 80074e0:	d04d      	beq.n	800757e <_printf_i+0x1b6>
 80074e2:	4616      	mov	r6, r2
 80074e4:	fbb5 f1f3 	udiv	r1, r5, r3
 80074e8:	fb03 5711 	mls	r7, r3, r1, r5
 80074ec:	5dc7      	ldrb	r7, [r0, r7]
 80074ee:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80074f2:	462f      	mov	r7, r5
 80074f4:	42bb      	cmp	r3, r7
 80074f6:	460d      	mov	r5, r1
 80074f8:	d9f4      	bls.n	80074e4 <_printf_i+0x11c>
 80074fa:	2b08      	cmp	r3, #8
 80074fc:	d10b      	bne.n	8007516 <_printf_i+0x14e>
 80074fe:	6823      	ldr	r3, [r4, #0]
 8007500:	07df      	lsls	r7, r3, #31
 8007502:	d508      	bpl.n	8007516 <_printf_i+0x14e>
 8007504:	6923      	ldr	r3, [r4, #16]
 8007506:	6861      	ldr	r1, [r4, #4]
 8007508:	4299      	cmp	r1, r3
 800750a:	bfde      	ittt	le
 800750c:	2330      	movle	r3, #48	; 0x30
 800750e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007512:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007516:	1b92      	subs	r2, r2, r6
 8007518:	6122      	str	r2, [r4, #16]
 800751a:	464b      	mov	r3, r9
 800751c:	4621      	mov	r1, r4
 800751e:	4640      	mov	r0, r8
 8007520:	f8cd a000 	str.w	sl, [sp]
 8007524:	aa03      	add	r2, sp, #12
 8007526:	f7ff fedf 	bl	80072e8 <_printf_common>
 800752a:	3001      	adds	r0, #1
 800752c:	d14c      	bne.n	80075c8 <_printf_i+0x200>
 800752e:	f04f 30ff 	mov.w	r0, #4294967295
 8007532:	b004      	add	sp, #16
 8007534:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007538:	4834      	ldr	r0, [pc, #208]	; (800760c <_printf_i+0x244>)
 800753a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800753e:	680e      	ldr	r6, [r1, #0]
 8007540:	6823      	ldr	r3, [r4, #0]
 8007542:	f856 5b04 	ldr.w	r5, [r6], #4
 8007546:	061f      	lsls	r7, r3, #24
 8007548:	600e      	str	r6, [r1, #0]
 800754a:	d514      	bpl.n	8007576 <_printf_i+0x1ae>
 800754c:	07d9      	lsls	r1, r3, #31
 800754e:	bf44      	itt	mi
 8007550:	f043 0320 	orrmi.w	r3, r3, #32
 8007554:	6023      	strmi	r3, [r4, #0]
 8007556:	b91d      	cbnz	r5, 8007560 <_printf_i+0x198>
 8007558:	6823      	ldr	r3, [r4, #0]
 800755a:	f023 0320 	bic.w	r3, r3, #32
 800755e:	6023      	str	r3, [r4, #0]
 8007560:	2310      	movs	r3, #16
 8007562:	e7af      	b.n	80074c4 <_printf_i+0xfc>
 8007564:	6823      	ldr	r3, [r4, #0]
 8007566:	f043 0320 	orr.w	r3, r3, #32
 800756a:	6023      	str	r3, [r4, #0]
 800756c:	2378      	movs	r3, #120	; 0x78
 800756e:	4828      	ldr	r0, [pc, #160]	; (8007610 <_printf_i+0x248>)
 8007570:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007574:	e7e3      	b.n	800753e <_printf_i+0x176>
 8007576:	065e      	lsls	r6, r3, #25
 8007578:	bf48      	it	mi
 800757a:	b2ad      	uxthmi	r5, r5
 800757c:	e7e6      	b.n	800754c <_printf_i+0x184>
 800757e:	4616      	mov	r6, r2
 8007580:	e7bb      	b.n	80074fa <_printf_i+0x132>
 8007582:	680b      	ldr	r3, [r1, #0]
 8007584:	6826      	ldr	r6, [r4, #0]
 8007586:	1d1d      	adds	r5, r3, #4
 8007588:	6960      	ldr	r0, [r4, #20]
 800758a:	600d      	str	r5, [r1, #0]
 800758c:	0635      	lsls	r5, r6, #24
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	d501      	bpl.n	8007596 <_printf_i+0x1ce>
 8007592:	6018      	str	r0, [r3, #0]
 8007594:	e002      	b.n	800759c <_printf_i+0x1d4>
 8007596:	0671      	lsls	r1, r6, #25
 8007598:	d5fb      	bpl.n	8007592 <_printf_i+0x1ca>
 800759a:	8018      	strh	r0, [r3, #0]
 800759c:	2300      	movs	r3, #0
 800759e:	4616      	mov	r6, r2
 80075a0:	6123      	str	r3, [r4, #16]
 80075a2:	e7ba      	b.n	800751a <_printf_i+0x152>
 80075a4:	680b      	ldr	r3, [r1, #0]
 80075a6:	1d1a      	adds	r2, r3, #4
 80075a8:	600a      	str	r2, [r1, #0]
 80075aa:	681e      	ldr	r6, [r3, #0]
 80075ac:	2100      	movs	r1, #0
 80075ae:	4630      	mov	r0, r6
 80075b0:	6862      	ldr	r2, [r4, #4]
 80075b2:	f002 fbad 	bl	8009d10 <memchr>
 80075b6:	b108      	cbz	r0, 80075bc <_printf_i+0x1f4>
 80075b8:	1b80      	subs	r0, r0, r6
 80075ba:	6060      	str	r0, [r4, #4]
 80075bc:	6863      	ldr	r3, [r4, #4]
 80075be:	6123      	str	r3, [r4, #16]
 80075c0:	2300      	movs	r3, #0
 80075c2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80075c6:	e7a8      	b.n	800751a <_printf_i+0x152>
 80075c8:	4632      	mov	r2, r6
 80075ca:	4649      	mov	r1, r9
 80075cc:	4640      	mov	r0, r8
 80075ce:	6923      	ldr	r3, [r4, #16]
 80075d0:	47d0      	blx	sl
 80075d2:	3001      	adds	r0, #1
 80075d4:	d0ab      	beq.n	800752e <_printf_i+0x166>
 80075d6:	6823      	ldr	r3, [r4, #0]
 80075d8:	079b      	lsls	r3, r3, #30
 80075da:	d413      	bmi.n	8007604 <_printf_i+0x23c>
 80075dc:	68e0      	ldr	r0, [r4, #12]
 80075de:	9b03      	ldr	r3, [sp, #12]
 80075e0:	4298      	cmp	r0, r3
 80075e2:	bfb8      	it	lt
 80075e4:	4618      	movlt	r0, r3
 80075e6:	e7a4      	b.n	8007532 <_printf_i+0x16a>
 80075e8:	2301      	movs	r3, #1
 80075ea:	4632      	mov	r2, r6
 80075ec:	4649      	mov	r1, r9
 80075ee:	4640      	mov	r0, r8
 80075f0:	47d0      	blx	sl
 80075f2:	3001      	adds	r0, #1
 80075f4:	d09b      	beq.n	800752e <_printf_i+0x166>
 80075f6:	3501      	adds	r5, #1
 80075f8:	68e3      	ldr	r3, [r4, #12]
 80075fa:	9903      	ldr	r1, [sp, #12]
 80075fc:	1a5b      	subs	r3, r3, r1
 80075fe:	42ab      	cmp	r3, r5
 8007600:	dcf2      	bgt.n	80075e8 <_printf_i+0x220>
 8007602:	e7eb      	b.n	80075dc <_printf_i+0x214>
 8007604:	2500      	movs	r5, #0
 8007606:	f104 0619 	add.w	r6, r4, #25
 800760a:	e7f5      	b.n	80075f8 <_printf_i+0x230>
 800760c:	0800c1b4 	.word	0x0800c1b4
 8007610:	0800c1c5 	.word	0x0800c1c5

08007614 <_scanf_float>:
 8007614:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007618:	b087      	sub	sp, #28
 800761a:	9303      	str	r3, [sp, #12]
 800761c:	688b      	ldr	r3, [r1, #8]
 800761e:	4617      	mov	r7, r2
 8007620:	1e5a      	subs	r2, r3, #1
 8007622:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8007626:	bf85      	ittet	hi
 8007628:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800762c:	195b      	addhi	r3, r3, r5
 800762e:	2300      	movls	r3, #0
 8007630:	9302      	strhi	r3, [sp, #8]
 8007632:	bf88      	it	hi
 8007634:	f240 135d 	movwhi	r3, #349	; 0x15d
 8007638:	468b      	mov	fp, r1
 800763a:	f04f 0500 	mov.w	r5, #0
 800763e:	bf8c      	ite	hi
 8007640:	608b      	strhi	r3, [r1, #8]
 8007642:	9302      	strls	r3, [sp, #8]
 8007644:	680b      	ldr	r3, [r1, #0]
 8007646:	4680      	mov	r8, r0
 8007648:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800764c:	f84b 3b1c 	str.w	r3, [fp], #28
 8007650:	460c      	mov	r4, r1
 8007652:	465e      	mov	r6, fp
 8007654:	46aa      	mov	sl, r5
 8007656:	46a9      	mov	r9, r5
 8007658:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800765c:	9501      	str	r5, [sp, #4]
 800765e:	68a2      	ldr	r2, [r4, #8]
 8007660:	b152      	cbz	r2, 8007678 <_scanf_float+0x64>
 8007662:	683b      	ldr	r3, [r7, #0]
 8007664:	781b      	ldrb	r3, [r3, #0]
 8007666:	2b4e      	cmp	r3, #78	; 0x4e
 8007668:	d864      	bhi.n	8007734 <_scanf_float+0x120>
 800766a:	2b40      	cmp	r3, #64	; 0x40
 800766c:	d83c      	bhi.n	80076e8 <_scanf_float+0xd4>
 800766e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8007672:	b2c8      	uxtb	r0, r1
 8007674:	280e      	cmp	r0, #14
 8007676:	d93a      	bls.n	80076ee <_scanf_float+0xda>
 8007678:	f1b9 0f00 	cmp.w	r9, #0
 800767c:	d003      	beq.n	8007686 <_scanf_float+0x72>
 800767e:	6823      	ldr	r3, [r4, #0]
 8007680:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007684:	6023      	str	r3, [r4, #0]
 8007686:	f10a 3aff 	add.w	sl, sl, #4294967295
 800768a:	f1ba 0f01 	cmp.w	sl, #1
 800768e:	f200 8113 	bhi.w	80078b8 <_scanf_float+0x2a4>
 8007692:	455e      	cmp	r6, fp
 8007694:	f200 8105 	bhi.w	80078a2 <_scanf_float+0x28e>
 8007698:	2501      	movs	r5, #1
 800769a:	4628      	mov	r0, r5
 800769c:	b007      	add	sp, #28
 800769e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076a2:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80076a6:	2a0d      	cmp	r2, #13
 80076a8:	d8e6      	bhi.n	8007678 <_scanf_float+0x64>
 80076aa:	a101      	add	r1, pc, #4	; (adr r1, 80076b0 <_scanf_float+0x9c>)
 80076ac:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80076b0:	080077ef 	.word	0x080077ef
 80076b4:	08007679 	.word	0x08007679
 80076b8:	08007679 	.word	0x08007679
 80076bc:	08007679 	.word	0x08007679
 80076c0:	0800784f 	.word	0x0800784f
 80076c4:	08007827 	.word	0x08007827
 80076c8:	08007679 	.word	0x08007679
 80076cc:	08007679 	.word	0x08007679
 80076d0:	080077fd 	.word	0x080077fd
 80076d4:	08007679 	.word	0x08007679
 80076d8:	08007679 	.word	0x08007679
 80076dc:	08007679 	.word	0x08007679
 80076e0:	08007679 	.word	0x08007679
 80076e4:	080077b5 	.word	0x080077b5
 80076e8:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80076ec:	e7db      	b.n	80076a6 <_scanf_float+0x92>
 80076ee:	290e      	cmp	r1, #14
 80076f0:	d8c2      	bhi.n	8007678 <_scanf_float+0x64>
 80076f2:	a001      	add	r0, pc, #4	; (adr r0, 80076f8 <_scanf_float+0xe4>)
 80076f4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80076f8:	080077a7 	.word	0x080077a7
 80076fc:	08007679 	.word	0x08007679
 8007700:	080077a7 	.word	0x080077a7
 8007704:	0800783b 	.word	0x0800783b
 8007708:	08007679 	.word	0x08007679
 800770c:	08007755 	.word	0x08007755
 8007710:	08007791 	.word	0x08007791
 8007714:	08007791 	.word	0x08007791
 8007718:	08007791 	.word	0x08007791
 800771c:	08007791 	.word	0x08007791
 8007720:	08007791 	.word	0x08007791
 8007724:	08007791 	.word	0x08007791
 8007728:	08007791 	.word	0x08007791
 800772c:	08007791 	.word	0x08007791
 8007730:	08007791 	.word	0x08007791
 8007734:	2b6e      	cmp	r3, #110	; 0x6e
 8007736:	d809      	bhi.n	800774c <_scanf_float+0x138>
 8007738:	2b60      	cmp	r3, #96	; 0x60
 800773a:	d8b2      	bhi.n	80076a2 <_scanf_float+0x8e>
 800773c:	2b54      	cmp	r3, #84	; 0x54
 800773e:	d077      	beq.n	8007830 <_scanf_float+0x21c>
 8007740:	2b59      	cmp	r3, #89	; 0x59
 8007742:	d199      	bne.n	8007678 <_scanf_float+0x64>
 8007744:	2d07      	cmp	r5, #7
 8007746:	d197      	bne.n	8007678 <_scanf_float+0x64>
 8007748:	2508      	movs	r5, #8
 800774a:	e029      	b.n	80077a0 <_scanf_float+0x18c>
 800774c:	2b74      	cmp	r3, #116	; 0x74
 800774e:	d06f      	beq.n	8007830 <_scanf_float+0x21c>
 8007750:	2b79      	cmp	r3, #121	; 0x79
 8007752:	e7f6      	b.n	8007742 <_scanf_float+0x12e>
 8007754:	6821      	ldr	r1, [r4, #0]
 8007756:	05c8      	lsls	r0, r1, #23
 8007758:	d51a      	bpl.n	8007790 <_scanf_float+0x17c>
 800775a:	9b02      	ldr	r3, [sp, #8]
 800775c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8007760:	6021      	str	r1, [r4, #0]
 8007762:	f109 0901 	add.w	r9, r9, #1
 8007766:	b11b      	cbz	r3, 8007770 <_scanf_float+0x15c>
 8007768:	3b01      	subs	r3, #1
 800776a:	3201      	adds	r2, #1
 800776c:	9302      	str	r3, [sp, #8]
 800776e:	60a2      	str	r2, [r4, #8]
 8007770:	68a3      	ldr	r3, [r4, #8]
 8007772:	3b01      	subs	r3, #1
 8007774:	60a3      	str	r3, [r4, #8]
 8007776:	6923      	ldr	r3, [r4, #16]
 8007778:	3301      	adds	r3, #1
 800777a:	6123      	str	r3, [r4, #16]
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	3b01      	subs	r3, #1
 8007780:	2b00      	cmp	r3, #0
 8007782:	607b      	str	r3, [r7, #4]
 8007784:	f340 8084 	ble.w	8007890 <_scanf_float+0x27c>
 8007788:	683b      	ldr	r3, [r7, #0]
 800778a:	3301      	adds	r3, #1
 800778c:	603b      	str	r3, [r7, #0]
 800778e:	e766      	b.n	800765e <_scanf_float+0x4a>
 8007790:	eb1a 0f05 	cmn.w	sl, r5
 8007794:	f47f af70 	bne.w	8007678 <_scanf_float+0x64>
 8007798:	6822      	ldr	r2, [r4, #0]
 800779a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800779e:	6022      	str	r2, [r4, #0]
 80077a0:	f806 3b01 	strb.w	r3, [r6], #1
 80077a4:	e7e4      	b.n	8007770 <_scanf_float+0x15c>
 80077a6:	6822      	ldr	r2, [r4, #0]
 80077a8:	0610      	lsls	r0, r2, #24
 80077aa:	f57f af65 	bpl.w	8007678 <_scanf_float+0x64>
 80077ae:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80077b2:	e7f4      	b.n	800779e <_scanf_float+0x18a>
 80077b4:	f1ba 0f00 	cmp.w	sl, #0
 80077b8:	d10e      	bne.n	80077d8 <_scanf_float+0x1c4>
 80077ba:	f1b9 0f00 	cmp.w	r9, #0
 80077be:	d10e      	bne.n	80077de <_scanf_float+0x1ca>
 80077c0:	6822      	ldr	r2, [r4, #0]
 80077c2:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80077c6:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80077ca:	d108      	bne.n	80077de <_scanf_float+0x1ca>
 80077cc:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80077d0:	f04f 0a01 	mov.w	sl, #1
 80077d4:	6022      	str	r2, [r4, #0]
 80077d6:	e7e3      	b.n	80077a0 <_scanf_float+0x18c>
 80077d8:	f1ba 0f02 	cmp.w	sl, #2
 80077dc:	d055      	beq.n	800788a <_scanf_float+0x276>
 80077de:	2d01      	cmp	r5, #1
 80077e0:	d002      	beq.n	80077e8 <_scanf_float+0x1d4>
 80077e2:	2d04      	cmp	r5, #4
 80077e4:	f47f af48 	bne.w	8007678 <_scanf_float+0x64>
 80077e8:	3501      	adds	r5, #1
 80077ea:	b2ed      	uxtb	r5, r5
 80077ec:	e7d8      	b.n	80077a0 <_scanf_float+0x18c>
 80077ee:	f1ba 0f01 	cmp.w	sl, #1
 80077f2:	f47f af41 	bne.w	8007678 <_scanf_float+0x64>
 80077f6:	f04f 0a02 	mov.w	sl, #2
 80077fa:	e7d1      	b.n	80077a0 <_scanf_float+0x18c>
 80077fc:	b97d      	cbnz	r5, 800781e <_scanf_float+0x20a>
 80077fe:	f1b9 0f00 	cmp.w	r9, #0
 8007802:	f47f af3c 	bne.w	800767e <_scanf_float+0x6a>
 8007806:	6822      	ldr	r2, [r4, #0]
 8007808:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800780c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8007810:	f47f af39 	bne.w	8007686 <_scanf_float+0x72>
 8007814:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007818:	2501      	movs	r5, #1
 800781a:	6022      	str	r2, [r4, #0]
 800781c:	e7c0      	b.n	80077a0 <_scanf_float+0x18c>
 800781e:	2d03      	cmp	r5, #3
 8007820:	d0e2      	beq.n	80077e8 <_scanf_float+0x1d4>
 8007822:	2d05      	cmp	r5, #5
 8007824:	e7de      	b.n	80077e4 <_scanf_float+0x1d0>
 8007826:	2d02      	cmp	r5, #2
 8007828:	f47f af26 	bne.w	8007678 <_scanf_float+0x64>
 800782c:	2503      	movs	r5, #3
 800782e:	e7b7      	b.n	80077a0 <_scanf_float+0x18c>
 8007830:	2d06      	cmp	r5, #6
 8007832:	f47f af21 	bne.w	8007678 <_scanf_float+0x64>
 8007836:	2507      	movs	r5, #7
 8007838:	e7b2      	b.n	80077a0 <_scanf_float+0x18c>
 800783a:	6822      	ldr	r2, [r4, #0]
 800783c:	0591      	lsls	r1, r2, #22
 800783e:	f57f af1b 	bpl.w	8007678 <_scanf_float+0x64>
 8007842:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8007846:	6022      	str	r2, [r4, #0]
 8007848:	f8cd 9004 	str.w	r9, [sp, #4]
 800784c:	e7a8      	b.n	80077a0 <_scanf_float+0x18c>
 800784e:	6822      	ldr	r2, [r4, #0]
 8007850:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8007854:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8007858:	d006      	beq.n	8007868 <_scanf_float+0x254>
 800785a:	0550      	lsls	r0, r2, #21
 800785c:	f57f af0c 	bpl.w	8007678 <_scanf_float+0x64>
 8007860:	f1b9 0f00 	cmp.w	r9, #0
 8007864:	f43f af0f 	beq.w	8007686 <_scanf_float+0x72>
 8007868:	0591      	lsls	r1, r2, #22
 800786a:	bf58      	it	pl
 800786c:	9901      	ldrpl	r1, [sp, #4]
 800786e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007872:	bf58      	it	pl
 8007874:	eba9 0101 	subpl.w	r1, r9, r1
 8007878:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800787c:	f04f 0900 	mov.w	r9, #0
 8007880:	bf58      	it	pl
 8007882:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8007886:	6022      	str	r2, [r4, #0]
 8007888:	e78a      	b.n	80077a0 <_scanf_float+0x18c>
 800788a:	f04f 0a03 	mov.w	sl, #3
 800788e:	e787      	b.n	80077a0 <_scanf_float+0x18c>
 8007890:	4639      	mov	r1, r7
 8007892:	4640      	mov	r0, r8
 8007894:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8007898:	4798      	blx	r3
 800789a:	2800      	cmp	r0, #0
 800789c:	f43f aedf 	beq.w	800765e <_scanf_float+0x4a>
 80078a0:	e6ea      	b.n	8007678 <_scanf_float+0x64>
 80078a2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80078a6:	463a      	mov	r2, r7
 80078a8:	4640      	mov	r0, r8
 80078aa:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80078ae:	4798      	blx	r3
 80078b0:	6923      	ldr	r3, [r4, #16]
 80078b2:	3b01      	subs	r3, #1
 80078b4:	6123      	str	r3, [r4, #16]
 80078b6:	e6ec      	b.n	8007692 <_scanf_float+0x7e>
 80078b8:	1e6b      	subs	r3, r5, #1
 80078ba:	2b06      	cmp	r3, #6
 80078bc:	d825      	bhi.n	800790a <_scanf_float+0x2f6>
 80078be:	2d02      	cmp	r5, #2
 80078c0:	d836      	bhi.n	8007930 <_scanf_float+0x31c>
 80078c2:	455e      	cmp	r6, fp
 80078c4:	f67f aee8 	bls.w	8007698 <_scanf_float+0x84>
 80078c8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80078cc:	463a      	mov	r2, r7
 80078ce:	4640      	mov	r0, r8
 80078d0:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80078d4:	4798      	blx	r3
 80078d6:	6923      	ldr	r3, [r4, #16]
 80078d8:	3b01      	subs	r3, #1
 80078da:	6123      	str	r3, [r4, #16]
 80078dc:	e7f1      	b.n	80078c2 <_scanf_float+0x2ae>
 80078de:	9802      	ldr	r0, [sp, #8]
 80078e0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80078e4:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80078e8:	463a      	mov	r2, r7
 80078ea:	9002      	str	r0, [sp, #8]
 80078ec:	4640      	mov	r0, r8
 80078ee:	4798      	blx	r3
 80078f0:	6923      	ldr	r3, [r4, #16]
 80078f2:	3b01      	subs	r3, #1
 80078f4:	6123      	str	r3, [r4, #16]
 80078f6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80078fa:	fa5f fa8a 	uxtb.w	sl, sl
 80078fe:	f1ba 0f02 	cmp.w	sl, #2
 8007902:	d1ec      	bne.n	80078de <_scanf_float+0x2ca>
 8007904:	3d03      	subs	r5, #3
 8007906:	b2ed      	uxtb	r5, r5
 8007908:	1b76      	subs	r6, r6, r5
 800790a:	6823      	ldr	r3, [r4, #0]
 800790c:	05da      	lsls	r2, r3, #23
 800790e:	d52f      	bpl.n	8007970 <_scanf_float+0x35c>
 8007910:	055b      	lsls	r3, r3, #21
 8007912:	d510      	bpl.n	8007936 <_scanf_float+0x322>
 8007914:	455e      	cmp	r6, fp
 8007916:	f67f aebf 	bls.w	8007698 <_scanf_float+0x84>
 800791a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800791e:	463a      	mov	r2, r7
 8007920:	4640      	mov	r0, r8
 8007922:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007926:	4798      	blx	r3
 8007928:	6923      	ldr	r3, [r4, #16]
 800792a:	3b01      	subs	r3, #1
 800792c:	6123      	str	r3, [r4, #16]
 800792e:	e7f1      	b.n	8007914 <_scanf_float+0x300>
 8007930:	46aa      	mov	sl, r5
 8007932:	9602      	str	r6, [sp, #8]
 8007934:	e7df      	b.n	80078f6 <_scanf_float+0x2e2>
 8007936:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800793a:	6923      	ldr	r3, [r4, #16]
 800793c:	2965      	cmp	r1, #101	; 0x65
 800793e:	f103 33ff 	add.w	r3, r3, #4294967295
 8007942:	f106 35ff 	add.w	r5, r6, #4294967295
 8007946:	6123      	str	r3, [r4, #16]
 8007948:	d00c      	beq.n	8007964 <_scanf_float+0x350>
 800794a:	2945      	cmp	r1, #69	; 0x45
 800794c:	d00a      	beq.n	8007964 <_scanf_float+0x350>
 800794e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007952:	463a      	mov	r2, r7
 8007954:	4640      	mov	r0, r8
 8007956:	4798      	blx	r3
 8007958:	6923      	ldr	r3, [r4, #16]
 800795a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800795e:	3b01      	subs	r3, #1
 8007960:	1eb5      	subs	r5, r6, #2
 8007962:	6123      	str	r3, [r4, #16]
 8007964:	463a      	mov	r2, r7
 8007966:	4640      	mov	r0, r8
 8007968:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800796c:	4798      	blx	r3
 800796e:	462e      	mov	r6, r5
 8007970:	6825      	ldr	r5, [r4, #0]
 8007972:	f015 0510 	ands.w	r5, r5, #16
 8007976:	d159      	bne.n	8007a2c <_scanf_float+0x418>
 8007978:	7035      	strb	r5, [r6, #0]
 800797a:	6823      	ldr	r3, [r4, #0]
 800797c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007980:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007984:	d11c      	bne.n	80079c0 <_scanf_float+0x3ac>
 8007986:	9b01      	ldr	r3, [sp, #4]
 8007988:	454b      	cmp	r3, r9
 800798a:	eba3 0209 	sub.w	r2, r3, r9
 800798e:	d124      	bne.n	80079da <_scanf_float+0x3c6>
 8007990:	2200      	movs	r2, #0
 8007992:	4659      	mov	r1, fp
 8007994:	4640      	mov	r0, r8
 8007996:	f000 fef7 	bl	8008788 <_strtod_r>
 800799a:	f8d4 c000 	ldr.w	ip, [r4]
 800799e:	9b03      	ldr	r3, [sp, #12]
 80079a0:	f01c 0f02 	tst.w	ip, #2
 80079a4:	4606      	mov	r6, r0
 80079a6:	460f      	mov	r7, r1
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	d021      	beq.n	80079f0 <_scanf_float+0x3dc>
 80079ac:	9903      	ldr	r1, [sp, #12]
 80079ae:	1d1a      	adds	r2, r3, #4
 80079b0:	600a      	str	r2, [r1, #0]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	e9c3 6700 	strd	r6, r7, [r3]
 80079b8:	68e3      	ldr	r3, [r4, #12]
 80079ba:	3301      	adds	r3, #1
 80079bc:	60e3      	str	r3, [r4, #12]
 80079be:	e66c      	b.n	800769a <_scanf_float+0x86>
 80079c0:	9b04      	ldr	r3, [sp, #16]
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d0e4      	beq.n	8007990 <_scanf_float+0x37c>
 80079c6:	9905      	ldr	r1, [sp, #20]
 80079c8:	230a      	movs	r3, #10
 80079ca:	462a      	mov	r2, r5
 80079cc:	4640      	mov	r0, r8
 80079ce:	3101      	adds	r1, #1
 80079d0:	f000 ff66 	bl	80088a0 <_strtol_r>
 80079d4:	9b04      	ldr	r3, [sp, #16]
 80079d6:	9e05      	ldr	r6, [sp, #20]
 80079d8:	1ac2      	subs	r2, r0, r3
 80079da:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80079de:	429e      	cmp	r6, r3
 80079e0:	bf28      	it	cs
 80079e2:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80079e6:	4630      	mov	r0, r6
 80079e8:	4911      	ldr	r1, [pc, #68]	; (8007a30 <_scanf_float+0x41c>)
 80079ea:	f000 f829 	bl	8007a40 <siprintf>
 80079ee:	e7cf      	b.n	8007990 <_scanf_float+0x37c>
 80079f0:	f01c 0f04 	tst.w	ip, #4
 80079f4:	f103 0e04 	add.w	lr, r3, #4
 80079f8:	d003      	beq.n	8007a02 <_scanf_float+0x3ee>
 80079fa:	9903      	ldr	r1, [sp, #12]
 80079fc:	f8c1 e000 	str.w	lr, [r1]
 8007a00:	e7d7      	b.n	80079b2 <_scanf_float+0x39e>
 8007a02:	9a03      	ldr	r2, [sp, #12]
 8007a04:	f8c2 e000 	str.w	lr, [r2]
 8007a08:	f8d3 8000 	ldr.w	r8, [r3]
 8007a0c:	4602      	mov	r2, r0
 8007a0e:	460b      	mov	r3, r1
 8007a10:	f7f9 f91c 	bl	8000c4c <__aeabi_dcmpun>
 8007a14:	b128      	cbz	r0, 8007a22 <_scanf_float+0x40e>
 8007a16:	4807      	ldr	r0, [pc, #28]	; (8007a34 <_scanf_float+0x420>)
 8007a18:	f000 f80e 	bl	8007a38 <nanf>
 8007a1c:	f8c8 0000 	str.w	r0, [r8]
 8007a20:	e7ca      	b.n	80079b8 <_scanf_float+0x3a4>
 8007a22:	4630      	mov	r0, r6
 8007a24:	4639      	mov	r1, r7
 8007a26:	f7f9 f96f 	bl	8000d08 <__aeabi_d2f>
 8007a2a:	e7f7      	b.n	8007a1c <_scanf_float+0x408>
 8007a2c:	2500      	movs	r5, #0
 8007a2e:	e634      	b.n	800769a <_scanf_float+0x86>
 8007a30:	0800c1d6 	.word	0x0800c1d6
 8007a34:	0800c60b 	.word	0x0800c60b

08007a38 <nanf>:
 8007a38:	4800      	ldr	r0, [pc, #0]	; (8007a3c <nanf+0x4>)
 8007a3a:	4770      	bx	lr
 8007a3c:	7fc00000 	.word	0x7fc00000

08007a40 <siprintf>:
 8007a40:	b40e      	push	{r1, r2, r3}
 8007a42:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007a46:	b500      	push	{lr}
 8007a48:	b09c      	sub	sp, #112	; 0x70
 8007a4a:	ab1d      	add	r3, sp, #116	; 0x74
 8007a4c:	9002      	str	r0, [sp, #8]
 8007a4e:	9006      	str	r0, [sp, #24]
 8007a50:	9107      	str	r1, [sp, #28]
 8007a52:	9104      	str	r1, [sp, #16]
 8007a54:	4808      	ldr	r0, [pc, #32]	; (8007a78 <siprintf+0x38>)
 8007a56:	4909      	ldr	r1, [pc, #36]	; (8007a7c <siprintf+0x3c>)
 8007a58:	f853 2b04 	ldr.w	r2, [r3], #4
 8007a5c:	9105      	str	r1, [sp, #20]
 8007a5e:	6800      	ldr	r0, [r0, #0]
 8007a60:	a902      	add	r1, sp, #8
 8007a62:	9301      	str	r3, [sp, #4]
 8007a64:	f002 ff38 	bl	800a8d8 <_svfiprintf_r>
 8007a68:	2200      	movs	r2, #0
 8007a6a:	9b02      	ldr	r3, [sp, #8]
 8007a6c:	701a      	strb	r2, [r3, #0]
 8007a6e:	b01c      	add	sp, #112	; 0x70
 8007a70:	f85d eb04 	ldr.w	lr, [sp], #4
 8007a74:	b003      	add	sp, #12
 8007a76:	4770      	bx	lr
 8007a78:	2000000c 	.word	0x2000000c
 8007a7c:	ffff0208 	.word	0xffff0208

08007a80 <siscanf>:
 8007a80:	b40e      	push	{r1, r2, r3}
 8007a82:	f44f 7201 	mov.w	r2, #516	; 0x204
 8007a86:	b530      	push	{r4, r5, lr}
 8007a88:	b09c      	sub	sp, #112	; 0x70
 8007a8a:	ac1f      	add	r4, sp, #124	; 0x7c
 8007a8c:	f854 5b04 	ldr.w	r5, [r4], #4
 8007a90:	f8ad 2014 	strh.w	r2, [sp, #20]
 8007a94:	9002      	str	r0, [sp, #8]
 8007a96:	9006      	str	r0, [sp, #24]
 8007a98:	f7f8 fbc6 	bl	8000228 <strlen>
 8007a9c:	4b0b      	ldr	r3, [pc, #44]	; (8007acc <siscanf+0x4c>)
 8007a9e:	9003      	str	r0, [sp, #12]
 8007aa0:	930b      	str	r3, [sp, #44]	; 0x2c
 8007aa2:	2300      	movs	r3, #0
 8007aa4:	930f      	str	r3, [sp, #60]	; 0x3c
 8007aa6:	9314      	str	r3, [sp, #80]	; 0x50
 8007aa8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007aac:	9007      	str	r0, [sp, #28]
 8007aae:	4808      	ldr	r0, [pc, #32]	; (8007ad0 <siscanf+0x50>)
 8007ab0:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007ab4:	462a      	mov	r2, r5
 8007ab6:	4623      	mov	r3, r4
 8007ab8:	a902      	add	r1, sp, #8
 8007aba:	6800      	ldr	r0, [r0, #0]
 8007abc:	9401      	str	r4, [sp, #4]
 8007abe:	f003 f865 	bl	800ab8c <__ssvfiscanf_r>
 8007ac2:	b01c      	add	sp, #112	; 0x70
 8007ac4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007ac8:	b003      	add	sp, #12
 8007aca:	4770      	bx	lr
 8007acc:	08007af7 	.word	0x08007af7
 8007ad0:	2000000c 	.word	0x2000000c

08007ad4 <__sread>:
 8007ad4:	b510      	push	{r4, lr}
 8007ad6:	460c      	mov	r4, r1
 8007ad8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007adc:	f003 fb1a 	bl	800b114 <_read_r>
 8007ae0:	2800      	cmp	r0, #0
 8007ae2:	bfab      	itete	ge
 8007ae4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007ae6:	89a3      	ldrhlt	r3, [r4, #12]
 8007ae8:	181b      	addge	r3, r3, r0
 8007aea:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007aee:	bfac      	ite	ge
 8007af0:	6563      	strge	r3, [r4, #84]	; 0x54
 8007af2:	81a3      	strhlt	r3, [r4, #12]
 8007af4:	bd10      	pop	{r4, pc}

08007af6 <__seofread>:
 8007af6:	2000      	movs	r0, #0
 8007af8:	4770      	bx	lr

08007afa <__swrite>:
 8007afa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007afe:	461f      	mov	r7, r3
 8007b00:	898b      	ldrh	r3, [r1, #12]
 8007b02:	4605      	mov	r5, r0
 8007b04:	05db      	lsls	r3, r3, #23
 8007b06:	460c      	mov	r4, r1
 8007b08:	4616      	mov	r6, r2
 8007b0a:	d505      	bpl.n	8007b18 <__swrite+0x1e>
 8007b0c:	2302      	movs	r3, #2
 8007b0e:	2200      	movs	r2, #0
 8007b10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b14:	f002 f8d0 	bl	8009cb8 <_lseek_r>
 8007b18:	89a3      	ldrh	r3, [r4, #12]
 8007b1a:	4632      	mov	r2, r6
 8007b1c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007b20:	81a3      	strh	r3, [r4, #12]
 8007b22:	4628      	mov	r0, r5
 8007b24:	463b      	mov	r3, r7
 8007b26:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007b2a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007b2e:	f000 beb9 	b.w	80088a4 <_write_r>

08007b32 <__sseek>:
 8007b32:	b510      	push	{r4, lr}
 8007b34:	460c      	mov	r4, r1
 8007b36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b3a:	f002 f8bd 	bl	8009cb8 <_lseek_r>
 8007b3e:	1c43      	adds	r3, r0, #1
 8007b40:	89a3      	ldrh	r3, [r4, #12]
 8007b42:	bf15      	itete	ne
 8007b44:	6560      	strne	r0, [r4, #84]	; 0x54
 8007b46:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007b4a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007b4e:	81a3      	strheq	r3, [r4, #12]
 8007b50:	bf18      	it	ne
 8007b52:	81a3      	strhne	r3, [r4, #12]
 8007b54:	bd10      	pop	{r4, pc}

08007b56 <__sclose>:
 8007b56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b5a:	f000 beb5 	b.w	80088c8 <_close_r>

08007b5e <sulp>:
 8007b5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b62:	460f      	mov	r7, r1
 8007b64:	4690      	mov	r8, r2
 8007b66:	f002 fc5f 	bl	800a428 <__ulp>
 8007b6a:	4604      	mov	r4, r0
 8007b6c:	460d      	mov	r5, r1
 8007b6e:	f1b8 0f00 	cmp.w	r8, #0
 8007b72:	d011      	beq.n	8007b98 <sulp+0x3a>
 8007b74:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8007b78:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	dd0b      	ble.n	8007b98 <sulp+0x3a>
 8007b80:	2400      	movs	r4, #0
 8007b82:	051b      	lsls	r3, r3, #20
 8007b84:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8007b88:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8007b8c:	4622      	mov	r2, r4
 8007b8e:	462b      	mov	r3, r5
 8007b90:	f7f8 fdc2 	bl	8000718 <__aeabi_dmul>
 8007b94:	4604      	mov	r4, r0
 8007b96:	460d      	mov	r5, r1
 8007b98:	4620      	mov	r0, r4
 8007b9a:	4629      	mov	r1, r5
 8007b9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08007ba0 <_strtod_l>:
 8007ba0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ba4:	469b      	mov	fp, r3
 8007ba6:	2300      	movs	r3, #0
 8007ba8:	b0a1      	sub	sp, #132	; 0x84
 8007baa:	931c      	str	r3, [sp, #112]	; 0x70
 8007bac:	4ba1      	ldr	r3, [pc, #644]	; (8007e34 <_strtod_l+0x294>)
 8007bae:	4682      	mov	sl, r0
 8007bb0:	681f      	ldr	r7, [r3, #0]
 8007bb2:	460e      	mov	r6, r1
 8007bb4:	4638      	mov	r0, r7
 8007bb6:	9217      	str	r2, [sp, #92]	; 0x5c
 8007bb8:	f7f8 fb36 	bl	8000228 <strlen>
 8007bbc:	f04f 0800 	mov.w	r8, #0
 8007bc0:	4604      	mov	r4, r0
 8007bc2:	f04f 0900 	mov.w	r9, #0
 8007bc6:	961b      	str	r6, [sp, #108]	; 0x6c
 8007bc8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007bca:	781a      	ldrb	r2, [r3, #0]
 8007bcc:	2a2b      	cmp	r2, #43	; 0x2b
 8007bce:	d04c      	beq.n	8007c6a <_strtod_l+0xca>
 8007bd0:	d83a      	bhi.n	8007c48 <_strtod_l+0xa8>
 8007bd2:	2a0d      	cmp	r2, #13
 8007bd4:	d833      	bhi.n	8007c3e <_strtod_l+0x9e>
 8007bd6:	2a08      	cmp	r2, #8
 8007bd8:	d833      	bhi.n	8007c42 <_strtod_l+0xa2>
 8007bda:	2a00      	cmp	r2, #0
 8007bdc:	d03d      	beq.n	8007c5a <_strtod_l+0xba>
 8007bde:	2300      	movs	r3, #0
 8007be0:	930c      	str	r3, [sp, #48]	; 0x30
 8007be2:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8007be4:	782b      	ldrb	r3, [r5, #0]
 8007be6:	2b30      	cmp	r3, #48	; 0x30
 8007be8:	f040 80af 	bne.w	8007d4a <_strtod_l+0x1aa>
 8007bec:	786b      	ldrb	r3, [r5, #1]
 8007bee:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8007bf2:	2b58      	cmp	r3, #88	; 0x58
 8007bf4:	d16c      	bne.n	8007cd0 <_strtod_l+0x130>
 8007bf6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007bf8:	4650      	mov	r0, sl
 8007bfa:	9301      	str	r3, [sp, #4]
 8007bfc:	ab1c      	add	r3, sp, #112	; 0x70
 8007bfe:	9300      	str	r3, [sp, #0]
 8007c00:	4a8d      	ldr	r2, [pc, #564]	; (8007e38 <_strtod_l+0x298>)
 8007c02:	f8cd b008 	str.w	fp, [sp, #8]
 8007c06:	ab1d      	add	r3, sp, #116	; 0x74
 8007c08:	a91b      	add	r1, sp, #108	; 0x6c
 8007c0a:	f001 fd53 	bl	80096b4 <__gethex>
 8007c0e:	f010 0607 	ands.w	r6, r0, #7
 8007c12:	4604      	mov	r4, r0
 8007c14:	d005      	beq.n	8007c22 <_strtod_l+0x82>
 8007c16:	2e06      	cmp	r6, #6
 8007c18:	d129      	bne.n	8007c6e <_strtod_l+0xce>
 8007c1a:	2300      	movs	r3, #0
 8007c1c:	3501      	adds	r5, #1
 8007c1e:	951b      	str	r5, [sp, #108]	; 0x6c
 8007c20:	930c      	str	r3, [sp, #48]	; 0x30
 8007c22:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	f040 8596 	bne.w	8008756 <_strtod_l+0xbb6>
 8007c2a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007c2c:	b1d3      	cbz	r3, 8007c64 <_strtod_l+0xc4>
 8007c2e:	4642      	mov	r2, r8
 8007c30:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8007c34:	4610      	mov	r0, r2
 8007c36:	4619      	mov	r1, r3
 8007c38:	b021      	add	sp, #132	; 0x84
 8007c3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c3e:	2a20      	cmp	r2, #32
 8007c40:	d1cd      	bne.n	8007bde <_strtod_l+0x3e>
 8007c42:	3301      	adds	r3, #1
 8007c44:	931b      	str	r3, [sp, #108]	; 0x6c
 8007c46:	e7bf      	b.n	8007bc8 <_strtod_l+0x28>
 8007c48:	2a2d      	cmp	r2, #45	; 0x2d
 8007c4a:	d1c8      	bne.n	8007bde <_strtod_l+0x3e>
 8007c4c:	2201      	movs	r2, #1
 8007c4e:	920c      	str	r2, [sp, #48]	; 0x30
 8007c50:	1c5a      	adds	r2, r3, #1
 8007c52:	921b      	str	r2, [sp, #108]	; 0x6c
 8007c54:	785b      	ldrb	r3, [r3, #1]
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d1c3      	bne.n	8007be2 <_strtod_l+0x42>
 8007c5a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007c5c:	961b      	str	r6, [sp, #108]	; 0x6c
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	f040 8577 	bne.w	8008752 <_strtod_l+0xbb2>
 8007c64:	4642      	mov	r2, r8
 8007c66:	464b      	mov	r3, r9
 8007c68:	e7e4      	b.n	8007c34 <_strtod_l+0x94>
 8007c6a:	2200      	movs	r2, #0
 8007c6c:	e7ef      	b.n	8007c4e <_strtod_l+0xae>
 8007c6e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8007c70:	b13a      	cbz	r2, 8007c82 <_strtod_l+0xe2>
 8007c72:	2135      	movs	r1, #53	; 0x35
 8007c74:	a81e      	add	r0, sp, #120	; 0x78
 8007c76:	f002 fcdb 	bl	800a630 <__copybits>
 8007c7a:	4650      	mov	r0, sl
 8007c7c:	991c      	ldr	r1, [sp, #112]	; 0x70
 8007c7e:	f002 f8a3 	bl	8009dc8 <_Bfree>
 8007c82:	3e01      	subs	r6, #1
 8007c84:	2e05      	cmp	r6, #5
 8007c86:	d807      	bhi.n	8007c98 <_strtod_l+0xf8>
 8007c88:	e8df f006 	tbb	[pc, r6]
 8007c8c:	1d180b0e 	.word	0x1d180b0e
 8007c90:	030e      	.short	0x030e
 8007c92:	f04f 0900 	mov.w	r9, #0
 8007c96:	46c8      	mov	r8, r9
 8007c98:	0721      	lsls	r1, r4, #28
 8007c9a:	d5c2      	bpl.n	8007c22 <_strtod_l+0x82>
 8007c9c:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8007ca0:	e7bf      	b.n	8007c22 <_strtod_l+0x82>
 8007ca2:	e9dd 891e 	ldrd	r8, r9, [sp, #120]	; 0x78
 8007ca6:	e7f7      	b.n	8007c98 <_strtod_l+0xf8>
 8007ca8:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8007caa:	e9dd 831e 	ldrd	r8, r3, [sp, #120]	; 0x78
 8007cae:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8007cb2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8007cb6:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8007cba:	e7ed      	b.n	8007c98 <_strtod_l+0xf8>
 8007cbc:	f04f 0800 	mov.w	r8, #0
 8007cc0:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8007e3c <_strtod_l+0x29c>
 8007cc4:	e7e8      	b.n	8007c98 <_strtod_l+0xf8>
 8007cc6:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8007cca:	f04f 38ff 	mov.w	r8, #4294967295
 8007cce:	e7e3      	b.n	8007c98 <_strtod_l+0xf8>
 8007cd0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007cd2:	1c5a      	adds	r2, r3, #1
 8007cd4:	921b      	str	r2, [sp, #108]	; 0x6c
 8007cd6:	785b      	ldrb	r3, [r3, #1]
 8007cd8:	2b30      	cmp	r3, #48	; 0x30
 8007cda:	d0f9      	beq.n	8007cd0 <_strtod_l+0x130>
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d0a0      	beq.n	8007c22 <_strtod_l+0x82>
 8007ce0:	2301      	movs	r3, #1
 8007ce2:	9307      	str	r3, [sp, #28]
 8007ce4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007ce6:	220a      	movs	r2, #10
 8007ce8:	9308      	str	r3, [sp, #32]
 8007cea:	2300      	movs	r3, #0
 8007cec:	469b      	mov	fp, r3
 8007cee:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8007cf2:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8007cf4:	7805      	ldrb	r5, [r0, #0]
 8007cf6:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 8007cfa:	b2d9      	uxtb	r1, r3
 8007cfc:	2909      	cmp	r1, #9
 8007cfe:	d926      	bls.n	8007d4e <_strtod_l+0x1ae>
 8007d00:	4622      	mov	r2, r4
 8007d02:	4639      	mov	r1, r7
 8007d04:	f003 fa68 	bl	800b1d8 <strncmp>
 8007d08:	2800      	cmp	r0, #0
 8007d0a:	d032      	beq.n	8007d72 <_strtod_l+0x1d2>
 8007d0c:	2000      	movs	r0, #0
 8007d0e:	462b      	mov	r3, r5
 8007d10:	465c      	mov	r4, fp
 8007d12:	4602      	mov	r2, r0
 8007d14:	9004      	str	r0, [sp, #16]
 8007d16:	2b65      	cmp	r3, #101	; 0x65
 8007d18:	d001      	beq.n	8007d1e <_strtod_l+0x17e>
 8007d1a:	2b45      	cmp	r3, #69	; 0x45
 8007d1c:	d113      	bne.n	8007d46 <_strtod_l+0x1a6>
 8007d1e:	b91c      	cbnz	r4, 8007d28 <_strtod_l+0x188>
 8007d20:	9b07      	ldr	r3, [sp, #28]
 8007d22:	4303      	orrs	r3, r0
 8007d24:	d099      	beq.n	8007c5a <_strtod_l+0xba>
 8007d26:	2400      	movs	r4, #0
 8007d28:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8007d2a:	1c73      	adds	r3, r6, #1
 8007d2c:	931b      	str	r3, [sp, #108]	; 0x6c
 8007d2e:	7873      	ldrb	r3, [r6, #1]
 8007d30:	2b2b      	cmp	r3, #43	; 0x2b
 8007d32:	d078      	beq.n	8007e26 <_strtod_l+0x286>
 8007d34:	2b2d      	cmp	r3, #45	; 0x2d
 8007d36:	d07b      	beq.n	8007e30 <_strtod_l+0x290>
 8007d38:	2700      	movs	r7, #0
 8007d3a:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8007d3e:	2909      	cmp	r1, #9
 8007d40:	f240 8082 	bls.w	8007e48 <_strtod_l+0x2a8>
 8007d44:	961b      	str	r6, [sp, #108]	; 0x6c
 8007d46:	2500      	movs	r5, #0
 8007d48:	e09e      	b.n	8007e88 <_strtod_l+0x2e8>
 8007d4a:	2300      	movs	r3, #0
 8007d4c:	e7c9      	b.n	8007ce2 <_strtod_l+0x142>
 8007d4e:	f1bb 0f08 	cmp.w	fp, #8
 8007d52:	bfd5      	itete	le
 8007d54:	9906      	ldrle	r1, [sp, #24]
 8007d56:	9905      	ldrgt	r1, [sp, #20]
 8007d58:	fb02 3301 	mlale	r3, r2, r1, r3
 8007d5c:	fb02 3301 	mlagt	r3, r2, r1, r3
 8007d60:	f100 0001 	add.w	r0, r0, #1
 8007d64:	bfd4      	ite	le
 8007d66:	9306      	strle	r3, [sp, #24]
 8007d68:	9305      	strgt	r3, [sp, #20]
 8007d6a:	f10b 0b01 	add.w	fp, fp, #1
 8007d6e:	901b      	str	r0, [sp, #108]	; 0x6c
 8007d70:	e7bf      	b.n	8007cf2 <_strtod_l+0x152>
 8007d72:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007d74:	191a      	adds	r2, r3, r4
 8007d76:	921b      	str	r2, [sp, #108]	; 0x6c
 8007d78:	5d1b      	ldrb	r3, [r3, r4]
 8007d7a:	f1bb 0f00 	cmp.w	fp, #0
 8007d7e:	d036      	beq.n	8007dee <_strtod_l+0x24e>
 8007d80:	465c      	mov	r4, fp
 8007d82:	9004      	str	r0, [sp, #16]
 8007d84:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8007d88:	2a09      	cmp	r2, #9
 8007d8a:	d912      	bls.n	8007db2 <_strtod_l+0x212>
 8007d8c:	2201      	movs	r2, #1
 8007d8e:	e7c2      	b.n	8007d16 <_strtod_l+0x176>
 8007d90:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007d92:	3001      	adds	r0, #1
 8007d94:	1c5a      	adds	r2, r3, #1
 8007d96:	921b      	str	r2, [sp, #108]	; 0x6c
 8007d98:	785b      	ldrb	r3, [r3, #1]
 8007d9a:	2b30      	cmp	r3, #48	; 0x30
 8007d9c:	d0f8      	beq.n	8007d90 <_strtod_l+0x1f0>
 8007d9e:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8007da2:	2a08      	cmp	r2, #8
 8007da4:	f200 84dc 	bhi.w	8008760 <_strtod_l+0xbc0>
 8007da8:	9004      	str	r0, [sp, #16]
 8007daa:	2000      	movs	r0, #0
 8007dac:	4604      	mov	r4, r0
 8007dae:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8007db0:	9208      	str	r2, [sp, #32]
 8007db2:	3b30      	subs	r3, #48	; 0x30
 8007db4:	f100 0201 	add.w	r2, r0, #1
 8007db8:	d013      	beq.n	8007de2 <_strtod_l+0x242>
 8007dba:	9904      	ldr	r1, [sp, #16]
 8007dbc:	1905      	adds	r5, r0, r4
 8007dbe:	4411      	add	r1, r2
 8007dc0:	9104      	str	r1, [sp, #16]
 8007dc2:	4622      	mov	r2, r4
 8007dc4:	210a      	movs	r1, #10
 8007dc6:	42aa      	cmp	r2, r5
 8007dc8:	d113      	bne.n	8007df2 <_strtod_l+0x252>
 8007dca:	1822      	adds	r2, r4, r0
 8007dcc:	2a08      	cmp	r2, #8
 8007dce:	f104 0401 	add.w	r4, r4, #1
 8007dd2:	4404      	add	r4, r0
 8007dd4:	dc1b      	bgt.n	8007e0e <_strtod_l+0x26e>
 8007dd6:	220a      	movs	r2, #10
 8007dd8:	9906      	ldr	r1, [sp, #24]
 8007dda:	fb02 3301 	mla	r3, r2, r1, r3
 8007dde:	9306      	str	r3, [sp, #24]
 8007de0:	2200      	movs	r2, #0
 8007de2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007de4:	4610      	mov	r0, r2
 8007de6:	1c59      	adds	r1, r3, #1
 8007de8:	911b      	str	r1, [sp, #108]	; 0x6c
 8007dea:	785b      	ldrb	r3, [r3, #1]
 8007dec:	e7ca      	b.n	8007d84 <_strtod_l+0x1e4>
 8007dee:	4658      	mov	r0, fp
 8007df0:	e7d3      	b.n	8007d9a <_strtod_l+0x1fa>
 8007df2:	2a08      	cmp	r2, #8
 8007df4:	dc04      	bgt.n	8007e00 <_strtod_l+0x260>
 8007df6:	9f06      	ldr	r7, [sp, #24]
 8007df8:	434f      	muls	r7, r1
 8007dfa:	9706      	str	r7, [sp, #24]
 8007dfc:	3201      	adds	r2, #1
 8007dfe:	e7e2      	b.n	8007dc6 <_strtod_l+0x226>
 8007e00:	1c57      	adds	r7, r2, #1
 8007e02:	2f10      	cmp	r7, #16
 8007e04:	bfde      	ittt	le
 8007e06:	9f05      	ldrle	r7, [sp, #20]
 8007e08:	434f      	mulle	r7, r1
 8007e0a:	9705      	strle	r7, [sp, #20]
 8007e0c:	e7f6      	b.n	8007dfc <_strtod_l+0x25c>
 8007e0e:	2c10      	cmp	r4, #16
 8007e10:	bfdf      	itttt	le
 8007e12:	220a      	movle	r2, #10
 8007e14:	9905      	ldrle	r1, [sp, #20]
 8007e16:	fb02 3301 	mlale	r3, r2, r1, r3
 8007e1a:	9305      	strle	r3, [sp, #20]
 8007e1c:	e7e0      	b.n	8007de0 <_strtod_l+0x240>
 8007e1e:	2300      	movs	r3, #0
 8007e20:	2201      	movs	r2, #1
 8007e22:	9304      	str	r3, [sp, #16]
 8007e24:	e77c      	b.n	8007d20 <_strtod_l+0x180>
 8007e26:	2700      	movs	r7, #0
 8007e28:	1cb3      	adds	r3, r6, #2
 8007e2a:	931b      	str	r3, [sp, #108]	; 0x6c
 8007e2c:	78b3      	ldrb	r3, [r6, #2]
 8007e2e:	e784      	b.n	8007d3a <_strtod_l+0x19a>
 8007e30:	2701      	movs	r7, #1
 8007e32:	e7f9      	b.n	8007e28 <_strtod_l+0x288>
 8007e34:	0800c430 	.word	0x0800c430
 8007e38:	0800c1dc 	.word	0x0800c1dc
 8007e3c:	7ff00000 	.word	0x7ff00000
 8007e40:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007e42:	1c59      	adds	r1, r3, #1
 8007e44:	911b      	str	r1, [sp, #108]	; 0x6c
 8007e46:	785b      	ldrb	r3, [r3, #1]
 8007e48:	2b30      	cmp	r3, #48	; 0x30
 8007e4a:	d0f9      	beq.n	8007e40 <_strtod_l+0x2a0>
 8007e4c:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 8007e50:	2908      	cmp	r1, #8
 8007e52:	f63f af78 	bhi.w	8007d46 <_strtod_l+0x1a6>
 8007e56:	f04f 0e0a 	mov.w	lr, #10
 8007e5a:	f1a3 0c30 	sub.w	ip, r3, #48	; 0x30
 8007e5e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007e60:	9309      	str	r3, [sp, #36]	; 0x24
 8007e62:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007e64:	1c59      	adds	r1, r3, #1
 8007e66:	911b      	str	r1, [sp, #108]	; 0x6c
 8007e68:	785b      	ldrb	r3, [r3, #1]
 8007e6a:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
 8007e6e:	2d09      	cmp	r5, #9
 8007e70:	d935      	bls.n	8007ede <_strtod_l+0x33e>
 8007e72:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8007e74:	1b49      	subs	r1, r1, r5
 8007e76:	2908      	cmp	r1, #8
 8007e78:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8007e7c:	dc02      	bgt.n	8007e84 <_strtod_l+0x2e4>
 8007e7e:	4565      	cmp	r5, ip
 8007e80:	bfa8      	it	ge
 8007e82:	4665      	movge	r5, ip
 8007e84:	b107      	cbz	r7, 8007e88 <_strtod_l+0x2e8>
 8007e86:	426d      	negs	r5, r5
 8007e88:	2c00      	cmp	r4, #0
 8007e8a:	d14c      	bne.n	8007f26 <_strtod_l+0x386>
 8007e8c:	9907      	ldr	r1, [sp, #28]
 8007e8e:	4301      	orrs	r1, r0
 8007e90:	f47f aec7 	bne.w	8007c22 <_strtod_l+0x82>
 8007e94:	2a00      	cmp	r2, #0
 8007e96:	f47f aee0 	bne.w	8007c5a <_strtod_l+0xba>
 8007e9a:	2b69      	cmp	r3, #105	; 0x69
 8007e9c:	d026      	beq.n	8007eec <_strtod_l+0x34c>
 8007e9e:	dc23      	bgt.n	8007ee8 <_strtod_l+0x348>
 8007ea0:	2b49      	cmp	r3, #73	; 0x49
 8007ea2:	d023      	beq.n	8007eec <_strtod_l+0x34c>
 8007ea4:	2b4e      	cmp	r3, #78	; 0x4e
 8007ea6:	f47f aed8 	bne.w	8007c5a <_strtod_l+0xba>
 8007eaa:	499c      	ldr	r1, [pc, #624]	; (800811c <_strtod_l+0x57c>)
 8007eac:	a81b      	add	r0, sp, #108	; 0x6c
 8007eae:	f001 fe4f 	bl	8009b50 <__match>
 8007eb2:	2800      	cmp	r0, #0
 8007eb4:	f43f aed1 	beq.w	8007c5a <_strtod_l+0xba>
 8007eb8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007eba:	781b      	ldrb	r3, [r3, #0]
 8007ebc:	2b28      	cmp	r3, #40	; 0x28
 8007ebe:	d12c      	bne.n	8007f1a <_strtod_l+0x37a>
 8007ec0:	4997      	ldr	r1, [pc, #604]	; (8008120 <_strtod_l+0x580>)
 8007ec2:	aa1e      	add	r2, sp, #120	; 0x78
 8007ec4:	a81b      	add	r0, sp, #108	; 0x6c
 8007ec6:	f001 fe57 	bl	8009b78 <__hexnan>
 8007eca:	2805      	cmp	r0, #5
 8007ecc:	d125      	bne.n	8007f1a <_strtod_l+0x37a>
 8007ece:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007ed0:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 8007ed4:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8007ed8:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8007edc:	e6a1      	b.n	8007c22 <_strtod_l+0x82>
 8007ede:	fb0e 3c0c 	mla	ip, lr, ip, r3
 8007ee2:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 8007ee6:	e7bc      	b.n	8007e62 <_strtod_l+0x2c2>
 8007ee8:	2b6e      	cmp	r3, #110	; 0x6e
 8007eea:	e7dc      	b.n	8007ea6 <_strtod_l+0x306>
 8007eec:	498d      	ldr	r1, [pc, #564]	; (8008124 <_strtod_l+0x584>)
 8007eee:	a81b      	add	r0, sp, #108	; 0x6c
 8007ef0:	f001 fe2e 	bl	8009b50 <__match>
 8007ef4:	2800      	cmp	r0, #0
 8007ef6:	f43f aeb0 	beq.w	8007c5a <_strtod_l+0xba>
 8007efa:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007efc:	498a      	ldr	r1, [pc, #552]	; (8008128 <_strtod_l+0x588>)
 8007efe:	3b01      	subs	r3, #1
 8007f00:	a81b      	add	r0, sp, #108	; 0x6c
 8007f02:	931b      	str	r3, [sp, #108]	; 0x6c
 8007f04:	f001 fe24 	bl	8009b50 <__match>
 8007f08:	b910      	cbnz	r0, 8007f10 <_strtod_l+0x370>
 8007f0a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007f0c:	3301      	adds	r3, #1
 8007f0e:	931b      	str	r3, [sp, #108]	; 0x6c
 8007f10:	f04f 0800 	mov.w	r8, #0
 8007f14:	f8df 9220 	ldr.w	r9, [pc, #544]	; 8008138 <_strtod_l+0x598>
 8007f18:	e683      	b.n	8007c22 <_strtod_l+0x82>
 8007f1a:	4884      	ldr	r0, [pc, #528]	; (800812c <_strtod_l+0x58c>)
 8007f1c:	f003 f90c 	bl	800b138 <nan>
 8007f20:	4680      	mov	r8, r0
 8007f22:	4689      	mov	r9, r1
 8007f24:	e67d      	b.n	8007c22 <_strtod_l+0x82>
 8007f26:	9b04      	ldr	r3, [sp, #16]
 8007f28:	f1bb 0f00 	cmp.w	fp, #0
 8007f2c:	bf08      	it	eq
 8007f2e:	46a3      	moveq	fp, r4
 8007f30:	1aeb      	subs	r3, r5, r3
 8007f32:	2c10      	cmp	r4, #16
 8007f34:	9806      	ldr	r0, [sp, #24]
 8007f36:	4626      	mov	r6, r4
 8007f38:	9307      	str	r3, [sp, #28]
 8007f3a:	bfa8      	it	ge
 8007f3c:	2610      	movge	r6, #16
 8007f3e:	f7f8 fb71 	bl	8000624 <__aeabi_ui2d>
 8007f42:	2c09      	cmp	r4, #9
 8007f44:	4680      	mov	r8, r0
 8007f46:	4689      	mov	r9, r1
 8007f48:	dd13      	ble.n	8007f72 <_strtod_l+0x3d2>
 8007f4a:	4b79      	ldr	r3, [pc, #484]	; (8008130 <_strtod_l+0x590>)
 8007f4c:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007f50:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8007f54:	f7f8 fbe0 	bl	8000718 <__aeabi_dmul>
 8007f58:	4680      	mov	r8, r0
 8007f5a:	9805      	ldr	r0, [sp, #20]
 8007f5c:	4689      	mov	r9, r1
 8007f5e:	f7f8 fb61 	bl	8000624 <__aeabi_ui2d>
 8007f62:	4602      	mov	r2, r0
 8007f64:	460b      	mov	r3, r1
 8007f66:	4640      	mov	r0, r8
 8007f68:	4649      	mov	r1, r9
 8007f6a:	f7f8 fa1f 	bl	80003ac <__adddf3>
 8007f6e:	4680      	mov	r8, r0
 8007f70:	4689      	mov	r9, r1
 8007f72:	2c0f      	cmp	r4, #15
 8007f74:	dc36      	bgt.n	8007fe4 <_strtod_l+0x444>
 8007f76:	9b07      	ldr	r3, [sp, #28]
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	f43f ae52 	beq.w	8007c22 <_strtod_l+0x82>
 8007f7e:	dd22      	ble.n	8007fc6 <_strtod_l+0x426>
 8007f80:	2b16      	cmp	r3, #22
 8007f82:	dc09      	bgt.n	8007f98 <_strtod_l+0x3f8>
 8007f84:	4c6a      	ldr	r4, [pc, #424]	; (8008130 <_strtod_l+0x590>)
 8007f86:	4642      	mov	r2, r8
 8007f88:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
 8007f8c:	464b      	mov	r3, r9
 8007f8e:	e9d4 0100 	ldrd	r0, r1, [r4]
 8007f92:	f7f8 fbc1 	bl	8000718 <__aeabi_dmul>
 8007f96:	e7c3      	b.n	8007f20 <_strtod_l+0x380>
 8007f98:	9a07      	ldr	r2, [sp, #28]
 8007f9a:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8007f9e:	4293      	cmp	r3, r2
 8007fa0:	db20      	blt.n	8007fe4 <_strtod_l+0x444>
 8007fa2:	4d63      	ldr	r5, [pc, #396]	; (8008130 <_strtod_l+0x590>)
 8007fa4:	f1c4 040f 	rsb	r4, r4, #15
 8007fa8:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8007fac:	4642      	mov	r2, r8
 8007fae:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007fb2:	464b      	mov	r3, r9
 8007fb4:	f7f8 fbb0 	bl	8000718 <__aeabi_dmul>
 8007fb8:	9b07      	ldr	r3, [sp, #28]
 8007fba:	1b1c      	subs	r4, r3, r4
 8007fbc:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8007fc0:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007fc4:	e7e5      	b.n	8007f92 <_strtod_l+0x3f2>
 8007fc6:	9b07      	ldr	r3, [sp, #28]
 8007fc8:	3316      	adds	r3, #22
 8007fca:	db0b      	blt.n	8007fe4 <_strtod_l+0x444>
 8007fcc:	9b04      	ldr	r3, [sp, #16]
 8007fce:	4a58      	ldr	r2, [pc, #352]	; (8008130 <_strtod_l+0x590>)
 8007fd0:	1b5d      	subs	r5, r3, r5
 8007fd2:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 8007fd6:	4640      	mov	r0, r8
 8007fd8:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007fdc:	4649      	mov	r1, r9
 8007fde:	f7f8 fcc5 	bl	800096c <__aeabi_ddiv>
 8007fe2:	e79d      	b.n	8007f20 <_strtod_l+0x380>
 8007fe4:	9b07      	ldr	r3, [sp, #28]
 8007fe6:	1ba6      	subs	r6, r4, r6
 8007fe8:	441e      	add	r6, r3
 8007fea:	2e00      	cmp	r6, #0
 8007fec:	dd71      	ble.n	80080d2 <_strtod_l+0x532>
 8007fee:	f016 030f 	ands.w	r3, r6, #15
 8007ff2:	d00a      	beq.n	800800a <_strtod_l+0x46a>
 8007ff4:	494e      	ldr	r1, [pc, #312]	; (8008130 <_strtod_l+0x590>)
 8007ff6:	4642      	mov	r2, r8
 8007ff8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007ffc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008000:	464b      	mov	r3, r9
 8008002:	f7f8 fb89 	bl	8000718 <__aeabi_dmul>
 8008006:	4680      	mov	r8, r0
 8008008:	4689      	mov	r9, r1
 800800a:	f036 060f 	bics.w	r6, r6, #15
 800800e:	d050      	beq.n	80080b2 <_strtod_l+0x512>
 8008010:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 8008014:	dd27      	ble.n	8008066 <_strtod_l+0x4c6>
 8008016:	f04f 0b00 	mov.w	fp, #0
 800801a:	f8cd b010 	str.w	fp, [sp, #16]
 800801e:	f8cd b020 	str.w	fp, [sp, #32]
 8008022:	f8cd b018 	str.w	fp, [sp, #24]
 8008026:	2322      	movs	r3, #34	; 0x22
 8008028:	f04f 0800 	mov.w	r8, #0
 800802c:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8008138 <_strtod_l+0x598>
 8008030:	f8ca 3000 	str.w	r3, [sl]
 8008034:	9b08      	ldr	r3, [sp, #32]
 8008036:	2b00      	cmp	r3, #0
 8008038:	f43f adf3 	beq.w	8007c22 <_strtod_l+0x82>
 800803c:	4650      	mov	r0, sl
 800803e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8008040:	f001 fec2 	bl	8009dc8 <_Bfree>
 8008044:	4650      	mov	r0, sl
 8008046:	9906      	ldr	r1, [sp, #24]
 8008048:	f001 febe 	bl	8009dc8 <_Bfree>
 800804c:	4650      	mov	r0, sl
 800804e:	9904      	ldr	r1, [sp, #16]
 8008050:	f001 feba 	bl	8009dc8 <_Bfree>
 8008054:	4650      	mov	r0, sl
 8008056:	9908      	ldr	r1, [sp, #32]
 8008058:	f001 feb6 	bl	8009dc8 <_Bfree>
 800805c:	4659      	mov	r1, fp
 800805e:	4650      	mov	r0, sl
 8008060:	f001 feb2 	bl	8009dc8 <_Bfree>
 8008064:	e5dd      	b.n	8007c22 <_strtod_l+0x82>
 8008066:	2300      	movs	r3, #0
 8008068:	4640      	mov	r0, r8
 800806a:	4649      	mov	r1, r9
 800806c:	461f      	mov	r7, r3
 800806e:	1136      	asrs	r6, r6, #4
 8008070:	2e01      	cmp	r6, #1
 8008072:	dc21      	bgt.n	80080b8 <_strtod_l+0x518>
 8008074:	b10b      	cbz	r3, 800807a <_strtod_l+0x4da>
 8008076:	4680      	mov	r8, r0
 8008078:	4689      	mov	r9, r1
 800807a:	4b2e      	ldr	r3, [pc, #184]	; (8008134 <_strtod_l+0x594>)
 800807c:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8008080:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8008084:	4642      	mov	r2, r8
 8008086:	e9d7 0100 	ldrd	r0, r1, [r7]
 800808a:	464b      	mov	r3, r9
 800808c:	f7f8 fb44 	bl	8000718 <__aeabi_dmul>
 8008090:	4b29      	ldr	r3, [pc, #164]	; (8008138 <_strtod_l+0x598>)
 8008092:	460a      	mov	r2, r1
 8008094:	400b      	ands	r3, r1
 8008096:	4929      	ldr	r1, [pc, #164]	; (800813c <_strtod_l+0x59c>)
 8008098:	4680      	mov	r8, r0
 800809a:	428b      	cmp	r3, r1
 800809c:	d8bb      	bhi.n	8008016 <_strtod_l+0x476>
 800809e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80080a2:	428b      	cmp	r3, r1
 80080a4:	bf86      	itte	hi
 80080a6:	f04f 38ff 	movhi.w	r8, #4294967295
 80080aa:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 8008140 <_strtod_l+0x5a0>
 80080ae:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 80080b2:	2300      	movs	r3, #0
 80080b4:	9305      	str	r3, [sp, #20]
 80080b6:	e07e      	b.n	80081b6 <_strtod_l+0x616>
 80080b8:	07f2      	lsls	r2, r6, #31
 80080ba:	d507      	bpl.n	80080cc <_strtod_l+0x52c>
 80080bc:	4b1d      	ldr	r3, [pc, #116]	; (8008134 <_strtod_l+0x594>)
 80080be:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80080c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080c6:	f7f8 fb27 	bl	8000718 <__aeabi_dmul>
 80080ca:	2301      	movs	r3, #1
 80080cc:	3701      	adds	r7, #1
 80080ce:	1076      	asrs	r6, r6, #1
 80080d0:	e7ce      	b.n	8008070 <_strtod_l+0x4d0>
 80080d2:	d0ee      	beq.n	80080b2 <_strtod_l+0x512>
 80080d4:	4276      	negs	r6, r6
 80080d6:	f016 020f 	ands.w	r2, r6, #15
 80080da:	d00a      	beq.n	80080f2 <_strtod_l+0x552>
 80080dc:	4b14      	ldr	r3, [pc, #80]	; (8008130 <_strtod_l+0x590>)
 80080de:	4640      	mov	r0, r8
 80080e0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80080e4:	4649      	mov	r1, r9
 80080e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080ea:	f7f8 fc3f 	bl	800096c <__aeabi_ddiv>
 80080ee:	4680      	mov	r8, r0
 80080f0:	4689      	mov	r9, r1
 80080f2:	1136      	asrs	r6, r6, #4
 80080f4:	d0dd      	beq.n	80080b2 <_strtod_l+0x512>
 80080f6:	2e1f      	cmp	r6, #31
 80080f8:	dd24      	ble.n	8008144 <_strtod_l+0x5a4>
 80080fa:	f04f 0b00 	mov.w	fp, #0
 80080fe:	f8cd b010 	str.w	fp, [sp, #16]
 8008102:	f8cd b020 	str.w	fp, [sp, #32]
 8008106:	f8cd b018 	str.w	fp, [sp, #24]
 800810a:	2322      	movs	r3, #34	; 0x22
 800810c:	f04f 0800 	mov.w	r8, #0
 8008110:	f04f 0900 	mov.w	r9, #0
 8008114:	f8ca 3000 	str.w	r3, [sl]
 8008118:	e78c      	b.n	8008034 <_strtod_l+0x494>
 800811a:	bf00      	nop
 800811c:	0800c1b1 	.word	0x0800c1b1
 8008120:	0800c1f0 	.word	0x0800c1f0
 8008124:	0800c1a9 	.word	0x0800c1a9
 8008128:	0800c334 	.word	0x0800c334
 800812c:	0800c60b 	.word	0x0800c60b
 8008130:	0800c4d0 	.word	0x0800c4d0
 8008134:	0800c4a8 	.word	0x0800c4a8
 8008138:	7ff00000 	.word	0x7ff00000
 800813c:	7ca00000 	.word	0x7ca00000
 8008140:	7fefffff 	.word	0x7fefffff
 8008144:	f016 0310 	ands.w	r3, r6, #16
 8008148:	bf18      	it	ne
 800814a:	236a      	movne	r3, #106	; 0x6a
 800814c:	4640      	mov	r0, r8
 800814e:	9305      	str	r3, [sp, #20]
 8008150:	4649      	mov	r1, r9
 8008152:	2300      	movs	r3, #0
 8008154:	4fb2      	ldr	r7, [pc, #712]	; (8008420 <_strtod_l+0x880>)
 8008156:	07f2      	lsls	r2, r6, #31
 8008158:	d504      	bpl.n	8008164 <_strtod_l+0x5c4>
 800815a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800815e:	f7f8 fadb 	bl	8000718 <__aeabi_dmul>
 8008162:	2301      	movs	r3, #1
 8008164:	1076      	asrs	r6, r6, #1
 8008166:	f107 0708 	add.w	r7, r7, #8
 800816a:	d1f4      	bne.n	8008156 <_strtod_l+0x5b6>
 800816c:	b10b      	cbz	r3, 8008172 <_strtod_l+0x5d2>
 800816e:	4680      	mov	r8, r0
 8008170:	4689      	mov	r9, r1
 8008172:	9b05      	ldr	r3, [sp, #20]
 8008174:	b1bb      	cbz	r3, 80081a6 <_strtod_l+0x606>
 8008176:	f3c9 530a 	ubfx	r3, r9, #20, #11
 800817a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800817e:	2b00      	cmp	r3, #0
 8008180:	4649      	mov	r1, r9
 8008182:	dd10      	ble.n	80081a6 <_strtod_l+0x606>
 8008184:	2b1f      	cmp	r3, #31
 8008186:	f340 812b 	ble.w	80083e0 <_strtod_l+0x840>
 800818a:	2b34      	cmp	r3, #52	; 0x34
 800818c:	bfd8      	it	le
 800818e:	f04f 32ff 	movle.w	r2, #4294967295
 8008192:	f04f 0800 	mov.w	r8, #0
 8008196:	bfcf      	iteee	gt
 8008198:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800819c:	3b20      	suble	r3, #32
 800819e:	fa02 f303 	lslle.w	r3, r2, r3
 80081a2:	ea03 0901 	andle.w	r9, r3, r1
 80081a6:	2200      	movs	r2, #0
 80081a8:	2300      	movs	r3, #0
 80081aa:	4640      	mov	r0, r8
 80081ac:	4649      	mov	r1, r9
 80081ae:	f7f8 fd1b 	bl	8000be8 <__aeabi_dcmpeq>
 80081b2:	2800      	cmp	r0, #0
 80081b4:	d1a1      	bne.n	80080fa <_strtod_l+0x55a>
 80081b6:	9b06      	ldr	r3, [sp, #24]
 80081b8:	465a      	mov	r2, fp
 80081ba:	9300      	str	r3, [sp, #0]
 80081bc:	4650      	mov	r0, sl
 80081be:	4623      	mov	r3, r4
 80081c0:	9908      	ldr	r1, [sp, #32]
 80081c2:	f001 fe6d 	bl	8009ea0 <__s2b>
 80081c6:	9008      	str	r0, [sp, #32]
 80081c8:	2800      	cmp	r0, #0
 80081ca:	f43f af24 	beq.w	8008016 <_strtod_l+0x476>
 80081ce:	9b04      	ldr	r3, [sp, #16]
 80081d0:	f04f 0b00 	mov.w	fp, #0
 80081d4:	1b5d      	subs	r5, r3, r5
 80081d6:	9b07      	ldr	r3, [sp, #28]
 80081d8:	f8cd b010 	str.w	fp, [sp, #16]
 80081dc:	2b00      	cmp	r3, #0
 80081de:	bfb4      	ite	lt
 80081e0:	462b      	movlt	r3, r5
 80081e2:	2300      	movge	r3, #0
 80081e4:	930e      	str	r3, [sp, #56]	; 0x38
 80081e6:	9b07      	ldr	r3, [sp, #28]
 80081e8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80081ec:	9316      	str	r3, [sp, #88]	; 0x58
 80081ee:	9b08      	ldr	r3, [sp, #32]
 80081f0:	4650      	mov	r0, sl
 80081f2:	6859      	ldr	r1, [r3, #4]
 80081f4:	f001 fda8 	bl	8009d48 <_Balloc>
 80081f8:	9006      	str	r0, [sp, #24]
 80081fa:	2800      	cmp	r0, #0
 80081fc:	f43f af13 	beq.w	8008026 <_strtod_l+0x486>
 8008200:	9b08      	ldr	r3, [sp, #32]
 8008202:	300c      	adds	r0, #12
 8008204:	691a      	ldr	r2, [r3, #16]
 8008206:	f103 010c 	add.w	r1, r3, #12
 800820a:	3202      	adds	r2, #2
 800820c:	0092      	lsls	r2, r2, #2
 800820e:	f001 fd8d 	bl	8009d2c <memcpy>
 8008212:	ab1e      	add	r3, sp, #120	; 0x78
 8008214:	9301      	str	r3, [sp, #4]
 8008216:	ab1d      	add	r3, sp, #116	; 0x74
 8008218:	9300      	str	r3, [sp, #0]
 800821a:	4642      	mov	r2, r8
 800821c:	464b      	mov	r3, r9
 800821e:	4650      	mov	r0, sl
 8008220:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
 8008224:	f002 f97a 	bl	800a51c <__d2b>
 8008228:	901c      	str	r0, [sp, #112]	; 0x70
 800822a:	2800      	cmp	r0, #0
 800822c:	f43f aefb 	beq.w	8008026 <_strtod_l+0x486>
 8008230:	2101      	movs	r1, #1
 8008232:	4650      	mov	r0, sl
 8008234:	f001 fecc 	bl	8009fd0 <__i2b>
 8008238:	4603      	mov	r3, r0
 800823a:	9004      	str	r0, [sp, #16]
 800823c:	2800      	cmp	r0, #0
 800823e:	f43f aef2 	beq.w	8008026 <_strtod_l+0x486>
 8008242:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8008244:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8008246:	2d00      	cmp	r5, #0
 8008248:	bfab      	itete	ge
 800824a:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800824c:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 800824e:	18ee      	addge	r6, r5, r3
 8008250:	1b5c      	sublt	r4, r3, r5
 8008252:	9b05      	ldr	r3, [sp, #20]
 8008254:	bfa8      	it	ge
 8008256:	9c16      	ldrge	r4, [sp, #88]	; 0x58
 8008258:	eba5 0503 	sub.w	r5, r5, r3
 800825c:	4415      	add	r5, r2
 800825e:	4b71      	ldr	r3, [pc, #452]	; (8008424 <_strtod_l+0x884>)
 8008260:	f105 35ff 	add.w	r5, r5, #4294967295
 8008264:	bfb8      	it	lt
 8008266:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 8008268:	429d      	cmp	r5, r3
 800826a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800826e:	f280 80c9 	bge.w	8008404 <_strtod_l+0x864>
 8008272:	1b5b      	subs	r3, r3, r5
 8008274:	2b1f      	cmp	r3, #31
 8008276:	f04f 0701 	mov.w	r7, #1
 800827a:	eba2 0203 	sub.w	r2, r2, r3
 800827e:	f300 80b6 	bgt.w	80083ee <_strtod_l+0x84e>
 8008282:	2500      	movs	r5, #0
 8008284:	fa07 f303 	lsl.w	r3, r7, r3
 8008288:	930f      	str	r3, [sp, #60]	; 0x3c
 800828a:	18b7      	adds	r7, r6, r2
 800828c:	9b05      	ldr	r3, [sp, #20]
 800828e:	42be      	cmp	r6, r7
 8008290:	4414      	add	r4, r2
 8008292:	441c      	add	r4, r3
 8008294:	4633      	mov	r3, r6
 8008296:	bfa8      	it	ge
 8008298:	463b      	movge	r3, r7
 800829a:	42a3      	cmp	r3, r4
 800829c:	bfa8      	it	ge
 800829e:	4623      	movge	r3, r4
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	bfc2      	ittt	gt
 80082a4:	1aff      	subgt	r7, r7, r3
 80082a6:	1ae4      	subgt	r4, r4, r3
 80082a8:	1af6      	subgt	r6, r6, r3
 80082aa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	dd17      	ble.n	80082e0 <_strtod_l+0x740>
 80082b0:	461a      	mov	r2, r3
 80082b2:	4650      	mov	r0, sl
 80082b4:	9904      	ldr	r1, [sp, #16]
 80082b6:	f001 ff45 	bl	800a144 <__pow5mult>
 80082ba:	9004      	str	r0, [sp, #16]
 80082bc:	2800      	cmp	r0, #0
 80082be:	f43f aeb2 	beq.w	8008026 <_strtod_l+0x486>
 80082c2:	4601      	mov	r1, r0
 80082c4:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80082c6:	4650      	mov	r0, sl
 80082c8:	f001 fe98 	bl	8009ffc <__multiply>
 80082cc:	9009      	str	r0, [sp, #36]	; 0x24
 80082ce:	2800      	cmp	r0, #0
 80082d0:	f43f aea9 	beq.w	8008026 <_strtod_l+0x486>
 80082d4:	4650      	mov	r0, sl
 80082d6:	991c      	ldr	r1, [sp, #112]	; 0x70
 80082d8:	f001 fd76 	bl	8009dc8 <_Bfree>
 80082dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80082de:	931c      	str	r3, [sp, #112]	; 0x70
 80082e0:	2f00      	cmp	r7, #0
 80082e2:	f300 8093 	bgt.w	800840c <_strtod_l+0x86c>
 80082e6:	9b07      	ldr	r3, [sp, #28]
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	dd08      	ble.n	80082fe <_strtod_l+0x75e>
 80082ec:	4650      	mov	r0, sl
 80082ee:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80082f0:	9906      	ldr	r1, [sp, #24]
 80082f2:	f001 ff27 	bl	800a144 <__pow5mult>
 80082f6:	9006      	str	r0, [sp, #24]
 80082f8:	2800      	cmp	r0, #0
 80082fa:	f43f ae94 	beq.w	8008026 <_strtod_l+0x486>
 80082fe:	2c00      	cmp	r4, #0
 8008300:	dd08      	ble.n	8008314 <_strtod_l+0x774>
 8008302:	4622      	mov	r2, r4
 8008304:	4650      	mov	r0, sl
 8008306:	9906      	ldr	r1, [sp, #24]
 8008308:	f001 ff76 	bl	800a1f8 <__lshift>
 800830c:	9006      	str	r0, [sp, #24]
 800830e:	2800      	cmp	r0, #0
 8008310:	f43f ae89 	beq.w	8008026 <_strtod_l+0x486>
 8008314:	2e00      	cmp	r6, #0
 8008316:	dd08      	ble.n	800832a <_strtod_l+0x78a>
 8008318:	4632      	mov	r2, r6
 800831a:	4650      	mov	r0, sl
 800831c:	9904      	ldr	r1, [sp, #16]
 800831e:	f001 ff6b 	bl	800a1f8 <__lshift>
 8008322:	9004      	str	r0, [sp, #16]
 8008324:	2800      	cmp	r0, #0
 8008326:	f43f ae7e 	beq.w	8008026 <_strtod_l+0x486>
 800832a:	4650      	mov	r0, sl
 800832c:	9a06      	ldr	r2, [sp, #24]
 800832e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8008330:	f001 ffea 	bl	800a308 <__mdiff>
 8008334:	4683      	mov	fp, r0
 8008336:	2800      	cmp	r0, #0
 8008338:	f43f ae75 	beq.w	8008026 <_strtod_l+0x486>
 800833c:	2400      	movs	r4, #0
 800833e:	68c3      	ldr	r3, [r0, #12]
 8008340:	9904      	ldr	r1, [sp, #16]
 8008342:	60c4      	str	r4, [r0, #12]
 8008344:	930d      	str	r3, [sp, #52]	; 0x34
 8008346:	f001 ffc3 	bl	800a2d0 <__mcmp>
 800834a:	42a0      	cmp	r0, r4
 800834c:	da70      	bge.n	8008430 <_strtod_l+0x890>
 800834e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008350:	ea53 0308 	orrs.w	r3, r3, r8
 8008354:	f040 8096 	bne.w	8008484 <_strtod_l+0x8e4>
 8008358:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800835c:	2b00      	cmp	r3, #0
 800835e:	f040 8091 	bne.w	8008484 <_strtod_l+0x8e4>
 8008362:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008366:	0d1b      	lsrs	r3, r3, #20
 8008368:	051b      	lsls	r3, r3, #20
 800836a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800836e:	f240 8089 	bls.w	8008484 <_strtod_l+0x8e4>
 8008372:	f8db 3014 	ldr.w	r3, [fp, #20]
 8008376:	b923      	cbnz	r3, 8008382 <_strtod_l+0x7e2>
 8008378:	f8db 3010 	ldr.w	r3, [fp, #16]
 800837c:	2b01      	cmp	r3, #1
 800837e:	f340 8081 	ble.w	8008484 <_strtod_l+0x8e4>
 8008382:	4659      	mov	r1, fp
 8008384:	2201      	movs	r2, #1
 8008386:	4650      	mov	r0, sl
 8008388:	f001 ff36 	bl	800a1f8 <__lshift>
 800838c:	9904      	ldr	r1, [sp, #16]
 800838e:	4683      	mov	fp, r0
 8008390:	f001 ff9e 	bl	800a2d0 <__mcmp>
 8008394:	2800      	cmp	r0, #0
 8008396:	dd75      	ble.n	8008484 <_strtod_l+0x8e4>
 8008398:	9905      	ldr	r1, [sp, #20]
 800839a:	464b      	mov	r3, r9
 800839c:	4a22      	ldr	r2, [pc, #136]	; (8008428 <_strtod_l+0x888>)
 800839e:	2900      	cmp	r1, #0
 80083a0:	f000 8091 	beq.w	80084c6 <_strtod_l+0x926>
 80083a4:	ea02 0109 	and.w	r1, r2, r9
 80083a8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80083ac:	f300 808b 	bgt.w	80084c6 <_strtod_l+0x926>
 80083b0:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80083b4:	f77f aea9 	ble.w	800810a <_strtod_l+0x56a>
 80083b8:	2300      	movs	r3, #0
 80083ba:	4a1c      	ldr	r2, [pc, #112]	; (800842c <_strtod_l+0x88c>)
 80083bc:	4640      	mov	r0, r8
 80083be:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 80083c2:	4649      	mov	r1, r9
 80083c4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80083c8:	f7f8 f9a6 	bl	8000718 <__aeabi_dmul>
 80083cc:	460b      	mov	r3, r1
 80083ce:	4303      	orrs	r3, r0
 80083d0:	bf08      	it	eq
 80083d2:	2322      	moveq	r3, #34	; 0x22
 80083d4:	4680      	mov	r8, r0
 80083d6:	4689      	mov	r9, r1
 80083d8:	bf08      	it	eq
 80083da:	f8ca 3000 	streq.w	r3, [sl]
 80083de:	e62d      	b.n	800803c <_strtod_l+0x49c>
 80083e0:	f04f 32ff 	mov.w	r2, #4294967295
 80083e4:	fa02 f303 	lsl.w	r3, r2, r3
 80083e8:	ea03 0808 	and.w	r8, r3, r8
 80083ec:	e6db      	b.n	80081a6 <_strtod_l+0x606>
 80083ee:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 80083f2:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 80083f6:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 80083fa:	35e2      	adds	r5, #226	; 0xe2
 80083fc:	fa07 f505 	lsl.w	r5, r7, r5
 8008400:	970f      	str	r7, [sp, #60]	; 0x3c
 8008402:	e742      	b.n	800828a <_strtod_l+0x6ea>
 8008404:	2301      	movs	r3, #1
 8008406:	2500      	movs	r5, #0
 8008408:	930f      	str	r3, [sp, #60]	; 0x3c
 800840a:	e73e      	b.n	800828a <_strtod_l+0x6ea>
 800840c:	463a      	mov	r2, r7
 800840e:	4650      	mov	r0, sl
 8008410:	991c      	ldr	r1, [sp, #112]	; 0x70
 8008412:	f001 fef1 	bl	800a1f8 <__lshift>
 8008416:	901c      	str	r0, [sp, #112]	; 0x70
 8008418:	2800      	cmp	r0, #0
 800841a:	f47f af64 	bne.w	80082e6 <_strtod_l+0x746>
 800841e:	e602      	b.n	8008026 <_strtod_l+0x486>
 8008420:	0800c208 	.word	0x0800c208
 8008424:	fffffc02 	.word	0xfffffc02
 8008428:	7ff00000 	.word	0x7ff00000
 800842c:	39500000 	.word	0x39500000
 8008430:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8008434:	d166      	bne.n	8008504 <_strtod_l+0x964>
 8008436:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008438:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800843c:	b35a      	cbz	r2, 8008496 <_strtod_l+0x8f6>
 800843e:	4a9c      	ldr	r2, [pc, #624]	; (80086b0 <_strtod_l+0xb10>)
 8008440:	4293      	cmp	r3, r2
 8008442:	d12c      	bne.n	800849e <_strtod_l+0x8fe>
 8008444:	9b05      	ldr	r3, [sp, #20]
 8008446:	4640      	mov	r0, r8
 8008448:	b303      	cbz	r3, 800848c <_strtod_l+0x8ec>
 800844a:	464b      	mov	r3, r9
 800844c:	4a99      	ldr	r2, [pc, #612]	; (80086b4 <_strtod_l+0xb14>)
 800844e:	f04f 31ff 	mov.w	r1, #4294967295
 8008452:	401a      	ands	r2, r3
 8008454:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8008458:	d81b      	bhi.n	8008492 <_strtod_l+0x8f2>
 800845a:	0d12      	lsrs	r2, r2, #20
 800845c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8008460:	fa01 f303 	lsl.w	r3, r1, r3
 8008464:	4298      	cmp	r0, r3
 8008466:	d11a      	bne.n	800849e <_strtod_l+0x8fe>
 8008468:	4b93      	ldr	r3, [pc, #588]	; (80086b8 <_strtod_l+0xb18>)
 800846a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800846c:	429a      	cmp	r2, r3
 800846e:	d102      	bne.n	8008476 <_strtod_l+0x8d6>
 8008470:	3001      	adds	r0, #1
 8008472:	f43f add8 	beq.w	8008026 <_strtod_l+0x486>
 8008476:	f04f 0800 	mov.w	r8, #0
 800847a:	4b8e      	ldr	r3, [pc, #568]	; (80086b4 <_strtod_l+0xb14>)
 800847c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800847e:	401a      	ands	r2, r3
 8008480:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 8008484:	9b05      	ldr	r3, [sp, #20]
 8008486:	2b00      	cmp	r3, #0
 8008488:	d196      	bne.n	80083b8 <_strtod_l+0x818>
 800848a:	e5d7      	b.n	800803c <_strtod_l+0x49c>
 800848c:	f04f 33ff 	mov.w	r3, #4294967295
 8008490:	e7e8      	b.n	8008464 <_strtod_l+0x8c4>
 8008492:	460b      	mov	r3, r1
 8008494:	e7e6      	b.n	8008464 <_strtod_l+0x8c4>
 8008496:	ea53 0308 	orrs.w	r3, r3, r8
 800849a:	f43f af7d 	beq.w	8008398 <_strtod_l+0x7f8>
 800849e:	b1e5      	cbz	r5, 80084da <_strtod_l+0x93a>
 80084a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80084a2:	421d      	tst	r5, r3
 80084a4:	d0ee      	beq.n	8008484 <_strtod_l+0x8e4>
 80084a6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80084a8:	4640      	mov	r0, r8
 80084aa:	4649      	mov	r1, r9
 80084ac:	9a05      	ldr	r2, [sp, #20]
 80084ae:	b1c3      	cbz	r3, 80084e2 <_strtod_l+0x942>
 80084b0:	f7ff fb55 	bl	8007b5e <sulp>
 80084b4:	4602      	mov	r2, r0
 80084b6:	460b      	mov	r3, r1
 80084b8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80084bc:	f7f7 ff76 	bl	80003ac <__adddf3>
 80084c0:	4680      	mov	r8, r0
 80084c2:	4689      	mov	r9, r1
 80084c4:	e7de      	b.n	8008484 <_strtod_l+0x8e4>
 80084c6:	4013      	ands	r3, r2
 80084c8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80084cc:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 80084d0:	f04f 38ff 	mov.w	r8, #4294967295
 80084d4:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 80084d8:	e7d4      	b.n	8008484 <_strtod_l+0x8e4>
 80084da:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80084dc:	ea13 0f08 	tst.w	r3, r8
 80084e0:	e7e0      	b.n	80084a4 <_strtod_l+0x904>
 80084e2:	f7ff fb3c 	bl	8007b5e <sulp>
 80084e6:	4602      	mov	r2, r0
 80084e8:	460b      	mov	r3, r1
 80084ea:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80084ee:	f7f7 ff5b 	bl	80003a8 <__aeabi_dsub>
 80084f2:	2200      	movs	r2, #0
 80084f4:	2300      	movs	r3, #0
 80084f6:	4680      	mov	r8, r0
 80084f8:	4689      	mov	r9, r1
 80084fa:	f7f8 fb75 	bl	8000be8 <__aeabi_dcmpeq>
 80084fe:	2800      	cmp	r0, #0
 8008500:	d0c0      	beq.n	8008484 <_strtod_l+0x8e4>
 8008502:	e602      	b.n	800810a <_strtod_l+0x56a>
 8008504:	4658      	mov	r0, fp
 8008506:	9904      	ldr	r1, [sp, #16]
 8008508:	f002 f864 	bl	800a5d4 <__ratio>
 800850c:	2200      	movs	r2, #0
 800850e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008512:	4606      	mov	r6, r0
 8008514:	460f      	mov	r7, r1
 8008516:	f7f8 fb7b 	bl	8000c10 <__aeabi_dcmple>
 800851a:	2800      	cmp	r0, #0
 800851c:	d075      	beq.n	800860a <_strtod_l+0xa6a>
 800851e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008520:	2b00      	cmp	r3, #0
 8008522:	d047      	beq.n	80085b4 <_strtod_l+0xa14>
 8008524:	2600      	movs	r6, #0
 8008526:	4f65      	ldr	r7, [pc, #404]	; (80086bc <_strtod_l+0xb1c>)
 8008528:	4d64      	ldr	r5, [pc, #400]	; (80086bc <_strtod_l+0xb1c>)
 800852a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800852c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008530:	0d1b      	lsrs	r3, r3, #20
 8008532:	051b      	lsls	r3, r3, #20
 8008534:	930f      	str	r3, [sp, #60]	; 0x3c
 8008536:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008538:	4b61      	ldr	r3, [pc, #388]	; (80086c0 <_strtod_l+0xb20>)
 800853a:	429a      	cmp	r2, r3
 800853c:	f040 80c8 	bne.w	80086d0 <_strtod_l+0xb30>
 8008540:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008544:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8008548:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800854a:	4640      	mov	r0, r8
 800854c:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 8008550:	4649      	mov	r1, r9
 8008552:	f001 ff69 	bl	800a428 <__ulp>
 8008556:	4602      	mov	r2, r0
 8008558:	460b      	mov	r3, r1
 800855a:	4630      	mov	r0, r6
 800855c:	4639      	mov	r1, r7
 800855e:	f7f8 f8db 	bl	8000718 <__aeabi_dmul>
 8008562:	4642      	mov	r2, r8
 8008564:	464b      	mov	r3, r9
 8008566:	f7f7 ff21 	bl	80003ac <__adddf3>
 800856a:	460b      	mov	r3, r1
 800856c:	4951      	ldr	r1, [pc, #324]	; (80086b4 <_strtod_l+0xb14>)
 800856e:	4a55      	ldr	r2, [pc, #340]	; (80086c4 <_strtod_l+0xb24>)
 8008570:	4019      	ands	r1, r3
 8008572:	4291      	cmp	r1, r2
 8008574:	4680      	mov	r8, r0
 8008576:	d95e      	bls.n	8008636 <_strtod_l+0xa96>
 8008578:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800857a:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800857e:	4293      	cmp	r3, r2
 8008580:	d103      	bne.n	800858a <_strtod_l+0x9ea>
 8008582:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008584:	3301      	adds	r3, #1
 8008586:	f43f ad4e 	beq.w	8008026 <_strtod_l+0x486>
 800858a:	f04f 38ff 	mov.w	r8, #4294967295
 800858e:	f8df 9128 	ldr.w	r9, [pc, #296]	; 80086b8 <_strtod_l+0xb18>
 8008592:	4650      	mov	r0, sl
 8008594:	991c      	ldr	r1, [sp, #112]	; 0x70
 8008596:	f001 fc17 	bl	8009dc8 <_Bfree>
 800859a:	4650      	mov	r0, sl
 800859c:	9906      	ldr	r1, [sp, #24]
 800859e:	f001 fc13 	bl	8009dc8 <_Bfree>
 80085a2:	4650      	mov	r0, sl
 80085a4:	9904      	ldr	r1, [sp, #16]
 80085a6:	f001 fc0f 	bl	8009dc8 <_Bfree>
 80085aa:	4659      	mov	r1, fp
 80085ac:	4650      	mov	r0, sl
 80085ae:	f001 fc0b 	bl	8009dc8 <_Bfree>
 80085b2:	e61c      	b.n	80081ee <_strtod_l+0x64e>
 80085b4:	f1b8 0f00 	cmp.w	r8, #0
 80085b8:	d119      	bne.n	80085ee <_strtod_l+0xa4e>
 80085ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80085bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80085c0:	b9e3      	cbnz	r3, 80085fc <_strtod_l+0xa5c>
 80085c2:	2200      	movs	r2, #0
 80085c4:	4630      	mov	r0, r6
 80085c6:	4639      	mov	r1, r7
 80085c8:	4b3c      	ldr	r3, [pc, #240]	; (80086bc <_strtod_l+0xb1c>)
 80085ca:	f7f8 fb17 	bl	8000bfc <__aeabi_dcmplt>
 80085ce:	b9c8      	cbnz	r0, 8008604 <_strtod_l+0xa64>
 80085d0:	2200      	movs	r2, #0
 80085d2:	4630      	mov	r0, r6
 80085d4:	4639      	mov	r1, r7
 80085d6:	4b3c      	ldr	r3, [pc, #240]	; (80086c8 <_strtod_l+0xb28>)
 80085d8:	f7f8 f89e 	bl	8000718 <__aeabi_dmul>
 80085dc:	4604      	mov	r4, r0
 80085de:	460d      	mov	r5, r1
 80085e0:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 80085e4:	9418      	str	r4, [sp, #96]	; 0x60
 80085e6:	9319      	str	r3, [sp, #100]	; 0x64
 80085e8:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
 80085ec:	e79d      	b.n	800852a <_strtod_l+0x98a>
 80085ee:	f1b8 0f01 	cmp.w	r8, #1
 80085f2:	d103      	bne.n	80085fc <_strtod_l+0xa5c>
 80085f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	f43f ad87 	beq.w	800810a <_strtod_l+0x56a>
 80085fc:	2600      	movs	r6, #0
 80085fe:	2400      	movs	r4, #0
 8008600:	4f32      	ldr	r7, [pc, #200]	; (80086cc <_strtod_l+0xb2c>)
 8008602:	e791      	b.n	8008528 <_strtod_l+0x988>
 8008604:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8008606:	4d30      	ldr	r5, [pc, #192]	; (80086c8 <_strtod_l+0xb28>)
 8008608:	e7ea      	b.n	80085e0 <_strtod_l+0xa40>
 800860a:	4b2f      	ldr	r3, [pc, #188]	; (80086c8 <_strtod_l+0xb28>)
 800860c:	2200      	movs	r2, #0
 800860e:	4630      	mov	r0, r6
 8008610:	4639      	mov	r1, r7
 8008612:	f7f8 f881 	bl	8000718 <__aeabi_dmul>
 8008616:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008618:	4604      	mov	r4, r0
 800861a:	460d      	mov	r5, r1
 800861c:	b933      	cbnz	r3, 800862c <_strtod_l+0xa8c>
 800861e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008622:	9010      	str	r0, [sp, #64]	; 0x40
 8008624:	9311      	str	r3, [sp, #68]	; 0x44
 8008626:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800862a:	e77e      	b.n	800852a <_strtod_l+0x98a>
 800862c:	4602      	mov	r2, r0
 800862e:	460b      	mov	r3, r1
 8008630:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8008634:	e7f7      	b.n	8008626 <_strtod_l+0xa86>
 8008636:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800863a:	9b05      	ldr	r3, [sp, #20]
 800863c:	2b00      	cmp	r3, #0
 800863e:	d1a8      	bne.n	8008592 <_strtod_l+0x9f2>
 8008640:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008644:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008646:	0d1b      	lsrs	r3, r3, #20
 8008648:	051b      	lsls	r3, r3, #20
 800864a:	429a      	cmp	r2, r3
 800864c:	d1a1      	bne.n	8008592 <_strtod_l+0x9f2>
 800864e:	4620      	mov	r0, r4
 8008650:	4629      	mov	r1, r5
 8008652:	f7f8 fd45 	bl	80010e0 <__aeabi_d2lz>
 8008656:	f7f8 f831 	bl	80006bc <__aeabi_l2d>
 800865a:	4602      	mov	r2, r0
 800865c:	460b      	mov	r3, r1
 800865e:	4620      	mov	r0, r4
 8008660:	4629      	mov	r1, r5
 8008662:	f7f7 fea1 	bl	80003a8 <__aeabi_dsub>
 8008666:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008668:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800866c:	ea43 0308 	orr.w	r3, r3, r8
 8008670:	4313      	orrs	r3, r2
 8008672:	4604      	mov	r4, r0
 8008674:	460d      	mov	r5, r1
 8008676:	d066      	beq.n	8008746 <_strtod_l+0xba6>
 8008678:	a309      	add	r3, pc, #36	; (adr r3, 80086a0 <_strtod_l+0xb00>)
 800867a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800867e:	f7f8 fabd 	bl	8000bfc <__aeabi_dcmplt>
 8008682:	2800      	cmp	r0, #0
 8008684:	f47f acda 	bne.w	800803c <_strtod_l+0x49c>
 8008688:	a307      	add	r3, pc, #28	; (adr r3, 80086a8 <_strtod_l+0xb08>)
 800868a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800868e:	4620      	mov	r0, r4
 8008690:	4629      	mov	r1, r5
 8008692:	f7f8 fad1 	bl	8000c38 <__aeabi_dcmpgt>
 8008696:	2800      	cmp	r0, #0
 8008698:	f43f af7b 	beq.w	8008592 <_strtod_l+0x9f2>
 800869c:	e4ce      	b.n	800803c <_strtod_l+0x49c>
 800869e:	bf00      	nop
 80086a0:	94a03595 	.word	0x94a03595
 80086a4:	3fdfffff 	.word	0x3fdfffff
 80086a8:	35afe535 	.word	0x35afe535
 80086ac:	3fe00000 	.word	0x3fe00000
 80086b0:	000fffff 	.word	0x000fffff
 80086b4:	7ff00000 	.word	0x7ff00000
 80086b8:	7fefffff 	.word	0x7fefffff
 80086bc:	3ff00000 	.word	0x3ff00000
 80086c0:	7fe00000 	.word	0x7fe00000
 80086c4:	7c9fffff 	.word	0x7c9fffff
 80086c8:	3fe00000 	.word	0x3fe00000
 80086cc:	bff00000 	.word	0xbff00000
 80086d0:	9b05      	ldr	r3, [sp, #20]
 80086d2:	b313      	cbz	r3, 800871a <_strtod_l+0xb7a>
 80086d4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80086d6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80086da:	d81e      	bhi.n	800871a <_strtod_l+0xb7a>
 80086dc:	a326      	add	r3, pc, #152	; (adr r3, 8008778 <_strtod_l+0xbd8>)
 80086de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086e2:	4620      	mov	r0, r4
 80086e4:	4629      	mov	r1, r5
 80086e6:	f7f8 fa93 	bl	8000c10 <__aeabi_dcmple>
 80086ea:	b190      	cbz	r0, 8008712 <_strtod_l+0xb72>
 80086ec:	4629      	mov	r1, r5
 80086ee:	4620      	mov	r0, r4
 80086f0:	f7f8 faea 	bl	8000cc8 <__aeabi_d2uiz>
 80086f4:	2801      	cmp	r0, #1
 80086f6:	bf38      	it	cc
 80086f8:	2001      	movcc	r0, #1
 80086fa:	f7f7 ff93 	bl	8000624 <__aeabi_ui2d>
 80086fe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008700:	4604      	mov	r4, r0
 8008702:	460d      	mov	r5, r1
 8008704:	b9d3      	cbnz	r3, 800873c <_strtod_l+0xb9c>
 8008706:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800870a:	9012      	str	r0, [sp, #72]	; 0x48
 800870c:	9313      	str	r3, [sp, #76]	; 0x4c
 800870e:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 8008712:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008714:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8008718:	1a9f      	subs	r7, r3, r2
 800871a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800871e:	f001 fe83 	bl	800a428 <__ulp>
 8008722:	4602      	mov	r2, r0
 8008724:	460b      	mov	r3, r1
 8008726:	4630      	mov	r0, r6
 8008728:	4639      	mov	r1, r7
 800872a:	f7f7 fff5 	bl	8000718 <__aeabi_dmul>
 800872e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008732:	f7f7 fe3b 	bl	80003ac <__adddf3>
 8008736:	4680      	mov	r8, r0
 8008738:	4689      	mov	r9, r1
 800873a:	e77e      	b.n	800863a <_strtod_l+0xa9a>
 800873c:	4602      	mov	r2, r0
 800873e:	460b      	mov	r3, r1
 8008740:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8008744:	e7e3      	b.n	800870e <_strtod_l+0xb6e>
 8008746:	a30e      	add	r3, pc, #56	; (adr r3, 8008780 <_strtod_l+0xbe0>)
 8008748:	e9d3 2300 	ldrd	r2, r3, [r3]
 800874c:	f7f8 fa56 	bl	8000bfc <__aeabi_dcmplt>
 8008750:	e7a1      	b.n	8008696 <_strtod_l+0xaf6>
 8008752:	2300      	movs	r3, #0
 8008754:	930c      	str	r3, [sp, #48]	; 0x30
 8008756:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008758:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800875a:	6013      	str	r3, [r2, #0]
 800875c:	f7ff ba65 	b.w	8007c2a <_strtod_l+0x8a>
 8008760:	2b65      	cmp	r3, #101	; 0x65
 8008762:	f43f ab5c 	beq.w	8007e1e <_strtod_l+0x27e>
 8008766:	2b45      	cmp	r3, #69	; 0x45
 8008768:	f43f ab59 	beq.w	8007e1e <_strtod_l+0x27e>
 800876c:	2201      	movs	r2, #1
 800876e:	f7ff bb8d 	b.w	8007e8c <_strtod_l+0x2ec>
 8008772:	bf00      	nop
 8008774:	f3af 8000 	nop.w
 8008778:	ffc00000 	.word	0xffc00000
 800877c:	41dfffff 	.word	0x41dfffff
 8008780:	94a03595 	.word	0x94a03595
 8008784:	3fcfffff 	.word	0x3fcfffff

08008788 <_strtod_r>:
 8008788:	4b01      	ldr	r3, [pc, #4]	; (8008790 <_strtod_r+0x8>)
 800878a:	f7ff ba09 	b.w	8007ba0 <_strtod_l>
 800878e:	bf00      	nop
 8008790:	20000074 	.word	0x20000074

08008794 <_strtol_l.isra.0>:
 8008794:	2b01      	cmp	r3, #1
 8008796:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800879a:	4686      	mov	lr, r0
 800879c:	d001      	beq.n	80087a2 <_strtol_l.isra.0+0xe>
 800879e:	2b24      	cmp	r3, #36	; 0x24
 80087a0:	d906      	bls.n	80087b0 <_strtol_l.isra.0+0x1c>
 80087a2:	f7fe faa5 	bl	8006cf0 <__errno>
 80087a6:	2316      	movs	r3, #22
 80087a8:	6003      	str	r3, [r0, #0]
 80087aa:	2000      	movs	r0, #0
 80087ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80087b0:	468c      	mov	ip, r1
 80087b2:	4e3a      	ldr	r6, [pc, #232]	; (800889c <_strtol_l.isra.0+0x108>)
 80087b4:	4660      	mov	r0, ip
 80087b6:	f81c 4b01 	ldrb.w	r4, [ip], #1
 80087ba:	5da5      	ldrb	r5, [r4, r6]
 80087bc:	f015 0508 	ands.w	r5, r5, #8
 80087c0:	d1f8      	bne.n	80087b4 <_strtol_l.isra.0+0x20>
 80087c2:	2c2d      	cmp	r4, #45	; 0x2d
 80087c4:	d133      	bne.n	800882e <_strtol_l.isra.0+0x9a>
 80087c6:	f04f 0801 	mov.w	r8, #1
 80087ca:	f89c 4000 	ldrb.w	r4, [ip]
 80087ce:	f100 0c02 	add.w	ip, r0, #2
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d05d      	beq.n	8008892 <_strtol_l.isra.0+0xfe>
 80087d6:	2b10      	cmp	r3, #16
 80087d8:	d10c      	bne.n	80087f4 <_strtol_l.isra.0+0x60>
 80087da:	2c30      	cmp	r4, #48	; 0x30
 80087dc:	d10a      	bne.n	80087f4 <_strtol_l.isra.0+0x60>
 80087de:	f89c 0000 	ldrb.w	r0, [ip]
 80087e2:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80087e6:	2858      	cmp	r0, #88	; 0x58
 80087e8:	d14e      	bne.n	8008888 <_strtol_l.isra.0+0xf4>
 80087ea:	2310      	movs	r3, #16
 80087ec:	f89c 4001 	ldrb.w	r4, [ip, #1]
 80087f0:	f10c 0c02 	add.w	ip, ip, #2
 80087f4:	2500      	movs	r5, #0
 80087f6:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
 80087fa:	3f01      	subs	r7, #1
 80087fc:	fbb7 f9f3 	udiv	r9, r7, r3
 8008800:	4628      	mov	r0, r5
 8008802:	fb03 7a19 	mls	sl, r3, r9, r7
 8008806:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 800880a:	2e09      	cmp	r6, #9
 800880c:	d818      	bhi.n	8008840 <_strtol_l.isra.0+0xac>
 800880e:	4634      	mov	r4, r6
 8008810:	42a3      	cmp	r3, r4
 8008812:	dd24      	ble.n	800885e <_strtol_l.isra.0+0xca>
 8008814:	2d00      	cmp	r5, #0
 8008816:	db1f      	blt.n	8008858 <_strtol_l.isra.0+0xc4>
 8008818:	4581      	cmp	r9, r0
 800881a:	d31d      	bcc.n	8008858 <_strtol_l.isra.0+0xc4>
 800881c:	d101      	bne.n	8008822 <_strtol_l.isra.0+0x8e>
 800881e:	45a2      	cmp	sl, r4
 8008820:	db1a      	blt.n	8008858 <_strtol_l.isra.0+0xc4>
 8008822:	2501      	movs	r5, #1
 8008824:	fb00 4003 	mla	r0, r0, r3, r4
 8008828:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800882c:	e7eb      	b.n	8008806 <_strtol_l.isra.0+0x72>
 800882e:	2c2b      	cmp	r4, #43	; 0x2b
 8008830:	bf08      	it	eq
 8008832:	f89c 4000 	ldrbeq.w	r4, [ip]
 8008836:	46a8      	mov	r8, r5
 8008838:	bf08      	it	eq
 800883a:	f100 0c02 	addeq.w	ip, r0, #2
 800883e:	e7c8      	b.n	80087d2 <_strtol_l.isra.0+0x3e>
 8008840:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 8008844:	2e19      	cmp	r6, #25
 8008846:	d801      	bhi.n	800884c <_strtol_l.isra.0+0xb8>
 8008848:	3c37      	subs	r4, #55	; 0x37
 800884a:	e7e1      	b.n	8008810 <_strtol_l.isra.0+0x7c>
 800884c:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 8008850:	2e19      	cmp	r6, #25
 8008852:	d804      	bhi.n	800885e <_strtol_l.isra.0+0xca>
 8008854:	3c57      	subs	r4, #87	; 0x57
 8008856:	e7db      	b.n	8008810 <_strtol_l.isra.0+0x7c>
 8008858:	f04f 35ff 	mov.w	r5, #4294967295
 800885c:	e7e4      	b.n	8008828 <_strtol_l.isra.0+0x94>
 800885e:	2d00      	cmp	r5, #0
 8008860:	da08      	bge.n	8008874 <_strtol_l.isra.0+0xe0>
 8008862:	2322      	movs	r3, #34	; 0x22
 8008864:	4638      	mov	r0, r7
 8008866:	f8ce 3000 	str.w	r3, [lr]
 800886a:	2a00      	cmp	r2, #0
 800886c:	d09e      	beq.n	80087ac <_strtol_l.isra.0+0x18>
 800886e:	f10c 31ff 	add.w	r1, ip, #4294967295
 8008872:	e007      	b.n	8008884 <_strtol_l.isra.0+0xf0>
 8008874:	f1b8 0f00 	cmp.w	r8, #0
 8008878:	d000      	beq.n	800887c <_strtol_l.isra.0+0xe8>
 800887a:	4240      	negs	r0, r0
 800887c:	2a00      	cmp	r2, #0
 800887e:	d095      	beq.n	80087ac <_strtol_l.isra.0+0x18>
 8008880:	2d00      	cmp	r5, #0
 8008882:	d1f4      	bne.n	800886e <_strtol_l.isra.0+0xda>
 8008884:	6011      	str	r1, [r2, #0]
 8008886:	e791      	b.n	80087ac <_strtol_l.isra.0+0x18>
 8008888:	2430      	movs	r4, #48	; 0x30
 800888a:	2b00      	cmp	r3, #0
 800888c:	d1b2      	bne.n	80087f4 <_strtol_l.isra.0+0x60>
 800888e:	2308      	movs	r3, #8
 8008890:	e7b0      	b.n	80087f4 <_strtol_l.isra.0+0x60>
 8008892:	2c30      	cmp	r4, #48	; 0x30
 8008894:	d0a3      	beq.n	80087de <_strtol_l.isra.0+0x4a>
 8008896:	230a      	movs	r3, #10
 8008898:	e7ac      	b.n	80087f4 <_strtol_l.isra.0+0x60>
 800889a:	bf00      	nop
 800889c:	0800c231 	.word	0x0800c231

080088a0 <_strtol_r>:
 80088a0:	f7ff bf78 	b.w	8008794 <_strtol_l.isra.0>

080088a4 <_write_r>:
 80088a4:	b538      	push	{r3, r4, r5, lr}
 80088a6:	4604      	mov	r4, r0
 80088a8:	4608      	mov	r0, r1
 80088aa:	4611      	mov	r1, r2
 80088ac:	2200      	movs	r2, #0
 80088ae:	4d05      	ldr	r5, [pc, #20]	; (80088c4 <_write_r+0x20>)
 80088b0:	602a      	str	r2, [r5, #0]
 80088b2:	461a      	mov	r2, r3
 80088b4:	f7fa f8de 	bl	8002a74 <_write>
 80088b8:	1c43      	adds	r3, r0, #1
 80088ba:	d102      	bne.n	80088c2 <_write_r+0x1e>
 80088bc:	682b      	ldr	r3, [r5, #0]
 80088be:	b103      	cbz	r3, 80088c2 <_write_r+0x1e>
 80088c0:	6023      	str	r3, [r4, #0]
 80088c2:	bd38      	pop	{r3, r4, r5, pc}
 80088c4:	20000418 	.word	0x20000418

080088c8 <_close_r>:
 80088c8:	b538      	push	{r3, r4, r5, lr}
 80088ca:	2300      	movs	r3, #0
 80088cc:	4d05      	ldr	r5, [pc, #20]	; (80088e4 <_close_r+0x1c>)
 80088ce:	4604      	mov	r4, r0
 80088d0:	4608      	mov	r0, r1
 80088d2:	602b      	str	r3, [r5, #0]
 80088d4:	f7fa f8ea 	bl	8002aac <_close>
 80088d8:	1c43      	adds	r3, r0, #1
 80088da:	d102      	bne.n	80088e2 <_close_r+0x1a>
 80088dc:	682b      	ldr	r3, [r5, #0]
 80088de:	b103      	cbz	r3, 80088e2 <_close_r+0x1a>
 80088e0:	6023      	str	r3, [r4, #0]
 80088e2:	bd38      	pop	{r3, r4, r5, pc}
 80088e4:	20000418 	.word	0x20000418

080088e8 <quorem>:
 80088e8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088ec:	6903      	ldr	r3, [r0, #16]
 80088ee:	690c      	ldr	r4, [r1, #16]
 80088f0:	4607      	mov	r7, r0
 80088f2:	42a3      	cmp	r3, r4
 80088f4:	f2c0 8083 	blt.w	80089fe <quorem+0x116>
 80088f8:	3c01      	subs	r4, #1
 80088fa:	f100 0514 	add.w	r5, r0, #20
 80088fe:	f101 0814 	add.w	r8, r1, #20
 8008902:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008906:	9301      	str	r3, [sp, #4]
 8008908:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800890c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008910:	3301      	adds	r3, #1
 8008912:	429a      	cmp	r2, r3
 8008914:	fbb2 f6f3 	udiv	r6, r2, r3
 8008918:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800891c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008920:	d332      	bcc.n	8008988 <quorem+0xa0>
 8008922:	f04f 0e00 	mov.w	lr, #0
 8008926:	4640      	mov	r0, r8
 8008928:	46ac      	mov	ip, r5
 800892a:	46f2      	mov	sl, lr
 800892c:	f850 2b04 	ldr.w	r2, [r0], #4
 8008930:	b293      	uxth	r3, r2
 8008932:	fb06 e303 	mla	r3, r6, r3, lr
 8008936:	0c12      	lsrs	r2, r2, #16
 8008938:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800893c:	fb06 e202 	mla	r2, r6, r2, lr
 8008940:	b29b      	uxth	r3, r3
 8008942:	ebaa 0303 	sub.w	r3, sl, r3
 8008946:	f8dc a000 	ldr.w	sl, [ip]
 800894a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800894e:	fa1f fa8a 	uxth.w	sl, sl
 8008952:	4453      	add	r3, sl
 8008954:	fa1f fa82 	uxth.w	sl, r2
 8008958:	f8dc 2000 	ldr.w	r2, [ip]
 800895c:	4581      	cmp	r9, r0
 800895e:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8008962:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008966:	b29b      	uxth	r3, r3
 8008968:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800896c:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008970:	f84c 3b04 	str.w	r3, [ip], #4
 8008974:	d2da      	bcs.n	800892c <quorem+0x44>
 8008976:	f855 300b 	ldr.w	r3, [r5, fp]
 800897a:	b92b      	cbnz	r3, 8008988 <quorem+0xa0>
 800897c:	9b01      	ldr	r3, [sp, #4]
 800897e:	3b04      	subs	r3, #4
 8008980:	429d      	cmp	r5, r3
 8008982:	461a      	mov	r2, r3
 8008984:	d32f      	bcc.n	80089e6 <quorem+0xfe>
 8008986:	613c      	str	r4, [r7, #16]
 8008988:	4638      	mov	r0, r7
 800898a:	f001 fca1 	bl	800a2d0 <__mcmp>
 800898e:	2800      	cmp	r0, #0
 8008990:	db25      	blt.n	80089de <quorem+0xf6>
 8008992:	4628      	mov	r0, r5
 8008994:	f04f 0c00 	mov.w	ip, #0
 8008998:	3601      	adds	r6, #1
 800899a:	f858 1b04 	ldr.w	r1, [r8], #4
 800899e:	f8d0 e000 	ldr.w	lr, [r0]
 80089a2:	b28b      	uxth	r3, r1
 80089a4:	ebac 0303 	sub.w	r3, ip, r3
 80089a8:	fa1f f28e 	uxth.w	r2, lr
 80089ac:	4413      	add	r3, r2
 80089ae:	0c0a      	lsrs	r2, r1, #16
 80089b0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80089b4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80089b8:	b29b      	uxth	r3, r3
 80089ba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80089be:	45c1      	cmp	r9, r8
 80089c0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80089c4:	f840 3b04 	str.w	r3, [r0], #4
 80089c8:	d2e7      	bcs.n	800899a <quorem+0xb2>
 80089ca:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80089ce:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80089d2:	b922      	cbnz	r2, 80089de <quorem+0xf6>
 80089d4:	3b04      	subs	r3, #4
 80089d6:	429d      	cmp	r5, r3
 80089d8:	461a      	mov	r2, r3
 80089da:	d30a      	bcc.n	80089f2 <quorem+0x10a>
 80089dc:	613c      	str	r4, [r7, #16]
 80089de:	4630      	mov	r0, r6
 80089e0:	b003      	add	sp, #12
 80089e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089e6:	6812      	ldr	r2, [r2, #0]
 80089e8:	3b04      	subs	r3, #4
 80089ea:	2a00      	cmp	r2, #0
 80089ec:	d1cb      	bne.n	8008986 <quorem+0x9e>
 80089ee:	3c01      	subs	r4, #1
 80089f0:	e7c6      	b.n	8008980 <quorem+0x98>
 80089f2:	6812      	ldr	r2, [r2, #0]
 80089f4:	3b04      	subs	r3, #4
 80089f6:	2a00      	cmp	r2, #0
 80089f8:	d1f0      	bne.n	80089dc <quorem+0xf4>
 80089fa:	3c01      	subs	r4, #1
 80089fc:	e7eb      	b.n	80089d6 <quorem+0xee>
 80089fe:	2000      	movs	r0, #0
 8008a00:	e7ee      	b.n	80089e0 <quorem+0xf8>
 8008a02:	0000      	movs	r0, r0
 8008a04:	0000      	movs	r0, r0
	...

08008a08 <_dtoa_r>:
 8008a08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a0c:	4616      	mov	r6, r2
 8008a0e:	461f      	mov	r7, r3
 8008a10:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8008a12:	b099      	sub	sp, #100	; 0x64
 8008a14:	4605      	mov	r5, r0
 8008a16:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8008a1a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8008a1e:	b974      	cbnz	r4, 8008a3e <_dtoa_r+0x36>
 8008a20:	2010      	movs	r0, #16
 8008a22:	f001 f95b 	bl	8009cdc <malloc>
 8008a26:	4602      	mov	r2, r0
 8008a28:	6268      	str	r0, [r5, #36]	; 0x24
 8008a2a:	b920      	cbnz	r0, 8008a36 <_dtoa_r+0x2e>
 8008a2c:	21ea      	movs	r1, #234	; 0xea
 8008a2e:	4bae      	ldr	r3, [pc, #696]	; (8008ce8 <_dtoa_r+0x2e0>)
 8008a30:	48ae      	ldr	r0, [pc, #696]	; (8008cec <_dtoa_r+0x2e4>)
 8008a32:	f002 fca7 	bl	800b384 <__assert_func>
 8008a36:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008a3a:	6004      	str	r4, [r0, #0]
 8008a3c:	60c4      	str	r4, [r0, #12]
 8008a3e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008a40:	6819      	ldr	r1, [r3, #0]
 8008a42:	b151      	cbz	r1, 8008a5a <_dtoa_r+0x52>
 8008a44:	685a      	ldr	r2, [r3, #4]
 8008a46:	2301      	movs	r3, #1
 8008a48:	4093      	lsls	r3, r2
 8008a4a:	604a      	str	r2, [r1, #4]
 8008a4c:	608b      	str	r3, [r1, #8]
 8008a4e:	4628      	mov	r0, r5
 8008a50:	f001 f9ba 	bl	8009dc8 <_Bfree>
 8008a54:	2200      	movs	r2, #0
 8008a56:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008a58:	601a      	str	r2, [r3, #0]
 8008a5a:	1e3b      	subs	r3, r7, #0
 8008a5c:	bfaf      	iteee	ge
 8008a5e:	2300      	movge	r3, #0
 8008a60:	2201      	movlt	r2, #1
 8008a62:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008a66:	9305      	strlt	r3, [sp, #20]
 8008a68:	bfa8      	it	ge
 8008a6a:	f8c8 3000 	strge.w	r3, [r8]
 8008a6e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8008a72:	4b9f      	ldr	r3, [pc, #636]	; (8008cf0 <_dtoa_r+0x2e8>)
 8008a74:	bfb8      	it	lt
 8008a76:	f8c8 2000 	strlt.w	r2, [r8]
 8008a7a:	ea33 0309 	bics.w	r3, r3, r9
 8008a7e:	d119      	bne.n	8008ab4 <_dtoa_r+0xac>
 8008a80:	f242 730f 	movw	r3, #9999	; 0x270f
 8008a84:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8008a86:	6013      	str	r3, [r2, #0]
 8008a88:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008a8c:	4333      	orrs	r3, r6
 8008a8e:	f000 8580 	beq.w	8009592 <_dtoa_r+0xb8a>
 8008a92:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008a94:	b953      	cbnz	r3, 8008aac <_dtoa_r+0xa4>
 8008a96:	4b97      	ldr	r3, [pc, #604]	; (8008cf4 <_dtoa_r+0x2ec>)
 8008a98:	e022      	b.n	8008ae0 <_dtoa_r+0xd8>
 8008a9a:	4b97      	ldr	r3, [pc, #604]	; (8008cf8 <_dtoa_r+0x2f0>)
 8008a9c:	9308      	str	r3, [sp, #32]
 8008a9e:	3308      	adds	r3, #8
 8008aa0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8008aa2:	6013      	str	r3, [r2, #0]
 8008aa4:	9808      	ldr	r0, [sp, #32]
 8008aa6:	b019      	add	sp, #100	; 0x64
 8008aa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008aac:	4b91      	ldr	r3, [pc, #580]	; (8008cf4 <_dtoa_r+0x2ec>)
 8008aae:	9308      	str	r3, [sp, #32]
 8008ab0:	3303      	adds	r3, #3
 8008ab2:	e7f5      	b.n	8008aa0 <_dtoa_r+0x98>
 8008ab4:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8008ab8:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8008abc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008ac0:	2200      	movs	r2, #0
 8008ac2:	2300      	movs	r3, #0
 8008ac4:	f7f8 f890 	bl	8000be8 <__aeabi_dcmpeq>
 8008ac8:	4680      	mov	r8, r0
 8008aca:	b158      	cbz	r0, 8008ae4 <_dtoa_r+0xdc>
 8008acc:	2301      	movs	r3, #1
 8008ace:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8008ad0:	6013      	str	r3, [r2, #0]
 8008ad2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	f000 8559 	beq.w	800958c <_dtoa_r+0xb84>
 8008ada:	4888      	ldr	r0, [pc, #544]	; (8008cfc <_dtoa_r+0x2f4>)
 8008adc:	6018      	str	r0, [r3, #0]
 8008ade:	1e43      	subs	r3, r0, #1
 8008ae0:	9308      	str	r3, [sp, #32]
 8008ae2:	e7df      	b.n	8008aa4 <_dtoa_r+0x9c>
 8008ae4:	ab16      	add	r3, sp, #88	; 0x58
 8008ae6:	9301      	str	r3, [sp, #4]
 8008ae8:	ab17      	add	r3, sp, #92	; 0x5c
 8008aea:	9300      	str	r3, [sp, #0]
 8008aec:	4628      	mov	r0, r5
 8008aee:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8008af2:	f001 fd13 	bl	800a51c <__d2b>
 8008af6:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8008afa:	4682      	mov	sl, r0
 8008afc:	2c00      	cmp	r4, #0
 8008afe:	d07e      	beq.n	8008bfe <_dtoa_r+0x1f6>
 8008b00:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008b04:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008b06:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8008b0a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008b0e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8008b12:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8008b16:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8008b1a:	2200      	movs	r2, #0
 8008b1c:	4b78      	ldr	r3, [pc, #480]	; (8008d00 <_dtoa_r+0x2f8>)
 8008b1e:	f7f7 fc43 	bl	80003a8 <__aeabi_dsub>
 8008b22:	a36b      	add	r3, pc, #428	; (adr r3, 8008cd0 <_dtoa_r+0x2c8>)
 8008b24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b28:	f7f7 fdf6 	bl	8000718 <__aeabi_dmul>
 8008b2c:	a36a      	add	r3, pc, #424	; (adr r3, 8008cd8 <_dtoa_r+0x2d0>)
 8008b2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b32:	f7f7 fc3b 	bl	80003ac <__adddf3>
 8008b36:	4606      	mov	r6, r0
 8008b38:	4620      	mov	r0, r4
 8008b3a:	460f      	mov	r7, r1
 8008b3c:	f7f7 fd82 	bl	8000644 <__aeabi_i2d>
 8008b40:	a367      	add	r3, pc, #412	; (adr r3, 8008ce0 <_dtoa_r+0x2d8>)
 8008b42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b46:	f7f7 fde7 	bl	8000718 <__aeabi_dmul>
 8008b4a:	4602      	mov	r2, r0
 8008b4c:	460b      	mov	r3, r1
 8008b4e:	4630      	mov	r0, r6
 8008b50:	4639      	mov	r1, r7
 8008b52:	f7f7 fc2b 	bl	80003ac <__adddf3>
 8008b56:	4606      	mov	r6, r0
 8008b58:	460f      	mov	r7, r1
 8008b5a:	f7f8 f88d 	bl	8000c78 <__aeabi_d2iz>
 8008b5e:	2200      	movs	r2, #0
 8008b60:	4681      	mov	r9, r0
 8008b62:	2300      	movs	r3, #0
 8008b64:	4630      	mov	r0, r6
 8008b66:	4639      	mov	r1, r7
 8008b68:	f7f8 f848 	bl	8000bfc <__aeabi_dcmplt>
 8008b6c:	b148      	cbz	r0, 8008b82 <_dtoa_r+0x17a>
 8008b6e:	4648      	mov	r0, r9
 8008b70:	f7f7 fd68 	bl	8000644 <__aeabi_i2d>
 8008b74:	4632      	mov	r2, r6
 8008b76:	463b      	mov	r3, r7
 8008b78:	f7f8 f836 	bl	8000be8 <__aeabi_dcmpeq>
 8008b7c:	b908      	cbnz	r0, 8008b82 <_dtoa_r+0x17a>
 8008b7e:	f109 39ff 	add.w	r9, r9, #4294967295
 8008b82:	f1b9 0f16 	cmp.w	r9, #22
 8008b86:	d857      	bhi.n	8008c38 <_dtoa_r+0x230>
 8008b88:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008b8c:	4b5d      	ldr	r3, [pc, #372]	; (8008d04 <_dtoa_r+0x2fc>)
 8008b8e:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8008b92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b96:	f7f8 f831 	bl	8000bfc <__aeabi_dcmplt>
 8008b9a:	2800      	cmp	r0, #0
 8008b9c:	d04e      	beq.n	8008c3c <_dtoa_r+0x234>
 8008b9e:	2300      	movs	r3, #0
 8008ba0:	f109 39ff 	add.w	r9, r9, #4294967295
 8008ba4:	930f      	str	r3, [sp, #60]	; 0x3c
 8008ba6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8008ba8:	1b1c      	subs	r4, r3, r4
 8008baa:	1e63      	subs	r3, r4, #1
 8008bac:	9309      	str	r3, [sp, #36]	; 0x24
 8008bae:	bf49      	itett	mi
 8008bb0:	f1c4 0301 	rsbmi	r3, r4, #1
 8008bb4:	2300      	movpl	r3, #0
 8008bb6:	9306      	strmi	r3, [sp, #24]
 8008bb8:	2300      	movmi	r3, #0
 8008bba:	bf54      	ite	pl
 8008bbc:	9306      	strpl	r3, [sp, #24]
 8008bbe:	9309      	strmi	r3, [sp, #36]	; 0x24
 8008bc0:	f1b9 0f00 	cmp.w	r9, #0
 8008bc4:	db3c      	blt.n	8008c40 <_dtoa_r+0x238>
 8008bc6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008bc8:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8008bcc:	444b      	add	r3, r9
 8008bce:	9309      	str	r3, [sp, #36]	; 0x24
 8008bd0:	2300      	movs	r3, #0
 8008bd2:	930a      	str	r3, [sp, #40]	; 0x28
 8008bd4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008bd6:	2b09      	cmp	r3, #9
 8008bd8:	d86c      	bhi.n	8008cb4 <_dtoa_r+0x2ac>
 8008bda:	2b05      	cmp	r3, #5
 8008bdc:	bfc4      	itt	gt
 8008bde:	3b04      	subgt	r3, #4
 8008be0:	9322      	strgt	r3, [sp, #136]	; 0x88
 8008be2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008be4:	bfc8      	it	gt
 8008be6:	2400      	movgt	r4, #0
 8008be8:	f1a3 0302 	sub.w	r3, r3, #2
 8008bec:	bfd8      	it	le
 8008bee:	2401      	movle	r4, #1
 8008bf0:	2b03      	cmp	r3, #3
 8008bf2:	f200 808b 	bhi.w	8008d0c <_dtoa_r+0x304>
 8008bf6:	e8df f003 	tbb	[pc, r3]
 8008bfa:	4f2d      	.short	0x4f2d
 8008bfc:	5b4d      	.short	0x5b4d
 8008bfe:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8008c02:	441c      	add	r4, r3
 8008c04:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8008c08:	2b20      	cmp	r3, #32
 8008c0a:	bfc3      	ittte	gt
 8008c0c:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008c10:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8008c14:	fa09 f303 	lslgt.w	r3, r9, r3
 8008c18:	f1c3 0320 	rsble	r3, r3, #32
 8008c1c:	bfc6      	itte	gt
 8008c1e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8008c22:	4318      	orrgt	r0, r3
 8008c24:	fa06 f003 	lslle.w	r0, r6, r3
 8008c28:	f7f7 fcfc 	bl	8000624 <__aeabi_ui2d>
 8008c2c:	2301      	movs	r3, #1
 8008c2e:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8008c32:	3c01      	subs	r4, #1
 8008c34:	9313      	str	r3, [sp, #76]	; 0x4c
 8008c36:	e770      	b.n	8008b1a <_dtoa_r+0x112>
 8008c38:	2301      	movs	r3, #1
 8008c3a:	e7b3      	b.n	8008ba4 <_dtoa_r+0x19c>
 8008c3c:	900f      	str	r0, [sp, #60]	; 0x3c
 8008c3e:	e7b2      	b.n	8008ba6 <_dtoa_r+0x19e>
 8008c40:	9b06      	ldr	r3, [sp, #24]
 8008c42:	eba3 0309 	sub.w	r3, r3, r9
 8008c46:	9306      	str	r3, [sp, #24]
 8008c48:	f1c9 0300 	rsb	r3, r9, #0
 8008c4c:	930a      	str	r3, [sp, #40]	; 0x28
 8008c4e:	2300      	movs	r3, #0
 8008c50:	930e      	str	r3, [sp, #56]	; 0x38
 8008c52:	e7bf      	b.n	8008bd4 <_dtoa_r+0x1cc>
 8008c54:	2300      	movs	r3, #0
 8008c56:	930b      	str	r3, [sp, #44]	; 0x2c
 8008c58:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	dc59      	bgt.n	8008d12 <_dtoa_r+0x30a>
 8008c5e:	f04f 0b01 	mov.w	fp, #1
 8008c62:	465b      	mov	r3, fp
 8008c64:	f8cd b008 	str.w	fp, [sp, #8]
 8008c68:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 8008c6c:	2200      	movs	r2, #0
 8008c6e:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8008c70:	6042      	str	r2, [r0, #4]
 8008c72:	2204      	movs	r2, #4
 8008c74:	f102 0614 	add.w	r6, r2, #20
 8008c78:	429e      	cmp	r6, r3
 8008c7a:	6841      	ldr	r1, [r0, #4]
 8008c7c:	d94f      	bls.n	8008d1e <_dtoa_r+0x316>
 8008c7e:	4628      	mov	r0, r5
 8008c80:	f001 f862 	bl	8009d48 <_Balloc>
 8008c84:	9008      	str	r0, [sp, #32]
 8008c86:	2800      	cmp	r0, #0
 8008c88:	d14d      	bne.n	8008d26 <_dtoa_r+0x31e>
 8008c8a:	4602      	mov	r2, r0
 8008c8c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008c90:	4b1d      	ldr	r3, [pc, #116]	; (8008d08 <_dtoa_r+0x300>)
 8008c92:	e6cd      	b.n	8008a30 <_dtoa_r+0x28>
 8008c94:	2301      	movs	r3, #1
 8008c96:	e7de      	b.n	8008c56 <_dtoa_r+0x24e>
 8008c98:	2300      	movs	r3, #0
 8008c9a:	930b      	str	r3, [sp, #44]	; 0x2c
 8008c9c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008c9e:	eb09 0b03 	add.w	fp, r9, r3
 8008ca2:	f10b 0301 	add.w	r3, fp, #1
 8008ca6:	2b01      	cmp	r3, #1
 8008ca8:	9302      	str	r3, [sp, #8]
 8008caa:	bfb8      	it	lt
 8008cac:	2301      	movlt	r3, #1
 8008cae:	e7dd      	b.n	8008c6c <_dtoa_r+0x264>
 8008cb0:	2301      	movs	r3, #1
 8008cb2:	e7f2      	b.n	8008c9a <_dtoa_r+0x292>
 8008cb4:	2401      	movs	r4, #1
 8008cb6:	2300      	movs	r3, #0
 8008cb8:	940b      	str	r4, [sp, #44]	; 0x2c
 8008cba:	9322      	str	r3, [sp, #136]	; 0x88
 8008cbc:	f04f 3bff 	mov.w	fp, #4294967295
 8008cc0:	2200      	movs	r2, #0
 8008cc2:	2312      	movs	r3, #18
 8008cc4:	f8cd b008 	str.w	fp, [sp, #8]
 8008cc8:	9223      	str	r2, [sp, #140]	; 0x8c
 8008cca:	e7cf      	b.n	8008c6c <_dtoa_r+0x264>
 8008ccc:	f3af 8000 	nop.w
 8008cd0:	636f4361 	.word	0x636f4361
 8008cd4:	3fd287a7 	.word	0x3fd287a7
 8008cd8:	8b60c8b3 	.word	0x8b60c8b3
 8008cdc:	3fc68a28 	.word	0x3fc68a28
 8008ce0:	509f79fb 	.word	0x509f79fb
 8008ce4:	3fd34413 	.word	0x3fd34413
 8008ce8:	0800c33e 	.word	0x0800c33e
 8008cec:	0800c355 	.word	0x0800c355
 8008cf0:	7ff00000 	.word	0x7ff00000
 8008cf4:	0800c33a 	.word	0x0800c33a
 8008cf8:	0800c331 	.word	0x0800c331
 8008cfc:	0800c5ba 	.word	0x0800c5ba
 8008d00:	3ff80000 	.word	0x3ff80000
 8008d04:	0800c4d0 	.word	0x0800c4d0
 8008d08:	0800c3b4 	.word	0x0800c3b4
 8008d0c:	2301      	movs	r3, #1
 8008d0e:	930b      	str	r3, [sp, #44]	; 0x2c
 8008d10:	e7d4      	b.n	8008cbc <_dtoa_r+0x2b4>
 8008d12:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 8008d16:	465b      	mov	r3, fp
 8008d18:	f8cd b008 	str.w	fp, [sp, #8]
 8008d1c:	e7a6      	b.n	8008c6c <_dtoa_r+0x264>
 8008d1e:	3101      	adds	r1, #1
 8008d20:	6041      	str	r1, [r0, #4]
 8008d22:	0052      	lsls	r2, r2, #1
 8008d24:	e7a6      	b.n	8008c74 <_dtoa_r+0x26c>
 8008d26:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008d28:	9a08      	ldr	r2, [sp, #32]
 8008d2a:	601a      	str	r2, [r3, #0]
 8008d2c:	9b02      	ldr	r3, [sp, #8]
 8008d2e:	2b0e      	cmp	r3, #14
 8008d30:	f200 80a8 	bhi.w	8008e84 <_dtoa_r+0x47c>
 8008d34:	2c00      	cmp	r4, #0
 8008d36:	f000 80a5 	beq.w	8008e84 <_dtoa_r+0x47c>
 8008d3a:	f1b9 0f00 	cmp.w	r9, #0
 8008d3e:	dd34      	ble.n	8008daa <_dtoa_r+0x3a2>
 8008d40:	4a9a      	ldr	r2, [pc, #616]	; (8008fac <_dtoa_r+0x5a4>)
 8008d42:	f009 030f 	and.w	r3, r9, #15
 8008d46:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008d4a:	f419 7f80 	tst.w	r9, #256	; 0x100
 8008d4e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008d52:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8008d56:	ea4f 1429 	mov.w	r4, r9, asr #4
 8008d5a:	d016      	beq.n	8008d8a <_dtoa_r+0x382>
 8008d5c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008d60:	4b93      	ldr	r3, [pc, #588]	; (8008fb0 <_dtoa_r+0x5a8>)
 8008d62:	2703      	movs	r7, #3
 8008d64:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008d68:	f7f7 fe00 	bl	800096c <__aeabi_ddiv>
 8008d6c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008d70:	f004 040f 	and.w	r4, r4, #15
 8008d74:	4e8e      	ldr	r6, [pc, #568]	; (8008fb0 <_dtoa_r+0x5a8>)
 8008d76:	b954      	cbnz	r4, 8008d8e <_dtoa_r+0x386>
 8008d78:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008d7c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008d80:	f7f7 fdf4 	bl	800096c <__aeabi_ddiv>
 8008d84:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008d88:	e029      	b.n	8008dde <_dtoa_r+0x3d6>
 8008d8a:	2702      	movs	r7, #2
 8008d8c:	e7f2      	b.n	8008d74 <_dtoa_r+0x36c>
 8008d8e:	07e1      	lsls	r1, r4, #31
 8008d90:	d508      	bpl.n	8008da4 <_dtoa_r+0x39c>
 8008d92:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008d96:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008d9a:	f7f7 fcbd 	bl	8000718 <__aeabi_dmul>
 8008d9e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008da2:	3701      	adds	r7, #1
 8008da4:	1064      	asrs	r4, r4, #1
 8008da6:	3608      	adds	r6, #8
 8008da8:	e7e5      	b.n	8008d76 <_dtoa_r+0x36e>
 8008daa:	f000 80a5 	beq.w	8008ef8 <_dtoa_r+0x4f0>
 8008dae:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008db2:	f1c9 0400 	rsb	r4, r9, #0
 8008db6:	4b7d      	ldr	r3, [pc, #500]	; (8008fac <_dtoa_r+0x5a4>)
 8008db8:	f004 020f 	and.w	r2, r4, #15
 8008dbc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008dc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dc4:	f7f7 fca8 	bl	8000718 <__aeabi_dmul>
 8008dc8:	2702      	movs	r7, #2
 8008dca:	2300      	movs	r3, #0
 8008dcc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008dd0:	4e77      	ldr	r6, [pc, #476]	; (8008fb0 <_dtoa_r+0x5a8>)
 8008dd2:	1124      	asrs	r4, r4, #4
 8008dd4:	2c00      	cmp	r4, #0
 8008dd6:	f040 8084 	bne.w	8008ee2 <_dtoa_r+0x4da>
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d1d2      	bne.n	8008d84 <_dtoa_r+0x37c>
 8008dde:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	f000 808b 	beq.w	8008efc <_dtoa_r+0x4f4>
 8008de6:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8008dea:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8008dee:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008df2:	2200      	movs	r2, #0
 8008df4:	4b6f      	ldr	r3, [pc, #444]	; (8008fb4 <_dtoa_r+0x5ac>)
 8008df6:	f7f7 ff01 	bl	8000bfc <__aeabi_dcmplt>
 8008dfa:	2800      	cmp	r0, #0
 8008dfc:	d07e      	beq.n	8008efc <_dtoa_r+0x4f4>
 8008dfe:	9b02      	ldr	r3, [sp, #8]
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d07b      	beq.n	8008efc <_dtoa_r+0x4f4>
 8008e04:	f1bb 0f00 	cmp.w	fp, #0
 8008e08:	dd38      	ble.n	8008e7c <_dtoa_r+0x474>
 8008e0a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008e0e:	2200      	movs	r2, #0
 8008e10:	4b69      	ldr	r3, [pc, #420]	; (8008fb8 <_dtoa_r+0x5b0>)
 8008e12:	f7f7 fc81 	bl	8000718 <__aeabi_dmul>
 8008e16:	465c      	mov	r4, fp
 8008e18:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008e1c:	f109 38ff 	add.w	r8, r9, #4294967295
 8008e20:	3701      	adds	r7, #1
 8008e22:	4638      	mov	r0, r7
 8008e24:	f7f7 fc0e 	bl	8000644 <__aeabi_i2d>
 8008e28:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008e2c:	f7f7 fc74 	bl	8000718 <__aeabi_dmul>
 8008e30:	2200      	movs	r2, #0
 8008e32:	4b62      	ldr	r3, [pc, #392]	; (8008fbc <_dtoa_r+0x5b4>)
 8008e34:	f7f7 faba 	bl	80003ac <__adddf3>
 8008e38:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8008e3c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008e40:	9611      	str	r6, [sp, #68]	; 0x44
 8008e42:	2c00      	cmp	r4, #0
 8008e44:	d15d      	bne.n	8008f02 <_dtoa_r+0x4fa>
 8008e46:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008e4a:	2200      	movs	r2, #0
 8008e4c:	4b5c      	ldr	r3, [pc, #368]	; (8008fc0 <_dtoa_r+0x5b8>)
 8008e4e:	f7f7 faab 	bl	80003a8 <__aeabi_dsub>
 8008e52:	4602      	mov	r2, r0
 8008e54:	460b      	mov	r3, r1
 8008e56:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008e5a:	4633      	mov	r3, r6
 8008e5c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008e5e:	f7f7 feeb 	bl	8000c38 <__aeabi_dcmpgt>
 8008e62:	2800      	cmp	r0, #0
 8008e64:	f040 829e 	bne.w	80093a4 <_dtoa_r+0x99c>
 8008e68:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008e6c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008e6e:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8008e72:	f7f7 fec3 	bl	8000bfc <__aeabi_dcmplt>
 8008e76:	2800      	cmp	r0, #0
 8008e78:	f040 8292 	bne.w	80093a0 <_dtoa_r+0x998>
 8008e7c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8008e80:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8008e84:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	f2c0 8153 	blt.w	8009132 <_dtoa_r+0x72a>
 8008e8c:	f1b9 0f0e 	cmp.w	r9, #14
 8008e90:	f300 814f 	bgt.w	8009132 <_dtoa_r+0x72a>
 8008e94:	4b45      	ldr	r3, [pc, #276]	; (8008fac <_dtoa_r+0x5a4>)
 8008e96:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8008e9a:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008e9e:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8008ea2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	f280 80db 	bge.w	8009060 <_dtoa_r+0x658>
 8008eaa:	9b02      	ldr	r3, [sp, #8]
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	f300 80d7 	bgt.w	8009060 <_dtoa_r+0x658>
 8008eb2:	f040 8274 	bne.w	800939e <_dtoa_r+0x996>
 8008eb6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008eba:	2200      	movs	r2, #0
 8008ebc:	4b40      	ldr	r3, [pc, #256]	; (8008fc0 <_dtoa_r+0x5b8>)
 8008ebe:	f7f7 fc2b 	bl	8000718 <__aeabi_dmul>
 8008ec2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008ec6:	f7f7 fead 	bl	8000c24 <__aeabi_dcmpge>
 8008eca:	9c02      	ldr	r4, [sp, #8]
 8008ecc:	4626      	mov	r6, r4
 8008ece:	2800      	cmp	r0, #0
 8008ed0:	f040 824a 	bne.w	8009368 <_dtoa_r+0x960>
 8008ed4:	2331      	movs	r3, #49	; 0x31
 8008ed6:	9f08      	ldr	r7, [sp, #32]
 8008ed8:	f109 0901 	add.w	r9, r9, #1
 8008edc:	f807 3b01 	strb.w	r3, [r7], #1
 8008ee0:	e246      	b.n	8009370 <_dtoa_r+0x968>
 8008ee2:	07e2      	lsls	r2, r4, #31
 8008ee4:	d505      	bpl.n	8008ef2 <_dtoa_r+0x4ea>
 8008ee6:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008eea:	f7f7 fc15 	bl	8000718 <__aeabi_dmul>
 8008eee:	2301      	movs	r3, #1
 8008ef0:	3701      	adds	r7, #1
 8008ef2:	1064      	asrs	r4, r4, #1
 8008ef4:	3608      	adds	r6, #8
 8008ef6:	e76d      	b.n	8008dd4 <_dtoa_r+0x3cc>
 8008ef8:	2702      	movs	r7, #2
 8008efa:	e770      	b.n	8008dde <_dtoa_r+0x3d6>
 8008efc:	46c8      	mov	r8, r9
 8008efe:	9c02      	ldr	r4, [sp, #8]
 8008f00:	e78f      	b.n	8008e22 <_dtoa_r+0x41a>
 8008f02:	9908      	ldr	r1, [sp, #32]
 8008f04:	4b29      	ldr	r3, [pc, #164]	; (8008fac <_dtoa_r+0x5a4>)
 8008f06:	4421      	add	r1, r4
 8008f08:	9112      	str	r1, [sp, #72]	; 0x48
 8008f0a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008f0c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008f10:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8008f14:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008f18:	2900      	cmp	r1, #0
 8008f1a:	d055      	beq.n	8008fc8 <_dtoa_r+0x5c0>
 8008f1c:	2000      	movs	r0, #0
 8008f1e:	4929      	ldr	r1, [pc, #164]	; (8008fc4 <_dtoa_r+0x5bc>)
 8008f20:	f7f7 fd24 	bl	800096c <__aeabi_ddiv>
 8008f24:	463b      	mov	r3, r7
 8008f26:	4632      	mov	r2, r6
 8008f28:	f7f7 fa3e 	bl	80003a8 <__aeabi_dsub>
 8008f2c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008f30:	9f08      	ldr	r7, [sp, #32]
 8008f32:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008f36:	f7f7 fe9f 	bl	8000c78 <__aeabi_d2iz>
 8008f3a:	4604      	mov	r4, r0
 8008f3c:	f7f7 fb82 	bl	8000644 <__aeabi_i2d>
 8008f40:	4602      	mov	r2, r0
 8008f42:	460b      	mov	r3, r1
 8008f44:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008f48:	f7f7 fa2e 	bl	80003a8 <__aeabi_dsub>
 8008f4c:	4602      	mov	r2, r0
 8008f4e:	460b      	mov	r3, r1
 8008f50:	3430      	adds	r4, #48	; 0x30
 8008f52:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008f56:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008f5a:	f807 4b01 	strb.w	r4, [r7], #1
 8008f5e:	f7f7 fe4d 	bl	8000bfc <__aeabi_dcmplt>
 8008f62:	2800      	cmp	r0, #0
 8008f64:	d174      	bne.n	8009050 <_dtoa_r+0x648>
 8008f66:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008f6a:	2000      	movs	r0, #0
 8008f6c:	4911      	ldr	r1, [pc, #68]	; (8008fb4 <_dtoa_r+0x5ac>)
 8008f6e:	f7f7 fa1b 	bl	80003a8 <__aeabi_dsub>
 8008f72:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008f76:	f7f7 fe41 	bl	8000bfc <__aeabi_dcmplt>
 8008f7a:	2800      	cmp	r0, #0
 8008f7c:	f040 80b6 	bne.w	80090ec <_dtoa_r+0x6e4>
 8008f80:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008f82:	429f      	cmp	r7, r3
 8008f84:	f43f af7a 	beq.w	8008e7c <_dtoa_r+0x474>
 8008f88:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008f8c:	2200      	movs	r2, #0
 8008f8e:	4b0a      	ldr	r3, [pc, #40]	; (8008fb8 <_dtoa_r+0x5b0>)
 8008f90:	f7f7 fbc2 	bl	8000718 <__aeabi_dmul>
 8008f94:	2200      	movs	r2, #0
 8008f96:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008f9a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008f9e:	4b06      	ldr	r3, [pc, #24]	; (8008fb8 <_dtoa_r+0x5b0>)
 8008fa0:	f7f7 fbba 	bl	8000718 <__aeabi_dmul>
 8008fa4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008fa8:	e7c3      	b.n	8008f32 <_dtoa_r+0x52a>
 8008faa:	bf00      	nop
 8008fac:	0800c4d0 	.word	0x0800c4d0
 8008fb0:	0800c4a8 	.word	0x0800c4a8
 8008fb4:	3ff00000 	.word	0x3ff00000
 8008fb8:	40240000 	.word	0x40240000
 8008fbc:	401c0000 	.word	0x401c0000
 8008fc0:	40140000 	.word	0x40140000
 8008fc4:	3fe00000 	.word	0x3fe00000
 8008fc8:	4630      	mov	r0, r6
 8008fca:	4639      	mov	r1, r7
 8008fcc:	f7f7 fba4 	bl	8000718 <__aeabi_dmul>
 8008fd0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008fd2:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008fd6:	9c08      	ldr	r4, [sp, #32]
 8008fd8:	9314      	str	r3, [sp, #80]	; 0x50
 8008fda:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008fde:	f7f7 fe4b 	bl	8000c78 <__aeabi_d2iz>
 8008fe2:	9015      	str	r0, [sp, #84]	; 0x54
 8008fe4:	f7f7 fb2e 	bl	8000644 <__aeabi_i2d>
 8008fe8:	4602      	mov	r2, r0
 8008fea:	460b      	mov	r3, r1
 8008fec:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008ff0:	f7f7 f9da 	bl	80003a8 <__aeabi_dsub>
 8008ff4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008ff6:	4606      	mov	r6, r0
 8008ff8:	3330      	adds	r3, #48	; 0x30
 8008ffa:	f804 3b01 	strb.w	r3, [r4], #1
 8008ffe:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009000:	460f      	mov	r7, r1
 8009002:	429c      	cmp	r4, r3
 8009004:	f04f 0200 	mov.w	r2, #0
 8009008:	d124      	bne.n	8009054 <_dtoa_r+0x64c>
 800900a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800900e:	4bb3      	ldr	r3, [pc, #716]	; (80092dc <_dtoa_r+0x8d4>)
 8009010:	f7f7 f9cc 	bl	80003ac <__adddf3>
 8009014:	4602      	mov	r2, r0
 8009016:	460b      	mov	r3, r1
 8009018:	4630      	mov	r0, r6
 800901a:	4639      	mov	r1, r7
 800901c:	f7f7 fe0c 	bl	8000c38 <__aeabi_dcmpgt>
 8009020:	2800      	cmp	r0, #0
 8009022:	d162      	bne.n	80090ea <_dtoa_r+0x6e2>
 8009024:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009028:	2000      	movs	r0, #0
 800902a:	49ac      	ldr	r1, [pc, #688]	; (80092dc <_dtoa_r+0x8d4>)
 800902c:	f7f7 f9bc 	bl	80003a8 <__aeabi_dsub>
 8009030:	4602      	mov	r2, r0
 8009032:	460b      	mov	r3, r1
 8009034:	4630      	mov	r0, r6
 8009036:	4639      	mov	r1, r7
 8009038:	f7f7 fde0 	bl	8000bfc <__aeabi_dcmplt>
 800903c:	2800      	cmp	r0, #0
 800903e:	f43f af1d 	beq.w	8008e7c <_dtoa_r+0x474>
 8009042:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8009044:	1e7b      	subs	r3, r7, #1
 8009046:	9314      	str	r3, [sp, #80]	; 0x50
 8009048:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800904c:	2b30      	cmp	r3, #48	; 0x30
 800904e:	d0f8      	beq.n	8009042 <_dtoa_r+0x63a>
 8009050:	46c1      	mov	r9, r8
 8009052:	e03a      	b.n	80090ca <_dtoa_r+0x6c2>
 8009054:	4ba2      	ldr	r3, [pc, #648]	; (80092e0 <_dtoa_r+0x8d8>)
 8009056:	f7f7 fb5f 	bl	8000718 <__aeabi_dmul>
 800905a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800905e:	e7bc      	b.n	8008fda <_dtoa_r+0x5d2>
 8009060:	9f08      	ldr	r7, [sp, #32]
 8009062:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009066:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800906a:	f7f7 fc7f 	bl	800096c <__aeabi_ddiv>
 800906e:	f7f7 fe03 	bl	8000c78 <__aeabi_d2iz>
 8009072:	4604      	mov	r4, r0
 8009074:	f7f7 fae6 	bl	8000644 <__aeabi_i2d>
 8009078:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800907c:	f7f7 fb4c 	bl	8000718 <__aeabi_dmul>
 8009080:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8009084:	460b      	mov	r3, r1
 8009086:	4602      	mov	r2, r0
 8009088:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800908c:	f7f7 f98c 	bl	80003a8 <__aeabi_dsub>
 8009090:	f807 6b01 	strb.w	r6, [r7], #1
 8009094:	9e08      	ldr	r6, [sp, #32]
 8009096:	9b02      	ldr	r3, [sp, #8]
 8009098:	1bbe      	subs	r6, r7, r6
 800909a:	42b3      	cmp	r3, r6
 800909c:	d13a      	bne.n	8009114 <_dtoa_r+0x70c>
 800909e:	4602      	mov	r2, r0
 80090a0:	460b      	mov	r3, r1
 80090a2:	f7f7 f983 	bl	80003ac <__adddf3>
 80090a6:	4602      	mov	r2, r0
 80090a8:	460b      	mov	r3, r1
 80090aa:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80090ae:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80090b2:	f7f7 fdc1 	bl	8000c38 <__aeabi_dcmpgt>
 80090b6:	bb58      	cbnz	r0, 8009110 <_dtoa_r+0x708>
 80090b8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80090bc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80090c0:	f7f7 fd92 	bl	8000be8 <__aeabi_dcmpeq>
 80090c4:	b108      	cbz	r0, 80090ca <_dtoa_r+0x6c2>
 80090c6:	07e1      	lsls	r1, r4, #31
 80090c8:	d422      	bmi.n	8009110 <_dtoa_r+0x708>
 80090ca:	4628      	mov	r0, r5
 80090cc:	4651      	mov	r1, sl
 80090ce:	f000 fe7b 	bl	8009dc8 <_Bfree>
 80090d2:	2300      	movs	r3, #0
 80090d4:	703b      	strb	r3, [r7, #0]
 80090d6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80090d8:	f109 0001 	add.w	r0, r9, #1
 80090dc:	6018      	str	r0, [r3, #0]
 80090de:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	f43f acdf 	beq.w	8008aa4 <_dtoa_r+0x9c>
 80090e6:	601f      	str	r7, [r3, #0]
 80090e8:	e4dc      	b.n	8008aa4 <_dtoa_r+0x9c>
 80090ea:	4627      	mov	r7, r4
 80090ec:	463b      	mov	r3, r7
 80090ee:	461f      	mov	r7, r3
 80090f0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80090f4:	2a39      	cmp	r2, #57	; 0x39
 80090f6:	d107      	bne.n	8009108 <_dtoa_r+0x700>
 80090f8:	9a08      	ldr	r2, [sp, #32]
 80090fa:	429a      	cmp	r2, r3
 80090fc:	d1f7      	bne.n	80090ee <_dtoa_r+0x6e6>
 80090fe:	2230      	movs	r2, #48	; 0x30
 8009100:	9908      	ldr	r1, [sp, #32]
 8009102:	f108 0801 	add.w	r8, r8, #1
 8009106:	700a      	strb	r2, [r1, #0]
 8009108:	781a      	ldrb	r2, [r3, #0]
 800910a:	3201      	adds	r2, #1
 800910c:	701a      	strb	r2, [r3, #0]
 800910e:	e79f      	b.n	8009050 <_dtoa_r+0x648>
 8009110:	46c8      	mov	r8, r9
 8009112:	e7eb      	b.n	80090ec <_dtoa_r+0x6e4>
 8009114:	2200      	movs	r2, #0
 8009116:	4b72      	ldr	r3, [pc, #456]	; (80092e0 <_dtoa_r+0x8d8>)
 8009118:	f7f7 fafe 	bl	8000718 <__aeabi_dmul>
 800911c:	4602      	mov	r2, r0
 800911e:	460b      	mov	r3, r1
 8009120:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009124:	2200      	movs	r2, #0
 8009126:	2300      	movs	r3, #0
 8009128:	f7f7 fd5e 	bl	8000be8 <__aeabi_dcmpeq>
 800912c:	2800      	cmp	r0, #0
 800912e:	d098      	beq.n	8009062 <_dtoa_r+0x65a>
 8009130:	e7cb      	b.n	80090ca <_dtoa_r+0x6c2>
 8009132:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009134:	2a00      	cmp	r2, #0
 8009136:	f000 80cd 	beq.w	80092d4 <_dtoa_r+0x8cc>
 800913a:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800913c:	2a01      	cmp	r2, #1
 800913e:	f300 80af 	bgt.w	80092a0 <_dtoa_r+0x898>
 8009142:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009144:	2a00      	cmp	r2, #0
 8009146:	f000 80a7 	beq.w	8009298 <_dtoa_r+0x890>
 800914a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800914e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8009150:	9f06      	ldr	r7, [sp, #24]
 8009152:	9a06      	ldr	r2, [sp, #24]
 8009154:	2101      	movs	r1, #1
 8009156:	441a      	add	r2, r3
 8009158:	9206      	str	r2, [sp, #24]
 800915a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800915c:	4628      	mov	r0, r5
 800915e:	441a      	add	r2, r3
 8009160:	9209      	str	r2, [sp, #36]	; 0x24
 8009162:	f000 ff35 	bl	8009fd0 <__i2b>
 8009166:	4606      	mov	r6, r0
 8009168:	2f00      	cmp	r7, #0
 800916a:	dd0c      	ble.n	8009186 <_dtoa_r+0x77e>
 800916c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800916e:	2b00      	cmp	r3, #0
 8009170:	dd09      	ble.n	8009186 <_dtoa_r+0x77e>
 8009172:	42bb      	cmp	r3, r7
 8009174:	bfa8      	it	ge
 8009176:	463b      	movge	r3, r7
 8009178:	9a06      	ldr	r2, [sp, #24]
 800917a:	1aff      	subs	r7, r7, r3
 800917c:	1ad2      	subs	r2, r2, r3
 800917e:	9206      	str	r2, [sp, #24]
 8009180:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009182:	1ad3      	subs	r3, r2, r3
 8009184:	9309      	str	r3, [sp, #36]	; 0x24
 8009186:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009188:	b1f3      	cbz	r3, 80091c8 <_dtoa_r+0x7c0>
 800918a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800918c:	2b00      	cmp	r3, #0
 800918e:	f000 80a9 	beq.w	80092e4 <_dtoa_r+0x8dc>
 8009192:	2c00      	cmp	r4, #0
 8009194:	dd10      	ble.n	80091b8 <_dtoa_r+0x7b0>
 8009196:	4631      	mov	r1, r6
 8009198:	4622      	mov	r2, r4
 800919a:	4628      	mov	r0, r5
 800919c:	f000 ffd2 	bl	800a144 <__pow5mult>
 80091a0:	4652      	mov	r2, sl
 80091a2:	4601      	mov	r1, r0
 80091a4:	4606      	mov	r6, r0
 80091a6:	4628      	mov	r0, r5
 80091a8:	f000 ff28 	bl	8009ffc <__multiply>
 80091ac:	4680      	mov	r8, r0
 80091ae:	4651      	mov	r1, sl
 80091b0:	4628      	mov	r0, r5
 80091b2:	f000 fe09 	bl	8009dc8 <_Bfree>
 80091b6:	46c2      	mov	sl, r8
 80091b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80091ba:	1b1a      	subs	r2, r3, r4
 80091bc:	d004      	beq.n	80091c8 <_dtoa_r+0x7c0>
 80091be:	4651      	mov	r1, sl
 80091c0:	4628      	mov	r0, r5
 80091c2:	f000 ffbf 	bl	800a144 <__pow5mult>
 80091c6:	4682      	mov	sl, r0
 80091c8:	2101      	movs	r1, #1
 80091ca:	4628      	mov	r0, r5
 80091cc:	f000 ff00 	bl	8009fd0 <__i2b>
 80091d0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80091d2:	4604      	mov	r4, r0
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	f340 8087 	ble.w	80092e8 <_dtoa_r+0x8e0>
 80091da:	461a      	mov	r2, r3
 80091dc:	4601      	mov	r1, r0
 80091de:	4628      	mov	r0, r5
 80091e0:	f000 ffb0 	bl	800a144 <__pow5mult>
 80091e4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80091e6:	4604      	mov	r4, r0
 80091e8:	2b01      	cmp	r3, #1
 80091ea:	f340 8080 	ble.w	80092ee <_dtoa_r+0x8e6>
 80091ee:	f04f 0800 	mov.w	r8, #0
 80091f2:	6923      	ldr	r3, [r4, #16]
 80091f4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80091f8:	6918      	ldr	r0, [r3, #16]
 80091fa:	f000 fe9b 	bl	8009f34 <__hi0bits>
 80091fe:	f1c0 0020 	rsb	r0, r0, #32
 8009202:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009204:	4418      	add	r0, r3
 8009206:	f010 001f 	ands.w	r0, r0, #31
 800920a:	f000 8092 	beq.w	8009332 <_dtoa_r+0x92a>
 800920e:	f1c0 0320 	rsb	r3, r0, #32
 8009212:	2b04      	cmp	r3, #4
 8009214:	f340 808a 	ble.w	800932c <_dtoa_r+0x924>
 8009218:	f1c0 001c 	rsb	r0, r0, #28
 800921c:	9b06      	ldr	r3, [sp, #24]
 800921e:	4407      	add	r7, r0
 8009220:	4403      	add	r3, r0
 8009222:	9306      	str	r3, [sp, #24]
 8009224:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009226:	4403      	add	r3, r0
 8009228:	9309      	str	r3, [sp, #36]	; 0x24
 800922a:	9b06      	ldr	r3, [sp, #24]
 800922c:	2b00      	cmp	r3, #0
 800922e:	dd05      	ble.n	800923c <_dtoa_r+0x834>
 8009230:	4651      	mov	r1, sl
 8009232:	461a      	mov	r2, r3
 8009234:	4628      	mov	r0, r5
 8009236:	f000 ffdf 	bl	800a1f8 <__lshift>
 800923a:	4682      	mov	sl, r0
 800923c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800923e:	2b00      	cmp	r3, #0
 8009240:	dd05      	ble.n	800924e <_dtoa_r+0x846>
 8009242:	4621      	mov	r1, r4
 8009244:	461a      	mov	r2, r3
 8009246:	4628      	mov	r0, r5
 8009248:	f000 ffd6 	bl	800a1f8 <__lshift>
 800924c:	4604      	mov	r4, r0
 800924e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009250:	2b00      	cmp	r3, #0
 8009252:	d070      	beq.n	8009336 <_dtoa_r+0x92e>
 8009254:	4621      	mov	r1, r4
 8009256:	4650      	mov	r0, sl
 8009258:	f001 f83a 	bl	800a2d0 <__mcmp>
 800925c:	2800      	cmp	r0, #0
 800925e:	da6a      	bge.n	8009336 <_dtoa_r+0x92e>
 8009260:	2300      	movs	r3, #0
 8009262:	4651      	mov	r1, sl
 8009264:	220a      	movs	r2, #10
 8009266:	4628      	mov	r0, r5
 8009268:	f000 fdd0 	bl	8009e0c <__multadd>
 800926c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800926e:	4682      	mov	sl, r0
 8009270:	f109 39ff 	add.w	r9, r9, #4294967295
 8009274:	2b00      	cmp	r3, #0
 8009276:	f000 8193 	beq.w	80095a0 <_dtoa_r+0xb98>
 800927a:	4631      	mov	r1, r6
 800927c:	2300      	movs	r3, #0
 800927e:	220a      	movs	r2, #10
 8009280:	4628      	mov	r0, r5
 8009282:	f000 fdc3 	bl	8009e0c <__multadd>
 8009286:	f1bb 0f00 	cmp.w	fp, #0
 800928a:	4606      	mov	r6, r0
 800928c:	f300 8093 	bgt.w	80093b6 <_dtoa_r+0x9ae>
 8009290:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009292:	2b02      	cmp	r3, #2
 8009294:	dc57      	bgt.n	8009346 <_dtoa_r+0x93e>
 8009296:	e08e      	b.n	80093b6 <_dtoa_r+0x9ae>
 8009298:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800929a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800929e:	e756      	b.n	800914e <_dtoa_r+0x746>
 80092a0:	9b02      	ldr	r3, [sp, #8]
 80092a2:	1e5c      	subs	r4, r3, #1
 80092a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80092a6:	42a3      	cmp	r3, r4
 80092a8:	bfb7      	itett	lt
 80092aa:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80092ac:	1b1c      	subge	r4, r3, r4
 80092ae:	1ae2      	sublt	r2, r4, r3
 80092b0:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80092b2:	bfbe      	ittt	lt
 80092b4:	940a      	strlt	r4, [sp, #40]	; 0x28
 80092b6:	189b      	addlt	r3, r3, r2
 80092b8:	930e      	strlt	r3, [sp, #56]	; 0x38
 80092ba:	9b02      	ldr	r3, [sp, #8]
 80092bc:	bfb8      	it	lt
 80092be:	2400      	movlt	r4, #0
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	bfbb      	ittet	lt
 80092c4:	9b06      	ldrlt	r3, [sp, #24]
 80092c6:	9a02      	ldrlt	r2, [sp, #8]
 80092c8:	9f06      	ldrge	r7, [sp, #24]
 80092ca:	1a9f      	sublt	r7, r3, r2
 80092cc:	bfac      	ite	ge
 80092ce:	9b02      	ldrge	r3, [sp, #8]
 80092d0:	2300      	movlt	r3, #0
 80092d2:	e73e      	b.n	8009152 <_dtoa_r+0x74a>
 80092d4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80092d6:	9f06      	ldr	r7, [sp, #24]
 80092d8:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80092da:	e745      	b.n	8009168 <_dtoa_r+0x760>
 80092dc:	3fe00000 	.word	0x3fe00000
 80092e0:	40240000 	.word	0x40240000
 80092e4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80092e6:	e76a      	b.n	80091be <_dtoa_r+0x7b6>
 80092e8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80092ea:	2b01      	cmp	r3, #1
 80092ec:	dc19      	bgt.n	8009322 <_dtoa_r+0x91a>
 80092ee:	9b04      	ldr	r3, [sp, #16]
 80092f0:	b9bb      	cbnz	r3, 8009322 <_dtoa_r+0x91a>
 80092f2:	9b05      	ldr	r3, [sp, #20]
 80092f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80092f8:	b99b      	cbnz	r3, 8009322 <_dtoa_r+0x91a>
 80092fa:	9b05      	ldr	r3, [sp, #20]
 80092fc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009300:	0d1b      	lsrs	r3, r3, #20
 8009302:	051b      	lsls	r3, r3, #20
 8009304:	b183      	cbz	r3, 8009328 <_dtoa_r+0x920>
 8009306:	f04f 0801 	mov.w	r8, #1
 800930a:	9b06      	ldr	r3, [sp, #24]
 800930c:	3301      	adds	r3, #1
 800930e:	9306      	str	r3, [sp, #24]
 8009310:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009312:	3301      	adds	r3, #1
 8009314:	9309      	str	r3, [sp, #36]	; 0x24
 8009316:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009318:	2b00      	cmp	r3, #0
 800931a:	f47f af6a 	bne.w	80091f2 <_dtoa_r+0x7ea>
 800931e:	2001      	movs	r0, #1
 8009320:	e76f      	b.n	8009202 <_dtoa_r+0x7fa>
 8009322:	f04f 0800 	mov.w	r8, #0
 8009326:	e7f6      	b.n	8009316 <_dtoa_r+0x90e>
 8009328:	4698      	mov	r8, r3
 800932a:	e7f4      	b.n	8009316 <_dtoa_r+0x90e>
 800932c:	f43f af7d 	beq.w	800922a <_dtoa_r+0x822>
 8009330:	4618      	mov	r0, r3
 8009332:	301c      	adds	r0, #28
 8009334:	e772      	b.n	800921c <_dtoa_r+0x814>
 8009336:	9b02      	ldr	r3, [sp, #8]
 8009338:	2b00      	cmp	r3, #0
 800933a:	dc36      	bgt.n	80093aa <_dtoa_r+0x9a2>
 800933c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800933e:	2b02      	cmp	r3, #2
 8009340:	dd33      	ble.n	80093aa <_dtoa_r+0x9a2>
 8009342:	f8dd b008 	ldr.w	fp, [sp, #8]
 8009346:	f1bb 0f00 	cmp.w	fp, #0
 800934a:	d10d      	bne.n	8009368 <_dtoa_r+0x960>
 800934c:	4621      	mov	r1, r4
 800934e:	465b      	mov	r3, fp
 8009350:	2205      	movs	r2, #5
 8009352:	4628      	mov	r0, r5
 8009354:	f000 fd5a 	bl	8009e0c <__multadd>
 8009358:	4601      	mov	r1, r0
 800935a:	4604      	mov	r4, r0
 800935c:	4650      	mov	r0, sl
 800935e:	f000 ffb7 	bl	800a2d0 <__mcmp>
 8009362:	2800      	cmp	r0, #0
 8009364:	f73f adb6 	bgt.w	8008ed4 <_dtoa_r+0x4cc>
 8009368:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800936a:	9f08      	ldr	r7, [sp, #32]
 800936c:	ea6f 0903 	mvn.w	r9, r3
 8009370:	f04f 0800 	mov.w	r8, #0
 8009374:	4621      	mov	r1, r4
 8009376:	4628      	mov	r0, r5
 8009378:	f000 fd26 	bl	8009dc8 <_Bfree>
 800937c:	2e00      	cmp	r6, #0
 800937e:	f43f aea4 	beq.w	80090ca <_dtoa_r+0x6c2>
 8009382:	f1b8 0f00 	cmp.w	r8, #0
 8009386:	d005      	beq.n	8009394 <_dtoa_r+0x98c>
 8009388:	45b0      	cmp	r8, r6
 800938a:	d003      	beq.n	8009394 <_dtoa_r+0x98c>
 800938c:	4641      	mov	r1, r8
 800938e:	4628      	mov	r0, r5
 8009390:	f000 fd1a 	bl	8009dc8 <_Bfree>
 8009394:	4631      	mov	r1, r6
 8009396:	4628      	mov	r0, r5
 8009398:	f000 fd16 	bl	8009dc8 <_Bfree>
 800939c:	e695      	b.n	80090ca <_dtoa_r+0x6c2>
 800939e:	2400      	movs	r4, #0
 80093a0:	4626      	mov	r6, r4
 80093a2:	e7e1      	b.n	8009368 <_dtoa_r+0x960>
 80093a4:	46c1      	mov	r9, r8
 80093a6:	4626      	mov	r6, r4
 80093a8:	e594      	b.n	8008ed4 <_dtoa_r+0x4cc>
 80093aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80093ac:	f8dd b008 	ldr.w	fp, [sp, #8]
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	f000 80fc 	beq.w	80095ae <_dtoa_r+0xba6>
 80093b6:	2f00      	cmp	r7, #0
 80093b8:	dd05      	ble.n	80093c6 <_dtoa_r+0x9be>
 80093ba:	4631      	mov	r1, r6
 80093bc:	463a      	mov	r2, r7
 80093be:	4628      	mov	r0, r5
 80093c0:	f000 ff1a 	bl	800a1f8 <__lshift>
 80093c4:	4606      	mov	r6, r0
 80093c6:	f1b8 0f00 	cmp.w	r8, #0
 80093ca:	d05c      	beq.n	8009486 <_dtoa_r+0xa7e>
 80093cc:	4628      	mov	r0, r5
 80093ce:	6871      	ldr	r1, [r6, #4]
 80093d0:	f000 fcba 	bl	8009d48 <_Balloc>
 80093d4:	4607      	mov	r7, r0
 80093d6:	b928      	cbnz	r0, 80093e4 <_dtoa_r+0x9dc>
 80093d8:	4602      	mov	r2, r0
 80093da:	f240 21ea 	movw	r1, #746	; 0x2ea
 80093de:	4b7e      	ldr	r3, [pc, #504]	; (80095d8 <_dtoa_r+0xbd0>)
 80093e0:	f7ff bb26 	b.w	8008a30 <_dtoa_r+0x28>
 80093e4:	6932      	ldr	r2, [r6, #16]
 80093e6:	f106 010c 	add.w	r1, r6, #12
 80093ea:	3202      	adds	r2, #2
 80093ec:	0092      	lsls	r2, r2, #2
 80093ee:	300c      	adds	r0, #12
 80093f0:	f000 fc9c 	bl	8009d2c <memcpy>
 80093f4:	2201      	movs	r2, #1
 80093f6:	4639      	mov	r1, r7
 80093f8:	4628      	mov	r0, r5
 80093fa:	f000 fefd 	bl	800a1f8 <__lshift>
 80093fe:	46b0      	mov	r8, r6
 8009400:	4606      	mov	r6, r0
 8009402:	9b08      	ldr	r3, [sp, #32]
 8009404:	3301      	adds	r3, #1
 8009406:	9302      	str	r3, [sp, #8]
 8009408:	9b08      	ldr	r3, [sp, #32]
 800940a:	445b      	add	r3, fp
 800940c:	930a      	str	r3, [sp, #40]	; 0x28
 800940e:	9b04      	ldr	r3, [sp, #16]
 8009410:	f003 0301 	and.w	r3, r3, #1
 8009414:	9309      	str	r3, [sp, #36]	; 0x24
 8009416:	9b02      	ldr	r3, [sp, #8]
 8009418:	4621      	mov	r1, r4
 800941a:	4650      	mov	r0, sl
 800941c:	f103 3bff 	add.w	fp, r3, #4294967295
 8009420:	f7ff fa62 	bl	80088e8 <quorem>
 8009424:	4603      	mov	r3, r0
 8009426:	4641      	mov	r1, r8
 8009428:	3330      	adds	r3, #48	; 0x30
 800942a:	9004      	str	r0, [sp, #16]
 800942c:	4650      	mov	r0, sl
 800942e:	930b      	str	r3, [sp, #44]	; 0x2c
 8009430:	f000 ff4e 	bl	800a2d0 <__mcmp>
 8009434:	4632      	mov	r2, r6
 8009436:	9006      	str	r0, [sp, #24]
 8009438:	4621      	mov	r1, r4
 800943a:	4628      	mov	r0, r5
 800943c:	f000 ff64 	bl	800a308 <__mdiff>
 8009440:	68c2      	ldr	r2, [r0, #12]
 8009442:	4607      	mov	r7, r0
 8009444:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009446:	bb02      	cbnz	r2, 800948a <_dtoa_r+0xa82>
 8009448:	4601      	mov	r1, r0
 800944a:	4650      	mov	r0, sl
 800944c:	f000 ff40 	bl	800a2d0 <__mcmp>
 8009450:	4602      	mov	r2, r0
 8009452:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009454:	4639      	mov	r1, r7
 8009456:	4628      	mov	r0, r5
 8009458:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 800945c:	f000 fcb4 	bl	8009dc8 <_Bfree>
 8009460:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009462:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009464:	9f02      	ldr	r7, [sp, #8]
 8009466:	ea43 0102 	orr.w	r1, r3, r2
 800946a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800946c:	430b      	orrs	r3, r1
 800946e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009470:	d10d      	bne.n	800948e <_dtoa_r+0xa86>
 8009472:	2b39      	cmp	r3, #57	; 0x39
 8009474:	d027      	beq.n	80094c6 <_dtoa_r+0xabe>
 8009476:	9a06      	ldr	r2, [sp, #24]
 8009478:	2a00      	cmp	r2, #0
 800947a:	dd01      	ble.n	8009480 <_dtoa_r+0xa78>
 800947c:	9b04      	ldr	r3, [sp, #16]
 800947e:	3331      	adds	r3, #49	; 0x31
 8009480:	f88b 3000 	strb.w	r3, [fp]
 8009484:	e776      	b.n	8009374 <_dtoa_r+0x96c>
 8009486:	4630      	mov	r0, r6
 8009488:	e7b9      	b.n	80093fe <_dtoa_r+0x9f6>
 800948a:	2201      	movs	r2, #1
 800948c:	e7e2      	b.n	8009454 <_dtoa_r+0xa4c>
 800948e:	9906      	ldr	r1, [sp, #24]
 8009490:	2900      	cmp	r1, #0
 8009492:	db04      	blt.n	800949e <_dtoa_r+0xa96>
 8009494:	9822      	ldr	r0, [sp, #136]	; 0x88
 8009496:	4301      	orrs	r1, r0
 8009498:	9809      	ldr	r0, [sp, #36]	; 0x24
 800949a:	4301      	orrs	r1, r0
 800949c:	d120      	bne.n	80094e0 <_dtoa_r+0xad8>
 800949e:	2a00      	cmp	r2, #0
 80094a0:	ddee      	ble.n	8009480 <_dtoa_r+0xa78>
 80094a2:	4651      	mov	r1, sl
 80094a4:	2201      	movs	r2, #1
 80094a6:	4628      	mov	r0, r5
 80094a8:	9302      	str	r3, [sp, #8]
 80094aa:	f000 fea5 	bl	800a1f8 <__lshift>
 80094ae:	4621      	mov	r1, r4
 80094b0:	4682      	mov	sl, r0
 80094b2:	f000 ff0d 	bl	800a2d0 <__mcmp>
 80094b6:	2800      	cmp	r0, #0
 80094b8:	9b02      	ldr	r3, [sp, #8]
 80094ba:	dc02      	bgt.n	80094c2 <_dtoa_r+0xaba>
 80094bc:	d1e0      	bne.n	8009480 <_dtoa_r+0xa78>
 80094be:	07da      	lsls	r2, r3, #31
 80094c0:	d5de      	bpl.n	8009480 <_dtoa_r+0xa78>
 80094c2:	2b39      	cmp	r3, #57	; 0x39
 80094c4:	d1da      	bne.n	800947c <_dtoa_r+0xa74>
 80094c6:	2339      	movs	r3, #57	; 0x39
 80094c8:	f88b 3000 	strb.w	r3, [fp]
 80094cc:	463b      	mov	r3, r7
 80094ce:	461f      	mov	r7, r3
 80094d0:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 80094d4:	3b01      	subs	r3, #1
 80094d6:	2a39      	cmp	r2, #57	; 0x39
 80094d8:	d050      	beq.n	800957c <_dtoa_r+0xb74>
 80094da:	3201      	adds	r2, #1
 80094dc:	701a      	strb	r2, [r3, #0]
 80094de:	e749      	b.n	8009374 <_dtoa_r+0x96c>
 80094e0:	2a00      	cmp	r2, #0
 80094e2:	dd03      	ble.n	80094ec <_dtoa_r+0xae4>
 80094e4:	2b39      	cmp	r3, #57	; 0x39
 80094e6:	d0ee      	beq.n	80094c6 <_dtoa_r+0xabe>
 80094e8:	3301      	adds	r3, #1
 80094ea:	e7c9      	b.n	8009480 <_dtoa_r+0xa78>
 80094ec:	9a02      	ldr	r2, [sp, #8]
 80094ee:	990a      	ldr	r1, [sp, #40]	; 0x28
 80094f0:	f802 3c01 	strb.w	r3, [r2, #-1]
 80094f4:	428a      	cmp	r2, r1
 80094f6:	d02a      	beq.n	800954e <_dtoa_r+0xb46>
 80094f8:	4651      	mov	r1, sl
 80094fa:	2300      	movs	r3, #0
 80094fc:	220a      	movs	r2, #10
 80094fe:	4628      	mov	r0, r5
 8009500:	f000 fc84 	bl	8009e0c <__multadd>
 8009504:	45b0      	cmp	r8, r6
 8009506:	4682      	mov	sl, r0
 8009508:	f04f 0300 	mov.w	r3, #0
 800950c:	f04f 020a 	mov.w	r2, #10
 8009510:	4641      	mov	r1, r8
 8009512:	4628      	mov	r0, r5
 8009514:	d107      	bne.n	8009526 <_dtoa_r+0xb1e>
 8009516:	f000 fc79 	bl	8009e0c <__multadd>
 800951a:	4680      	mov	r8, r0
 800951c:	4606      	mov	r6, r0
 800951e:	9b02      	ldr	r3, [sp, #8]
 8009520:	3301      	adds	r3, #1
 8009522:	9302      	str	r3, [sp, #8]
 8009524:	e777      	b.n	8009416 <_dtoa_r+0xa0e>
 8009526:	f000 fc71 	bl	8009e0c <__multadd>
 800952a:	4631      	mov	r1, r6
 800952c:	4680      	mov	r8, r0
 800952e:	2300      	movs	r3, #0
 8009530:	220a      	movs	r2, #10
 8009532:	4628      	mov	r0, r5
 8009534:	f000 fc6a 	bl	8009e0c <__multadd>
 8009538:	4606      	mov	r6, r0
 800953a:	e7f0      	b.n	800951e <_dtoa_r+0xb16>
 800953c:	f1bb 0f00 	cmp.w	fp, #0
 8009540:	bfcc      	ite	gt
 8009542:	465f      	movgt	r7, fp
 8009544:	2701      	movle	r7, #1
 8009546:	f04f 0800 	mov.w	r8, #0
 800954a:	9a08      	ldr	r2, [sp, #32]
 800954c:	4417      	add	r7, r2
 800954e:	4651      	mov	r1, sl
 8009550:	2201      	movs	r2, #1
 8009552:	4628      	mov	r0, r5
 8009554:	9302      	str	r3, [sp, #8]
 8009556:	f000 fe4f 	bl	800a1f8 <__lshift>
 800955a:	4621      	mov	r1, r4
 800955c:	4682      	mov	sl, r0
 800955e:	f000 feb7 	bl	800a2d0 <__mcmp>
 8009562:	2800      	cmp	r0, #0
 8009564:	dcb2      	bgt.n	80094cc <_dtoa_r+0xac4>
 8009566:	d102      	bne.n	800956e <_dtoa_r+0xb66>
 8009568:	9b02      	ldr	r3, [sp, #8]
 800956a:	07db      	lsls	r3, r3, #31
 800956c:	d4ae      	bmi.n	80094cc <_dtoa_r+0xac4>
 800956e:	463b      	mov	r3, r7
 8009570:	461f      	mov	r7, r3
 8009572:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009576:	2a30      	cmp	r2, #48	; 0x30
 8009578:	d0fa      	beq.n	8009570 <_dtoa_r+0xb68>
 800957a:	e6fb      	b.n	8009374 <_dtoa_r+0x96c>
 800957c:	9a08      	ldr	r2, [sp, #32]
 800957e:	429a      	cmp	r2, r3
 8009580:	d1a5      	bne.n	80094ce <_dtoa_r+0xac6>
 8009582:	2331      	movs	r3, #49	; 0x31
 8009584:	f109 0901 	add.w	r9, r9, #1
 8009588:	7013      	strb	r3, [r2, #0]
 800958a:	e6f3      	b.n	8009374 <_dtoa_r+0x96c>
 800958c:	4b13      	ldr	r3, [pc, #76]	; (80095dc <_dtoa_r+0xbd4>)
 800958e:	f7ff baa7 	b.w	8008ae0 <_dtoa_r+0xd8>
 8009592:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8009594:	2b00      	cmp	r3, #0
 8009596:	f47f aa80 	bne.w	8008a9a <_dtoa_r+0x92>
 800959a:	4b11      	ldr	r3, [pc, #68]	; (80095e0 <_dtoa_r+0xbd8>)
 800959c:	f7ff baa0 	b.w	8008ae0 <_dtoa_r+0xd8>
 80095a0:	f1bb 0f00 	cmp.w	fp, #0
 80095a4:	dc03      	bgt.n	80095ae <_dtoa_r+0xba6>
 80095a6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80095a8:	2b02      	cmp	r3, #2
 80095aa:	f73f aecc 	bgt.w	8009346 <_dtoa_r+0x93e>
 80095ae:	9f08      	ldr	r7, [sp, #32]
 80095b0:	4621      	mov	r1, r4
 80095b2:	4650      	mov	r0, sl
 80095b4:	f7ff f998 	bl	80088e8 <quorem>
 80095b8:	9a08      	ldr	r2, [sp, #32]
 80095ba:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80095be:	f807 3b01 	strb.w	r3, [r7], #1
 80095c2:	1aba      	subs	r2, r7, r2
 80095c4:	4593      	cmp	fp, r2
 80095c6:	ddb9      	ble.n	800953c <_dtoa_r+0xb34>
 80095c8:	4651      	mov	r1, sl
 80095ca:	2300      	movs	r3, #0
 80095cc:	220a      	movs	r2, #10
 80095ce:	4628      	mov	r0, r5
 80095d0:	f000 fc1c 	bl	8009e0c <__multadd>
 80095d4:	4682      	mov	sl, r0
 80095d6:	e7eb      	b.n	80095b0 <_dtoa_r+0xba8>
 80095d8:	0800c3b4 	.word	0x0800c3b4
 80095dc:	0800c5b9 	.word	0x0800c5b9
 80095e0:	0800c331 	.word	0x0800c331

080095e4 <rshift>:
 80095e4:	6903      	ldr	r3, [r0, #16]
 80095e6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80095ea:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80095ee:	f100 0414 	add.w	r4, r0, #20
 80095f2:	ea4f 1261 	mov.w	r2, r1, asr #5
 80095f6:	dd46      	ble.n	8009686 <rshift+0xa2>
 80095f8:	f011 011f 	ands.w	r1, r1, #31
 80095fc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009600:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8009604:	d10c      	bne.n	8009620 <rshift+0x3c>
 8009606:	4629      	mov	r1, r5
 8009608:	f100 0710 	add.w	r7, r0, #16
 800960c:	42b1      	cmp	r1, r6
 800960e:	d335      	bcc.n	800967c <rshift+0x98>
 8009610:	1a9b      	subs	r3, r3, r2
 8009612:	009b      	lsls	r3, r3, #2
 8009614:	1eea      	subs	r2, r5, #3
 8009616:	4296      	cmp	r6, r2
 8009618:	bf38      	it	cc
 800961a:	2300      	movcc	r3, #0
 800961c:	4423      	add	r3, r4
 800961e:	e015      	b.n	800964c <rshift+0x68>
 8009620:	46a1      	mov	r9, r4
 8009622:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8009626:	f1c1 0820 	rsb	r8, r1, #32
 800962a:	40cf      	lsrs	r7, r1
 800962c:	f105 0e04 	add.w	lr, r5, #4
 8009630:	4576      	cmp	r6, lr
 8009632:	46f4      	mov	ip, lr
 8009634:	d816      	bhi.n	8009664 <rshift+0x80>
 8009636:	1a9b      	subs	r3, r3, r2
 8009638:	009a      	lsls	r2, r3, #2
 800963a:	3a04      	subs	r2, #4
 800963c:	3501      	adds	r5, #1
 800963e:	42ae      	cmp	r6, r5
 8009640:	bf38      	it	cc
 8009642:	2200      	movcc	r2, #0
 8009644:	18a3      	adds	r3, r4, r2
 8009646:	50a7      	str	r7, [r4, r2]
 8009648:	b107      	cbz	r7, 800964c <rshift+0x68>
 800964a:	3304      	adds	r3, #4
 800964c:	42a3      	cmp	r3, r4
 800964e:	eba3 0204 	sub.w	r2, r3, r4
 8009652:	bf08      	it	eq
 8009654:	2300      	moveq	r3, #0
 8009656:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800965a:	6102      	str	r2, [r0, #16]
 800965c:	bf08      	it	eq
 800965e:	6143      	streq	r3, [r0, #20]
 8009660:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009664:	f8dc c000 	ldr.w	ip, [ip]
 8009668:	fa0c fc08 	lsl.w	ip, ip, r8
 800966c:	ea4c 0707 	orr.w	r7, ip, r7
 8009670:	f849 7b04 	str.w	r7, [r9], #4
 8009674:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009678:	40cf      	lsrs	r7, r1
 800967a:	e7d9      	b.n	8009630 <rshift+0x4c>
 800967c:	f851 cb04 	ldr.w	ip, [r1], #4
 8009680:	f847 cf04 	str.w	ip, [r7, #4]!
 8009684:	e7c2      	b.n	800960c <rshift+0x28>
 8009686:	4623      	mov	r3, r4
 8009688:	e7e0      	b.n	800964c <rshift+0x68>

0800968a <__hexdig_fun>:
 800968a:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800968e:	2b09      	cmp	r3, #9
 8009690:	d802      	bhi.n	8009698 <__hexdig_fun+0xe>
 8009692:	3820      	subs	r0, #32
 8009694:	b2c0      	uxtb	r0, r0
 8009696:	4770      	bx	lr
 8009698:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800969c:	2b05      	cmp	r3, #5
 800969e:	d801      	bhi.n	80096a4 <__hexdig_fun+0x1a>
 80096a0:	3847      	subs	r0, #71	; 0x47
 80096a2:	e7f7      	b.n	8009694 <__hexdig_fun+0xa>
 80096a4:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80096a8:	2b05      	cmp	r3, #5
 80096aa:	d801      	bhi.n	80096b0 <__hexdig_fun+0x26>
 80096ac:	3827      	subs	r0, #39	; 0x27
 80096ae:	e7f1      	b.n	8009694 <__hexdig_fun+0xa>
 80096b0:	2000      	movs	r0, #0
 80096b2:	4770      	bx	lr

080096b4 <__gethex>:
 80096b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096b8:	b08b      	sub	sp, #44	; 0x2c
 80096ba:	9306      	str	r3, [sp, #24]
 80096bc:	4bb9      	ldr	r3, [pc, #740]	; (80099a4 <__gethex+0x2f0>)
 80096be:	9002      	str	r0, [sp, #8]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	468b      	mov	fp, r1
 80096c4:	4618      	mov	r0, r3
 80096c6:	4690      	mov	r8, r2
 80096c8:	9303      	str	r3, [sp, #12]
 80096ca:	f7f6 fdad 	bl	8000228 <strlen>
 80096ce:	4682      	mov	sl, r0
 80096d0:	9b03      	ldr	r3, [sp, #12]
 80096d2:	f8db 2000 	ldr.w	r2, [fp]
 80096d6:	4403      	add	r3, r0
 80096d8:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80096dc:	9307      	str	r3, [sp, #28]
 80096de:	1c93      	adds	r3, r2, #2
 80096e0:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80096e4:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80096e8:	32fe      	adds	r2, #254	; 0xfe
 80096ea:	18d1      	adds	r1, r2, r3
 80096ec:	461f      	mov	r7, r3
 80096ee:	f813 0b01 	ldrb.w	r0, [r3], #1
 80096f2:	9101      	str	r1, [sp, #4]
 80096f4:	2830      	cmp	r0, #48	; 0x30
 80096f6:	d0f8      	beq.n	80096ea <__gethex+0x36>
 80096f8:	f7ff ffc7 	bl	800968a <__hexdig_fun>
 80096fc:	4604      	mov	r4, r0
 80096fe:	2800      	cmp	r0, #0
 8009700:	d13a      	bne.n	8009778 <__gethex+0xc4>
 8009702:	4652      	mov	r2, sl
 8009704:	4638      	mov	r0, r7
 8009706:	9903      	ldr	r1, [sp, #12]
 8009708:	f001 fd66 	bl	800b1d8 <strncmp>
 800970c:	4605      	mov	r5, r0
 800970e:	2800      	cmp	r0, #0
 8009710:	d166      	bne.n	80097e0 <__gethex+0x12c>
 8009712:	f817 000a 	ldrb.w	r0, [r7, sl]
 8009716:	eb07 060a 	add.w	r6, r7, sl
 800971a:	f7ff ffb6 	bl	800968a <__hexdig_fun>
 800971e:	2800      	cmp	r0, #0
 8009720:	d060      	beq.n	80097e4 <__gethex+0x130>
 8009722:	4633      	mov	r3, r6
 8009724:	7818      	ldrb	r0, [r3, #0]
 8009726:	461f      	mov	r7, r3
 8009728:	2830      	cmp	r0, #48	; 0x30
 800972a:	f103 0301 	add.w	r3, r3, #1
 800972e:	d0f9      	beq.n	8009724 <__gethex+0x70>
 8009730:	f7ff ffab 	bl	800968a <__hexdig_fun>
 8009734:	2301      	movs	r3, #1
 8009736:	fab0 f480 	clz	r4, r0
 800973a:	4635      	mov	r5, r6
 800973c:	0964      	lsrs	r4, r4, #5
 800973e:	9301      	str	r3, [sp, #4]
 8009740:	463a      	mov	r2, r7
 8009742:	4616      	mov	r6, r2
 8009744:	7830      	ldrb	r0, [r6, #0]
 8009746:	3201      	adds	r2, #1
 8009748:	f7ff ff9f 	bl	800968a <__hexdig_fun>
 800974c:	2800      	cmp	r0, #0
 800974e:	d1f8      	bne.n	8009742 <__gethex+0x8e>
 8009750:	4652      	mov	r2, sl
 8009752:	4630      	mov	r0, r6
 8009754:	9903      	ldr	r1, [sp, #12]
 8009756:	f001 fd3f 	bl	800b1d8 <strncmp>
 800975a:	b980      	cbnz	r0, 800977e <__gethex+0xca>
 800975c:	b94d      	cbnz	r5, 8009772 <__gethex+0xbe>
 800975e:	eb06 050a 	add.w	r5, r6, sl
 8009762:	462a      	mov	r2, r5
 8009764:	4616      	mov	r6, r2
 8009766:	7830      	ldrb	r0, [r6, #0]
 8009768:	3201      	adds	r2, #1
 800976a:	f7ff ff8e 	bl	800968a <__hexdig_fun>
 800976e:	2800      	cmp	r0, #0
 8009770:	d1f8      	bne.n	8009764 <__gethex+0xb0>
 8009772:	1bad      	subs	r5, r5, r6
 8009774:	00ad      	lsls	r5, r5, #2
 8009776:	e004      	b.n	8009782 <__gethex+0xce>
 8009778:	2400      	movs	r4, #0
 800977a:	4625      	mov	r5, r4
 800977c:	e7e0      	b.n	8009740 <__gethex+0x8c>
 800977e:	2d00      	cmp	r5, #0
 8009780:	d1f7      	bne.n	8009772 <__gethex+0xbe>
 8009782:	7833      	ldrb	r3, [r6, #0]
 8009784:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8009788:	2b50      	cmp	r3, #80	; 0x50
 800978a:	d139      	bne.n	8009800 <__gethex+0x14c>
 800978c:	7873      	ldrb	r3, [r6, #1]
 800978e:	2b2b      	cmp	r3, #43	; 0x2b
 8009790:	d02a      	beq.n	80097e8 <__gethex+0x134>
 8009792:	2b2d      	cmp	r3, #45	; 0x2d
 8009794:	d02c      	beq.n	80097f0 <__gethex+0x13c>
 8009796:	f04f 0900 	mov.w	r9, #0
 800979a:	1c71      	adds	r1, r6, #1
 800979c:	7808      	ldrb	r0, [r1, #0]
 800979e:	f7ff ff74 	bl	800968a <__hexdig_fun>
 80097a2:	1e43      	subs	r3, r0, #1
 80097a4:	b2db      	uxtb	r3, r3
 80097a6:	2b18      	cmp	r3, #24
 80097a8:	d82a      	bhi.n	8009800 <__gethex+0x14c>
 80097aa:	f1a0 0210 	sub.w	r2, r0, #16
 80097ae:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80097b2:	f7ff ff6a 	bl	800968a <__hexdig_fun>
 80097b6:	1e43      	subs	r3, r0, #1
 80097b8:	b2db      	uxtb	r3, r3
 80097ba:	2b18      	cmp	r3, #24
 80097bc:	d91b      	bls.n	80097f6 <__gethex+0x142>
 80097be:	f1b9 0f00 	cmp.w	r9, #0
 80097c2:	d000      	beq.n	80097c6 <__gethex+0x112>
 80097c4:	4252      	negs	r2, r2
 80097c6:	4415      	add	r5, r2
 80097c8:	f8cb 1000 	str.w	r1, [fp]
 80097cc:	b1d4      	cbz	r4, 8009804 <__gethex+0x150>
 80097ce:	9b01      	ldr	r3, [sp, #4]
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	bf14      	ite	ne
 80097d4:	2700      	movne	r7, #0
 80097d6:	2706      	moveq	r7, #6
 80097d8:	4638      	mov	r0, r7
 80097da:	b00b      	add	sp, #44	; 0x2c
 80097dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097e0:	463e      	mov	r6, r7
 80097e2:	4625      	mov	r5, r4
 80097e4:	2401      	movs	r4, #1
 80097e6:	e7cc      	b.n	8009782 <__gethex+0xce>
 80097e8:	f04f 0900 	mov.w	r9, #0
 80097ec:	1cb1      	adds	r1, r6, #2
 80097ee:	e7d5      	b.n	800979c <__gethex+0xe8>
 80097f0:	f04f 0901 	mov.w	r9, #1
 80097f4:	e7fa      	b.n	80097ec <__gethex+0x138>
 80097f6:	230a      	movs	r3, #10
 80097f8:	fb03 0202 	mla	r2, r3, r2, r0
 80097fc:	3a10      	subs	r2, #16
 80097fe:	e7d6      	b.n	80097ae <__gethex+0xfa>
 8009800:	4631      	mov	r1, r6
 8009802:	e7e1      	b.n	80097c8 <__gethex+0x114>
 8009804:	4621      	mov	r1, r4
 8009806:	1bf3      	subs	r3, r6, r7
 8009808:	3b01      	subs	r3, #1
 800980a:	2b07      	cmp	r3, #7
 800980c:	dc0a      	bgt.n	8009824 <__gethex+0x170>
 800980e:	9802      	ldr	r0, [sp, #8]
 8009810:	f000 fa9a 	bl	8009d48 <_Balloc>
 8009814:	4604      	mov	r4, r0
 8009816:	b940      	cbnz	r0, 800982a <__gethex+0x176>
 8009818:	4602      	mov	r2, r0
 800981a:	21de      	movs	r1, #222	; 0xde
 800981c:	4b62      	ldr	r3, [pc, #392]	; (80099a8 <__gethex+0x2f4>)
 800981e:	4863      	ldr	r0, [pc, #396]	; (80099ac <__gethex+0x2f8>)
 8009820:	f001 fdb0 	bl	800b384 <__assert_func>
 8009824:	3101      	adds	r1, #1
 8009826:	105b      	asrs	r3, r3, #1
 8009828:	e7ef      	b.n	800980a <__gethex+0x156>
 800982a:	f04f 0b00 	mov.w	fp, #0
 800982e:	f100 0914 	add.w	r9, r0, #20
 8009832:	f1ca 0301 	rsb	r3, sl, #1
 8009836:	f8cd 9010 	str.w	r9, [sp, #16]
 800983a:	f8cd b004 	str.w	fp, [sp, #4]
 800983e:	9308      	str	r3, [sp, #32]
 8009840:	42b7      	cmp	r7, r6
 8009842:	d33f      	bcc.n	80098c4 <__gethex+0x210>
 8009844:	9f04      	ldr	r7, [sp, #16]
 8009846:	9b01      	ldr	r3, [sp, #4]
 8009848:	f847 3b04 	str.w	r3, [r7], #4
 800984c:	eba7 0709 	sub.w	r7, r7, r9
 8009850:	10bf      	asrs	r7, r7, #2
 8009852:	6127      	str	r7, [r4, #16]
 8009854:	4618      	mov	r0, r3
 8009856:	f000 fb6d 	bl	8009f34 <__hi0bits>
 800985a:	017f      	lsls	r7, r7, #5
 800985c:	f8d8 6000 	ldr.w	r6, [r8]
 8009860:	1a3f      	subs	r7, r7, r0
 8009862:	42b7      	cmp	r7, r6
 8009864:	dd62      	ble.n	800992c <__gethex+0x278>
 8009866:	1bbf      	subs	r7, r7, r6
 8009868:	4639      	mov	r1, r7
 800986a:	4620      	mov	r0, r4
 800986c:	f000 ff03 	bl	800a676 <__any_on>
 8009870:	4682      	mov	sl, r0
 8009872:	b1a8      	cbz	r0, 80098a0 <__gethex+0x1ec>
 8009874:	f04f 0a01 	mov.w	sl, #1
 8009878:	1e7b      	subs	r3, r7, #1
 800987a:	1159      	asrs	r1, r3, #5
 800987c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8009880:	f003 021f 	and.w	r2, r3, #31
 8009884:	fa0a f202 	lsl.w	r2, sl, r2
 8009888:	420a      	tst	r2, r1
 800988a:	d009      	beq.n	80098a0 <__gethex+0x1ec>
 800988c:	4553      	cmp	r3, sl
 800988e:	dd05      	ble.n	800989c <__gethex+0x1e8>
 8009890:	4620      	mov	r0, r4
 8009892:	1eb9      	subs	r1, r7, #2
 8009894:	f000 feef 	bl	800a676 <__any_on>
 8009898:	2800      	cmp	r0, #0
 800989a:	d144      	bne.n	8009926 <__gethex+0x272>
 800989c:	f04f 0a02 	mov.w	sl, #2
 80098a0:	4639      	mov	r1, r7
 80098a2:	4620      	mov	r0, r4
 80098a4:	f7ff fe9e 	bl	80095e4 <rshift>
 80098a8:	443d      	add	r5, r7
 80098aa:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80098ae:	42ab      	cmp	r3, r5
 80098b0:	da4a      	bge.n	8009948 <__gethex+0x294>
 80098b2:	4621      	mov	r1, r4
 80098b4:	9802      	ldr	r0, [sp, #8]
 80098b6:	f000 fa87 	bl	8009dc8 <_Bfree>
 80098ba:	2300      	movs	r3, #0
 80098bc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80098be:	27a3      	movs	r7, #163	; 0xa3
 80098c0:	6013      	str	r3, [r2, #0]
 80098c2:	e789      	b.n	80097d8 <__gethex+0x124>
 80098c4:	1e73      	subs	r3, r6, #1
 80098c6:	9a07      	ldr	r2, [sp, #28]
 80098c8:	9305      	str	r3, [sp, #20]
 80098ca:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80098ce:	4293      	cmp	r3, r2
 80098d0:	d019      	beq.n	8009906 <__gethex+0x252>
 80098d2:	f1bb 0f20 	cmp.w	fp, #32
 80098d6:	d107      	bne.n	80098e8 <__gethex+0x234>
 80098d8:	9b04      	ldr	r3, [sp, #16]
 80098da:	9a01      	ldr	r2, [sp, #4]
 80098dc:	f843 2b04 	str.w	r2, [r3], #4
 80098e0:	9304      	str	r3, [sp, #16]
 80098e2:	2300      	movs	r3, #0
 80098e4:	469b      	mov	fp, r3
 80098e6:	9301      	str	r3, [sp, #4]
 80098e8:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80098ec:	f7ff fecd 	bl	800968a <__hexdig_fun>
 80098f0:	9b01      	ldr	r3, [sp, #4]
 80098f2:	f000 000f 	and.w	r0, r0, #15
 80098f6:	fa00 f00b 	lsl.w	r0, r0, fp
 80098fa:	4303      	orrs	r3, r0
 80098fc:	9301      	str	r3, [sp, #4]
 80098fe:	f10b 0b04 	add.w	fp, fp, #4
 8009902:	9b05      	ldr	r3, [sp, #20]
 8009904:	e00d      	b.n	8009922 <__gethex+0x26e>
 8009906:	9b05      	ldr	r3, [sp, #20]
 8009908:	9a08      	ldr	r2, [sp, #32]
 800990a:	4413      	add	r3, r2
 800990c:	42bb      	cmp	r3, r7
 800990e:	d3e0      	bcc.n	80098d2 <__gethex+0x21e>
 8009910:	4618      	mov	r0, r3
 8009912:	4652      	mov	r2, sl
 8009914:	9903      	ldr	r1, [sp, #12]
 8009916:	9309      	str	r3, [sp, #36]	; 0x24
 8009918:	f001 fc5e 	bl	800b1d8 <strncmp>
 800991c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800991e:	2800      	cmp	r0, #0
 8009920:	d1d7      	bne.n	80098d2 <__gethex+0x21e>
 8009922:	461e      	mov	r6, r3
 8009924:	e78c      	b.n	8009840 <__gethex+0x18c>
 8009926:	f04f 0a03 	mov.w	sl, #3
 800992a:	e7b9      	b.n	80098a0 <__gethex+0x1ec>
 800992c:	da09      	bge.n	8009942 <__gethex+0x28e>
 800992e:	1bf7      	subs	r7, r6, r7
 8009930:	4621      	mov	r1, r4
 8009932:	463a      	mov	r2, r7
 8009934:	9802      	ldr	r0, [sp, #8]
 8009936:	f000 fc5f 	bl	800a1f8 <__lshift>
 800993a:	4604      	mov	r4, r0
 800993c:	1bed      	subs	r5, r5, r7
 800993e:	f100 0914 	add.w	r9, r0, #20
 8009942:	f04f 0a00 	mov.w	sl, #0
 8009946:	e7b0      	b.n	80098aa <__gethex+0x1f6>
 8009948:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800994c:	42a8      	cmp	r0, r5
 800994e:	dd71      	ble.n	8009a34 <__gethex+0x380>
 8009950:	1b45      	subs	r5, r0, r5
 8009952:	42ae      	cmp	r6, r5
 8009954:	dc34      	bgt.n	80099c0 <__gethex+0x30c>
 8009956:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800995a:	2b02      	cmp	r3, #2
 800995c:	d028      	beq.n	80099b0 <__gethex+0x2fc>
 800995e:	2b03      	cmp	r3, #3
 8009960:	d02a      	beq.n	80099b8 <__gethex+0x304>
 8009962:	2b01      	cmp	r3, #1
 8009964:	d115      	bne.n	8009992 <__gethex+0x2de>
 8009966:	42ae      	cmp	r6, r5
 8009968:	d113      	bne.n	8009992 <__gethex+0x2de>
 800996a:	2e01      	cmp	r6, #1
 800996c:	d10b      	bne.n	8009986 <__gethex+0x2d2>
 800996e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009972:	9a06      	ldr	r2, [sp, #24]
 8009974:	2762      	movs	r7, #98	; 0x62
 8009976:	6013      	str	r3, [r2, #0]
 8009978:	2301      	movs	r3, #1
 800997a:	6123      	str	r3, [r4, #16]
 800997c:	f8c9 3000 	str.w	r3, [r9]
 8009980:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009982:	601c      	str	r4, [r3, #0]
 8009984:	e728      	b.n	80097d8 <__gethex+0x124>
 8009986:	4620      	mov	r0, r4
 8009988:	1e71      	subs	r1, r6, #1
 800998a:	f000 fe74 	bl	800a676 <__any_on>
 800998e:	2800      	cmp	r0, #0
 8009990:	d1ed      	bne.n	800996e <__gethex+0x2ba>
 8009992:	4621      	mov	r1, r4
 8009994:	9802      	ldr	r0, [sp, #8]
 8009996:	f000 fa17 	bl	8009dc8 <_Bfree>
 800999a:	2300      	movs	r3, #0
 800999c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800999e:	2750      	movs	r7, #80	; 0x50
 80099a0:	6013      	str	r3, [r2, #0]
 80099a2:	e719      	b.n	80097d8 <__gethex+0x124>
 80099a4:	0800c430 	.word	0x0800c430
 80099a8:	0800c3b4 	.word	0x0800c3b4
 80099ac:	0800c3c5 	.word	0x0800c3c5
 80099b0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d1ed      	bne.n	8009992 <__gethex+0x2de>
 80099b6:	e7da      	b.n	800996e <__gethex+0x2ba>
 80099b8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d1d7      	bne.n	800996e <__gethex+0x2ba>
 80099be:	e7e8      	b.n	8009992 <__gethex+0x2de>
 80099c0:	1e6f      	subs	r7, r5, #1
 80099c2:	f1ba 0f00 	cmp.w	sl, #0
 80099c6:	d132      	bne.n	8009a2e <__gethex+0x37a>
 80099c8:	b127      	cbz	r7, 80099d4 <__gethex+0x320>
 80099ca:	4639      	mov	r1, r7
 80099cc:	4620      	mov	r0, r4
 80099ce:	f000 fe52 	bl	800a676 <__any_on>
 80099d2:	4682      	mov	sl, r0
 80099d4:	2101      	movs	r1, #1
 80099d6:	117b      	asrs	r3, r7, #5
 80099d8:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80099dc:	f007 071f 	and.w	r7, r7, #31
 80099e0:	fa01 f707 	lsl.w	r7, r1, r7
 80099e4:	421f      	tst	r7, r3
 80099e6:	f04f 0702 	mov.w	r7, #2
 80099ea:	4629      	mov	r1, r5
 80099ec:	4620      	mov	r0, r4
 80099ee:	bf18      	it	ne
 80099f0:	f04a 0a02 	orrne.w	sl, sl, #2
 80099f4:	1b76      	subs	r6, r6, r5
 80099f6:	f7ff fdf5 	bl	80095e4 <rshift>
 80099fa:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80099fe:	f1ba 0f00 	cmp.w	sl, #0
 8009a02:	d048      	beq.n	8009a96 <__gethex+0x3e2>
 8009a04:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009a08:	2b02      	cmp	r3, #2
 8009a0a:	d015      	beq.n	8009a38 <__gethex+0x384>
 8009a0c:	2b03      	cmp	r3, #3
 8009a0e:	d017      	beq.n	8009a40 <__gethex+0x38c>
 8009a10:	2b01      	cmp	r3, #1
 8009a12:	d109      	bne.n	8009a28 <__gethex+0x374>
 8009a14:	f01a 0f02 	tst.w	sl, #2
 8009a18:	d006      	beq.n	8009a28 <__gethex+0x374>
 8009a1a:	f8d9 0000 	ldr.w	r0, [r9]
 8009a1e:	ea4a 0a00 	orr.w	sl, sl, r0
 8009a22:	f01a 0f01 	tst.w	sl, #1
 8009a26:	d10e      	bne.n	8009a46 <__gethex+0x392>
 8009a28:	f047 0710 	orr.w	r7, r7, #16
 8009a2c:	e033      	b.n	8009a96 <__gethex+0x3e2>
 8009a2e:	f04f 0a01 	mov.w	sl, #1
 8009a32:	e7cf      	b.n	80099d4 <__gethex+0x320>
 8009a34:	2701      	movs	r7, #1
 8009a36:	e7e2      	b.n	80099fe <__gethex+0x34a>
 8009a38:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009a3a:	f1c3 0301 	rsb	r3, r3, #1
 8009a3e:	9315      	str	r3, [sp, #84]	; 0x54
 8009a40:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d0f0      	beq.n	8009a28 <__gethex+0x374>
 8009a46:	f04f 0c00 	mov.w	ip, #0
 8009a4a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8009a4e:	f104 0314 	add.w	r3, r4, #20
 8009a52:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8009a56:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8009a5a:	4618      	mov	r0, r3
 8009a5c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009a60:	f1b2 3fff 	cmp.w	r2, #4294967295
 8009a64:	d01c      	beq.n	8009aa0 <__gethex+0x3ec>
 8009a66:	3201      	adds	r2, #1
 8009a68:	6002      	str	r2, [r0, #0]
 8009a6a:	2f02      	cmp	r7, #2
 8009a6c:	f104 0314 	add.w	r3, r4, #20
 8009a70:	d13d      	bne.n	8009aee <__gethex+0x43a>
 8009a72:	f8d8 2000 	ldr.w	r2, [r8]
 8009a76:	3a01      	subs	r2, #1
 8009a78:	42b2      	cmp	r2, r6
 8009a7a:	d10a      	bne.n	8009a92 <__gethex+0x3de>
 8009a7c:	2201      	movs	r2, #1
 8009a7e:	1171      	asrs	r1, r6, #5
 8009a80:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009a84:	f006 061f 	and.w	r6, r6, #31
 8009a88:	fa02 f606 	lsl.w	r6, r2, r6
 8009a8c:	421e      	tst	r6, r3
 8009a8e:	bf18      	it	ne
 8009a90:	4617      	movne	r7, r2
 8009a92:	f047 0720 	orr.w	r7, r7, #32
 8009a96:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009a98:	601c      	str	r4, [r3, #0]
 8009a9a:	9b06      	ldr	r3, [sp, #24]
 8009a9c:	601d      	str	r5, [r3, #0]
 8009a9e:	e69b      	b.n	80097d8 <__gethex+0x124>
 8009aa0:	4299      	cmp	r1, r3
 8009aa2:	f843 cc04 	str.w	ip, [r3, #-4]
 8009aa6:	d8d8      	bhi.n	8009a5a <__gethex+0x3a6>
 8009aa8:	68a3      	ldr	r3, [r4, #8]
 8009aaa:	459b      	cmp	fp, r3
 8009aac:	db17      	blt.n	8009ade <__gethex+0x42a>
 8009aae:	6861      	ldr	r1, [r4, #4]
 8009ab0:	9802      	ldr	r0, [sp, #8]
 8009ab2:	3101      	adds	r1, #1
 8009ab4:	f000 f948 	bl	8009d48 <_Balloc>
 8009ab8:	4681      	mov	r9, r0
 8009aba:	b918      	cbnz	r0, 8009ac4 <__gethex+0x410>
 8009abc:	4602      	mov	r2, r0
 8009abe:	2184      	movs	r1, #132	; 0x84
 8009ac0:	4b19      	ldr	r3, [pc, #100]	; (8009b28 <__gethex+0x474>)
 8009ac2:	e6ac      	b.n	800981e <__gethex+0x16a>
 8009ac4:	6922      	ldr	r2, [r4, #16]
 8009ac6:	f104 010c 	add.w	r1, r4, #12
 8009aca:	3202      	adds	r2, #2
 8009acc:	0092      	lsls	r2, r2, #2
 8009ace:	300c      	adds	r0, #12
 8009ad0:	f000 f92c 	bl	8009d2c <memcpy>
 8009ad4:	4621      	mov	r1, r4
 8009ad6:	9802      	ldr	r0, [sp, #8]
 8009ad8:	f000 f976 	bl	8009dc8 <_Bfree>
 8009adc:	464c      	mov	r4, r9
 8009ade:	6923      	ldr	r3, [r4, #16]
 8009ae0:	1c5a      	adds	r2, r3, #1
 8009ae2:	6122      	str	r2, [r4, #16]
 8009ae4:	2201      	movs	r2, #1
 8009ae6:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009aea:	615a      	str	r2, [r3, #20]
 8009aec:	e7bd      	b.n	8009a6a <__gethex+0x3b6>
 8009aee:	6922      	ldr	r2, [r4, #16]
 8009af0:	455a      	cmp	r2, fp
 8009af2:	dd0b      	ble.n	8009b0c <__gethex+0x458>
 8009af4:	2101      	movs	r1, #1
 8009af6:	4620      	mov	r0, r4
 8009af8:	f7ff fd74 	bl	80095e4 <rshift>
 8009afc:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009b00:	3501      	adds	r5, #1
 8009b02:	42ab      	cmp	r3, r5
 8009b04:	f6ff aed5 	blt.w	80098b2 <__gethex+0x1fe>
 8009b08:	2701      	movs	r7, #1
 8009b0a:	e7c2      	b.n	8009a92 <__gethex+0x3de>
 8009b0c:	f016 061f 	ands.w	r6, r6, #31
 8009b10:	d0fa      	beq.n	8009b08 <__gethex+0x454>
 8009b12:	449a      	add	sl, r3
 8009b14:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8009b18:	f000 fa0c 	bl	8009f34 <__hi0bits>
 8009b1c:	f1c6 0620 	rsb	r6, r6, #32
 8009b20:	42b0      	cmp	r0, r6
 8009b22:	dbe7      	blt.n	8009af4 <__gethex+0x440>
 8009b24:	e7f0      	b.n	8009b08 <__gethex+0x454>
 8009b26:	bf00      	nop
 8009b28:	0800c3b4 	.word	0x0800c3b4

08009b2c <L_shift>:
 8009b2c:	f1c2 0208 	rsb	r2, r2, #8
 8009b30:	0092      	lsls	r2, r2, #2
 8009b32:	b570      	push	{r4, r5, r6, lr}
 8009b34:	f1c2 0620 	rsb	r6, r2, #32
 8009b38:	6843      	ldr	r3, [r0, #4]
 8009b3a:	6804      	ldr	r4, [r0, #0]
 8009b3c:	fa03 f506 	lsl.w	r5, r3, r6
 8009b40:	432c      	orrs	r4, r5
 8009b42:	40d3      	lsrs	r3, r2
 8009b44:	6004      	str	r4, [r0, #0]
 8009b46:	f840 3f04 	str.w	r3, [r0, #4]!
 8009b4a:	4288      	cmp	r0, r1
 8009b4c:	d3f4      	bcc.n	8009b38 <L_shift+0xc>
 8009b4e:	bd70      	pop	{r4, r5, r6, pc}

08009b50 <__match>:
 8009b50:	b530      	push	{r4, r5, lr}
 8009b52:	6803      	ldr	r3, [r0, #0]
 8009b54:	3301      	adds	r3, #1
 8009b56:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009b5a:	b914      	cbnz	r4, 8009b62 <__match+0x12>
 8009b5c:	6003      	str	r3, [r0, #0]
 8009b5e:	2001      	movs	r0, #1
 8009b60:	bd30      	pop	{r4, r5, pc}
 8009b62:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009b66:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8009b6a:	2d19      	cmp	r5, #25
 8009b6c:	bf98      	it	ls
 8009b6e:	3220      	addls	r2, #32
 8009b70:	42a2      	cmp	r2, r4
 8009b72:	d0f0      	beq.n	8009b56 <__match+0x6>
 8009b74:	2000      	movs	r0, #0
 8009b76:	e7f3      	b.n	8009b60 <__match+0x10>

08009b78 <__hexnan>:
 8009b78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b7c:	2500      	movs	r5, #0
 8009b7e:	680b      	ldr	r3, [r1, #0]
 8009b80:	4682      	mov	sl, r0
 8009b82:	115e      	asrs	r6, r3, #5
 8009b84:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009b88:	f013 031f 	ands.w	r3, r3, #31
 8009b8c:	bf18      	it	ne
 8009b8e:	3604      	addne	r6, #4
 8009b90:	1f37      	subs	r7, r6, #4
 8009b92:	4690      	mov	r8, r2
 8009b94:	46b9      	mov	r9, r7
 8009b96:	463c      	mov	r4, r7
 8009b98:	46ab      	mov	fp, r5
 8009b9a:	b087      	sub	sp, #28
 8009b9c:	6801      	ldr	r1, [r0, #0]
 8009b9e:	9301      	str	r3, [sp, #4]
 8009ba0:	f846 5c04 	str.w	r5, [r6, #-4]
 8009ba4:	9502      	str	r5, [sp, #8]
 8009ba6:	784a      	ldrb	r2, [r1, #1]
 8009ba8:	1c4b      	adds	r3, r1, #1
 8009baa:	9303      	str	r3, [sp, #12]
 8009bac:	b342      	cbz	r2, 8009c00 <__hexnan+0x88>
 8009bae:	4610      	mov	r0, r2
 8009bb0:	9105      	str	r1, [sp, #20]
 8009bb2:	9204      	str	r2, [sp, #16]
 8009bb4:	f7ff fd69 	bl	800968a <__hexdig_fun>
 8009bb8:	2800      	cmp	r0, #0
 8009bba:	d14f      	bne.n	8009c5c <__hexnan+0xe4>
 8009bbc:	9a04      	ldr	r2, [sp, #16]
 8009bbe:	9905      	ldr	r1, [sp, #20]
 8009bc0:	2a20      	cmp	r2, #32
 8009bc2:	d818      	bhi.n	8009bf6 <__hexnan+0x7e>
 8009bc4:	9b02      	ldr	r3, [sp, #8]
 8009bc6:	459b      	cmp	fp, r3
 8009bc8:	dd13      	ble.n	8009bf2 <__hexnan+0x7a>
 8009bca:	454c      	cmp	r4, r9
 8009bcc:	d206      	bcs.n	8009bdc <__hexnan+0x64>
 8009bce:	2d07      	cmp	r5, #7
 8009bd0:	dc04      	bgt.n	8009bdc <__hexnan+0x64>
 8009bd2:	462a      	mov	r2, r5
 8009bd4:	4649      	mov	r1, r9
 8009bd6:	4620      	mov	r0, r4
 8009bd8:	f7ff ffa8 	bl	8009b2c <L_shift>
 8009bdc:	4544      	cmp	r4, r8
 8009bde:	d950      	bls.n	8009c82 <__hexnan+0x10a>
 8009be0:	2300      	movs	r3, #0
 8009be2:	f1a4 0904 	sub.w	r9, r4, #4
 8009be6:	f844 3c04 	str.w	r3, [r4, #-4]
 8009bea:	461d      	mov	r5, r3
 8009bec:	464c      	mov	r4, r9
 8009bee:	f8cd b008 	str.w	fp, [sp, #8]
 8009bf2:	9903      	ldr	r1, [sp, #12]
 8009bf4:	e7d7      	b.n	8009ba6 <__hexnan+0x2e>
 8009bf6:	2a29      	cmp	r2, #41	; 0x29
 8009bf8:	d156      	bne.n	8009ca8 <__hexnan+0x130>
 8009bfa:	3102      	adds	r1, #2
 8009bfc:	f8ca 1000 	str.w	r1, [sl]
 8009c00:	f1bb 0f00 	cmp.w	fp, #0
 8009c04:	d050      	beq.n	8009ca8 <__hexnan+0x130>
 8009c06:	454c      	cmp	r4, r9
 8009c08:	d206      	bcs.n	8009c18 <__hexnan+0xa0>
 8009c0a:	2d07      	cmp	r5, #7
 8009c0c:	dc04      	bgt.n	8009c18 <__hexnan+0xa0>
 8009c0e:	462a      	mov	r2, r5
 8009c10:	4649      	mov	r1, r9
 8009c12:	4620      	mov	r0, r4
 8009c14:	f7ff ff8a 	bl	8009b2c <L_shift>
 8009c18:	4544      	cmp	r4, r8
 8009c1a:	d934      	bls.n	8009c86 <__hexnan+0x10e>
 8009c1c:	4623      	mov	r3, r4
 8009c1e:	f1a8 0204 	sub.w	r2, r8, #4
 8009c22:	f853 1b04 	ldr.w	r1, [r3], #4
 8009c26:	429f      	cmp	r7, r3
 8009c28:	f842 1f04 	str.w	r1, [r2, #4]!
 8009c2c:	d2f9      	bcs.n	8009c22 <__hexnan+0xaa>
 8009c2e:	1b3b      	subs	r3, r7, r4
 8009c30:	f023 0303 	bic.w	r3, r3, #3
 8009c34:	3304      	adds	r3, #4
 8009c36:	3401      	adds	r4, #1
 8009c38:	3e03      	subs	r6, #3
 8009c3a:	42b4      	cmp	r4, r6
 8009c3c:	bf88      	it	hi
 8009c3e:	2304      	movhi	r3, #4
 8009c40:	2200      	movs	r2, #0
 8009c42:	4443      	add	r3, r8
 8009c44:	f843 2b04 	str.w	r2, [r3], #4
 8009c48:	429f      	cmp	r7, r3
 8009c4a:	d2fb      	bcs.n	8009c44 <__hexnan+0xcc>
 8009c4c:	683b      	ldr	r3, [r7, #0]
 8009c4e:	b91b      	cbnz	r3, 8009c58 <__hexnan+0xe0>
 8009c50:	4547      	cmp	r7, r8
 8009c52:	d127      	bne.n	8009ca4 <__hexnan+0x12c>
 8009c54:	2301      	movs	r3, #1
 8009c56:	603b      	str	r3, [r7, #0]
 8009c58:	2005      	movs	r0, #5
 8009c5a:	e026      	b.n	8009caa <__hexnan+0x132>
 8009c5c:	3501      	adds	r5, #1
 8009c5e:	2d08      	cmp	r5, #8
 8009c60:	f10b 0b01 	add.w	fp, fp, #1
 8009c64:	dd06      	ble.n	8009c74 <__hexnan+0xfc>
 8009c66:	4544      	cmp	r4, r8
 8009c68:	d9c3      	bls.n	8009bf2 <__hexnan+0x7a>
 8009c6a:	2300      	movs	r3, #0
 8009c6c:	2501      	movs	r5, #1
 8009c6e:	f844 3c04 	str.w	r3, [r4, #-4]
 8009c72:	3c04      	subs	r4, #4
 8009c74:	6822      	ldr	r2, [r4, #0]
 8009c76:	f000 000f 	and.w	r0, r0, #15
 8009c7a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8009c7e:	6022      	str	r2, [r4, #0]
 8009c80:	e7b7      	b.n	8009bf2 <__hexnan+0x7a>
 8009c82:	2508      	movs	r5, #8
 8009c84:	e7b5      	b.n	8009bf2 <__hexnan+0x7a>
 8009c86:	9b01      	ldr	r3, [sp, #4]
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d0df      	beq.n	8009c4c <__hexnan+0xd4>
 8009c8c:	f04f 32ff 	mov.w	r2, #4294967295
 8009c90:	f1c3 0320 	rsb	r3, r3, #32
 8009c94:	fa22 f303 	lsr.w	r3, r2, r3
 8009c98:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8009c9c:	401a      	ands	r2, r3
 8009c9e:	f846 2c04 	str.w	r2, [r6, #-4]
 8009ca2:	e7d3      	b.n	8009c4c <__hexnan+0xd4>
 8009ca4:	3f04      	subs	r7, #4
 8009ca6:	e7d1      	b.n	8009c4c <__hexnan+0xd4>
 8009ca8:	2004      	movs	r0, #4
 8009caa:	b007      	add	sp, #28
 8009cac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009cb0 <_localeconv_r>:
 8009cb0:	4800      	ldr	r0, [pc, #0]	; (8009cb4 <_localeconv_r+0x4>)
 8009cb2:	4770      	bx	lr
 8009cb4:	20000164 	.word	0x20000164

08009cb8 <_lseek_r>:
 8009cb8:	b538      	push	{r3, r4, r5, lr}
 8009cba:	4604      	mov	r4, r0
 8009cbc:	4608      	mov	r0, r1
 8009cbe:	4611      	mov	r1, r2
 8009cc0:	2200      	movs	r2, #0
 8009cc2:	4d05      	ldr	r5, [pc, #20]	; (8009cd8 <_lseek_r+0x20>)
 8009cc4:	602a      	str	r2, [r5, #0]
 8009cc6:	461a      	mov	r2, r3
 8009cc8:	f7f8 ff14 	bl	8002af4 <_lseek>
 8009ccc:	1c43      	adds	r3, r0, #1
 8009cce:	d102      	bne.n	8009cd6 <_lseek_r+0x1e>
 8009cd0:	682b      	ldr	r3, [r5, #0]
 8009cd2:	b103      	cbz	r3, 8009cd6 <_lseek_r+0x1e>
 8009cd4:	6023      	str	r3, [r4, #0]
 8009cd6:	bd38      	pop	{r3, r4, r5, pc}
 8009cd8:	20000418 	.word	0x20000418

08009cdc <malloc>:
 8009cdc:	4b02      	ldr	r3, [pc, #8]	; (8009ce8 <malloc+0xc>)
 8009cde:	4601      	mov	r1, r0
 8009ce0:	6818      	ldr	r0, [r3, #0]
 8009ce2:	f000 bd43 	b.w	800a76c <_malloc_r>
 8009ce6:	bf00      	nop
 8009ce8:	2000000c 	.word	0x2000000c

08009cec <__ascii_mbtowc>:
 8009cec:	b082      	sub	sp, #8
 8009cee:	b901      	cbnz	r1, 8009cf2 <__ascii_mbtowc+0x6>
 8009cf0:	a901      	add	r1, sp, #4
 8009cf2:	b142      	cbz	r2, 8009d06 <__ascii_mbtowc+0x1a>
 8009cf4:	b14b      	cbz	r3, 8009d0a <__ascii_mbtowc+0x1e>
 8009cf6:	7813      	ldrb	r3, [r2, #0]
 8009cf8:	600b      	str	r3, [r1, #0]
 8009cfa:	7812      	ldrb	r2, [r2, #0]
 8009cfc:	1e10      	subs	r0, r2, #0
 8009cfe:	bf18      	it	ne
 8009d00:	2001      	movne	r0, #1
 8009d02:	b002      	add	sp, #8
 8009d04:	4770      	bx	lr
 8009d06:	4610      	mov	r0, r2
 8009d08:	e7fb      	b.n	8009d02 <__ascii_mbtowc+0x16>
 8009d0a:	f06f 0001 	mvn.w	r0, #1
 8009d0e:	e7f8      	b.n	8009d02 <__ascii_mbtowc+0x16>

08009d10 <memchr>:
 8009d10:	4603      	mov	r3, r0
 8009d12:	b510      	push	{r4, lr}
 8009d14:	b2c9      	uxtb	r1, r1
 8009d16:	4402      	add	r2, r0
 8009d18:	4293      	cmp	r3, r2
 8009d1a:	4618      	mov	r0, r3
 8009d1c:	d101      	bne.n	8009d22 <memchr+0x12>
 8009d1e:	2000      	movs	r0, #0
 8009d20:	e003      	b.n	8009d2a <memchr+0x1a>
 8009d22:	7804      	ldrb	r4, [r0, #0]
 8009d24:	3301      	adds	r3, #1
 8009d26:	428c      	cmp	r4, r1
 8009d28:	d1f6      	bne.n	8009d18 <memchr+0x8>
 8009d2a:	bd10      	pop	{r4, pc}

08009d2c <memcpy>:
 8009d2c:	440a      	add	r2, r1
 8009d2e:	4291      	cmp	r1, r2
 8009d30:	f100 33ff 	add.w	r3, r0, #4294967295
 8009d34:	d100      	bne.n	8009d38 <memcpy+0xc>
 8009d36:	4770      	bx	lr
 8009d38:	b510      	push	{r4, lr}
 8009d3a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009d3e:	4291      	cmp	r1, r2
 8009d40:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009d44:	d1f9      	bne.n	8009d3a <memcpy+0xe>
 8009d46:	bd10      	pop	{r4, pc}

08009d48 <_Balloc>:
 8009d48:	b570      	push	{r4, r5, r6, lr}
 8009d4a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009d4c:	4604      	mov	r4, r0
 8009d4e:	460d      	mov	r5, r1
 8009d50:	b976      	cbnz	r6, 8009d70 <_Balloc+0x28>
 8009d52:	2010      	movs	r0, #16
 8009d54:	f7ff ffc2 	bl	8009cdc <malloc>
 8009d58:	4602      	mov	r2, r0
 8009d5a:	6260      	str	r0, [r4, #36]	; 0x24
 8009d5c:	b920      	cbnz	r0, 8009d68 <_Balloc+0x20>
 8009d5e:	2166      	movs	r1, #102	; 0x66
 8009d60:	4b17      	ldr	r3, [pc, #92]	; (8009dc0 <_Balloc+0x78>)
 8009d62:	4818      	ldr	r0, [pc, #96]	; (8009dc4 <_Balloc+0x7c>)
 8009d64:	f001 fb0e 	bl	800b384 <__assert_func>
 8009d68:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009d6c:	6006      	str	r6, [r0, #0]
 8009d6e:	60c6      	str	r6, [r0, #12]
 8009d70:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009d72:	68f3      	ldr	r3, [r6, #12]
 8009d74:	b183      	cbz	r3, 8009d98 <_Balloc+0x50>
 8009d76:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009d78:	68db      	ldr	r3, [r3, #12]
 8009d7a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009d7e:	b9b8      	cbnz	r0, 8009db0 <_Balloc+0x68>
 8009d80:	2101      	movs	r1, #1
 8009d82:	fa01 f605 	lsl.w	r6, r1, r5
 8009d86:	1d72      	adds	r2, r6, #5
 8009d88:	4620      	mov	r0, r4
 8009d8a:	0092      	lsls	r2, r2, #2
 8009d8c:	f000 fc94 	bl	800a6b8 <_calloc_r>
 8009d90:	b160      	cbz	r0, 8009dac <_Balloc+0x64>
 8009d92:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009d96:	e00e      	b.n	8009db6 <_Balloc+0x6e>
 8009d98:	2221      	movs	r2, #33	; 0x21
 8009d9a:	2104      	movs	r1, #4
 8009d9c:	4620      	mov	r0, r4
 8009d9e:	f000 fc8b 	bl	800a6b8 <_calloc_r>
 8009da2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009da4:	60f0      	str	r0, [r6, #12]
 8009da6:	68db      	ldr	r3, [r3, #12]
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d1e4      	bne.n	8009d76 <_Balloc+0x2e>
 8009dac:	2000      	movs	r0, #0
 8009dae:	bd70      	pop	{r4, r5, r6, pc}
 8009db0:	6802      	ldr	r2, [r0, #0]
 8009db2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009db6:	2300      	movs	r3, #0
 8009db8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009dbc:	e7f7      	b.n	8009dae <_Balloc+0x66>
 8009dbe:	bf00      	nop
 8009dc0:	0800c33e 	.word	0x0800c33e
 8009dc4:	0800c444 	.word	0x0800c444

08009dc8 <_Bfree>:
 8009dc8:	b570      	push	{r4, r5, r6, lr}
 8009dca:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009dcc:	4605      	mov	r5, r0
 8009dce:	460c      	mov	r4, r1
 8009dd0:	b976      	cbnz	r6, 8009df0 <_Bfree+0x28>
 8009dd2:	2010      	movs	r0, #16
 8009dd4:	f7ff ff82 	bl	8009cdc <malloc>
 8009dd8:	4602      	mov	r2, r0
 8009dda:	6268      	str	r0, [r5, #36]	; 0x24
 8009ddc:	b920      	cbnz	r0, 8009de8 <_Bfree+0x20>
 8009dde:	218a      	movs	r1, #138	; 0x8a
 8009de0:	4b08      	ldr	r3, [pc, #32]	; (8009e04 <_Bfree+0x3c>)
 8009de2:	4809      	ldr	r0, [pc, #36]	; (8009e08 <_Bfree+0x40>)
 8009de4:	f001 face 	bl	800b384 <__assert_func>
 8009de8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009dec:	6006      	str	r6, [r0, #0]
 8009dee:	60c6      	str	r6, [r0, #12]
 8009df0:	b13c      	cbz	r4, 8009e02 <_Bfree+0x3a>
 8009df2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009df4:	6862      	ldr	r2, [r4, #4]
 8009df6:	68db      	ldr	r3, [r3, #12]
 8009df8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009dfc:	6021      	str	r1, [r4, #0]
 8009dfe:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009e02:	bd70      	pop	{r4, r5, r6, pc}
 8009e04:	0800c33e 	.word	0x0800c33e
 8009e08:	0800c444 	.word	0x0800c444

08009e0c <__multadd>:
 8009e0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e10:	4698      	mov	r8, r3
 8009e12:	460c      	mov	r4, r1
 8009e14:	2300      	movs	r3, #0
 8009e16:	690e      	ldr	r6, [r1, #16]
 8009e18:	4607      	mov	r7, r0
 8009e1a:	f101 0014 	add.w	r0, r1, #20
 8009e1e:	6805      	ldr	r5, [r0, #0]
 8009e20:	3301      	adds	r3, #1
 8009e22:	b2a9      	uxth	r1, r5
 8009e24:	fb02 8101 	mla	r1, r2, r1, r8
 8009e28:	0c2d      	lsrs	r5, r5, #16
 8009e2a:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8009e2e:	fb02 c505 	mla	r5, r2, r5, ip
 8009e32:	b289      	uxth	r1, r1
 8009e34:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8009e38:	429e      	cmp	r6, r3
 8009e3a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8009e3e:	f840 1b04 	str.w	r1, [r0], #4
 8009e42:	dcec      	bgt.n	8009e1e <__multadd+0x12>
 8009e44:	f1b8 0f00 	cmp.w	r8, #0
 8009e48:	d022      	beq.n	8009e90 <__multadd+0x84>
 8009e4a:	68a3      	ldr	r3, [r4, #8]
 8009e4c:	42b3      	cmp	r3, r6
 8009e4e:	dc19      	bgt.n	8009e84 <__multadd+0x78>
 8009e50:	6861      	ldr	r1, [r4, #4]
 8009e52:	4638      	mov	r0, r7
 8009e54:	3101      	adds	r1, #1
 8009e56:	f7ff ff77 	bl	8009d48 <_Balloc>
 8009e5a:	4605      	mov	r5, r0
 8009e5c:	b928      	cbnz	r0, 8009e6a <__multadd+0x5e>
 8009e5e:	4602      	mov	r2, r0
 8009e60:	21b5      	movs	r1, #181	; 0xb5
 8009e62:	4b0d      	ldr	r3, [pc, #52]	; (8009e98 <__multadd+0x8c>)
 8009e64:	480d      	ldr	r0, [pc, #52]	; (8009e9c <__multadd+0x90>)
 8009e66:	f001 fa8d 	bl	800b384 <__assert_func>
 8009e6a:	6922      	ldr	r2, [r4, #16]
 8009e6c:	f104 010c 	add.w	r1, r4, #12
 8009e70:	3202      	adds	r2, #2
 8009e72:	0092      	lsls	r2, r2, #2
 8009e74:	300c      	adds	r0, #12
 8009e76:	f7ff ff59 	bl	8009d2c <memcpy>
 8009e7a:	4621      	mov	r1, r4
 8009e7c:	4638      	mov	r0, r7
 8009e7e:	f7ff ffa3 	bl	8009dc8 <_Bfree>
 8009e82:	462c      	mov	r4, r5
 8009e84:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8009e88:	3601      	adds	r6, #1
 8009e8a:	f8c3 8014 	str.w	r8, [r3, #20]
 8009e8e:	6126      	str	r6, [r4, #16]
 8009e90:	4620      	mov	r0, r4
 8009e92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009e96:	bf00      	nop
 8009e98:	0800c3b4 	.word	0x0800c3b4
 8009e9c:	0800c444 	.word	0x0800c444

08009ea0 <__s2b>:
 8009ea0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009ea4:	4615      	mov	r5, r2
 8009ea6:	2209      	movs	r2, #9
 8009ea8:	461f      	mov	r7, r3
 8009eaa:	3308      	adds	r3, #8
 8009eac:	460c      	mov	r4, r1
 8009eae:	fb93 f3f2 	sdiv	r3, r3, r2
 8009eb2:	4606      	mov	r6, r0
 8009eb4:	2201      	movs	r2, #1
 8009eb6:	2100      	movs	r1, #0
 8009eb8:	429a      	cmp	r2, r3
 8009eba:	db09      	blt.n	8009ed0 <__s2b+0x30>
 8009ebc:	4630      	mov	r0, r6
 8009ebe:	f7ff ff43 	bl	8009d48 <_Balloc>
 8009ec2:	b940      	cbnz	r0, 8009ed6 <__s2b+0x36>
 8009ec4:	4602      	mov	r2, r0
 8009ec6:	21ce      	movs	r1, #206	; 0xce
 8009ec8:	4b18      	ldr	r3, [pc, #96]	; (8009f2c <__s2b+0x8c>)
 8009eca:	4819      	ldr	r0, [pc, #100]	; (8009f30 <__s2b+0x90>)
 8009ecc:	f001 fa5a 	bl	800b384 <__assert_func>
 8009ed0:	0052      	lsls	r2, r2, #1
 8009ed2:	3101      	adds	r1, #1
 8009ed4:	e7f0      	b.n	8009eb8 <__s2b+0x18>
 8009ed6:	9b08      	ldr	r3, [sp, #32]
 8009ed8:	2d09      	cmp	r5, #9
 8009eda:	6143      	str	r3, [r0, #20]
 8009edc:	f04f 0301 	mov.w	r3, #1
 8009ee0:	6103      	str	r3, [r0, #16]
 8009ee2:	dd16      	ble.n	8009f12 <__s2b+0x72>
 8009ee4:	f104 0909 	add.w	r9, r4, #9
 8009ee8:	46c8      	mov	r8, r9
 8009eea:	442c      	add	r4, r5
 8009eec:	f818 3b01 	ldrb.w	r3, [r8], #1
 8009ef0:	4601      	mov	r1, r0
 8009ef2:	220a      	movs	r2, #10
 8009ef4:	4630      	mov	r0, r6
 8009ef6:	3b30      	subs	r3, #48	; 0x30
 8009ef8:	f7ff ff88 	bl	8009e0c <__multadd>
 8009efc:	45a0      	cmp	r8, r4
 8009efe:	d1f5      	bne.n	8009eec <__s2b+0x4c>
 8009f00:	f1a5 0408 	sub.w	r4, r5, #8
 8009f04:	444c      	add	r4, r9
 8009f06:	1b2d      	subs	r5, r5, r4
 8009f08:	1963      	adds	r3, r4, r5
 8009f0a:	42bb      	cmp	r3, r7
 8009f0c:	db04      	blt.n	8009f18 <__s2b+0x78>
 8009f0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009f12:	2509      	movs	r5, #9
 8009f14:	340a      	adds	r4, #10
 8009f16:	e7f6      	b.n	8009f06 <__s2b+0x66>
 8009f18:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009f1c:	4601      	mov	r1, r0
 8009f1e:	220a      	movs	r2, #10
 8009f20:	4630      	mov	r0, r6
 8009f22:	3b30      	subs	r3, #48	; 0x30
 8009f24:	f7ff ff72 	bl	8009e0c <__multadd>
 8009f28:	e7ee      	b.n	8009f08 <__s2b+0x68>
 8009f2a:	bf00      	nop
 8009f2c:	0800c3b4 	.word	0x0800c3b4
 8009f30:	0800c444 	.word	0x0800c444

08009f34 <__hi0bits>:
 8009f34:	0c02      	lsrs	r2, r0, #16
 8009f36:	0412      	lsls	r2, r2, #16
 8009f38:	4603      	mov	r3, r0
 8009f3a:	b9ca      	cbnz	r2, 8009f70 <__hi0bits+0x3c>
 8009f3c:	0403      	lsls	r3, r0, #16
 8009f3e:	2010      	movs	r0, #16
 8009f40:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8009f44:	bf04      	itt	eq
 8009f46:	021b      	lsleq	r3, r3, #8
 8009f48:	3008      	addeq	r0, #8
 8009f4a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8009f4e:	bf04      	itt	eq
 8009f50:	011b      	lsleq	r3, r3, #4
 8009f52:	3004      	addeq	r0, #4
 8009f54:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8009f58:	bf04      	itt	eq
 8009f5a:	009b      	lsleq	r3, r3, #2
 8009f5c:	3002      	addeq	r0, #2
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	db05      	blt.n	8009f6e <__hi0bits+0x3a>
 8009f62:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8009f66:	f100 0001 	add.w	r0, r0, #1
 8009f6a:	bf08      	it	eq
 8009f6c:	2020      	moveq	r0, #32
 8009f6e:	4770      	bx	lr
 8009f70:	2000      	movs	r0, #0
 8009f72:	e7e5      	b.n	8009f40 <__hi0bits+0xc>

08009f74 <__lo0bits>:
 8009f74:	6803      	ldr	r3, [r0, #0]
 8009f76:	4602      	mov	r2, r0
 8009f78:	f013 0007 	ands.w	r0, r3, #7
 8009f7c:	d00b      	beq.n	8009f96 <__lo0bits+0x22>
 8009f7e:	07d9      	lsls	r1, r3, #31
 8009f80:	d422      	bmi.n	8009fc8 <__lo0bits+0x54>
 8009f82:	0798      	lsls	r0, r3, #30
 8009f84:	bf49      	itett	mi
 8009f86:	085b      	lsrmi	r3, r3, #1
 8009f88:	089b      	lsrpl	r3, r3, #2
 8009f8a:	2001      	movmi	r0, #1
 8009f8c:	6013      	strmi	r3, [r2, #0]
 8009f8e:	bf5c      	itt	pl
 8009f90:	2002      	movpl	r0, #2
 8009f92:	6013      	strpl	r3, [r2, #0]
 8009f94:	4770      	bx	lr
 8009f96:	b299      	uxth	r1, r3
 8009f98:	b909      	cbnz	r1, 8009f9e <__lo0bits+0x2a>
 8009f9a:	2010      	movs	r0, #16
 8009f9c:	0c1b      	lsrs	r3, r3, #16
 8009f9e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8009fa2:	bf04      	itt	eq
 8009fa4:	0a1b      	lsreq	r3, r3, #8
 8009fa6:	3008      	addeq	r0, #8
 8009fa8:	0719      	lsls	r1, r3, #28
 8009faa:	bf04      	itt	eq
 8009fac:	091b      	lsreq	r3, r3, #4
 8009fae:	3004      	addeq	r0, #4
 8009fb0:	0799      	lsls	r1, r3, #30
 8009fb2:	bf04      	itt	eq
 8009fb4:	089b      	lsreq	r3, r3, #2
 8009fb6:	3002      	addeq	r0, #2
 8009fb8:	07d9      	lsls	r1, r3, #31
 8009fba:	d403      	bmi.n	8009fc4 <__lo0bits+0x50>
 8009fbc:	085b      	lsrs	r3, r3, #1
 8009fbe:	f100 0001 	add.w	r0, r0, #1
 8009fc2:	d003      	beq.n	8009fcc <__lo0bits+0x58>
 8009fc4:	6013      	str	r3, [r2, #0]
 8009fc6:	4770      	bx	lr
 8009fc8:	2000      	movs	r0, #0
 8009fca:	4770      	bx	lr
 8009fcc:	2020      	movs	r0, #32
 8009fce:	4770      	bx	lr

08009fd0 <__i2b>:
 8009fd0:	b510      	push	{r4, lr}
 8009fd2:	460c      	mov	r4, r1
 8009fd4:	2101      	movs	r1, #1
 8009fd6:	f7ff feb7 	bl	8009d48 <_Balloc>
 8009fda:	4602      	mov	r2, r0
 8009fdc:	b928      	cbnz	r0, 8009fea <__i2b+0x1a>
 8009fde:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8009fe2:	4b04      	ldr	r3, [pc, #16]	; (8009ff4 <__i2b+0x24>)
 8009fe4:	4804      	ldr	r0, [pc, #16]	; (8009ff8 <__i2b+0x28>)
 8009fe6:	f001 f9cd 	bl	800b384 <__assert_func>
 8009fea:	2301      	movs	r3, #1
 8009fec:	6144      	str	r4, [r0, #20]
 8009fee:	6103      	str	r3, [r0, #16]
 8009ff0:	bd10      	pop	{r4, pc}
 8009ff2:	bf00      	nop
 8009ff4:	0800c3b4 	.word	0x0800c3b4
 8009ff8:	0800c444 	.word	0x0800c444

08009ffc <__multiply>:
 8009ffc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a000:	4614      	mov	r4, r2
 800a002:	690a      	ldr	r2, [r1, #16]
 800a004:	6923      	ldr	r3, [r4, #16]
 800a006:	460d      	mov	r5, r1
 800a008:	429a      	cmp	r2, r3
 800a00a:	bfbe      	ittt	lt
 800a00c:	460b      	movlt	r3, r1
 800a00e:	4625      	movlt	r5, r4
 800a010:	461c      	movlt	r4, r3
 800a012:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800a016:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800a01a:	68ab      	ldr	r3, [r5, #8]
 800a01c:	6869      	ldr	r1, [r5, #4]
 800a01e:	eb0a 0709 	add.w	r7, sl, r9
 800a022:	42bb      	cmp	r3, r7
 800a024:	b085      	sub	sp, #20
 800a026:	bfb8      	it	lt
 800a028:	3101      	addlt	r1, #1
 800a02a:	f7ff fe8d 	bl	8009d48 <_Balloc>
 800a02e:	b930      	cbnz	r0, 800a03e <__multiply+0x42>
 800a030:	4602      	mov	r2, r0
 800a032:	f240 115d 	movw	r1, #349	; 0x15d
 800a036:	4b41      	ldr	r3, [pc, #260]	; (800a13c <__multiply+0x140>)
 800a038:	4841      	ldr	r0, [pc, #260]	; (800a140 <__multiply+0x144>)
 800a03a:	f001 f9a3 	bl	800b384 <__assert_func>
 800a03e:	f100 0614 	add.w	r6, r0, #20
 800a042:	4633      	mov	r3, r6
 800a044:	2200      	movs	r2, #0
 800a046:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800a04a:	4543      	cmp	r3, r8
 800a04c:	d31e      	bcc.n	800a08c <__multiply+0x90>
 800a04e:	f105 0c14 	add.w	ip, r5, #20
 800a052:	f104 0314 	add.w	r3, r4, #20
 800a056:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800a05a:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800a05e:	9202      	str	r2, [sp, #8]
 800a060:	ebac 0205 	sub.w	r2, ip, r5
 800a064:	3a15      	subs	r2, #21
 800a066:	f022 0203 	bic.w	r2, r2, #3
 800a06a:	3204      	adds	r2, #4
 800a06c:	f105 0115 	add.w	r1, r5, #21
 800a070:	458c      	cmp	ip, r1
 800a072:	bf38      	it	cc
 800a074:	2204      	movcc	r2, #4
 800a076:	9201      	str	r2, [sp, #4]
 800a078:	9a02      	ldr	r2, [sp, #8]
 800a07a:	9303      	str	r3, [sp, #12]
 800a07c:	429a      	cmp	r2, r3
 800a07e:	d808      	bhi.n	800a092 <__multiply+0x96>
 800a080:	2f00      	cmp	r7, #0
 800a082:	dc55      	bgt.n	800a130 <__multiply+0x134>
 800a084:	6107      	str	r7, [r0, #16]
 800a086:	b005      	add	sp, #20
 800a088:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a08c:	f843 2b04 	str.w	r2, [r3], #4
 800a090:	e7db      	b.n	800a04a <__multiply+0x4e>
 800a092:	f8b3 a000 	ldrh.w	sl, [r3]
 800a096:	f1ba 0f00 	cmp.w	sl, #0
 800a09a:	d020      	beq.n	800a0de <__multiply+0xe2>
 800a09c:	46b1      	mov	r9, r6
 800a09e:	2200      	movs	r2, #0
 800a0a0:	f105 0e14 	add.w	lr, r5, #20
 800a0a4:	f85e 4b04 	ldr.w	r4, [lr], #4
 800a0a8:	f8d9 b000 	ldr.w	fp, [r9]
 800a0ac:	b2a1      	uxth	r1, r4
 800a0ae:	fa1f fb8b 	uxth.w	fp, fp
 800a0b2:	fb0a b101 	mla	r1, sl, r1, fp
 800a0b6:	4411      	add	r1, r2
 800a0b8:	f8d9 2000 	ldr.w	r2, [r9]
 800a0bc:	0c24      	lsrs	r4, r4, #16
 800a0be:	0c12      	lsrs	r2, r2, #16
 800a0c0:	fb0a 2404 	mla	r4, sl, r4, r2
 800a0c4:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800a0c8:	b289      	uxth	r1, r1
 800a0ca:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800a0ce:	45f4      	cmp	ip, lr
 800a0d0:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800a0d4:	f849 1b04 	str.w	r1, [r9], #4
 800a0d8:	d8e4      	bhi.n	800a0a4 <__multiply+0xa8>
 800a0da:	9901      	ldr	r1, [sp, #4]
 800a0dc:	5072      	str	r2, [r6, r1]
 800a0de:	9a03      	ldr	r2, [sp, #12]
 800a0e0:	3304      	adds	r3, #4
 800a0e2:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a0e6:	f1b9 0f00 	cmp.w	r9, #0
 800a0ea:	d01f      	beq.n	800a12c <__multiply+0x130>
 800a0ec:	46b6      	mov	lr, r6
 800a0ee:	f04f 0a00 	mov.w	sl, #0
 800a0f2:	6834      	ldr	r4, [r6, #0]
 800a0f4:	f105 0114 	add.w	r1, r5, #20
 800a0f8:	880a      	ldrh	r2, [r1, #0]
 800a0fa:	f8be b002 	ldrh.w	fp, [lr, #2]
 800a0fe:	b2a4      	uxth	r4, r4
 800a100:	fb09 b202 	mla	r2, r9, r2, fp
 800a104:	4492      	add	sl, r2
 800a106:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800a10a:	f84e 4b04 	str.w	r4, [lr], #4
 800a10e:	f851 4b04 	ldr.w	r4, [r1], #4
 800a112:	f8be 2000 	ldrh.w	r2, [lr]
 800a116:	0c24      	lsrs	r4, r4, #16
 800a118:	fb09 2404 	mla	r4, r9, r4, r2
 800a11c:	458c      	cmp	ip, r1
 800a11e:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800a122:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800a126:	d8e7      	bhi.n	800a0f8 <__multiply+0xfc>
 800a128:	9a01      	ldr	r2, [sp, #4]
 800a12a:	50b4      	str	r4, [r6, r2]
 800a12c:	3604      	adds	r6, #4
 800a12e:	e7a3      	b.n	800a078 <__multiply+0x7c>
 800a130:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a134:	2b00      	cmp	r3, #0
 800a136:	d1a5      	bne.n	800a084 <__multiply+0x88>
 800a138:	3f01      	subs	r7, #1
 800a13a:	e7a1      	b.n	800a080 <__multiply+0x84>
 800a13c:	0800c3b4 	.word	0x0800c3b4
 800a140:	0800c444 	.word	0x0800c444

0800a144 <__pow5mult>:
 800a144:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a148:	4615      	mov	r5, r2
 800a14a:	f012 0203 	ands.w	r2, r2, #3
 800a14e:	4606      	mov	r6, r0
 800a150:	460f      	mov	r7, r1
 800a152:	d007      	beq.n	800a164 <__pow5mult+0x20>
 800a154:	4c25      	ldr	r4, [pc, #148]	; (800a1ec <__pow5mult+0xa8>)
 800a156:	3a01      	subs	r2, #1
 800a158:	2300      	movs	r3, #0
 800a15a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a15e:	f7ff fe55 	bl	8009e0c <__multadd>
 800a162:	4607      	mov	r7, r0
 800a164:	10ad      	asrs	r5, r5, #2
 800a166:	d03d      	beq.n	800a1e4 <__pow5mult+0xa0>
 800a168:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a16a:	b97c      	cbnz	r4, 800a18c <__pow5mult+0x48>
 800a16c:	2010      	movs	r0, #16
 800a16e:	f7ff fdb5 	bl	8009cdc <malloc>
 800a172:	4602      	mov	r2, r0
 800a174:	6270      	str	r0, [r6, #36]	; 0x24
 800a176:	b928      	cbnz	r0, 800a184 <__pow5mult+0x40>
 800a178:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800a17c:	4b1c      	ldr	r3, [pc, #112]	; (800a1f0 <__pow5mult+0xac>)
 800a17e:	481d      	ldr	r0, [pc, #116]	; (800a1f4 <__pow5mult+0xb0>)
 800a180:	f001 f900 	bl	800b384 <__assert_func>
 800a184:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a188:	6004      	str	r4, [r0, #0]
 800a18a:	60c4      	str	r4, [r0, #12]
 800a18c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a190:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a194:	b94c      	cbnz	r4, 800a1aa <__pow5mult+0x66>
 800a196:	f240 2171 	movw	r1, #625	; 0x271
 800a19a:	4630      	mov	r0, r6
 800a19c:	f7ff ff18 	bl	8009fd0 <__i2b>
 800a1a0:	2300      	movs	r3, #0
 800a1a2:	4604      	mov	r4, r0
 800a1a4:	f8c8 0008 	str.w	r0, [r8, #8]
 800a1a8:	6003      	str	r3, [r0, #0]
 800a1aa:	f04f 0900 	mov.w	r9, #0
 800a1ae:	07eb      	lsls	r3, r5, #31
 800a1b0:	d50a      	bpl.n	800a1c8 <__pow5mult+0x84>
 800a1b2:	4639      	mov	r1, r7
 800a1b4:	4622      	mov	r2, r4
 800a1b6:	4630      	mov	r0, r6
 800a1b8:	f7ff ff20 	bl	8009ffc <__multiply>
 800a1bc:	4680      	mov	r8, r0
 800a1be:	4639      	mov	r1, r7
 800a1c0:	4630      	mov	r0, r6
 800a1c2:	f7ff fe01 	bl	8009dc8 <_Bfree>
 800a1c6:	4647      	mov	r7, r8
 800a1c8:	106d      	asrs	r5, r5, #1
 800a1ca:	d00b      	beq.n	800a1e4 <__pow5mult+0xa0>
 800a1cc:	6820      	ldr	r0, [r4, #0]
 800a1ce:	b938      	cbnz	r0, 800a1e0 <__pow5mult+0x9c>
 800a1d0:	4622      	mov	r2, r4
 800a1d2:	4621      	mov	r1, r4
 800a1d4:	4630      	mov	r0, r6
 800a1d6:	f7ff ff11 	bl	8009ffc <__multiply>
 800a1da:	6020      	str	r0, [r4, #0]
 800a1dc:	f8c0 9000 	str.w	r9, [r0]
 800a1e0:	4604      	mov	r4, r0
 800a1e2:	e7e4      	b.n	800a1ae <__pow5mult+0x6a>
 800a1e4:	4638      	mov	r0, r7
 800a1e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a1ea:	bf00      	nop
 800a1ec:	0800c598 	.word	0x0800c598
 800a1f0:	0800c33e 	.word	0x0800c33e
 800a1f4:	0800c444 	.word	0x0800c444

0800a1f8 <__lshift>:
 800a1f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a1fc:	460c      	mov	r4, r1
 800a1fe:	4607      	mov	r7, r0
 800a200:	4691      	mov	r9, r2
 800a202:	6923      	ldr	r3, [r4, #16]
 800a204:	6849      	ldr	r1, [r1, #4]
 800a206:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a20a:	68a3      	ldr	r3, [r4, #8]
 800a20c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a210:	f108 0601 	add.w	r6, r8, #1
 800a214:	42b3      	cmp	r3, r6
 800a216:	db0b      	blt.n	800a230 <__lshift+0x38>
 800a218:	4638      	mov	r0, r7
 800a21a:	f7ff fd95 	bl	8009d48 <_Balloc>
 800a21e:	4605      	mov	r5, r0
 800a220:	b948      	cbnz	r0, 800a236 <__lshift+0x3e>
 800a222:	4602      	mov	r2, r0
 800a224:	f240 11d9 	movw	r1, #473	; 0x1d9
 800a228:	4b27      	ldr	r3, [pc, #156]	; (800a2c8 <__lshift+0xd0>)
 800a22a:	4828      	ldr	r0, [pc, #160]	; (800a2cc <__lshift+0xd4>)
 800a22c:	f001 f8aa 	bl	800b384 <__assert_func>
 800a230:	3101      	adds	r1, #1
 800a232:	005b      	lsls	r3, r3, #1
 800a234:	e7ee      	b.n	800a214 <__lshift+0x1c>
 800a236:	2300      	movs	r3, #0
 800a238:	f100 0114 	add.w	r1, r0, #20
 800a23c:	f100 0210 	add.w	r2, r0, #16
 800a240:	4618      	mov	r0, r3
 800a242:	4553      	cmp	r3, sl
 800a244:	db33      	blt.n	800a2ae <__lshift+0xb6>
 800a246:	6920      	ldr	r0, [r4, #16]
 800a248:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a24c:	f104 0314 	add.w	r3, r4, #20
 800a250:	f019 091f 	ands.w	r9, r9, #31
 800a254:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a258:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a25c:	d02b      	beq.n	800a2b6 <__lshift+0xbe>
 800a25e:	468a      	mov	sl, r1
 800a260:	2200      	movs	r2, #0
 800a262:	f1c9 0e20 	rsb	lr, r9, #32
 800a266:	6818      	ldr	r0, [r3, #0]
 800a268:	fa00 f009 	lsl.w	r0, r0, r9
 800a26c:	4302      	orrs	r2, r0
 800a26e:	f84a 2b04 	str.w	r2, [sl], #4
 800a272:	f853 2b04 	ldr.w	r2, [r3], #4
 800a276:	459c      	cmp	ip, r3
 800a278:	fa22 f20e 	lsr.w	r2, r2, lr
 800a27c:	d8f3      	bhi.n	800a266 <__lshift+0x6e>
 800a27e:	ebac 0304 	sub.w	r3, ip, r4
 800a282:	3b15      	subs	r3, #21
 800a284:	f023 0303 	bic.w	r3, r3, #3
 800a288:	3304      	adds	r3, #4
 800a28a:	f104 0015 	add.w	r0, r4, #21
 800a28e:	4584      	cmp	ip, r0
 800a290:	bf38      	it	cc
 800a292:	2304      	movcc	r3, #4
 800a294:	50ca      	str	r2, [r1, r3]
 800a296:	b10a      	cbz	r2, 800a29c <__lshift+0xa4>
 800a298:	f108 0602 	add.w	r6, r8, #2
 800a29c:	3e01      	subs	r6, #1
 800a29e:	4638      	mov	r0, r7
 800a2a0:	4621      	mov	r1, r4
 800a2a2:	612e      	str	r6, [r5, #16]
 800a2a4:	f7ff fd90 	bl	8009dc8 <_Bfree>
 800a2a8:	4628      	mov	r0, r5
 800a2aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a2ae:	f842 0f04 	str.w	r0, [r2, #4]!
 800a2b2:	3301      	adds	r3, #1
 800a2b4:	e7c5      	b.n	800a242 <__lshift+0x4a>
 800a2b6:	3904      	subs	r1, #4
 800a2b8:	f853 2b04 	ldr.w	r2, [r3], #4
 800a2bc:	459c      	cmp	ip, r3
 800a2be:	f841 2f04 	str.w	r2, [r1, #4]!
 800a2c2:	d8f9      	bhi.n	800a2b8 <__lshift+0xc0>
 800a2c4:	e7ea      	b.n	800a29c <__lshift+0xa4>
 800a2c6:	bf00      	nop
 800a2c8:	0800c3b4 	.word	0x0800c3b4
 800a2cc:	0800c444 	.word	0x0800c444

0800a2d0 <__mcmp>:
 800a2d0:	4603      	mov	r3, r0
 800a2d2:	690a      	ldr	r2, [r1, #16]
 800a2d4:	6900      	ldr	r0, [r0, #16]
 800a2d6:	b530      	push	{r4, r5, lr}
 800a2d8:	1a80      	subs	r0, r0, r2
 800a2da:	d10d      	bne.n	800a2f8 <__mcmp+0x28>
 800a2dc:	3314      	adds	r3, #20
 800a2de:	3114      	adds	r1, #20
 800a2e0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800a2e4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800a2e8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a2ec:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a2f0:	4295      	cmp	r5, r2
 800a2f2:	d002      	beq.n	800a2fa <__mcmp+0x2a>
 800a2f4:	d304      	bcc.n	800a300 <__mcmp+0x30>
 800a2f6:	2001      	movs	r0, #1
 800a2f8:	bd30      	pop	{r4, r5, pc}
 800a2fa:	42a3      	cmp	r3, r4
 800a2fc:	d3f4      	bcc.n	800a2e8 <__mcmp+0x18>
 800a2fe:	e7fb      	b.n	800a2f8 <__mcmp+0x28>
 800a300:	f04f 30ff 	mov.w	r0, #4294967295
 800a304:	e7f8      	b.n	800a2f8 <__mcmp+0x28>
	...

0800a308 <__mdiff>:
 800a308:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a30c:	460c      	mov	r4, r1
 800a30e:	4606      	mov	r6, r0
 800a310:	4611      	mov	r1, r2
 800a312:	4620      	mov	r0, r4
 800a314:	4692      	mov	sl, r2
 800a316:	f7ff ffdb 	bl	800a2d0 <__mcmp>
 800a31a:	1e05      	subs	r5, r0, #0
 800a31c:	d111      	bne.n	800a342 <__mdiff+0x3a>
 800a31e:	4629      	mov	r1, r5
 800a320:	4630      	mov	r0, r6
 800a322:	f7ff fd11 	bl	8009d48 <_Balloc>
 800a326:	4602      	mov	r2, r0
 800a328:	b928      	cbnz	r0, 800a336 <__mdiff+0x2e>
 800a32a:	f240 2132 	movw	r1, #562	; 0x232
 800a32e:	4b3c      	ldr	r3, [pc, #240]	; (800a420 <__mdiff+0x118>)
 800a330:	483c      	ldr	r0, [pc, #240]	; (800a424 <__mdiff+0x11c>)
 800a332:	f001 f827 	bl	800b384 <__assert_func>
 800a336:	2301      	movs	r3, #1
 800a338:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a33c:	4610      	mov	r0, r2
 800a33e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a342:	bfa4      	itt	ge
 800a344:	4653      	movge	r3, sl
 800a346:	46a2      	movge	sl, r4
 800a348:	4630      	mov	r0, r6
 800a34a:	f8da 1004 	ldr.w	r1, [sl, #4]
 800a34e:	bfa6      	itte	ge
 800a350:	461c      	movge	r4, r3
 800a352:	2500      	movge	r5, #0
 800a354:	2501      	movlt	r5, #1
 800a356:	f7ff fcf7 	bl	8009d48 <_Balloc>
 800a35a:	4602      	mov	r2, r0
 800a35c:	b918      	cbnz	r0, 800a366 <__mdiff+0x5e>
 800a35e:	f44f 7110 	mov.w	r1, #576	; 0x240
 800a362:	4b2f      	ldr	r3, [pc, #188]	; (800a420 <__mdiff+0x118>)
 800a364:	e7e4      	b.n	800a330 <__mdiff+0x28>
 800a366:	f100 0814 	add.w	r8, r0, #20
 800a36a:	f8da 7010 	ldr.w	r7, [sl, #16]
 800a36e:	60c5      	str	r5, [r0, #12]
 800a370:	f04f 0c00 	mov.w	ip, #0
 800a374:	f10a 0514 	add.w	r5, sl, #20
 800a378:	f10a 0010 	add.w	r0, sl, #16
 800a37c:	46c2      	mov	sl, r8
 800a37e:	6926      	ldr	r6, [r4, #16]
 800a380:	f104 0914 	add.w	r9, r4, #20
 800a384:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 800a388:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a38c:	f850 bf04 	ldr.w	fp, [r0, #4]!
 800a390:	f859 3b04 	ldr.w	r3, [r9], #4
 800a394:	fa1f f18b 	uxth.w	r1, fp
 800a398:	4461      	add	r1, ip
 800a39a:	fa1f fc83 	uxth.w	ip, r3
 800a39e:	0c1b      	lsrs	r3, r3, #16
 800a3a0:	eba1 010c 	sub.w	r1, r1, ip
 800a3a4:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a3a8:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800a3ac:	b289      	uxth	r1, r1
 800a3ae:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800a3b2:	454e      	cmp	r6, r9
 800a3b4:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800a3b8:	f84a 3b04 	str.w	r3, [sl], #4
 800a3bc:	d8e6      	bhi.n	800a38c <__mdiff+0x84>
 800a3be:	1b33      	subs	r3, r6, r4
 800a3c0:	3b15      	subs	r3, #21
 800a3c2:	f023 0303 	bic.w	r3, r3, #3
 800a3c6:	3415      	adds	r4, #21
 800a3c8:	3304      	adds	r3, #4
 800a3ca:	42a6      	cmp	r6, r4
 800a3cc:	bf38      	it	cc
 800a3ce:	2304      	movcc	r3, #4
 800a3d0:	441d      	add	r5, r3
 800a3d2:	4443      	add	r3, r8
 800a3d4:	461e      	mov	r6, r3
 800a3d6:	462c      	mov	r4, r5
 800a3d8:	4574      	cmp	r4, lr
 800a3da:	d30e      	bcc.n	800a3fa <__mdiff+0xf2>
 800a3dc:	f10e 0103 	add.w	r1, lr, #3
 800a3e0:	1b49      	subs	r1, r1, r5
 800a3e2:	f021 0103 	bic.w	r1, r1, #3
 800a3e6:	3d03      	subs	r5, #3
 800a3e8:	45ae      	cmp	lr, r5
 800a3ea:	bf38      	it	cc
 800a3ec:	2100      	movcc	r1, #0
 800a3ee:	4419      	add	r1, r3
 800a3f0:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800a3f4:	b18b      	cbz	r3, 800a41a <__mdiff+0x112>
 800a3f6:	6117      	str	r7, [r2, #16]
 800a3f8:	e7a0      	b.n	800a33c <__mdiff+0x34>
 800a3fa:	f854 8b04 	ldr.w	r8, [r4], #4
 800a3fe:	fa1f f188 	uxth.w	r1, r8
 800a402:	4461      	add	r1, ip
 800a404:	1408      	asrs	r0, r1, #16
 800a406:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 800a40a:	b289      	uxth	r1, r1
 800a40c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800a410:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a414:	f846 1b04 	str.w	r1, [r6], #4
 800a418:	e7de      	b.n	800a3d8 <__mdiff+0xd0>
 800a41a:	3f01      	subs	r7, #1
 800a41c:	e7e8      	b.n	800a3f0 <__mdiff+0xe8>
 800a41e:	bf00      	nop
 800a420:	0800c3b4 	.word	0x0800c3b4
 800a424:	0800c444 	.word	0x0800c444

0800a428 <__ulp>:
 800a428:	4b11      	ldr	r3, [pc, #68]	; (800a470 <__ulp+0x48>)
 800a42a:	400b      	ands	r3, r1
 800a42c:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800a430:	2b00      	cmp	r3, #0
 800a432:	dd02      	ble.n	800a43a <__ulp+0x12>
 800a434:	2000      	movs	r0, #0
 800a436:	4619      	mov	r1, r3
 800a438:	4770      	bx	lr
 800a43a:	425b      	negs	r3, r3
 800a43c:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800a440:	f04f 0000 	mov.w	r0, #0
 800a444:	f04f 0100 	mov.w	r1, #0
 800a448:	ea4f 5223 	mov.w	r2, r3, asr #20
 800a44c:	da04      	bge.n	800a458 <__ulp+0x30>
 800a44e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800a452:	fa43 f102 	asr.w	r1, r3, r2
 800a456:	4770      	bx	lr
 800a458:	f1a2 0314 	sub.w	r3, r2, #20
 800a45c:	2b1e      	cmp	r3, #30
 800a45e:	bfd6      	itet	le
 800a460:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800a464:	2301      	movgt	r3, #1
 800a466:	fa22 f303 	lsrle.w	r3, r2, r3
 800a46a:	4618      	mov	r0, r3
 800a46c:	4770      	bx	lr
 800a46e:	bf00      	nop
 800a470:	7ff00000 	.word	0x7ff00000

0800a474 <__b2d>:
 800a474:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a478:	6907      	ldr	r7, [r0, #16]
 800a47a:	f100 0914 	add.w	r9, r0, #20
 800a47e:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 800a482:	f857 6c04 	ldr.w	r6, [r7, #-4]
 800a486:	f1a7 0804 	sub.w	r8, r7, #4
 800a48a:	4630      	mov	r0, r6
 800a48c:	f7ff fd52 	bl	8009f34 <__hi0bits>
 800a490:	f1c0 0320 	rsb	r3, r0, #32
 800a494:	280a      	cmp	r0, #10
 800a496:	600b      	str	r3, [r1, #0]
 800a498:	491f      	ldr	r1, [pc, #124]	; (800a518 <__b2d+0xa4>)
 800a49a:	dc17      	bgt.n	800a4cc <__b2d+0x58>
 800a49c:	45c1      	cmp	r9, r8
 800a49e:	bf28      	it	cs
 800a4a0:	2200      	movcs	r2, #0
 800a4a2:	f1c0 0c0b 	rsb	ip, r0, #11
 800a4a6:	fa26 f30c 	lsr.w	r3, r6, ip
 800a4aa:	bf38      	it	cc
 800a4ac:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800a4b0:	ea43 0501 	orr.w	r5, r3, r1
 800a4b4:	f100 0315 	add.w	r3, r0, #21
 800a4b8:	fa06 f303 	lsl.w	r3, r6, r3
 800a4bc:	fa22 f20c 	lsr.w	r2, r2, ip
 800a4c0:	ea43 0402 	orr.w	r4, r3, r2
 800a4c4:	4620      	mov	r0, r4
 800a4c6:	4629      	mov	r1, r5
 800a4c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a4cc:	45c1      	cmp	r9, r8
 800a4ce:	bf2e      	itee	cs
 800a4d0:	2200      	movcs	r2, #0
 800a4d2:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800a4d6:	f1a7 0808 	subcc.w	r8, r7, #8
 800a4da:	f1b0 030b 	subs.w	r3, r0, #11
 800a4de:	d016      	beq.n	800a50e <__b2d+0x9a>
 800a4e0:	f1c3 0720 	rsb	r7, r3, #32
 800a4e4:	fa22 f107 	lsr.w	r1, r2, r7
 800a4e8:	45c8      	cmp	r8, r9
 800a4ea:	fa06 f603 	lsl.w	r6, r6, r3
 800a4ee:	ea46 0601 	orr.w	r6, r6, r1
 800a4f2:	bf94      	ite	ls
 800a4f4:	2100      	movls	r1, #0
 800a4f6:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 800a4fa:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 800a4fe:	fa02 f003 	lsl.w	r0, r2, r3
 800a502:	40f9      	lsrs	r1, r7
 800a504:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800a508:	ea40 0401 	orr.w	r4, r0, r1
 800a50c:	e7da      	b.n	800a4c4 <__b2d+0x50>
 800a50e:	4614      	mov	r4, r2
 800a510:	ea46 0501 	orr.w	r5, r6, r1
 800a514:	e7d6      	b.n	800a4c4 <__b2d+0x50>
 800a516:	bf00      	nop
 800a518:	3ff00000 	.word	0x3ff00000

0800a51c <__d2b>:
 800a51c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800a520:	2101      	movs	r1, #1
 800a522:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800a526:	4690      	mov	r8, r2
 800a528:	461d      	mov	r5, r3
 800a52a:	f7ff fc0d 	bl	8009d48 <_Balloc>
 800a52e:	4604      	mov	r4, r0
 800a530:	b930      	cbnz	r0, 800a540 <__d2b+0x24>
 800a532:	4602      	mov	r2, r0
 800a534:	f240 310a 	movw	r1, #778	; 0x30a
 800a538:	4b24      	ldr	r3, [pc, #144]	; (800a5cc <__d2b+0xb0>)
 800a53a:	4825      	ldr	r0, [pc, #148]	; (800a5d0 <__d2b+0xb4>)
 800a53c:	f000 ff22 	bl	800b384 <__assert_func>
 800a540:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800a544:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800a548:	bb2d      	cbnz	r5, 800a596 <__d2b+0x7a>
 800a54a:	9301      	str	r3, [sp, #4]
 800a54c:	f1b8 0300 	subs.w	r3, r8, #0
 800a550:	d026      	beq.n	800a5a0 <__d2b+0x84>
 800a552:	4668      	mov	r0, sp
 800a554:	9300      	str	r3, [sp, #0]
 800a556:	f7ff fd0d 	bl	8009f74 <__lo0bits>
 800a55a:	9900      	ldr	r1, [sp, #0]
 800a55c:	b1f0      	cbz	r0, 800a59c <__d2b+0x80>
 800a55e:	9a01      	ldr	r2, [sp, #4]
 800a560:	f1c0 0320 	rsb	r3, r0, #32
 800a564:	fa02 f303 	lsl.w	r3, r2, r3
 800a568:	430b      	orrs	r3, r1
 800a56a:	40c2      	lsrs	r2, r0
 800a56c:	6163      	str	r3, [r4, #20]
 800a56e:	9201      	str	r2, [sp, #4]
 800a570:	9b01      	ldr	r3, [sp, #4]
 800a572:	2b00      	cmp	r3, #0
 800a574:	bf14      	ite	ne
 800a576:	2102      	movne	r1, #2
 800a578:	2101      	moveq	r1, #1
 800a57a:	61a3      	str	r3, [r4, #24]
 800a57c:	6121      	str	r1, [r4, #16]
 800a57e:	b1c5      	cbz	r5, 800a5b2 <__d2b+0x96>
 800a580:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a584:	4405      	add	r5, r0
 800a586:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a58a:	603d      	str	r5, [r7, #0]
 800a58c:	6030      	str	r0, [r6, #0]
 800a58e:	4620      	mov	r0, r4
 800a590:	b002      	add	sp, #8
 800a592:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a596:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a59a:	e7d6      	b.n	800a54a <__d2b+0x2e>
 800a59c:	6161      	str	r1, [r4, #20]
 800a59e:	e7e7      	b.n	800a570 <__d2b+0x54>
 800a5a0:	a801      	add	r0, sp, #4
 800a5a2:	f7ff fce7 	bl	8009f74 <__lo0bits>
 800a5a6:	2101      	movs	r1, #1
 800a5a8:	9b01      	ldr	r3, [sp, #4]
 800a5aa:	6121      	str	r1, [r4, #16]
 800a5ac:	6163      	str	r3, [r4, #20]
 800a5ae:	3020      	adds	r0, #32
 800a5b0:	e7e5      	b.n	800a57e <__d2b+0x62>
 800a5b2:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800a5b6:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a5ba:	6038      	str	r0, [r7, #0]
 800a5bc:	6918      	ldr	r0, [r3, #16]
 800a5be:	f7ff fcb9 	bl	8009f34 <__hi0bits>
 800a5c2:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800a5c6:	6031      	str	r1, [r6, #0]
 800a5c8:	e7e1      	b.n	800a58e <__d2b+0x72>
 800a5ca:	bf00      	nop
 800a5cc:	0800c3b4 	.word	0x0800c3b4
 800a5d0:	0800c444 	.word	0x0800c444

0800a5d4 <__ratio>:
 800a5d4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5d8:	4688      	mov	r8, r1
 800a5da:	4669      	mov	r1, sp
 800a5dc:	4681      	mov	r9, r0
 800a5de:	f7ff ff49 	bl	800a474 <__b2d>
 800a5e2:	460f      	mov	r7, r1
 800a5e4:	4604      	mov	r4, r0
 800a5e6:	460d      	mov	r5, r1
 800a5e8:	4640      	mov	r0, r8
 800a5ea:	a901      	add	r1, sp, #4
 800a5ec:	f7ff ff42 	bl	800a474 <__b2d>
 800a5f0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a5f4:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800a5f8:	468b      	mov	fp, r1
 800a5fa:	eba3 0c02 	sub.w	ip, r3, r2
 800a5fe:	e9dd 3200 	ldrd	r3, r2, [sp]
 800a602:	1a9b      	subs	r3, r3, r2
 800a604:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800a608:	2b00      	cmp	r3, #0
 800a60a:	bfd5      	itete	le
 800a60c:	460a      	movle	r2, r1
 800a60e:	462a      	movgt	r2, r5
 800a610:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a614:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800a618:	bfd8      	it	le
 800a61a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800a61e:	465b      	mov	r3, fp
 800a620:	4602      	mov	r2, r0
 800a622:	4639      	mov	r1, r7
 800a624:	4620      	mov	r0, r4
 800a626:	f7f6 f9a1 	bl	800096c <__aeabi_ddiv>
 800a62a:	b003      	add	sp, #12
 800a62c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a630 <__copybits>:
 800a630:	3901      	subs	r1, #1
 800a632:	b570      	push	{r4, r5, r6, lr}
 800a634:	1149      	asrs	r1, r1, #5
 800a636:	6914      	ldr	r4, [r2, #16]
 800a638:	3101      	adds	r1, #1
 800a63a:	f102 0314 	add.w	r3, r2, #20
 800a63e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a642:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a646:	1f05      	subs	r5, r0, #4
 800a648:	42a3      	cmp	r3, r4
 800a64a:	d30c      	bcc.n	800a666 <__copybits+0x36>
 800a64c:	1aa3      	subs	r3, r4, r2
 800a64e:	3b11      	subs	r3, #17
 800a650:	f023 0303 	bic.w	r3, r3, #3
 800a654:	3211      	adds	r2, #17
 800a656:	42a2      	cmp	r2, r4
 800a658:	bf88      	it	hi
 800a65a:	2300      	movhi	r3, #0
 800a65c:	4418      	add	r0, r3
 800a65e:	2300      	movs	r3, #0
 800a660:	4288      	cmp	r0, r1
 800a662:	d305      	bcc.n	800a670 <__copybits+0x40>
 800a664:	bd70      	pop	{r4, r5, r6, pc}
 800a666:	f853 6b04 	ldr.w	r6, [r3], #4
 800a66a:	f845 6f04 	str.w	r6, [r5, #4]!
 800a66e:	e7eb      	b.n	800a648 <__copybits+0x18>
 800a670:	f840 3b04 	str.w	r3, [r0], #4
 800a674:	e7f4      	b.n	800a660 <__copybits+0x30>

0800a676 <__any_on>:
 800a676:	f100 0214 	add.w	r2, r0, #20
 800a67a:	6900      	ldr	r0, [r0, #16]
 800a67c:	114b      	asrs	r3, r1, #5
 800a67e:	4298      	cmp	r0, r3
 800a680:	b510      	push	{r4, lr}
 800a682:	db11      	blt.n	800a6a8 <__any_on+0x32>
 800a684:	dd0a      	ble.n	800a69c <__any_on+0x26>
 800a686:	f011 011f 	ands.w	r1, r1, #31
 800a68a:	d007      	beq.n	800a69c <__any_on+0x26>
 800a68c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a690:	fa24 f001 	lsr.w	r0, r4, r1
 800a694:	fa00 f101 	lsl.w	r1, r0, r1
 800a698:	428c      	cmp	r4, r1
 800a69a:	d10b      	bne.n	800a6b4 <__any_on+0x3e>
 800a69c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a6a0:	4293      	cmp	r3, r2
 800a6a2:	d803      	bhi.n	800a6ac <__any_on+0x36>
 800a6a4:	2000      	movs	r0, #0
 800a6a6:	bd10      	pop	{r4, pc}
 800a6a8:	4603      	mov	r3, r0
 800a6aa:	e7f7      	b.n	800a69c <__any_on+0x26>
 800a6ac:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a6b0:	2900      	cmp	r1, #0
 800a6b2:	d0f5      	beq.n	800a6a0 <__any_on+0x2a>
 800a6b4:	2001      	movs	r0, #1
 800a6b6:	e7f6      	b.n	800a6a6 <__any_on+0x30>

0800a6b8 <_calloc_r>:
 800a6b8:	b538      	push	{r3, r4, r5, lr}
 800a6ba:	fb02 f501 	mul.w	r5, r2, r1
 800a6be:	4629      	mov	r1, r5
 800a6c0:	f000 f854 	bl	800a76c <_malloc_r>
 800a6c4:	4604      	mov	r4, r0
 800a6c6:	b118      	cbz	r0, 800a6d0 <_calloc_r+0x18>
 800a6c8:	462a      	mov	r2, r5
 800a6ca:	2100      	movs	r1, #0
 800a6cc:	f7fc fb3a 	bl	8006d44 <memset>
 800a6d0:	4620      	mov	r0, r4
 800a6d2:	bd38      	pop	{r3, r4, r5, pc}

0800a6d4 <_free_r>:
 800a6d4:	b538      	push	{r3, r4, r5, lr}
 800a6d6:	4605      	mov	r5, r0
 800a6d8:	2900      	cmp	r1, #0
 800a6da:	d043      	beq.n	800a764 <_free_r+0x90>
 800a6dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a6e0:	1f0c      	subs	r4, r1, #4
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	bfb8      	it	lt
 800a6e6:	18e4      	addlt	r4, r4, r3
 800a6e8:	f001 f850 	bl	800b78c <__malloc_lock>
 800a6ec:	4a1e      	ldr	r2, [pc, #120]	; (800a768 <_free_r+0x94>)
 800a6ee:	6813      	ldr	r3, [r2, #0]
 800a6f0:	4610      	mov	r0, r2
 800a6f2:	b933      	cbnz	r3, 800a702 <_free_r+0x2e>
 800a6f4:	6063      	str	r3, [r4, #4]
 800a6f6:	6014      	str	r4, [r2, #0]
 800a6f8:	4628      	mov	r0, r5
 800a6fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a6fe:	f001 b84b 	b.w	800b798 <__malloc_unlock>
 800a702:	42a3      	cmp	r3, r4
 800a704:	d90a      	bls.n	800a71c <_free_r+0x48>
 800a706:	6821      	ldr	r1, [r4, #0]
 800a708:	1862      	adds	r2, r4, r1
 800a70a:	4293      	cmp	r3, r2
 800a70c:	bf01      	itttt	eq
 800a70e:	681a      	ldreq	r2, [r3, #0]
 800a710:	685b      	ldreq	r3, [r3, #4]
 800a712:	1852      	addeq	r2, r2, r1
 800a714:	6022      	streq	r2, [r4, #0]
 800a716:	6063      	str	r3, [r4, #4]
 800a718:	6004      	str	r4, [r0, #0]
 800a71a:	e7ed      	b.n	800a6f8 <_free_r+0x24>
 800a71c:	461a      	mov	r2, r3
 800a71e:	685b      	ldr	r3, [r3, #4]
 800a720:	b10b      	cbz	r3, 800a726 <_free_r+0x52>
 800a722:	42a3      	cmp	r3, r4
 800a724:	d9fa      	bls.n	800a71c <_free_r+0x48>
 800a726:	6811      	ldr	r1, [r2, #0]
 800a728:	1850      	adds	r0, r2, r1
 800a72a:	42a0      	cmp	r0, r4
 800a72c:	d10b      	bne.n	800a746 <_free_r+0x72>
 800a72e:	6820      	ldr	r0, [r4, #0]
 800a730:	4401      	add	r1, r0
 800a732:	1850      	adds	r0, r2, r1
 800a734:	4283      	cmp	r3, r0
 800a736:	6011      	str	r1, [r2, #0]
 800a738:	d1de      	bne.n	800a6f8 <_free_r+0x24>
 800a73a:	6818      	ldr	r0, [r3, #0]
 800a73c:	685b      	ldr	r3, [r3, #4]
 800a73e:	4401      	add	r1, r0
 800a740:	6011      	str	r1, [r2, #0]
 800a742:	6053      	str	r3, [r2, #4]
 800a744:	e7d8      	b.n	800a6f8 <_free_r+0x24>
 800a746:	d902      	bls.n	800a74e <_free_r+0x7a>
 800a748:	230c      	movs	r3, #12
 800a74a:	602b      	str	r3, [r5, #0]
 800a74c:	e7d4      	b.n	800a6f8 <_free_r+0x24>
 800a74e:	6820      	ldr	r0, [r4, #0]
 800a750:	1821      	adds	r1, r4, r0
 800a752:	428b      	cmp	r3, r1
 800a754:	bf01      	itttt	eq
 800a756:	6819      	ldreq	r1, [r3, #0]
 800a758:	685b      	ldreq	r3, [r3, #4]
 800a75a:	1809      	addeq	r1, r1, r0
 800a75c:	6021      	streq	r1, [r4, #0]
 800a75e:	6063      	str	r3, [r4, #4]
 800a760:	6054      	str	r4, [r2, #4]
 800a762:	e7c9      	b.n	800a6f8 <_free_r+0x24>
 800a764:	bd38      	pop	{r3, r4, r5, pc}
 800a766:	bf00      	nop
 800a768:	20000200 	.word	0x20000200

0800a76c <_malloc_r>:
 800a76c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a76e:	1ccd      	adds	r5, r1, #3
 800a770:	f025 0503 	bic.w	r5, r5, #3
 800a774:	3508      	adds	r5, #8
 800a776:	2d0c      	cmp	r5, #12
 800a778:	bf38      	it	cc
 800a77a:	250c      	movcc	r5, #12
 800a77c:	2d00      	cmp	r5, #0
 800a77e:	4606      	mov	r6, r0
 800a780:	db01      	blt.n	800a786 <_malloc_r+0x1a>
 800a782:	42a9      	cmp	r1, r5
 800a784:	d903      	bls.n	800a78e <_malloc_r+0x22>
 800a786:	230c      	movs	r3, #12
 800a788:	6033      	str	r3, [r6, #0]
 800a78a:	2000      	movs	r0, #0
 800a78c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a78e:	f000 fffd 	bl	800b78c <__malloc_lock>
 800a792:	4921      	ldr	r1, [pc, #132]	; (800a818 <_malloc_r+0xac>)
 800a794:	680a      	ldr	r2, [r1, #0]
 800a796:	4614      	mov	r4, r2
 800a798:	b99c      	cbnz	r4, 800a7c2 <_malloc_r+0x56>
 800a79a:	4f20      	ldr	r7, [pc, #128]	; (800a81c <_malloc_r+0xb0>)
 800a79c:	683b      	ldr	r3, [r7, #0]
 800a79e:	b923      	cbnz	r3, 800a7aa <_malloc_r+0x3e>
 800a7a0:	4621      	mov	r1, r4
 800a7a2:	4630      	mov	r0, r6
 800a7a4:	f000 fcce 	bl	800b144 <_sbrk_r>
 800a7a8:	6038      	str	r0, [r7, #0]
 800a7aa:	4629      	mov	r1, r5
 800a7ac:	4630      	mov	r0, r6
 800a7ae:	f000 fcc9 	bl	800b144 <_sbrk_r>
 800a7b2:	1c43      	adds	r3, r0, #1
 800a7b4:	d123      	bne.n	800a7fe <_malloc_r+0x92>
 800a7b6:	230c      	movs	r3, #12
 800a7b8:	4630      	mov	r0, r6
 800a7ba:	6033      	str	r3, [r6, #0]
 800a7bc:	f000 ffec 	bl	800b798 <__malloc_unlock>
 800a7c0:	e7e3      	b.n	800a78a <_malloc_r+0x1e>
 800a7c2:	6823      	ldr	r3, [r4, #0]
 800a7c4:	1b5b      	subs	r3, r3, r5
 800a7c6:	d417      	bmi.n	800a7f8 <_malloc_r+0x8c>
 800a7c8:	2b0b      	cmp	r3, #11
 800a7ca:	d903      	bls.n	800a7d4 <_malloc_r+0x68>
 800a7cc:	6023      	str	r3, [r4, #0]
 800a7ce:	441c      	add	r4, r3
 800a7d0:	6025      	str	r5, [r4, #0]
 800a7d2:	e004      	b.n	800a7de <_malloc_r+0x72>
 800a7d4:	6863      	ldr	r3, [r4, #4]
 800a7d6:	42a2      	cmp	r2, r4
 800a7d8:	bf0c      	ite	eq
 800a7da:	600b      	streq	r3, [r1, #0]
 800a7dc:	6053      	strne	r3, [r2, #4]
 800a7de:	4630      	mov	r0, r6
 800a7e0:	f000 ffda 	bl	800b798 <__malloc_unlock>
 800a7e4:	f104 000b 	add.w	r0, r4, #11
 800a7e8:	1d23      	adds	r3, r4, #4
 800a7ea:	f020 0007 	bic.w	r0, r0, #7
 800a7ee:	1ac2      	subs	r2, r0, r3
 800a7f0:	d0cc      	beq.n	800a78c <_malloc_r+0x20>
 800a7f2:	1a1b      	subs	r3, r3, r0
 800a7f4:	50a3      	str	r3, [r4, r2]
 800a7f6:	e7c9      	b.n	800a78c <_malloc_r+0x20>
 800a7f8:	4622      	mov	r2, r4
 800a7fa:	6864      	ldr	r4, [r4, #4]
 800a7fc:	e7cc      	b.n	800a798 <_malloc_r+0x2c>
 800a7fe:	1cc4      	adds	r4, r0, #3
 800a800:	f024 0403 	bic.w	r4, r4, #3
 800a804:	42a0      	cmp	r0, r4
 800a806:	d0e3      	beq.n	800a7d0 <_malloc_r+0x64>
 800a808:	1a21      	subs	r1, r4, r0
 800a80a:	4630      	mov	r0, r6
 800a80c:	f000 fc9a 	bl	800b144 <_sbrk_r>
 800a810:	3001      	adds	r0, #1
 800a812:	d1dd      	bne.n	800a7d0 <_malloc_r+0x64>
 800a814:	e7cf      	b.n	800a7b6 <_malloc_r+0x4a>
 800a816:	bf00      	nop
 800a818:	20000200 	.word	0x20000200
 800a81c:	20000204 	.word	0x20000204

0800a820 <__ssputs_r>:
 800a820:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a824:	688e      	ldr	r6, [r1, #8]
 800a826:	4682      	mov	sl, r0
 800a828:	429e      	cmp	r6, r3
 800a82a:	460c      	mov	r4, r1
 800a82c:	4690      	mov	r8, r2
 800a82e:	461f      	mov	r7, r3
 800a830:	d838      	bhi.n	800a8a4 <__ssputs_r+0x84>
 800a832:	898a      	ldrh	r2, [r1, #12]
 800a834:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a838:	d032      	beq.n	800a8a0 <__ssputs_r+0x80>
 800a83a:	6825      	ldr	r5, [r4, #0]
 800a83c:	6909      	ldr	r1, [r1, #16]
 800a83e:	3301      	adds	r3, #1
 800a840:	eba5 0901 	sub.w	r9, r5, r1
 800a844:	6965      	ldr	r5, [r4, #20]
 800a846:	444b      	add	r3, r9
 800a848:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a84c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a850:	106d      	asrs	r5, r5, #1
 800a852:	429d      	cmp	r5, r3
 800a854:	bf38      	it	cc
 800a856:	461d      	movcc	r5, r3
 800a858:	0553      	lsls	r3, r2, #21
 800a85a:	d531      	bpl.n	800a8c0 <__ssputs_r+0xa0>
 800a85c:	4629      	mov	r1, r5
 800a85e:	f7ff ff85 	bl	800a76c <_malloc_r>
 800a862:	4606      	mov	r6, r0
 800a864:	b950      	cbnz	r0, 800a87c <__ssputs_r+0x5c>
 800a866:	230c      	movs	r3, #12
 800a868:	f04f 30ff 	mov.w	r0, #4294967295
 800a86c:	f8ca 3000 	str.w	r3, [sl]
 800a870:	89a3      	ldrh	r3, [r4, #12]
 800a872:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a876:	81a3      	strh	r3, [r4, #12]
 800a878:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a87c:	464a      	mov	r2, r9
 800a87e:	6921      	ldr	r1, [r4, #16]
 800a880:	f7ff fa54 	bl	8009d2c <memcpy>
 800a884:	89a3      	ldrh	r3, [r4, #12]
 800a886:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a88a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a88e:	81a3      	strh	r3, [r4, #12]
 800a890:	6126      	str	r6, [r4, #16]
 800a892:	444e      	add	r6, r9
 800a894:	6026      	str	r6, [r4, #0]
 800a896:	463e      	mov	r6, r7
 800a898:	6165      	str	r5, [r4, #20]
 800a89a:	eba5 0509 	sub.w	r5, r5, r9
 800a89e:	60a5      	str	r5, [r4, #8]
 800a8a0:	42be      	cmp	r6, r7
 800a8a2:	d900      	bls.n	800a8a6 <__ssputs_r+0x86>
 800a8a4:	463e      	mov	r6, r7
 800a8a6:	4632      	mov	r2, r6
 800a8a8:	4641      	mov	r1, r8
 800a8aa:	6820      	ldr	r0, [r4, #0]
 800a8ac:	f000 ff54 	bl	800b758 <memmove>
 800a8b0:	68a3      	ldr	r3, [r4, #8]
 800a8b2:	6822      	ldr	r2, [r4, #0]
 800a8b4:	1b9b      	subs	r3, r3, r6
 800a8b6:	4432      	add	r2, r6
 800a8b8:	2000      	movs	r0, #0
 800a8ba:	60a3      	str	r3, [r4, #8]
 800a8bc:	6022      	str	r2, [r4, #0]
 800a8be:	e7db      	b.n	800a878 <__ssputs_r+0x58>
 800a8c0:	462a      	mov	r2, r5
 800a8c2:	f000 ff6f 	bl	800b7a4 <_realloc_r>
 800a8c6:	4606      	mov	r6, r0
 800a8c8:	2800      	cmp	r0, #0
 800a8ca:	d1e1      	bne.n	800a890 <__ssputs_r+0x70>
 800a8cc:	4650      	mov	r0, sl
 800a8ce:	6921      	ldr	r1, [r4, #16]
 800a8d0:	f7ff ff00 	bl	800a6d4 <_free_r>
 800a8d4:	e7c7      	b.n	800a866 <__ssputs_r+0x46>
	...

0800a8d8 <_svfiprintf_r>:
 800a8d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8dc:	4698      	mov	r8, r3
 800a8de:	898b      	ldrh	r3, [r1, #12]
 800a8e0:	4607      	mov	r7, r0
 800a8e2:	061b      	lsls	r3, r3, #24
 800a8e4:	460d      	mov	r5, r1
 800a8e6:	4614      	mov	r4, r2
 800a8e8:	b09d      	sub	sp, #116	; 0x74
 800a8ea:	d50e      	bpl.n	800a90a <_svfiprintf_r+0x32>
 800a8ec:	690b      	ldr	r3, [r1, #16]
 800a8ee:	b963      	cbnz	r3, 800a90a <_svfiprintf_r+0x32>
 800a8f0:	2140      	movs	r1, #64	; 0x40
 800a8f2:	f7ff ff3b 	bl	800a76c <_malloc_r>
 800a8f6:	6028      	str	r0, [r5, #0]
 800a8f8:	6128      	str	r0, [r5, #16]
 800a8fa:	b920      	cbnz	r0, 800a906 <_svfiprintf_r+0x2e>
 800a8fc:	230c      	movs	r3, #12
 800a8fe:	603b      	str	r3, [r7, #0]
 800a900:	f04f 30ff 	mov.w	r0, #4294967295
 800a904:	e0d1      	b.n	800aaaa <_svfiprintf_r+0x1d2>
 800a906:	2340      	movs	r3, #64	; 0x40
 800a908:	616b      	str	r3, [r5, #20]
 800a90a:	2300      	movs	r3, #0
 800a90c:	9309      	str	r3, [sp, #36]	; 0x24
 800a90e:	2320      	movs	r3, #32
 800a910:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a914:	2330      	movs	r3, #48	; 0x30
 800a916:	f04f 0901 	mov.w	r9, #1
 800a91a:	f8cd 800c 	str.w	r8, [sp, #12]
 800a91e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800aac4 <_svfiprintf_r+0x1ec>
 800a922:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a926:	4623      	mov	r3, r4
 800a928:	469a      	mov	sl, r3
 800a92a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a92e:	b10a      	cbz	r2, 800a934 <_svfiprintf_r+0x5c>
 800a930:	2a25      	cmp	r2, #37	; 0x25
 800a932:	d1f9      	bne.n	800a928 <_svfiprintf_r+0x50>
 800a934:	ebba 0b04 	subs.w	fp, sl, r4
 800a938:	d00b      	beq.n	800a952 <_svfiprintf_r+0x7a>
 800a93a:	465b      	mov	r3, fp
 800a93c:	4622      	mov	r2, r4
 800a93e:	4629      	mov	r1, r5
 800a940:	4638      	mov	r0, r7
 800a942:	f7ff ff6d 	bl	800a820 <__ssputs_r>
 800a946:	3001      	adds	r0, #1
 800a948:	f000 80aa 	beq.w	800aaa0 <_svfiprintf_r+0x1c8>
 800a94c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a94e:	445a      	add	r2, fp
 800a950:	9209      	str	r2, [sp, #36]	; 0x24
 800a952:	f89a 3000 	ldrb.w	r3, [sl]
 800a956:	2b00      	cmp	r3, #0
 800a958:	f000 80a2 	beq.w	800aaa0 <_svfiprintf_r+0x1c8>
 800a95c:	2300      	movs	r3, #0
 800a95e:	f04f 32ff 	mov.w	r2, #4294967295
 800a962:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a966:	f10a 0a01 	add.w	sl, sl, #1
 800a96a:	9304      	str	r3, [sp, #16]
 800a96c:	9307      	str	r3, [sp, #28]
 800a96e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a972:	931a      	str	r3, [sp, #104]	; 0x68
 800a974:	4654      	mov	r4, sl
 800a976:	2205      	movs	r2, #5
 800a978:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a97c:	4851      	ldr	r0, [pc, #324]	; (800aac4 <_svfiprintf_r+0x1ec>)
 800a97e:	f7ff f9c7 	bl	8009d10 <memchr>
 800a982:	9a04      	ldr	r2, [sp, #16]
 800a984:	b9d8      	cbnz	r0, 800a9be <_svfiprintf_r+0xe6>
 800a986:	06d0      	lsls	r0, r2, #27
 800a988:	bf44      	itt	mi
 800a98a:	2320      	movmi	r3, #32
 800a98c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a990:	0711      	lsls	r1, r2, #28
 800a992:	bf44      	itt	mi
 800a994:	232b      	movmi	r3, #43	; 0x2b
 800a996:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a99a:	f89a 3000 	ldrb.w	r3, [sl]
 800a99e:	2b2a      	cmp	r3, #42	; 0x2a
 800a9a0:	d015      	beq.n	800a9ce <_svfiprintf_r+0xf6>
 800a9a2:	4654      	mov	r4, sl
 800a9a4:	2000      	movs	r0, #0
 800a9a6:	f04f 0c0a 	mov.w	ip, #10
 800a9aa:	9a07      	ldr	r2, [sp, #28]
 800a9ac:	4621      	mov	r1, r4
 800a9ae:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a9b2:	3b30      	subs	r3, #48	; 0x30
 800a9b4:	2b09      	cmp	r3, #9
 800a9b6:	d94e      	bls.n	800aa56 <_svfiprintf_r+0x17e>
 800a9b8:	b1b0      	cbz	r0, 800a9e8 <_svfiprintf_r+0x110>
 800a9ba:	9207      	str	r2, [sp, #28]
 800a9bc:	e014      	b.n	800a9e8 <_svfiprintf_r+0x110>
 800a9be:	eba0 0308 	sub.w	r3, r0, r8
 800a9c2:	fa09 f303 	lsl.w	r3, r9, r3
 800a9c6:	4313      	orrs	r3, r2
 800a9c8:	46a2      	mov	sl, r4
 800a9ca:	9304      	str	r3, [sp, #16]
 800a9cc:	e7d2      	b.n	800a974 <_svfiprintf_r+0x9c>
 800a9ce:	9b03      	ldr	r3, [sp, #12]
 800a9d0:	1d19      	adds	r1, r3, #4
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	9103      	str	r1, [sp, #12]
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	bfbb      	ittet	lt
 800a9da:	425b      	neglt	r3, r3
 800a9dc:	f042 0202 	orrlt.w	r2, r2, #2
 800a9e0:	9307      	strge	r3, [sp, #28]
 800a9e2:	9307      	strlt	r3, [sp, #28]
 800a9e4:	bfb8      	it	lt
 800a9e6:	9204      	strlt	r2, [sp, #16]
 800a9e8:	7823      	ldrb	r3, [r4, #0]
 800a9ea:	2b2e      	cmp	r3, #46	; 0x2e
 800a9ec:	d10c      	bne.n	800aa08 <_svfiprintf_r+0x130>
 800a9ee:	7863      	ldrb	r3, [r4, #1]
 800a9f0:	2b2a      	cmp	r3, #42	; 0x2a
 800a9f2:	d135      	bne.n	800aa60 <_svfiprintf_r+0x188>
 800a9f4:	9b03      	ldr	r3, [sp, #12]
 800a9f6:	3402      	adds	r4, #2
 800a9f8:	1d1a      	adds	r2, r3, #4
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	9203      	str	r2, [sp, #12]
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	bfb8      	it	lt
 800aa02:	f04f 33ff 	movlt.w	r3, #4294967295
 800aa06:	9305      	str	r3, [sp, #20]
 800aa08:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800aad4 <_svfiprintf_r+0x1fc>
 800aa0c:	2203      	movs	r2, #3
 800aa0e:	4650      	mov	r0, sl
 800aa10:	7821      	ldrb	r1, [r4, #0]
 800aa12:	f7ff f97d 	bl	8009d10 <memchr>
 800aa16:	b140      	cbz	r0, 800aa2a <_svfiprintf_r+0x152>
 800aa18:	2340      	movs	r3, #64	; 0x40
 800aa1a:	eba0 000a 	sub.w	r0, r0, sl
 800aa1e:	fa03 f000 	lsl.w	r0, r3, r0
 800aa22:	9b04      	ldr	r3, [sp, #16]
 800aa24:	3401      	adds	r4, #1
 800aa26:	4303      	orrs	r3, r0
 800aa28:	9304      	str	r3, [sp, #16]
 800aa2a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aa2e:	2206      	movs	r2, #6
 800aa30:	4825      	ldr	r0, [pc, #148]	; (800aac8 <_svfiprintf_r+0x1f0>)
 800aa32:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800aa36:	f7ff f96b 	bl	8009d10 <memchr>
 800aa3a:	2800      	cmp	r0, #0
 800aa3c:	d038      	beq.n	800aab0 <_svfiprintf_r+0x1d8>
 800aa3e:	4b23      	ldr	r3, [pc, #140]	; (800aacc <_svfiprintf_r+0x1f4>)
 800aa40:	bb1b      	cbnz	r3, 800aa8a <_svfiprintf_r+0x1b2>
 800aa42:	9b03      	ldr	r3, [sp, #12]
 800aa44:	3307      	adds	r3, #7
 800aa46:	f023 0307 	bic.w	r3, r3, #7
 800aa4a:	3308      	adds	r3, #8
 800aa4c:	9303      	str	r3, [sp, #12]
 800aa4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aa50:	4433      	add	r3, r6
 800aa52:	9309      	str	r3, [sp, #36]	; 0x24
 800aa54:	e767      	b.n	800a926 <_svfiprintf_r+0x4e>
 800aa56:	460c      	mov	r4, r1
 800aa58:	2001      	movs	r0, #1
 800aa5a:	fb0c 3202 	mla	r2, ip, r2, r3
 800aa5e:	e7a5      	b.n	800a9ac <_svfiprintf_r+0xd4>
 800aa60:	2300      	movs	r3, #0
 800aa62:	f04f 0c0a 	mov.w	ip, #10
 800aa66:	4619      	mov	r1, r3
 800aa68:	3401      	adds	r4, #1
 800aa6a:	9305      	str	r3, [sp, #20]
 800aa6c:	4620      	mov	r0, r4
 800aa6e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aa72:	3a30      	subs	r2, #48	; 0x30
 800aa74:	2a09      	cmp	r2, #9
 800aa76:	d903      	bls.n	800aa80 <_svfiprintf_r+0x1a8>
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	d0c5      	beq.n	800aa08 <_svfiprintf_r+0x130>
 800aa7c:	9105      	str	r1, [sp, #20]
 800aa7e:	e7c3      	b.n	800aa08 <_svfiprintf_r+0x130>
 800aa80:	4604      	mov	r4, r0
 800aa82:	2301      	movs	r3, #1
 800aa84:	fb0c 2101 	mla	r1, ip, r1, r2
 800aa88:	e7f0      	b.n	800aa6c <_svfiprintf_r+0x194>
 800aa8a:	ab03      	add	r3, sp, #12
 800aa8c:	9300      	str	r3, [sp, #0]
 800aa8e:	462a      	mov	r2, r5
 800aa90:	4638      	mov	r0, r7
 800aa92:	4b0f      	ldr	r3, [pc, #60]	; (800aad0 <_svfiprintf_r+0x1f8>)
 800aa94:	a904      	add	r1, sp, #16
 800aa96:	f7fc f9fb 	bl	8006e90 <_printf_float>
 800aa9a:	1c42      	adds	r2, r0, #1
 800aa9c:	4606      	mov	r6, r0
 800aa9e:	d1d6      	bne.n	800aa4e <_svfiprintf_r+0x176>
 800aaa0:	89ab      	ldrh	r3, [r5, #12]
 800aaa2:	065b      	lsls	r3, r3, #25
 800aaa4:	f53f af2c 	bmi.w	800a900 <_svfiprintf_r+0x28>
 800aaa8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800aaaa:	b01d      	add	sp, #116	; 0x74
 800aaac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aab0:	ab03      	add	r3, sp, #12
 800aab2:	9300      	str	r3, [sp, #0]
 800aab4:	462a      	mov	r2, r5
 800aab6:	4638      	mov	r0, r7
 800aab8:	4b05      	ldr	r3, [pc, #20]	; (800aad0 <_svfiprintf_r+0x1f8>)
 800aaba:	a904      	add	r1, sp, #16
 800aabc:	f7fc fc84 	bl	80073c8 <_printf_i>
 800aac0:	e7eb      	b.n	800aa9a <_svfiprintf_r+0x1c2>
 800aac2:	bf00      	nop
 800aac4:	0800c5a4 	.word	0x0800c5a4
 800aac8:	0800c5ae 	.word	0x0800c5ae
 800aacc:	08006e91 	.word	0x08006e91
 800aad0:	0800a821 	.word	0x0800a821
 800aad4:	0800c5aa 	.word	0x0800c5aa

0800aad8 <_sungetc_r>:
 800aad8:	b538      	push	{r3, r4, r5, lr}
 800aada:	1c4b      	adds	r3, r1, #1
 800aadc:	4614      	mov	r4, r2
 800aade:	d103      	bne.n	800aae8 <_sungetc_r+0x10>
 800aae0:	f04f 35ff 	mov.w	r5, #4294967295
 800aae4:	4628      	mov	r0, r5
 800aae6:	bd38      	pop	{r3, r4, r5, pc}
 800aae8:	8993      	ldrh	r3, [r2, #12]
 800aaea:	b2cd      	uxtb	r5, r1
 800aaec:	f023 0320 	bic.w	r3, r3, #32
 800aaf0:	8193      	strh	r3, [r2, #12]
 800aaf2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800aaf4:	6852      	ldr	r2, [r2, #4]
 800aaf6:	b18b      	cbz	r3, 800ab1c <_sungetc_r+0x44>
 800aaf8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800aafa:	4293      	cmp	r3, r2
 800aafc:	dd08      	ble.n	800ab10 <_sungetc_r+0x38>
 800aafe:	6823      	ldr	r3, [r4, #0]
 800ab00:	1e5a      	subs	r2, r3, #1
 800ab02:	6022      	str	r2, [r4, #0]
 800ab04:	f803 5c01 	strb.w	r5, [r3, #-1]
 800ab08:	6863      	ldr	r3, [r4, #4]
 800ab0a:	3301      	adds	r3, #1
 800ab0c:	6063      	str	r3, [r4, #4]
 800ab0e:	e7e9      	b.n	800aae4 <_sungetc_r+0xc>
 800ab10:	4621      	mov	r1, r4
 800ab12:	f000 fbf1 	bl	800b2f8 <__submore>
 800ab16:	2800      	cmp	r0, #0
 800ab18:	d0f1      	beq.n	800aafe <_sungetc_r+0x26>
 800ab1a:	e7e1      	b.n	800aae0 <_sungetc_r+0x8>
 800ab1c:	6921      	ldr	r1, [r4, #16]
 800ab1e:	6823      	ldr	r3, [r4, #0]
 800ab20:	b151      	cbz	r1, 800ab38 <_sungetc_r+0x60>
 800ab22:	4299      	cmp	r1, r3
 800ab24:	d208      	bcs.n	800ab38 <_sungetc_r+0x60>
 800ab26:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800ab2a:	42a9      	cmp	r1, r5
 800ab2c:	d104      	bne.n	800ab38 <_sungetc_r+0x60>
 800ab2e:	3b01      	subs	r3, #1
 800ab30:	3201      	adds	r2, #1
 800ab32:	6023      	str	r3, [r4, #0]
 800ab34:	6062      	str	r2, [r4, #4]
 800ab36:	e7d5      	b.n	800aae4 <_sungetc_r+0xc>
 800ab38:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800ab3c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ab40:	6363      	str	r3, [r4, #52]	; 0x34
 800ab42:	2303      	movs	r3, #3
 800ab44:	63a3      	str	r3, [r4, #56]	; 0x38
 800ab46:	4623      	mov	r3, r4
 800ab48:	f803 5f46 	strb.w	r5, [r3, #70]!
 800ab4c:	6023      	str	r3, [r4, #0]
 800ab4e:	2301      	movs	r3, #1
 800ab50:	e7dc      	b.n	800ab0c <_sungetc_r+0x34>

0800ab52 <__ssrefill_r>:
 800ab52:	b510      	push	{r4, lr}
 800ab54:	460c      	mov	r4, r1
 800ab56:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800ab58:	b169      	cbz	r1, 800ab76 <__ssrefill_r+0x24>
 800ab5a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ab5e:	4299      	cmp	r1, r3
 800ab60:	d001      	beq.n	800ab66 <__ssrefill_r+0x14>
 800ab62:	f7ff fdb7 	bl	800a6d4 <_free_r>
 800ab66:	2000      	movs	r0, #0
 800ab68:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ab6a:	6360      	str	r0, [r4, #52]	; 0x34
 800ab6c:	6063      	str	r3, [r4, #4]
 800ab6e:	b113      	cbz	r3, 800ab76 <__ssrefill_r+0x24>
 800ab70:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800ab72:	6023      	str	r3, [r4, #0]
 800ab74:	bd10      	pop	{r4, pc}
 800ab76:	6923      	ldr	r3, [r4, #16]
 800ab78:	f04f 30ff 	mov.w	r0, #4294967295
 800ab7c:	6023      	str	r3, [r4, #0]
 800ab7e:	2300      	movs	r3, #0
 800ab80:	6063      	str	r3, [r4, #4]
 800ab82:	89a3      	ldrh	r3, [r4, #12]
 800ab84:	f043 0320 	orr.w	r3, r3, #32
 800ab88:	81a3      	strh	r3, [r4, #12]
 800ab8a:	e7f3      	b.n	800ab74 <__ssrefill_r+0x22>

0800ab8c <__ssvfiscanf_r>:
 800ab8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab90:	460c      	mov	r4, r1
 800ab92:	2100      	movs	r1, #0
 800ab94:	4606      	mov	r6, r0
 800ab96:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 800ab9a:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800ab9e:	49b3      	ldr	r1, [pc, #716]	; (800ae6c <__ssvfiscanf_r+0x2e0>)
 800aba0:	f10d 0804 	add.w	r8, sp, #4
 800aba4:	91a0      	str	r1, [sp, #640]	; 0x280
 800aba6:	49b2      	ldr	r1, [pc, #712]	; (800ae70 <__ssvfiscanf_r+0x2e4>)
 800aba8:	4fb2      	ldr	r7, [pc, #712]	; (800ae74 <__ssvfiscanf_r+0x2e8>)
 800abaa:	f8df 92cc 	ldr.w	r9, [pc, #716]	; 800ae78 <__ssvfiscanf_r+0x2ec>
 800abae:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800abb2:	91a1      	str	r1, [sp, #644]	; 0x284
 800abb4:	9300      	str	r3, [sp, #0]
 800abb6:	f892 a000 	ldrb.w	sl, [r2]
 800abba:	f1ba 0f00 	cmp.w	sl, #0
 800abbe:	f000 8153 	beq.w	800ae68 <__ssvfiscanf_r+0x2dc>
 800abc2:	f81a 3007 	ldrb.w	r3, [sl, r7]
 800abc6:	1c55      	adds	r5, r2, #1
 800abc8:	f013 0308 	ands.w	r3, r3, #8
 800abcc:	d019      	beq.n	800ac02 <__ssvfiscanf_r+0x76>
 800abce:	6863      	ldr	r3, [r4, #4]
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	dd0f      	ble.n	800abf4 <__ssvfiscanf_r+0x68>
 800abd4:	6823      	ldr	r3, [r4, #0]
 800abd6:	781a      	ldrb	r2, [r3, #0]
 800abd8:	5cba      	ldrb	r2, [r7, r2]
 800abda:	0712      	lsls	r2, r2, #28
 800abdc:	d401      	bmi.n	800abe2 <__ssvfiscanf_r+0x56>
 800abde:	462a      	mov	r2, r5
 800abe0:	e7e9      	b.n	800abb6 <__ssvfiscanf_r+0x2a>
 800abe2:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800abe4:	3301      	adds	r3, #1
 800abe6:	3201      	adds	r2, #1
 800abe8:	9245      	str	r2, [sp, #276]	; 0x114
 800abea:	6862      	ldr	r2, [r4, #4]
 800abec:	6023      	str	r3, [r4, #0]
 800abee:	3a01      	subs	r2, #1
 800abf0:	6062      	str	r2, [r4, #4]
 800abf2:	e7ec      	b.n	800abce <__ssvfiscanf_r+0x42>
 800abf4:	4621      	mov	r1, r4
 800abf6:	4630      	mov	r0, r6
 800abf8:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800abfa:	4798      	blx	r3
 800abfc:	2800      	cmp	r0, #0
 800abfe:	d0e9      	beq.n	800abd4 <__ssvfiscanf_r+0x48>
 800ac00:	e7ed      	b.n	800abde <__ssvfiscanf_r+0x52>
 800ac02:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 800ac06:	f040 8086 	bne.w	800ad16 <__ssvfiscanf_r+0x18a>
 800ac0a:	9341      	str	r3, [sp, #260]	; 0x104
 800ac0c:	9343      	str	r3, [sp, #268]	; 0x10c
 800ac0e:	7853      	ldrb	r3, [r2, #1]
 800ac10:	2b2a      	cmp	r3, #42	; 0x2a
 800ac12:	bf04      	itt	eq
 800ac14:	2310      	moveq	r3, #16
 800ac16:	1c95      	addeq	r5, r2, #2
 800ac18:	f04f 020a 	mov.w	r2, #10
 800ac1c:	bf08      	it	eq
 800ac1e:	9341      	streq	r3, [sp, #260]	; 0x104
 800ac20:	46ab      	mov	fp, r5
 800ac22:	f81b 1b01 	ldrb.w	r1, [fp], #1
 800ac26:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800ac2a:	2b09      	cmp	r3, #9
 800ac2c:	d91d      	bls.n	800ac6a <__ssvfiscanf_r+0xde>
 800ac2e:	2203      	movs	r2, #3
 800ac30:	4891      	ldr	r0, [pc, #580]	; (800ae78 <__ssvfiscanf_r+0x2ec>)
 800ac32:	f7ff f86d 	bl	8009d10 <memchr>
 800ac36:	b140      	cbz	r0, 800ac4a <__ssvfiscanf_r+0xbe>
 800ac38:	2301      	movs	r3, #1
 800ac3a:	465d      	mov	r5, fp
 800ac3c:	eba0 0009 	sub.w	r0, r0, r9
 800ac40:	fa03 f000 	lsl.w	r0, r3, r0
 800ac44:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800ac46:	4318      	orrs	r0, r3
 800ac48:	9041      	str	r0, [sp, #260]	; 0x104
 800ac4a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800ac4e:	2b78      	cmp	r3, #120	; 0x78
 800ac50:	d806      	bhi.n	800ac60 <__ssvfiscanf_r+0xd4>
 800ac52:	2b57      	cmp	r3, #87	; 0x57
 800ac54:	d810      	bhi.n	800ac78 <__ssvfiscanf_r+0xec>
 800ac56:	2b25      	cmp	r3, #37	; 0x25
 800ac58:	d05d      	beq.n	800ad16 <__ssvfiscanf_r+0x18a>
 800ac5a:	d857      	bhi.n	800ad0c <__ssvfiscanf_r+0x180>
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	d075      	beq.n	800ad4c <__ssvfiscanf_r+0x1c0>
 800ac60:	2303      	movs	r3, #3
 800ac62:	9347      	str	r3, [sp, #284]	; 0x11c
 800ac64:	230a      	movs	r3, #10
 800ac66:	9342      	str	r3, [sp, #264]	; 0x108
 800ac68:	e082      	b.n	800ad70 <__ssvfiscanf_r+0x1e4>
 800ac6a:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800ac6c:	465d      	mov	r5, fp
 800ac6e:	fb02 1303 	mla	r3, r2, r3, r1
 800ac72:	3b30      	subs	r3, #48	; 0x30
 800ac74:	9343      	str	r3, [sp, #268]	; 0x10c
 800ac76:	e7d3      	b.n	800ac20 <__ssvfiscanf_r+0x94>
 800ac78:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800ac7c:	2a20      	cmp	r2, #32
 800ac7e:	d8ef      	bhi.n	800ac60 <__ssvfiscanf_r+0xd4>
 800ac80:	a101      	add	r1, pc, #4	; (adr r1, 800ac88 <__ssvfiscanf_r+0xfc>)
 800ac82:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800ac86:	bf00      	nop
 800ac88:	0800ad5b 	.word	0x0800ad5b
 800ac8c:	0800ac61 	.word	0x0800ac61
 800ac90:	0800ac61 	.word	0x0800ac61
 800ac94:	0800adb9 	.word	0x0800adb9
 800ac98:	0800ac61 	.word	0x0800ac61
 800ac9c:	0800ac61 	.word	0x0800ac61
 800aca0:	0800ac61 	.word	0x0800ac61
 800aca4:	0800ac61 	.word	0x0800ac61
 800aca8:	0800ac61 	.word	0x0800ac61
 800acac:	0800ac61 	.word	0x0800ac61
 800acb0:	0800ac61 	.word	0x0800ac61
 800acb4:	0800adcf 	.word	0x0800adcf
 800acb8:	0800ada5 	.word	0x0800ada5
 800acbc:	0800ad13 	.word	0x0800ad13
 800acc0:	0800ad13 	.word	0x0800ad13
 800acc4:	0800ad13 	.word	0x0800ad13
 800acc8:	0800ac61 	.word	0x0800ac61
 800accc:	0800ada9 	.word	0x0800ada9
 800acd0:	0800ac61 	.word	0x0800ac61
 800acd4:	0800ac61 	.word	0x0800ac61
 800acd8:	0800ac61 	.word	0x0800ac61
 800acdc:	0800ac61 	.word	0x0800ac61
 800ace0:	0800addf 	.word	0x0800addf
 800ace4:	0800adb1 	.word	0x0800adb1
 800ace8:	0800ad53 	.word	0x0800ad53
 800acec:	0800ac61 	.word	0x0800ac61
 800acf0:	0800ac61 	.word	0x0800ac61
 800acf4:	0800addb 	.word	0x0800addb
 800acf8:	0800ac61 	.word	0x0800ac61
 800acfc:	0800ada5 	.word	0x0800ada5
 800ad00:	0800ac61 	.word	0x0800ac61
 800ad04:	0800ac61 	.word	0x0800ac61
 800ad08:	0800ad5b 	.word	0x0800ad5b
 800ad0c:	3b45      	subs	r3, #69	; 0x45
 800ad0e:	2b02      	cmp	r3, #2
 800ad10:	d8a6      	bhi.n	800ac60 <__ssvfiscanf_r+0xd4>
 800ad12:	2305      	movs	r3, #5
 800ad14:	e02b      	b.n	800ad6e <__ssvfiscanf_r+0x1e2>
 800ad16:	6863      	ldr	r3, [r4, #4]
 800ad18:	2b00      	cmp	r3, #0
 800ad1a:	dd0d      	ble.n	800ad38 <__ssvfiscanf_r+0x1ac>
 800ad1c:	6823      	ldr	r3, [r4, #0]
 800ad1e:	781a      	ldrb	r2, [r3, #0]
 800ad20:	4552      	cmp	r2, sl
 800ad22:	f040 80a1 	bne.w	800ae68 <__ssvfiscanf_r+0x2dc>
 800ad26:	3301      	adds	r3, #1
 800ad28:	6862      	ldr	r2, [r4, #4]
 800ad2a:	6023      	str	r3, [r4, #0]
 800ad2c:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800ad2e:	3a01      	subs	r2, #1
 800ad30:	3301      	adds	r3, #1
 800ad32:	6062      	str	r2, [r4, #4]
 800ad34:	9345      	str	r3, [sp, #276]	; 0x114
 800ad36:	e752      	b.n	800abde <__ssvfiscanf_r+0x52>
 800ad38:	4621      	mov	r1, r4
 800ad3a:	4630      	mov	r0, r6
 800ad3c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800ad3e:	4798      	blx	r3
 800ad40:	2800      	cmp	r0, #0
 800ad42:	d0eb      	beq.n	800ad1c <__ssvfiscanf_r+0x190>
 800ad44:	9844      	ldr	r0, [sp, #272]	; 0x110
 800ad46:	2800      	cmp	r0, #0
 800ad48:	f040 8084 	bne.w	800ae54 <__ssvfiscanf_r+0x2c8>
 800ad4c:	f04f 30ff 	mov.w	r0, #4294967295
 800ad50:	e086      	b.n	800ae60 <__ssvfiscanf_r+0x2d4>
 800ad52:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800ad54:	f042 0220 	orr.w	r2, r2, #32
 800ad58:	9241      	str	r2, [sp, #260]	; 0x104
 800ad5a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800ad5c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ad60:	9241      	str	r2, [sp, #260]	; 0x104
 800ad62:	2210      	movs	r2, #16
 800ad64:	2b6f      	cmp	r3, #111	; 0x6f
 800ad66:	bf34      	ite	cc
 800ad68:	2303      	movcc	r3, #3
 800ad6a:	2304      	movcs	r3, #4
 800ad6c:	9242      	str	r2, [sp, #264]	; 0x108
 800ad6e:	9347      	str	r3, [sp, #284]	; 0x11c
 800ad70:	6863      	ldr	r3, [r4, #4]
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	dd41      	ble.n	800adfa <__ssvfiscanf_r+0x26e>
 800ad76:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800ad78:	0659      	lsls	r1, r3, #25
 800ad7a:	d404      	bmi.n	800ad86 <__ssvfiscanf_r+0x1fa>
 800ad7c:	6823      	ldr	r3, [r4, #0]
 800ad7e:	781a      	ldrb	r2, [r3, #0]
 800ad80:	5cba      	ldrb	r2, [r7, r2]
 800ad82:	0712      	lsls	r2, r2, #28
 800ad84:	d440      	bmi.n	800ae08 <__ssvfiscanf_r+0x27c>
 800ad86:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800ad88:	2b02      	cmp	r3, #2
 800ad8a:	dc4f      	bgt.n	800ae2c <__ssvfiscanf_r+0x2a0>
 800ad8c:	466b      	mov	r3, sp
 800ad8e:	4622      	mov	r2, r4
 800ad90:	4630      	mov	r0, r6
 800ad92:	a941      	add	r1, sp, #260	; 0x104
 800ad94:	f000 f874 	bl	800ae80 <_scanf_chars>
 800ad98:	2801      	cmp	r0, #1
 800ad9a:	d065      	beq.n	800ae68 <__ssvfiscanf_r+0x2dc>
 800ad9c:	2802      	cmp	r0, #2
 800ad9e:	f47f af1e 	bne.w	800abde <__ssvfiscanf_r+0x52>
 800ada2:	e7cf      	b.n	800ad44 <__ssvfiscanf_r+0x1b8>
 800ada4:	220a      	movs	r2, #10
 800ada6:	e7dd      	b.n	800ad64 <__ssvfiscanf_r+0x1d8>
 800ada8:	2300      	movs	r3, #0
 800adaa:	9342      	str	r3, [sp, #264]	; 0x108
 800adac:	2303      	movs	r3, #3
 800adae:	e7de      	b.n	800ad6e <__ssvfiscanf_r+0x1e2>
 800adb0:	2308      	movs	r3, #8
 800adb2:	9342      	str	r3, [sp, #264]	; 0x108
 800adb4:	2304      	movs	r3, #4
 800adb6:	e7da      	b.n	800ad6e <__ssvfiscanf_r+0x1e2>
 800adb8:	4629      	mov	r1, r5
 800adba:	4640      	mov	r0, r8
 800adbc:	f000 f9d2 	bl	800b164 <__sccl>
 800adc0:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800adc2:	4605      	mov	r5, r0
 800adc4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800adc8:	9341      	str	r3, [sp, #260]	; 0x104
 800adca:	2301      	movs	r3, #1
 800adcc:	e7cf      	b.n	800ad6e <__ssvfiscanf_r+0x1e2>
 800adce:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800add0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800add4:	9341      	str	r3, [sp, #260]	; 0x104
 800add6:	2300      	movs	r3, #0
 800add8:	e7c9      	b.n	800ad6e <__ssvfiscanf_r+0x1e2>
 800adda:	2302      	movs	r3, #2
 800addc:	e7c7      	b.n	800ad6e <__ssvfiscanf_r+0x1e2>
 800adde:	9841      	ldr	r0, [sp, #260]	; 0x104
 800ade0:	06c3      	lsls	r3, r0, #27
 800ade2:	f53f aefc 	bmi.w	800abde <__ssvfiscanf_r+0x52>
 800ade6:	9b00      	ldr	r3, [sp, #0]
 800ade8:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800adea:	1d19      	adds	r1, r3, #4
 800adec:	9100      	str	r1, [sp, #0]
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	07c0      	lsls	r0, r0, #31
 800adf2:	bf4c      	ite	mi
 800adf4:	801a      	strhmi	r2, [r3, #0]
 800adf6:	601a      	strpl	r2, [r3, #0]
 800adf8:	e6f1      	b.n	800abde <__ssvfiscanf_r+0x52>
 800adfa:	4621      	mov	r1, r4
 800adfc:	4630      	mov	r0, r6
 800adfe:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800ae00:	4798      	blx	r3
 800ae02:	2800      	cmp	r0, #0
 800ae04:	d0b7      	beq.n	800ad76 <__ssvfiscanf_r+0x1ea>
 800ae06:	e79d      	b.n	800ad44 <__ssvfiscanf_r+0x1b8>
 800ae08:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800ae0a:	3201      	adds	r2, #1
 800ae0c:	9245      	str	r2, [sp, #276]	; 0x114
 800ae0e:	6862      	ldr	r2, [r4, #4]
 800ae10:	3a01      	subs	r2, #1
 800ae12:	2a00      	cmp	r2, #0
 800ae14:	6062      	str	r2, [r4, #4]
 800ae16:	dd02      	ble.n	800ae1e <__ssvfiscanf_r+0x292>
 800ae18:	3301      	adds	r3, #1
 800ae1a:	6023      	str	r3, [r4, #0]
 800ae1c:	e7ae      	b.n	800ad7c <__ssvfiscanf_r+0x1f0>
 800ae1e:	4621      	mov	r1, r4
 800ae20:	4630      	mov	r0, r6
 800ae22:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800ae24:	4798      	blx	r3
 800ae26:	2800      	cmp	r0, #0
 800ae28:	d0a8      	beq.n	800ad7c <__ssvfiscanf_r+0x1f0>
 800ae2a:	e78b      	b.n	800ad44 <__ssvfiscanf_r+0x1b8>
 800ae2c:	2b04      	cmp	r3, #4
 800ae2e:	dc06      	bgt.n	800ae3e <__ssvfiscanf_r+0x2b2>
 800ae30:	466b      	mov	r3, sp
 800ae32:	4622      	mov	r2, r4
 800ae34:	4630      	mov	r0, r6
 800ae36:	a941      	add	r1, sp, #260	; 0x104
 800ae38:	f000 f87a 	bl	800af30 <_scanf_i>
 800ae3c:	e7ac      	b.n	800ad98 <__ssvfiscanf_r+0x20c>
 800ae3e:	4b0f      	ldr	r3, [pc, #60]	; (800ae7c <__ssvfiscanf_r+0x2f0>)
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	f43f aecc 	beq.w	800abde <__ssvfiscanf_r+0x52>
 800ae46:	466b      	mov	r3, sp
 800ae48:	4622      	mov	r2, r4
 800ae4a:	4630      	mov	r0, r6
 800ae4c:	a941      	add	r1, sp, #260	; 0x104
 800ae4e:	f7fc fbe1 	bl	8007614 <_scanf_float>
 800ae52:	e7a1      	b.n	800ad98 <__ssvfiscanf_r+0x20c>
 800ae54:	89a3      	ldrh	r3, [r4, #12]
 800ae56:	f013 0f40 	tst.w	r3, #64	; 0x40
 800ae5a:	bf18      	it	ne
 800ae5c:	f04f 30ff 	movne.w	r0, #4294967295
 800ae60:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 800ae64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae68:	9844      	ldr	r0, [sp, #272]	; 0x110
 800ae6a:	e7f9      	b.n	800ae60 <__ssvfiscanf_r+0x2d4>
 800ae6c:	0800aad9 	.word	0x0800aad9
 800ae70:	0800ab53 	.word	0x0800ab53
 800ae74:	0800c231 	.word	0x0800c231
 800ae78:	0800c5aa 	.word	0x0800c5aa
 800ae7c:	08007615 	.word	0x08007615

0800ae80 <_scanf_chars>:
 800ae80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ae84:	4615      	mov	r5, r2
 800ae86:	688a      	ldr	r2, [r1, #8]
 800ae88:	4680      	mov	r8, r0
 800ae8a:	460c      	mov	r4, r1
 800ae8c:	b932      	cbnz	r2, 800ae9c <_scanf_chars+0x1c>
 800ae8e:	698a      	ldr	r2, [r1, #24]
 800ae90:	2a00      	cmp	r2, #0
 800ae92:	bf0c      	ite	eq
 800ae94:	2201      	moveq	r2, #1
 800ae96:	f04f 32ff 	movne.w	r2, #4294967295
 800ae9a:	608a      	str	r2, [r1, #8]
 800ae9c:	2700      	movs	r7, #0
 800ae9e:	6822      	ldr	r2, [r4, #0]
 800aea0:	f8df 9088 	ldr.w	r9, [pc, #136]	; 800af2c <_scanf_chars+0xac>
 800aea4:	06d1      	lsls	r1, r2, #27
 800aea6:	bf5f      	itttt	pl
 800aea8:	681a      	ldrpl	r2, [r3, #0]
 800aeaa:	1d11      	addpl	r1, r2, #4
 800aeac:	6019      	strpl	r1, [r3, #0]
 800aeae:	6816      	ldrpl	r6, [r2, #0]
 800aeb0:	69a0      	ldr	r0, [r4, #24]
 800aeb2:	b188      	cbz	r0, 800aed8 <_scanf_chars+0x58>
 800aeb4:	2801      	cmp	r0, #1
 800aeb6:	d107      	bne.n	800aec8 <_scanf_chars+0x48>
 800aeb8:	682b      	ldr	r3, [r5, #0]
 800aeba:	781a      	ldrb	r2, [r3, #0]
 800aebc:	6963      	ldr	r3, [r4, #20]
 800aebe:	5c9b      	ldrb	r3, [r3, r2]
 800aec0:	b953      	cbnz	r3, 800aed8 <_scanf_chars+0x58>
 800aec2:	bb27      	cbnz	r7, 800af0e <_scanf_chars+0x8e>
 800aec4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aec8:	2802      	cmp	r0, #2
 800aeca:	d120      	bne.n	800af0e <_scanf_chars+0x8e>
 800aecc:	682b      	ldr	r3, [r5, #0]
 800aece:	781b      	ldrb	r3, [r3, #0]
 800aed0:	f813 3009 	ldrb.w	r3, [r3, r9]
 800aed4:	071b      	lsls	r3, r3, #28
 800aed6:	d41a      	bmi.n	800af0e <_scanf_chars+0x8e>
 800aed8:	6823      	ldr	r3, [r4, #0]
 800aeda:	3701      	adds	r7, #1
 800aedc:	06da      	lsls	r2, r3, #27
 800aede:	bf5e      	ittt	pl
 800aee0:	682b      	ldrpl	r3, [r5, #0]
 800aee2:	781b      	ldrbpl	r3, [r3, #0]
 800aee4:	f806 3b01 	strbpl.w	r3, [r6], #1
 800aee8:	682a      	ldr	r2, [r5, #0]
 800aeea:	686b      	ldr	r3, [r5, #4]
 800aeec:	3201      	adds	r2, #1
 800aeee:	602a      	str	r2, [r5, #0]
 800aef0:	68a2      	ldr	r2, [r4, #8]
 800aef2:	3b01      	subs	r3, #1
 800aef4:	3a01      	subs	r2, #1
 800aef6:	606b      	str	r3, [r5, #4]
 800aef8:	60a2      	str	r2, [r4, #8]
 800aefa:	b142      	cbz	r2, 800af0e <_scanf_chars+0x8e>
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	dcd7      	bgt.n	800aeb0 <_scanf_chars+0x30>
 800af00:	4629      	mov	r1, r5
 800af02:	4640      	mov	r0, r8
 800af04:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800af08:	4798      	blx	r3
 800af0a:	2800      	cmp	r0, #0
 800af0c:	d0d0      	beq.n	800aeb0 <_scanf_chars+0x30>
 800af0e:	6823      	ldr	r3, [r4, #0]
 800af10:	f013 0310 	ands.w	r3, r3, #16
 800af14:	d105      	bne.n	800af22 <_scanf_chars+0xa2>
 800af16:	68e2      	ldr	r2, [r4, #12]
 800af18:	3201      	adds	r2, #1
 800af1a:	60e2      	str	r2, [r4, #12]
 800af1c:	69a2      	ldr	r2, [r4, #24]
 800af1e:	b102      	cbz	r2, 800af22 <_scanf_chars+0xa2>
 800af20:	7033      	strb	r3, [r6, #0]
 800af22:	6923      	ldr	r3, [r4, #16]
 800af24:	2000      	movs	r0, #0
 800af26:	441f      	add	r7, r3
 800af28:	6127      	str	r7, [r4, #16]
 800af2a:	e7cb      	b.n	800aec4 <_scanf_chars+0x44>
 800af2c:	0800c231 	.word	0x0800c231

0800af30 <_scanf_i>:
 800af30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af34:	460c      	mov	r4, r1
 800af36:	4698      	mov	r8, r3
 800af38:	4b72      	ldr	r3, [pc, #456]	; (800b104 <_scanf_i+0x1d4>)
 800af3a:	b087      	sub	sp, #28
 800af3c:	4682      	mov	sl, r0
 800af3e:	4616      	mov	r6, r2
 800af40:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800af44:	ab03      	add	r3, sp, #12
 800af46:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800af4a:	4b6f      	ldr	r3, [pc, #444]	; (800b108 <_scanf_i+0x1d8>)
 800af4c:	69a1      	ldr	r1, [r4, #24]
 800af4e:	4a6f      	ldr	r2, [pc, #444]	; (800b10c <_scanf_i+0x1dc>)
 800af50:	4627      	mov	r7, r4
 800af52:	2903      	cmp	r1, #3
 800af54:	bf18      	it	ne
 800af56:	461a      	movne	r2, r3
 800af58:	68a3      	ldr	r3, [r4, #8]
 800af5a:	9201      	str	r2, [sp, #4]
 800af5c:	1e5a      	subs	r2, r3, #1
 800af5e:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800af62:	bf81      	itttt	hi
 800af64:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800af68:	eb03 0905 	addhi.w	r9, r3, r5
 800af6c:	f240 135d 	movwhi	r3, #349	; 0x15d
 800af70:	60a3      	strhi	r3, [r4, #8]
 800af72:	f857 3b1c 	ldr.w	r3, [r7], #28
 800af76:	bf98      	it	ls
 800af78:	f04f 0900 	movls.w	r9, #0
 800af7c:	463d      	mov	r5, r7
 800af7e:	f04f 0b00 	mov.w	fp, #0
 800af82:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800af86:	6023      	str	r3, [r4, #0]
 800af88:	6831      	ldr	r1, [r6, #0]
 800af8a:	ab03      	add	r3, sp, #12
 800af8c:	2202      	movs	r2, #2
 800af8e:	7809      	ldrb	r1, [r1, #0]
 800af90:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800af94:	f7fe febc 	bl	8009d10 <memchr>
 800af98:	b328      	cbz	r0, 800afe6 <_scanf_i+0xb6>
 800af9a:	f1bb 0f01 	cmp.w	fp, #1
 800af9e:	d159      	bne.n	800b054 <_scanf_i+0x124>
 800afa0:	6862      	ldr	r2, [r4, #4]
 800afa2:	b92a      	cbnz	r2, 800afb0 <_scanf_i+0x80>
 800afa4:	2308      	movs	r3, #8
 800afa6:	6822      	ldr	r2, [r4, #0]
 800afa8:	6063      	str	r3, [r4, #4]
 800afaa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800afae:	6022      	str	r2, [r4, #0]
 800afb0:	6822      	ldr	r2, [r4, #0]
 800afb2:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800afb6:	6022      	str	r2, [r4, #0]
 800afb8:	68a2      	ldr	r2, [r4, #8]
 800afba:	1e51      	subs	r1, r2, #1
 800afbc:	60a1      	str	r1, [r4, #8]
 800afbe:	b192      	cbz	r2, 800afe6 <_scanf_i+0xb6>
 800afc0:	6832      	ldr	r2, [r6, #0]
 800afc2:	1c51      	adds	r1, r2, #1
 800afc4:	6031      	str	r1, [r6, #0]
 800afc6:	7812      	ldrb	r2, [r2, #0]
 800afc8:	f805 2b01 	strb.w	r2, [r5], #1
 800afcc:	6872      	ldr	r2, [r6, #4]
 800afce:	3a01      	subs	r2, #1
 800afd0:	2a00      	cmp	r2, #0
 800afd2:	6072      	str	r2, [r6, #4]
 800afd4:	dc07      	bgt.n	800afe6 <_scanf_i+0xb6>
 800afd6:	4631      	mov	r1, r6
 800afd8:	4650      	mov	r0, sl
 800afda:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800afde:	4790      	blx	r2
 800afe0:	2800      	cmp	r0, #0
 800afe2:	f040 8085 	bne.w	800b0f0 <_scanf_i+0x1c0>
 800afe6:	f10b 0b01 	add.w	fp, fp, #1
 800afea:	f1bb 0f03 	cmp.w	fp, #3
 800afee:	d1cb      	bne.n	800af88 <_scanf_i+0x58>
 800aff0:	6863      	ldr	r3, [r4, #4]
 800aff2:	b90b      	cbnz	r3, 800aff8 <_scanf_i+0xc8>
 800aff4:	230a      	movs	r3, #10
 800aff6:	6063      	str	r3, [r4, #4]
 800aff8:	6863      	ldr	r3, [r4, #4]
 800affa:	4945      	ldr	r1, [pc, #276]	; (800b110 <_scanf_i+0x1e0>)
 800affc:	6960      	ldr	r0, [r4, #20]
 800affe:	1ac9      	subs	r1, r1, r3
 800b000:	f000 f8b0 	bl	800b164 <__sccl>
 800b004:	f04f 0b00 	mov.w	fp, #0
 800b008:	68a3      	ldr	r3, [r4, #8]
 800b00a:	6822      	ldr	r2, [r4, #0]
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	d03d      	beq.n	800b08c <_scanf_i+0x15c>
 800b010:	6831      	ldr	r1, [r6, #0]
 800b012:	6960      	ldr	r0, [r4, #20]
 800b014:	f891 c000 	ldrb.w	ip, [r1]
 800b018:	f810 000c 	ldrb.w	r0, [r0, ip]
 800b01c:	2800      	cmp	r0, #0
 800b01e:	d035      	beq.n	800b08c <_scanf_i+0x15c>
 800b020:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800b024:	d124      	bne.n	800b070 <_scanf_i+0x140>
 800b026:	0510      	lsls	r0, r2, #20
 800b028:	d522      	bpl.n	800b070 <_scanf_i+0x140>
 800b02a:	f10b 0b01 	add.w	fp, fp, #1
 800b02e:	f1b9 0f00 	cmp.w	r9, #0
 800b032:	d003      	beq.n	800b03c <_scanf_i+0x10c>
 800b034:	3301      	adds	r3, #1
 800b036:	f109 39ff 	add.w	r9, r9, #4294967295
 800b03a:	60a3      	str	r3, [r4, #8]
 800b03c:	6873      	ldr	r3, [r6, #4]
 800b03e:	3b01      	subs	r3, #1
 800b040:	2b00      	cmp	r3, #0
 800b042:	6073      	str	r3, [r6, #4]
 800b044:	dd1b      	ble.n	800b07e <_scanf_i+0x14e>
 800b046:	6833      	ldr	r3, [r6, #0]
 800b048:	3301      	adds	r3, #1
 800b04a:	6033      	str	r3, [r6, #0]
 800b04c:	68a3      	ldr	r3, [r4, #8]
 800b04e:	3b01      	subs	r3, #1
 800b050:	60a3      	str	r3, [r4, #8]
 800b052:	e7d9      	b.n	800b008 <_scanf_i+0xd8>
 800b054:	f1bb 0f02 	cmp.w	fp, #2
 800b058:	d1ae      	bne.n	800afb8 <_scanf_i+0x88>
 800b05a:	6822      	ldr	r2, [r4, #0]
 800b05c:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800b060:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800b064:	d1bf      	bne.n	800afe6 <_scanf_i+0xb6>
 800b066:	2310      	movs	r3, #16
 800b068:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b06c:	6063      	str	r3, [r4, #4]
 800b06e:	e7a2      	b.n	800afb6 <_scanf_i+0x86>
 800b070:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800b074:	6022      	str	r2, [r4, #0]
 800b076:	780b      	ldrb	r3, [r1, #0]
 800b078:	f805 3b01 	strb.w	r3, [r5], #1
 800b07c:	e7de      	b.n	800b03c <_scanf_i+0x10c>
 800b07e:	4631      	mov	r1, r6
 800b080:	4650      	mov	r0, sl
 800b082:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800b086:	4798      	blx	r3
 800b088:	2800      	cmp	r0, #0
 800b08a:	d0df      	beq.n	800b04c <_scanf_i+0x11c>
 800b08c:	6823      	ldr	r3, [r4, #0]
 800b08e:	05d9      	lsls	r1, r3, #23
 800b090:	d50d      	bpl.n	800b0ae <_scanf_i+0x17e>
 800b092:	42bd      	cmp	r5, r7
 800b094:	d909      	bls.n	800b0aa <_scanf_i+0x17a>
 800b096:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800b09a:	4632      	mov	r2, r6
 800b09c:	4650      	mov	r0, sl
 800b09e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b0a2:	f105 39ff 	add.w	r9, r5, #4294967295
 800b0a6:	4798      	blx	r3
 800b0a8:	464d      	mov	r5, r9
 800b0aa:	42bd      	cmp	r5, r7
 800b0ac:	d028      	beq.n	800b100 <_scanf_i+0x1d0>
 800b0ae:	6822      	ldr	r2, [r4, #0]
 800b0b0:	f012 0210 	ands.w	r2, r2, #16
 800b0b4:	d113      	bne.n	800b0de <_scanf_i+0x1ae>
 800b0b6:	702a      	strb	r2, [r5, #0]
 800b0b8:	4639      	mov	r1, r7
 800b0ba:	6863      	ldr	r3, [r4, #4]
 800b0bc:	4650      	mov	r0, sl
 800b0be:	9e01      	ldr	r6, [sp, #4]
 800b0c0:	47b0      	blx	r6
 800b0c2:	f8d8 3000 	ldr.w	r3, [r8]
 800b0c6:	6821      	ldr	r1, [r4, #0]
 800b0c8:	1d1a      	adds	r2, r3, #4
 800b0ca:	f8c8 2000 	str.w	r2, [r8]
 800b0ce:	f011 0f20 	tst.w	r1, #32
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	d00f      	beq.n	800b0f6 <_scanf_i+0x1c6>
 800b0d6:	6018      	str	r0, [r3, #0]
 800b0d8:	68e3      	ldr	r3, [r4, #12]
 800b0da:	3301      	adds	r3, #1
 800b0dc:	60e3      	str	r3, [r4, #12]
 800b0de:	2000      	movs	r0, #0
 800b0e0:	1bed      	subs	r5, r5, r7
 800b0e2:	44ab      	add	fp, r5
 800b0e4:	6925      	ldr	r5, [r4, #16]
 800b0e6:	445d      	add	r5, fp
 800b0e8:	6125      	str	r5, [r4, #16]
 800b0ea:	b007      	add	sp, #28
 800b0ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b0f0:	f04f 0b00 	mov.w	fp, #0
 800b0f4:	e7ca      	b.n	800b08c <_scanf_i+0x15c>
 800b0f6:	07ca      	lsls	r2, r1, #31
 800b0f8:	bf4c      	ite	mi
 800b0fa:	8018      	strhmi	r0, [r3, #0]
 800b0fc:	6018      	strpl	r0, [r3, #0]
 800b0fe:	e7eb      	b.n	800b0d8 <_scanf_i+0x1a8>
 800b100:	2001      	movs	r0, #1
 800b102:	e7f2      	b.n	800b0ea <_scanf_i+0x1ba>
 800b104:	0800c17c 	.word	0x0800c17c
 800b108:	0800b2f5 	.word	0x0800b2f5
 800b10c:	080088a1 	.word	0x080088a1
 800b110:	0800c5ce 	.word	0x0800c5ce

0800b114 <_read_r>:
 800b114:	b538      	push	{r3, r4, r5, lr}
 800b116:	4604      	mov	r4, r0
 800b118:	4608      	mov	r0, r1
 800b11a:	4611      	mov	r1, r2
 800b11c:	2200      	movs	r2, #0
 800b11e:	4d05      	ldr	r5, [pc, #20]	; (800b134 <_read_r+0x20>)
 800b120:	602a      	str	r2, [r5, #0]
 800b122:	461a      	mov	r2, r3
 800b124:	f7f7 fc89 	bl	8002a3a <_read>
 800b128:	1c43      	adds	r3, r0, #1
 800b12a:	d102      	bne.n	800b132 <_read_r+0x1e>
 800b12c:	682b      	ldr	r3, [r5, #0]
 800b12e:	b103      	cbz	r3, 800b132 <_read_r+0x1e>
 800b130:	6023      	str	r3, [r4, #0]
 800b132:	bd38      	pop	{r3, r4, r5, pc}
 800b134:	20000418 	.word	0x20000418

0800b138 <nan>:
 800b138:	2000      	movs	r0, #0
 800b13a:	4901      	ldr	r1, [pc, #4]	; (800b140 <nan+0x8>)
 800b13c:	4770      	bx	lr
 800b13e:	bf00      	nop
 800b140:	7ff80000 	.word	0x7ff80000

0800b144 <_sbrk_r>:
 800b144:	b538      	push	{r3, r4, r5, lr}
 800b146:	2300      	movs	r3, #0
 800b148:	4d05      	ldr	r5, [pc, #20]	; (800b160 <_sbrk_r+0x1c>)
 800b14a:	4604      	mov	r4, r0
 800b14c:	4608      	mov	r0, r1
 800b14e:	602b      	str	r3, [r5, #0]
 800b150:	f7f7 fcdc 	bl	8002b0c <_sbrk>
 800b154:	1c43      	adds	r3, r0, #1
 800b156:	d102      	bne.n	800b15e <_sbrk_r+0x1a>
 800b158:	682b      	ldr	r3, [r5, #0]
 800b15a:	b103      	cbz	r3, 800b15e <_sbrk_r+0x1a>
 800b15c:	6023      	str	r3, [r4, #0]
 800b15e:	bd38      	pop	{r3, r4, r5, pc}
 800b160:	20000418 	.word	0x20000418

0800b164 <__sccl>:
 800b164:	b570      	push	{r4, r5, r6, lr}
 800b166:	780b      	ldrb	r3, [r1, #0]
 800b168:	4604      	mov	r4, r0
 800b16a:	2b5e      	cmp	r3, #94	; 0x5e
 800b16c:	bf13      	iteet	ne
 800b16e:	2200      	movne	r2, #0
 800b170:	2201      	moveq	r2, #1
 800b172:	784b      	ldrbeq	r3, [r1, #1]
 800b174:	1c48      	addne	r0, r1, #1
 800b176:	bf08      	it	eq
 800b178:	1c88      	addeq	r0, r1, #2
 800b17a:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800b17e:	1e61      	subs	r1, r4, #1
 800b180:	f801 2f01 	strb.w	r2, [r1, #1]!
 800b184:	42a9      	cmp	r1, r5
 800b186:	d1fb      	bne.n	800b180 <__sccl+0x1c>
 800b188:	b90b      	cbnz	r3, 800b18e <__sccl+0x2a>
 800b18a:	3801      	subs	r0, #1
 800b18c:	bd70      	pop	{r4, r5, r6, pc}
 800b18e:	f082 0101 	eor.w	r1, r2, #1
 800b192:	54e1      	strb	r1, [r4, r3]
 800b194:	1c42      	adds	r2, r0, #1
 800b196:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 800b19a:	4610      	mov	r0, r2
 800b19c:	2d2d      	cmp	r5, #45	; 0x2d
 800b19e:	f102 36ff 	add.w	r6, r2, #4294967295
 800b1a2:	d006      	beq.n	800b1b2 <__sccl+0x4e>
 800b1a4:	2d5d      	cmp	r5, #93	; 0x5d
 800b1a6:	d0f1      	beq.n	800b18c <__sccl+0x28>
 800b1a8:	b90d      	cbnz	r5, 800b1ae <__sccl+0x4a>
 800b1aa:	4630      	mov	r0, r6
 800b1ac:	e7ee      	b.n	800b18c <__sccl+0x28>
 800b1ae:	462b      	mov	r3, r5
 800b1b0:	e7ef      	b.n	800b192 <__sccl+0x2e>
 800b1b2:	7816      	ldrb	r6, [r2, #0]
 800b1b4:	2e5d      	cmp	r6, #93	; 0x5d
 800b1b6:	d0fa      	beq.n	800b1ae <__sccl+0x4a>
 800b1b8:	42b3      	cmp	r3, r6
 800b1ba:	dcf8      	bgt.n	800b1ae <__sccl+0x4a>
 800b1bc:	4618      	mov	r0, r3
 800b1be:	3001      	adds	r0, #1
 800b1c0:	4286      	cmp	r6, r0
 800b1c2:	5421      	strb	r1, [r4, r0]
 800b1c4:	dcfb      	bgt.n	800b1be <__sccl+0x5a>
 800b1c6:	43d8      	mvns	r0, r3
 800b1c8:	4430      	add	r0, r6
 800b1ca:	42b3      	cmp	r3, r6
 800b1cc:	bfa8      	it	ge
 800b1ce:	2000      	movge	r0, #0
 800b1d0:	1c5d      	adds	r5, r3, #1
 800b1d2:	182b      	adds	r3, r5, r0
 800b1d4:	3202      	adds	r2, #2
 800b1d6:	e7de      	b.n	800b196 <__sccl+0x32>

0800b1d8 <strncmp>:
 800b1d8:	b510      	push	{r4, lr}
 800b1da:	b16a      	cbz	r2, 800b1f8 <strncmp+0x20>
 800b1dc:	3901      	subs	r1, #1
 800b1de:	1884      	adds	r4, r0, r2
 800b1e0:	f810 3b01 	ldrb.w	r3, [r0], #1
 800b1e4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800b1e8:	4293      	cmp	r3, r2
 800b1ea:	d103      	bne.n	800b1f4 <strncmp+0x1c>
 800b1ec:	42a0      	cmp	r0, r4
 800b1ee:	d001      	beq.n	800b1f4 <strncmp+0x1c>
 800b1f0:	2b00      	cmp	r3, #0
 800b1f2:	d1f5      	bne.n	800b1e0 <strncmp+0x8>
 800b1f4:	1a98      	subs	r0, r3, r2
 800b1f6:	bd10      	pop	{r4, pc}
 800b1f8:	4610      	mov	r0, r2
 800b1fa:	e7fc      	b.n	800b1f6 <strncmp+0x1e>

0800b1fc <_strtoul_l.isra.0>:
 800b1fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b200:	468c      	mov	ip, r1
 800b202:	4686      	mov	lr, r0
 800b204:	4e3a      	ldr	r6, [pc, #232]	; (800b2f0 <_strtoul_l.isra.0+0xf4>)
 800b206:	4660      	mov	r0, ip
 800b208:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800b20c:	5da5      	ldrb	r5, [r4, r6]
 800b20e:	f015 0508 	ands.w	r5, r5, #8
 800b212:	d1f8      	bne.n	800b206 <_strtoul_l.isra.0+0xa>
 800b214:	2c2d      	cmp	r4, #45	; 0x2d
 800b216:	d134      	bne.n	800b282 <_strtoul_l.isra.0+0x86>
 800b218:	f04f 0801 	mov.w	r8, #1
 800b21c:	f89c 4000 	ldrb.w	r4, [ip]
 800b220:	f100 0c02 	add.w	ip, r0, #2
 800b224:	2b00      	cmp	r3, #0
 800b226:	d05e      	beq.n	800b2e6 <_strtoul_l.isra.0+0xea>
 800b228:	2b10      	cmp	r3, #16
 800b22a:	d10c      	bne.n	800b246 <_strtoul_l.isra.0+0x4a>
 800b22c:	2c30      	cmp	r4, #48	; 0x30
 800b22e:	d10a      	bne.n	800b246 <_strtoul_l.isra.0+0x4a>
 800b230:	f89c 0000 	ldrb.w	r0, [ip]
 800b234:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800b238:	2858      	cmp	r0, #88	; 0x58
 800b23a:	d14f      	bne.n	800b2dc <_strtoul_l.isra.0+0xe0>
 800b23c:	2310      	movs	r3, #16
 800b23e:	f89c 4001 	ldrb.w	r4, [ip, #1]
 800b242:	f10c 0c02 	add.w	ip, ip, #2
 800b246:	f04f 37ff 	mov.w	r7, #4294967295
 800b24a:	fbb7 f7f3 	udiv	r7, r7, r3
 800b24e:	2500      	movs	r5, #0
 800b250:	fb03 f907 	mul.w	r9, r3, r7
 800b254:	4628      	mov	r0, r5
 800b256:	ea6f 0909 	mvn.w	r9, r9
 800b25a:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 800b25e:	2e09      	cmp	r6, #9
 800b260:	d818      	bhi.n	800b294 <_strtoul_l.isra.0+0x98>
 800b262:	4634      	mov	r4, r6
 800b264:	42a3      	cmp	r3, r4
 800b266:	dd24      	ble.n	800b2b2 <_strtoul_l.isra.0+0xb6>
 800b268:	2d00      	cmp	r5, #0
 800b26a:	db1f      	blt.n	800b2ac <_strtoul_l.isra.0+0xb0>
 800b26c:	4287      	cmp	r7, r0
 800b26e:	d31d      	bcc.n	800b2ac <_strtoul_l.isra.0+0xb0>
 800b270:	d101      	bne.n	800b276 <_strtoul_l.isra.0+0x7a>
 800b272:	45a1      	cmp	r9, r4
 800b274:	db1a      	blt.n	800b2ac <_strtoul_l.isra.0+0xb0>
 800b276:	2501      	movs	r5, #1
 800b278:	fb00 4003 	mla	r0, r0, r3, r4
 800b27c:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800b280:	e7eb      	b.n	800b25a <_strtoul_l.isra.0+0x5e>
 800b282:	2c2b      	cmp	r4, #43	; 0x2b
 800b284:	bf08      	it	eq
 800b286:	f89c 4000 	ldrbeq.w	r4, [ip]
 800b28a:	46a8      	mov	r8, r5
 800b28c:	bf08      	it	eq
 800b28e:	f100 0c02 	addeq.w	ip, r0, #2
 800b292:	e7c7      	b.n	800b224 <_strtoul_l.isra.0+0x28>
 800b294:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 800b298:	2e19      	cmp	r6, #25
 800b29a:	d801      	bhi.n	800b2a0 <_strtoul_l.isra.0+0xa4>
 800b29c:	3c37      	subs	r4, #55	; 0x37
 800b29e:	e7e1      	b.n	800b264 <_strtoul_l.isra.0+0x68>
 800b2a0:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 800b2a4:	2e19      	cmp	r6, #25
 800b2a6:	d804      	bhi.n	800b2b2 <_strtoul_l.isra.0+0xb6>
 800b2a8:	3c57      	subs	r4, #87	; 0x57
 800b2aa:	e7db      	b.n	800b264 <_strtoul_l.isra.0+0x68>
 800b2ac:	f04f 35ff 	mov.w	r5, #4294967295
 800b2b0:	e7e4      	b.n	800b27c <_strtoul_l.isra.0+0x80>
 800b2b2:	2d00      	cmp	r5, #0
 800b2b4:	da07      	bge.n	800b2c6 <_strtoul_l.isra.0+0xca>
 800b2b6:	2322      	movs	r3, #34	; 0x22
 800b2b8:	f04f 30ff 	mov.w	r0, #4294967295
 800b2bc:	f8ce 3000 	str.w	r3, [lr]
 800b2c0:	b942      	cbnz	r2, 800b2d4 <_strtoul_l.isra.0+0xd8>
 800b2c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b2c6:	f1b8 0f00 	cmp.w	r8, #0
 800b2ca:	d000      	beq.n	800b2ce <_strtoul_l.isra.0+0xd2>
 800b2cc:	4240      	negs	r0, r0
 800b2ce:	2a00      	cmp	r2, #0
 800b2d0:	d0f7      	beq.n	800b2c2 <_strtoul_l.isra.0+0xc6>
 800b2d2:	b10d      	cbz	r5, 800b2d8 <_strtoul_l.isra.0+0xdc>
 800b2d4:	f10c 31ff 	add.w	r1, ip, #4294967295
 800b2d8:	6011      	str	r1, [r2, #0]
 800b2da:	e7f2      	b.n	800b2c2 <_strtoul_l.isra.0+0xc6>
 800b2dc:	2430      	movs	r4, #48	; 0x30
 800b2de:	2b00      	cmp	r3, #0
 800b2e0:	d1b1      	bne.n	800b246 <_strtoul_l.isra.0+0x4a>
 800b2e2:	2308      	movs	r3, #8
 800b2e4:	e7af      	b.n	800b246 <_strtoul_l.isra.0+0x4a>
 800b2e6:	2c30      	cmp	r4, #48	; 0x30
 800b2e8:	d0a2      	beq.n	800b230 <_strtoul_l.isra.0+0x34>
 800b2ea:	230a      	movs	r3, #10
 800b2ec:	e7ab      	b.n	800b246 <_strtoul_l.isra.0+0x4a>
 800b2ee:	bf00      	nop
 800b2f0:	0800c231 	.word	0x0800c231

0800b2f4 <_strtoul_r>:
 800b2f4:	f7ff bf82 	b.w	800b1fc <_strtoul_l.isra.0>

0800b2f8 <__submore>:
 800b2f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b2fc:	460c      	mov	r4, r1
 800b2fe:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800b300:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b304:	4299      	cmp	r1, r3
 800b306:	d11b      	bne.n	800b340 <__submore+0x48>
 800b308:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800b30c:	f7ff fa2e 	bl	800a76c <_malloc_r>
 800b310:	b918      	cbnz	r0, 800b31a <__submore+0x22>
 800b312:	f04f 30ff 	mov.w	r0, #4294967295
 800b316:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b31a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b31e:	63a3      	str	r3, [r4, #56]	; 0x38
 800b320:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800b324:	6360      	str	r0, [r4, #52]	; 0x34
 800b326:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800b32a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800b32e:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800b332:	7043      	strb	r3, [r0, #1]
 800b334:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800b338:	7003      	strb	r3, [r0, #0]
 800b33a:	6020      	str	r0, [r4, #0]
 800b33c:	2000      	movs	r0, #0
 800b33e:	e7ea      	b.n	800b316 <__submore+0x1e>
 800b340:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800b342:	0077      	lsls	r7, r6, #1
 800b344:	463a      	mov	r2, r7
 800b346:	f000 fa2d 	bl	800b7a4 <_realloc_r>
 800b34a:	4605      	mov	r5, r0
 800b34c:	2800      	cmp	r0, #0
 800b34e:	d0e0      	beq.n	800b312 <__submore+0x1a>
 800b350:	eb00 0806 	add.w	r8, r0, r6
 800b354:	4601      	mov	r1, r0
 800b356:	4632      	mov	r2, r6
 800b358:	4640      	mov	r0, r8
 800b35a:	f7fe fce7 	bl	8009d2c <memcpy>
 800b35e:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800b362:	f8c4 8000 	str.w	r8, [r4]
 800b366:	e7e9      	b.n	800b33c <__submore+0x44>

0800b368 <__ascii_wctomb>:
 800b368:	4603      	mov	r3, r0
 800b36a:	4608      	mov	r0, r1
 800b36c:	b141      	cbz	r1, 800b380 <__ascii_wctomb+0x18>
 800b36e:	2aff      	cmp	r2, #255	; 0xff
 800b370:	d904      	bls.n	800b37c <__ascii_wctomb+0x14>
 800b372:	228a      	movs	r2, #138	; 0x8a
 800b374:	f04f 30ff 	mov.w	r0, #4294967295
 800b378:	601a      	str	r2, [r3, #0]
 800b37a:	4770      	bx	lr
 800b37c:	2001      	movs	r0, #1
 800b37e:	700a      	strb	r2, [r1, #0]
 800b380:	4770      	bx	lr
	...

0800b384 <__assert_func>:
 800b384:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b386:	4614      	mov	r4, r2
 800b388:	461a      	mov	r2, r3
 800b38a:	4b09      	ldr	r3, [pc, #36]	; (800b3b0 <__assert_func+0x2c>)
 800b38c:	4605      	mov	r5, r0
 800b38e:	681b      	ldr	r3, [r3, #0]
 800b390:	68d8      	ldr	r0, [r3, #12]
 800b392:	b14c      	cbz	r4, 800b3a8 <__assert_func+0x24>
 800b394:	4b07      	ldr	r3, [pc, #28]	; (800b3b4 <__assert_func+0x30>)
 800b396:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b39a:	9100      	str	r1, [sp, #0]
 800b39c:	462b      	mov	r3, r5
 800b39e:	4906      	ldr	r1, [pc, #24]	; (800b3b8 <__assert_func+0x34>)
 800b3a0:	f000 f9a6 	bl	800b6f0 <fiprintf>
 800b3a4:	f000 fc3c 	bl	800bc20 <abort>
 800b3a8:	4b04      	ldr	r3, [pc, #16]	; (800b3bc <__assert_func+0x38>)
 800b3aa:	461c      	mov	r4, r3
 800b3ac:	e7f3      	b.n	800b396 <__assert_func+0x12>
 800b3ae:	bf00      	nop
 800b3b0:	2000000c 	.word	0x2000000c
 800b3b4:	0800c5d0 	.word	0x0800c5d0
 800b3b8:	0800c5dd 	.word	0x0800c5dd
 800b3bc:	0800c60b 	.word	0x0800c60b

0800b3c0 <__sflush_r>:
 800b3c0:	898a      	ldrh	r2, [r1, #12]
 800b3c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b3c6:	4605      	mov	r5, r0
 800b3c8:	0710      	lsls	r0, r2, #28
 800b3ca:	460c      	mov	r4, r1
 800b3cc:	d458      	bmi.n	800b480 <__sflush_r+0xc0>
 800b3ce:	684b      	ldr	r3, [r1, #4]
 800b3d0:	2b00      	cmp	r3, #0
 800b3d2:	dc05      	bgt.n	800b3e0 <__sflush_r+0x20>
 800b3d4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b3d6:	2b00      	cmp	r3, #0
 800b3d8:	dc02      	bgt.n	800b3e0 <__sflush_r+0x20>
 800b3da:	2000      	movs	r0, #0
 800b3dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b3e0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b3e2:	2e00      	cmp	r6, #0
 800b3e4:	d0f9      	beq.n	800b3da <__sflush_r+0x1a>
 800b3e6:	2300      	movs	r3, #0
 800b3e8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b3ec:	682f      	ldr	r7, [r5, #0]
 800b3ee:	602b      	str	r3, [r5, #0]
 800b3f0:	d032      	beq.n	800b458 <__sflush_r+0x98>
 800b3f2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b3f4:	89a3      	ldrh	r3, [r4, #12]
 800b3f6:	075a      	lsls	r2, r3, #29
 800b3f8:	d505      	bpl.n	800b406 <__sflush_r+0x46>
 800b3fa:	6863      	ldr	r3, [r4, #4]
 800b3fc:	1ac0      	subs	r0, r0, r3
 800b3fe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b400:	b10b      	cbz	r3, 800b406 <__sflush_r+0x46>
 800b402:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b404:	1ac0      	subs	r0, r0, r3
 800b406:	2300      	movs	r3, #0
 800b408:	4602      	mov	r2, r0
 800b40a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b40c:	4628      	mov	r0, r5
 800b40e:	6a21      	ldr	r1, [r4, #32]
 800b410:	47b0      	blx	r6
 800b412:	1c43      	adds	r3, r0, #1
 800b414:	89a3      	ldrh	r3, [r4, #12]
 800b416:	d106      	bne.n	800b426 <__sflush_r+0x66>
 800b418:	6829      	ldr	r1, [r5, #0]
 800b41a:	291d      	cmp	r1, #29
 800b41c:	d82c      	bhi.n	800b478 <__sflush_r+0xb8>
 800b41e:	4a2a      	ldr	r2, [pc, #168]	; (800b4c8 <__sflush_r+0x108>)
 800b420:	40ca      	lsrs	r2, r1
 800b422:	07d6      	lsls	r6, r2, #31
 800b424:	d528      	bpl.n	800b478 <__sflush_r+0xb8>
 800b426:	2200      	movs	r2, #0
 800b428:	6062      	str	r2, [r4, #4]
 800b42a:	6922      	ldr	r2, [r4, #16]
 800b42c:	04d9      	lsls	r1, r3, #19
 800b42e:	6022      	str	r2, [r4, #0]
 800b430:	d504      	bpl.n	800b43c <__sflush_r+0x7c>
 800b432:	1c42      	adds	r2, r0, #1
 800b434:	d101      	bne.n	800b43a <__sflush_r+0x7a>
 800b436:	682b      	ldr	r3, [r5, #0]
 800b438:	b903      	cbnz	r3, 800b43c <__sflush_r+0x7c>
 800b43a:	6560      	str	r0, [r4, #84]	; 0x54
 800b43c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b43e:	602f      	str	r7, [r5, #0]
 800b440:	2900      	cmp	r1, #0
 800b442:	d0ca      	beq.n	800b3da <__sflush_r+0x1a>
 800b444:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b448:	4299      	cmp	r1, r3
 800b44a:	d002      	beq.n	800b452 <__sflush_r+0x92>
 800b44c:	4628      	mov	r0, r5
 800b44e:	f7ff f941 	bl	800a6d4 <_free_r>
 800b452:	2000      	movs	r0, #0
 800b454:	6360      	str	r0, [r4, #52]	; 0x34
 800b456:	e7c1      	b.n	800b3dc <__sflush_r+0x1c>
 800b458:	6a21      	ldr	r1, [r4, #32]
 800b45a:	2301      	movs	r3, #1
 800b45c:	4628      	mov	r0, r5
 800b45e:	47b0      	blx	r6
 800b460:	1c41      	adds	r1, r0, #1
 800b462:	d1c7      	bne.n	800b3f4 <__sflush_r+0x34>
 800b464:	682b      	ldr	r3, [r5, #0]
 800b466:	2b00      	cmp	r3, #0
 800b468:	d0c4      	beq.n	800b3f4 <__sflush_r+0x34>
 800b46a:	2b1d      	cmp	r3, #29
 800b46c:	d001      	beq.n	800b472 <__sflush_r+0xb2>
 800b46e:	2b16      	cmp	r3, #22
 800b470:	d101      	bne.n	800b476 <__sflush_r+0xb6>
 800b472:	602f      	str	r7, [r5, #0]
 800b474:	e7b1      	b.n	800b3da <__sflush_r+0x1a>
 800b476:	89a3      	ldrh	r3, [r4, #12]
 800b478:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b47c:	81a3      	strh	r3, [r4, #12]
 800b47e:	e7ad      	b.n	800b3dc <__sflush_r+0x1c>
 800b480:	690f      	ldr	r7, [r1, #16]
 800b482:	2f00      	cmp	r7, #0
 800b484:	d0a9      	beq.n	800b3da <__sflush_r+0x1a>
 800b486:	0793      	lsls	r3, r2, #30
 800b488:	bf18      	it	ne
 800b48a:	2300      	movne	r3, #0
 800b48c:	680e      	ldr	r6, [r1, #0]
 800b48e:	bf08      	it	eq
 800b490:	694b      	ldreq	r3, [r1, #20]
 800b492:	eba6 0807 	sub.w	r8, r6, r7
 800b496:	600f      	str	r7, [r1, #0]
 800b498:	608b      	str	r3, [r1, #8]
 800b49a:	f1b8 0f00 	cmp.w	r8, #0
 800b49e:	dd9c      	ble.n	800b3da <__sflush_r+0x1a>
 800b4a0:	4643      	mov	r3, r8
 800b4a2:	463a      	mov	r2, r7
 800b4a4:	4628      	mov	r0, r5
 800b4a6:	6a21      	ldr	r1, [r4, #32]
 800b4a8:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b4aa:	47b0      	blx	r6
 800b4ac:	2800      	cmp	r0, #0
 800b4ae:	dc06      	bgt.n	800b4be <__sflush_r+0xfe>
 800b4b0:	89a3      	ldrh	r3, [r4, #12]
 800b4b2:	f04f 30ff 	mov.w	r0, #4294967295
 800b4b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b4ba:	81a3      	strh	r3, [r4, #12]
 800b4bc:	e78e      	b.n	800b3dc <__sflush_r+0x1c>
 800b4be:	4407      	add	r7, r0
 800b4c0:	eba8 0800 	sub.w	r8, r8, r0
 800b4c4:	e7e9      	b.n	800b49a <__sflush_r+0xda>
 800b4c6:	bf00      	nop
 800b4c8:	20400001 	.word	0x20400001

0800b4cc <_fflush_r>:
 800b4cc:	b538      	push	{r3, r4, r5, lr}
 800b4ce:	690b      	ldr	r3, [r1, #16]
 800b4d0:	4605      	mov	r5, r0
 800b4d2:	460c      	mov	r4, r1
 800b4d4:	b913      	cbnz	r3, 800b4dc <_fflush_r+0x10>
 800b4d6:	2500      	movs	r5, #0
 800b4d8:	4628      	mov	r0, r5
 800b4da:	bd38      	pop	{r3, r4, r5, pc}
 800b4dc:	b118      	cbz	r0, 800b4e6 <_fflush_r+0x1a>
 800b4de:	6983      	ldr	r3, [r0, #24]
 800b4e0:	b90b      	cbnz	r3, 800b4e6 <_fflush_r+0x1a>
 800b4e2:	f000 f887 	bl	800b5f4 <__sinit>
 800b4e6:	4b14      	ldr	r3, [pc, #80]	; (800b538 <_fflush_r+0x6c>)
 800b4e8:	429c      	cmp	r4, r3
 800b4ea:	d11b      	bne.n	800b524 <_fflush_r+0x58>
 800b4ec:	686c      	ldr	r4, [r5, #4]
 800b4ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b4f2:	2b00      	cmp	r3, #0
 800b4f4:	d0ef      	beq.n	800b4d6 <_fflush_r+0xa>
 800b4f6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b4f8:	07d0      	lsls	r0, r2, #31
 800b4fa:	d404      	bmi.n	800b506 <_fflush_r+0x3a>
 800b4fc:	0599      	lsls	r1, r3, #22
 800b4fe:	d402      	bmi.n	800b506 <_fflush_r+0x3a>
 800b500:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b502:	f000 f927 	bl	800b754 <__retarget_lock_acquire_recursive>
 800b506:	4628      	mov	r0, r5
 800b508:	4621      	mov	r1, r4
 800b50a:	f7ff ff59 	bl	800b3c0 <__sflush_r>
 800b50e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b510:	4605      	mov	r5, r0
 800b512:	07da      	lsls	r2, r3, #31
 800b514:	d4e0      	bmi.n	800b4d8 <_fflush_r+0xc>
 800b516:	89a3      	ldrh	r3, [r4, #12]
 800b518:	059b      	lsls	r3, r3, #22
 800b51a:	d4dd      	bmi.n	800b4d8 <_fflush_r+0xc>
 800b51c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b51e:	f000 f91a 	bl	800b756 <__retarget_lock_release_recursive>
 800b522:	e7d9      	b.n	800b4d8 <_fflush_r+0xc>
 800b524:	4b05      	ldr	r3, [pc, #20]	; (800b53c <_fflush_r+0x70>)
 800b526:	429c      	cmp	r4, r3
 800b528:	d101      	bne.n	800b52e <_fflush_r+0x62>
 800b52a:	68ac      	ldr	r4, [r5, #8]
 800b52c:	e7df      	b.n	800b4ee <_fflush_r+0x22>
 800b52e:	4b04      	ldr	r3, [pc, #16]	; (800b540 <_fflush_r+0x74>)
 800b530:	429c      	cmp	r4, r3
 800b532:	bf08      	it	eq
 800b534:	68ec      	ldreq	r4, [r5, #12]
 800b536:	e7da      	b.n	800b4ee <_fflush_r+0x22>
 800b538:	0800c62c 	.word	0x0800c62c
 800b53c:	0800c64c 	.word	0x0800c64c
 800b540:	0800c60c 	.word	0x0800c60c

0800b544 <std>:
 800b544:	2300      	movs	r3, #0
 800b546:	b510      	push	{r4, lr}
 800b548:	4604      	mov	r4, r0
 800b54a:	e9c0 3300 	strd	r3, r3, [r0]
 800b54e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b552:	6083      	str	r3, [r0, #8]
 800b554:	8181      	strh	r1, [r0, #12]
 800b556:	6643      	str	r3, [r0, #100]	; 0x64
 800b558:	81c2      	strh	r2, [r0, #14]
 800b55a:	6183      	str	r3, [r0, #24]
 800b55c:	4619      	mov	r1, r3
 800b55e:	2208      	movs	r2, #8
 800b560:	305c      	adds	r0, #92	; 0x5c
 800b562:	f7fb fbef 	bl	8006d44 <memset>
 800b566:	4b05      	ldr	r3, [pc, #20]	; (800b57c <std+0x38>)
 800b568:	6224      	str	r4, [r4, #32]
 800b56a:	6263      	str	r3, [r4, #36]	; 0x24
 800b56c:	4b04      	ldr	r3, [pc, #16]	; (800b580 <std+0x3c>)
 800b56e:	62a3      	str	r3, [r4, #40]	; 0x28
 800b570:	4b04      	ldr	r3, [pc, #16]	; (800b584 <std+0x40>)
 800b572:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b574:	4b04      	ldr	r3, [pc, #16]	; (800b588 <std+0x44>)
 800b576:	6323      	str	r3, [r4, #48]	; 0x30
 800b578:	bd10      	pop	{r4, pc}
 800b57a:	bf00      	nop
 800b57c:	08007ad5 	.word	0x08007ad5
 800b580:	08007afb 	.word	0x08007afb
 800b584:	08007b33 	.word	0x08007b33
 800b588:	08007b57 	.word	0x08007b57

0800b58c <_cleanup_r>:
 800b58c:	4901      	ldr	r1, [pc, #4]	; (800b594 <_cleanup_r+0x8>)
 800b58e:	f000 b8c1 	b.w	800b714 <_fwalk_reent>
 800b592:	bf00      	nop
 800b594:	0800b4cd 	.word	0x0800b4cd

0800b598 <__sfmoreglue>:
 800b598:	b570      	push	{r4, r5, r6, lr}
 800b59a:	2568      	movs	r5, #104	; 0x68
 800b59c:	1e4a      	subs	r2, r1, #1
 800b59e:	4355      	muls	r5, r2
 800b5a0:	460e      	mov	r6, r1
 800b5a2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b5a6:	f7ff f8e1 	bl	800a76c <_malloc_r>
 800b5aa:	4604      	mov	r4, r0
 800b5ac:	b140      	cbz	r0, 800b5c0 <__sfmoreglue+0x28>
 800b5ae:	2100      	movs	r1, #0
 800b5b0:	e9c0 1600 	strd	r1, r6, [r0]
 800b5b4:	300c      	adds	r0, #12
 800b5b6:	60a0      	str	r0, [r4, #8]
 800b5b8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b5bc:	f7fb fbc2 	bl	8006d44 <memset>
 800b5c0:	4620      	mov	r0, r4
 800b5c2:	bd70      	pop	{r4, r5, r6, pc}

0800b5c4 <__sfp_lock_acquire>:
 800b5c4:	4801      	ldr	r0, [pc, #4]	; (800b5cc <__sfp_lock_acquire+0x8>)
 800b5c6:	f000 b8c5 	b.w	800b754 <__retarget_lock_acquire_recursive>
 800b5ca:	bf00      	nop
 800b5cc:	20000424 	.word	0x20000424

0800b5d0 <__sfp_lock_release>:
 800b5d0:	4801      	ldr	r0, [pc, #4]	; (800b5d8 <__sfp_lock_release+0x8>)
 800b5d2:	f000 b8c0 	b.w	800b756 <__retarget_lock_release_recursive>
 800b5d6:	bf00      	nop
 800b5d8:	20000424 	.word	0x20000424

0800b5dc <__sinit_lock_acquire>:
 800b5dc:	4801      	ldr	r0, [pc, #4]	; (800b5e4 <__sinit_lock_acquire+0x8>)
 800b5de:	f000 b8b9 	b.w	800b754 <__retarget_lock_acquire_recursive>
 800b5e2:	bf00      	nop
 800b5e4:	2000041f 	.word	0x2000041f

0800b5e8 <__sinit_lock_release>:
 800b5e8:	4801      	ldr	r0, [pc, #4]	; (800b5f0 <__sinit_lock_release+0x8>)
 800b5ea:	f000 b8b4 	b.w	800b756 <__retarget_lock_release_recursive>
 800b5ee:	bf00      	nop
 800b5f0:	2000041f 	.word	0x2000041f

0800b5f4 <__sinit>:
 800b5f4:	b510      	push	{r4, lr}
 800b5f6:	4604      	mov	r4, r0
 800b5f8:	f7ff fff0 	bl	800b5dc <__sinit_lock_acquire>
 800b5fc:	69a3      	ldr	r3, [r4, #24]
 800b5fe:	b11b      	cbz	r3, 800b608 <__sinit+0x14>
 800b600:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b604:	f7ff bff0 	b.w	800b5e8 <__sinit_lock_release>
 800b608:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b60c:	6523      	str	r3, [r4, #80]	; 0x50
 800b60e:	4b13      	ldr	r3, [pc, #76]	; (800b65c <__sinit+0x68>)
 800b610:	4a13      	ldr	r2, [pc, #76]	; (800b660 <__sinit+0x6c>)
 800b612:	681b      	ldr	r3, [r3, #0]
 800b614:	62a2      	str	r2, [r4, #40]	; 0x28
 800b616:	42a3      	cmp	r3, r4
 800b618:	bf08      	it	eq
 800b61a:	2301      	moveq	r3, #1
 800b61c:	4620      	mov	r0, r4
 800b61e:	bf08      	it	eq
 800b620:	61a3      	streq	r3, [r4, #24]
 800b622:	f000 f81f 	bl	800b664 <__sfp>
 800b626:	6060      	str	r0, [r4, #4]
 800b628:	4620      	mov	r0, r4
 800b62a:	f000 f81b 	bl	800b664 <__sfp>
 800b62e:	60a0      	str	r0, [r4, #8]
 800b630:	4620      	mov	r0, r4
 800b632:	f000 f817 	bl	800b664 <__sfp>
 800b636:	2200      	movs	r2, #0
 800b638:	2104      	movs	r1, #4
 800b63a:	60e0      	str	r0, [r4, #12]
 800b63c:	6860      	ldr	r0, [r4, #4]
 800b63e:	f7ff ff81 	bl	800b544 <std>
 800b642:	2201      	movs	r2, #1
 800b644:	2109      	movs	r1, #9
 800b646:	68a0      	ldr	r0, [r4, #8]
 800b648:	f7ff ff7c 	bl	800b544 <std>
 800b64c:	2202      	movs	r2, #2
 800b64e:	2112      	movs	r1, #18
 800b650:	68e0      	ldr	r0, [r4, #12]
 800b652:	f7ff ff77 	bl	800b544 <std>
 800b656:	2301      	movs	r3, #1
 800b658:	61a3      	str	r3, [r4, #24]
 800b65a:	e7d1      	b.n	800b600 <__sinit+0xc>
 800b65c:	0800c1a0 	.word	0x0800c1a0
 800b660:	0800b58d 	.word	0x0800b58d

0800b664 <__sfp>:
 800b664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b666:	4607      	mov	r7, r0
 800b668:	f7ff ffac 	bl	800b5c4 <__sfp_lock_acquire>
 800b66c:	4b1e      	ldr	r3, [pc, #120]	; (800b6e8 <__sfp+0x84>)
 800b66e:	681e      	ldr	r6, [r3, #0]
 800b670:	69b3      	ldr	r3, [r6, #24]
 800b672:	b913      	cbnz	r3, 800b67a <__sfp+0x16>
 800b674:	4630      	mov	r0, r6
 800b676:	f7ff ffbd 	bl	800b5f4 <__sinit>
 800b67a:	3648      	adds	r6, #72	; 0x48
 800b67c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b680:	3b01      	subs	r3, #1
 800b682:	d503      	bpl.n	800b68c <__sfp+0x28>
 800b684:	6833      	ldr	r3, [r6, #0]
 800b686:	b30b      	cbz	r3, 800b6cc <__sfp+0x68>
 800b688:	6836      	ldr	r6, [r6, #0]
 800b68a:	e7f7      	b.n	800b67c <__sfp+0x18>
 800b68c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b690:	b9d5      	cbnz	r5, 800b6c8 <__sfp+0x64>
 800b692:	4b16      	ldr	r3, [pc, #88]	; (800b6ec <__sfp+0x88>)
 800b694:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b698:	60e3      	str	r3, [r4, #12]
 800b69a:	6665      	str	r5, [r4, #100]	; 0x64
 800b69c:	f000 f859 	bl	800b752 <__retarget_lock_init_recursive>
 800b6a0:	f7ff ff96 	bl	800b5d0 <__sfp_lock_release>
 800b6a4:	2208      	movs	r2, #8
 800b6a6:	4629      	mov	r1, r5
 800b6a8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b6ac:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b6b0:	6025      	str	r5, [r4, #0]
 800b6b2:	61a5      	str	r5, [r4, #24]
 800b6b4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b6b8:	f7fb fb44 	bl	8006d44 <memset>
 800b6bc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b6c0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b6c4:	4620      	mov	r0, r4
 800b6c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b6c8:	3468      	adds	r4, #104	; 0x68
 800b6ca:	e7d9      	b.n	800b680 <__sfp+0x1c>
 800b6cc:	2104      	movs	r1, #4
 800b6ce:	4638      	mov	r0, r7
 800b6d0:	f7ff ff62 	bl	800b598 <__sfmoreglue>
 800b6d4:	4604      	mov	r4, r0
 800b6d6:	6030      	str	r0, [r6, #0]
 800b6d8:	2800      	cmp	r0, #0
 800b6da:	d1d5      	bne.n	800b688 <__sfp+0x24>
 800b6dc:	f7ff ff78 	bl	800b5d0 <__sfp_lock_release>
 800b6e0:	230c      	movs	r3, #12
 800b6e2:	603b      	str	r3, [r7, #0]
 800b6e4:	e7ee      	b.n	800b6c4 <__sfp+0x60>
 800b6e6:	bf00      	nop
 800b6e8:	0800c1a0 	.word	0x0800c1a0
 800b6ec:	ffff0001 	.word	0xffff0001

0800b6f0 <fiprintf>:
 800b6f0:	b40e      	push	{r1, r2, r3}
 800b6f2:	b503      	push	{r0, r1, lr}
 800b6f4:	4601      	mov	r1, r0
 800b6f6:	ab03      	add	r3, sp, #12
 800b6f8:	4805      	ldr	r0, [pc, #20]	; (800b710 <fiprintf+0x20>)
 800b6fa:	f853 2b04 	ldr.w	r2, [r3], #4
 800b6fe:	6800      	ldr	r0, [r0, #0]
 800b700:	9301      	str	r3, [sp, #4]
 800b702:	f000 f89d 	bl	800b840 <_vfiprintf_r>
 800b706:	b002      	add	sp, #8
 800b708:	f85d eb04 	ldr.w	lr, [sp], #4
 800b70c:	b003      	add	sp, #12
 800b70e:	4770      	bx	lr
 800b710:	2000000c 	.word	0x2000000c

0800b714 <_fwalk_reent>:
 800b714:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b718:	4606      	mov	r6, r0
 800b71a:	4688      	mov	r8, r1
 800b71c:	2700      	movs	r7, #0
 800b71e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b722:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b726:	f1b9 0901 	subs.w	r9, r9, #1
 800b72a:	d505      	bpl.n	800b738 <_fwalk_reent+0x24>
 800b72c:	6824      	ldr	r4, [r4, #0]
 800b72e:	2c00      	cmp	r4, #0
 800b730:	d1f7      	bne.n	800b722 <_fwalk_reent+0xe>
 800b732:	4638      	mov	r0, r7
 800b734:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b738:	89ab      	ldrh	r3, [r5, #12]
 800b73a:	2b01      	cmp	r3, #1
 800b73c:	d907      	bls.n	800b74e <_fwalk_reent+0x3a>
 800b73e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b742:	3301      	adds	r3, #1
 800b744:	d003      	beq.n	800b74e <_fwalk_reent+0x3a>
 800b746:	4629      	mov	r1, r5
 800b748:	4630      	mov	r0, r6
 800b74a:	47c0      	blx	r8
 800b74c:	4307      	orrs	r7, r0
 800b74e:	3568      	adds	r5, #104	; 0x68
 800b750:	e7e9      	b.n	800b726 <_fwalk_reent+0x12>

0800b752 <__retarget_lock_init_recursive>:
 800b752:	4770      	bx	lr

0800b754 <__retarget_lock_acquire_recursive>:
 800b754:	4770      	bx	lr

0800b756 <__retarget_lock_release_recursive>:
 800b756:	4770      	bx	lr

0800b758 <memmove>:
 800b758:	4288      	cmp	r0, r1
 800b75a:	b510      	push	{r4, lr}
 800b75c:	eb01 0402 	add.w	r4, r1, r2
 800b760:	d902      	bls.n	800b768 <memmove+0x10>
 800b762:	4284      	cmp	r4, r0
 800b764:	4623      	mov	r3, r4
 800b766:	d807      	bhi.n	800b778 <memmove+0x20>
 800b768:	1e43      	subs	r3, r0, #1
 800b76a:	42a1      	cmp	r1, r4
 800b76c:	d008      	beq.n	800b780 <memmove+0x28>
 800b76e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b772:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b776:	e7f8      	b.n	800b76a <memmove+0x12>
 800b778:	4601      	mov	r1, r0
 800b77a:	4402      	add	r2, r0
 800b77c:	428a      	cmp	r2, r1
 800b77e:	d100      	bne.n	800b782 <memmove+0x2a>
 800b780:	bd10      	pop	{r4, pc}
 800b782:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b786:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b78a:	e7f7      	b.n	800b77c <memmove+0x24>

0800b78c <__malloc_lock>:
 800b78c:	4801      	ldr	r0, [pc, #4]	; (800b794 <__malloc_lock+0x8>)
 800b78e:	f7ff bfe1 	b.w	800b754 <__retarget_lock_acquire_recursive>
 800b792:	bf00      	nop
 800b794:	20000420 	.word	0x20000420

0800b798 <__malloc_unlock>:
 800b798:	4801      	ldr	r0, [pc, #4]	; (800b7a0 <__malloc_unlock+0x8>)
 800b79a:	f7ff bfdc 	b.w	800b756 <__retarget_lock_release_recursive>
 800b79e:	bf00      	nop
 800b7a0:	20000420 	.word	0x20000420

0800b7a4 <_realloc_r>:
 800b7a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b7a6:	4607      	mov	r7, r0
 800b7a8:	4614      	mov	r4, r2
 800b7aa:	460e      	mov	r6, r1
 800b7ac:	b921      	cbnz	r1, 800b7b8 <_realloc_r+0x14>
 800b7ae:	4611      	mov	r1, r2
 800b7b0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800b7b4:	f7fe bfda 	b.w	800a76c <_malloc_r>
 800b7b8:	b922      	cbnz	r2, 800b7c4 <_realloc_r+0x20>
 800b7ba:	f7fe ff8b 	bl	800a6d4 <_free_r>
 800b7be:	4625      	mov	r5, r4
 800b7c0:	4628      	mov	r0, r5
 800b7c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b7c4:	f000 fa98 	bl	800bcf8 <_malloc_usable_size_r>
 800b7c8:	42a0      	cmp	r0, r4
 800b7ca:	d20f      	bcs.n	800b7ec <_realloc_r+0x48>
 800b7cc:	4621      	mov	r1, r4
 800b7ce:	4638      	mov	r0, r7
 800b7d0:	f7fe ffcc 	bl	800a76c <_malloc_r>
 800b7d4:	4605      	mov	r5, r0
 800b7d6:	2800      	cmp	r0, #0
 800b7d8:	d0f2      	beq.n	800b7c0 <_realloc_r+0x1c>
 800b7da:	4631      	mov	r1, r6
 800b7dc:	4622      	mov	r2, r4
 800b7de:	f7fe faa5 	bl	8009d2c <memcpy>
 800b7e2:	4631      	mov	r1, r6
 800b7e4:	4638      	mov	r0, r7
 800b7e6:	f7fe ff75 	bl	800a6d4 <_free_r>
 800b7ea:	e7e9      	b.n	800b7c0 <_realloc_r+0x1c>
 800b7ec:	4635      	mov	r5, r6
 800b7ee:	e7e7      	b.n	800b7c0 <_realloc_r+0x1c>

0800b7f0 <__sfputc_r>:
 800b7f0:	6893      	ldr	r3, [r2, #8]
 800b7f2:	b410      	push	{r4}
 800b7f4:	3b01      	subs	r3, #1
 800b7f6:	2b00      	cmp	r3, #0
 800b7f8:	6093      	str	r3, [r2, #8]
 800b7fa:	da07      	bge.n	800b80c <__sfputc_r+0x1c>
 800b7fc:	6994      	ldr	r4, [r2, #24]
 800b7fe:	42a3      	cmp	r3, r4
 800b800:	db01      	blt.n	800b806 <__sfputc_r+0x16>
 800b802:	290a      	cmp	r1, #10
 800b804:	d102      	bne.n	800b80c <__sfputc_r+0x1c>
 800b806:	bc10      	pop	{r4}
 800b808:	f000 b94a 	b.w	800baa0 <__swbuf_r>
 800b80c:	6813      	ldr	r3, [r2, #0]
 800b80e:	1c58      	adds	r0, r3, #1
 800b810:	6010      	str	r0, [r2, #0]
 800b812:	7019      	strb	r1, [r3, #0]
 800b814:	4608      	mov	r0, r1
 800b816:	bc10      	pop	{r4}
 800b818:	4770      	bx	lr

0800b81a <__sfputs_r>:
 800b81a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b81c:	4606      	mov	r6, r0
 800b81e:	460f      	mov	r7, r1
 800b820:	4614      	mov	r4, r2
 800b822:	18d5      	adds	r5, r2, r3
 800b824:	42ac      	cmp	r4, r5
 800b826:	d101      	bne.n	800b82c <__sfputs_r+0x12>
 800b828:	2000      	movs	r0, #0
 800b82a:	e007      	b.n	800b83c <__sfputs_r+0x22>
 800b82c:	463a      	mov	r2, r7
 800b82e:	4630      	mov	r0, r6
 800b830:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b834:	f7ff ffdc 	bl	800b7f0 <__sfputc_r>
 800b838:	1c43      	adds	r3, r0, #1
 800b83a:	d1f3      	bne.n	800b824 <__sfputs_r+0xa>
 800b83c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b840 <_vfiprintf_r>:
 800b840:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b844:	460d      	mov	r5, r1
 800b846:	4614      	mov	r4, r2
 800b848:	4698      	mov	r8, r3
 800b84a:	4606      	mov	r6, r0
 800b84c:	b09d      	sub	sp, #116	; 0x74
 800b84e:	b118      	cbz	r0, 800b858 <_vfiprintf_r+0x18>
 800b850:	6983      	ldr	r3, [r0, #24]
 800b852:	b90b      	cbnz	r3, 800b858 <_vfiprintf_r+0x18>
 800b854:	f7ff fece 	bl	800b5f4 <__sinit>
 800b858:	4b89      	ldr	r3, [pc, #548]	; (800ba80 <_vfiprintf_r+0x240>)
 800b85a:	429d      	cmp	r5, r3
 800b85c:	d11b      	bne.n	800b896 <_vfiprintf_r+0x56>
 800b85e:	6875      	ldr	r5, [r6, #4]
 800b860:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b862:	07d9      	lsls	r1, r3, #31
 800b864:	d405      	bmi.n	800b872 <_vfiprintf_r+0x32>
 800b866:	89ab      	ldrh	r3, [r5, #12]
 800b868:	059a      	lsls	r2, r3, #22
 800b86a:	d402      	bmi.n	800b872 <_vfiprintf_r+0x32>
 800b86c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b86e:	f7ff ff71 	bl	800b754 <__retarget_lock_acquire_recursive>
 800b872:	89ab      	ldrh	r3, [r5, #12]
 800b874:	071b      	lsls	r3, r3, #28
 800b876:	d501      	bpl.n	800b87c <_vfiprintf_r+0x3c>
 800b878:	692b      	ldr	r3, [r5, #16]
 800b87a:	b9eb      	cbnz	r3, 800b8b8 <_vfiprintf_r+0x78>
 800b87c:	4629      	mov	r1, r5
 800b87e:	4630      	mov	r0, r6
 800b880:	f000 f960 	bl	800bb44 <__swsetup_r>
 800b884:	b1c0      	cbz	r0, 800b8b8 <_vfiprintf_r+0x78>
 800b886:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b888:	07dc      	lsls	r4, r3, #31
 800b88a:	d50e      	bpl.n	800b8aa <_vfiprintf_r+0x6a>
 800b88c:	f04f 30ff 	mov.w	r0, #4294967295
 800b890:	b01d      	add	sp, #116	; 0x74
 800b892:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b896:	4b7b      	ldr	r3, [pc, #492]	; (800ba84 <_vfiprintf_r+0x244>)
 800b898:	429d      	cmp	r5, r3
 800b89a:	d101      	bne.n	800b8a0 <_vfiprintf_r+0x60>
 800b89c:	68b5      	ldr	r5, [r6, #8]
 800b89e:	e7df      	b.n	800b860 <_vfiprintf_r+0x20>
 800b8a0:	4b79      	ldr	r3, [pc, #484]	; (800ba88 <_vfiprintf_r+0x248>)
 800b8a2:	429d      	cmp	r5, r3
 800b8a4:	bf08      	it	eq
 800b8a6:	68f5      	ldreq	r5, [r6, #12]
 800b8a8:	e7da      	b.n	800b860 <_vfiprintf_r+0x20>
 800b8aa:	89ab      	ldrh	r3, [r5, #12]
 800b8ac:	0598      	lsls	r0, r3, #22
 800b8ae:	d4ed      	bmi.n	800b88c <_vfiprintf_r+0x4c>
 800b8b0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b8b2:	f7ff ff50 	bl	800b756 <__retarget_lock_release_recursive>
 800b8b6:	e7e9      	b.n	800b88c <_vfiprintf_r+0x4c>
 800b8b8:	2300      	movs	r3, #0
 800b8ba:	9309      	str	r3, [sp, #36]	; 0x24
 800b8bc:	2320      	movs	r3, #32
 800b8be:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b8c2:	2330      	movs	r3, #48	; 0x30
 800b8c4:	f04f 0901 	mov.w	r9, #1
 800b8c8:	f8cd 800c 	str.w	r8, [sp, #12]
 800b8cc:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800ba8c <_vfiprintf_r+0x24c>
 800b8d0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b8d4:	4623      	mov	r3, r4
 800b8d6:	469a      	mov	sl, r3
 800b8d8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b8dc:	b10a      	cbz	r2, 800b8e2 <_vfiprintf_r+0xa2>
 800b8de:	2a25      	cmp	r2, #37	; 0x25
 800b8e0:	d1f9      	bne.n	800b8d6 <_vfiprintf_r+0x96>
 800b8e2:	ebba 0b04 	subs.w	fp, sl, r4
 800b8e6:	d00b      	beq.n	800b900 <_vfiprintf_r+0xc0>
 800b8e8:	465b      	mov	r3, fp
 800b8ea:	4622      	mov	r2, r4
 800b8ec:	4629      	mov	r1, r5
 800b8ee:	4630      	mov	r0, r6
 800b8f0:	f7ff ff93 	bl	800b81a <__sfputs_r>
 800b8f4:	3001      	adds	r0, #1
 800b8f6:	f000 80aa 	beq.w	800ba4e <_vfiprintf_r+0x20e>
 800b8fa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b8fc:	445a      	add	r2, fp
 800b8fe:	9209      	str	r2, [sp, #36]	; 0x24
 800b900:	f89a 3000 	ldrb.w	r3, [sl]
 800b904:	2b00      	cmp	r3, #0
 800b906:	f000 80a2 	beq.w	800ba4e <_vfiprintf_r+0x20e>
 800b90a:	2300      	movs	r3, #0
 800b90c:	f04f 32ff 	mov.w	r2, #4294967295
 800b910:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b914:	f10a 0a01 	add.w	sl, sl, #1
 800b918:	9304      	str	r3, [sp, #16]
 800b91a:	9307      	str	r3, [sp, #28]
 800b91c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b920:	931a      	str	r3, [sp, #104]	; 0x68
 800b922:	4654      	mov	r4, sl
 800b924:	2205      	movs	r2, #5
 800b926:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b92a:	4858      	ldr	r0, [pc, #352]	; (800ba8c <_vfiprintf_r+0x24c>)
 800b92c:	f7fe f9f0 	bl	8009d10 <memchr>
 800b930:	9a04      	ldr	r2, [sp, #16]
 800b932:	b9d8      	cbnz	r0, 800b96c <_vfiprintf_r+0x12c>
 800b934:	06d1      	lsls	r1, r2, #27
 800b936:	bf44      	itt	mi
 800b938:	2320      	movmi	r3, #32
 800b93a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b93e:	0713      	lsls	r3, r2, #28
 800b940:	bf44      	itt	mi
 800b942:	232b      	movmi	r3, #43	; 0x2b
 800b944:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b948:	f89a 3000 	ldrb.w	r3, [sl]
 800b94c:	2b2a      	cmp	r3, #42	; 0x2a
 800b94e:	d015      	beq.n	800b97c <_vfiprintf_r+0x13c>
 800b950:	4654      	mov	r4, sl
 800b952:	2000      	movs	r0, #0
 800b954:	f04f 0c0a 	mov.w	ip, #10
 800b958:	9a07      	ldr	r2, [sp, #28]
 800b95a:	4621      	mov	r1, r4
 800b95c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b960:	3b30      	subs	r3, #48	; 0x30
 800b962:	2b09      	cmp	r3, #9
 800b964:	d94e      	bls.n	800ba04 <_vfiprintf_r+0x1c4>
 800b966:	b1b0      	cbz	r0, 800b996 <_vfiprintf_r+0x156>
 800b968:	9207      	str	r2, [sp, #28]
 800b96a:	e014      	b.n	800b996 <_vfiprintf_r+0x156>
 800b96c:	eba0 0308 	sub.w	r3, r0, r8
 800b970:	fa09 f303 	lsl.w	r3, r9, r3
 800b974:	4313      	orrs	r3, r2
 800b976:	46a2      	mov	sl, r4
 800b978:	9304      	str	r3, [sp, #16]
 800b97a:	e7d2      	b.n	800b922 <_vfiprintf_r+0xe2>
 800b97c:	9b03      	ldr	r3, [sp, #12]
 800b97e:	1d19      	adds	r1, r3, #4
 800b980:	681b      	ldr	r3, [r3, #0]
 800b982:	9103      	str	r1, [sp, #12]
 800b984:	2b00      	cmp	r3, #0
 800b986:	bfbb      	ittet	lt
 800b988:	425b      	neglt	r3, r3
 800b98a:	f042 0202 	orrlt.w	r2, r2, #2
 800b98e:	9307      	strge	r3, [sp, #28]
 800b990:	9307      	strlt	r3, [sp, #28]
 800b992:	bfb8      	it	lt
 800b994:	9204      	strlt	r2, [sp, #16]
 800b996:	7823      	ldrb	r3, [r4, #0]
 800b998:	2b2e      	cmp	r3, #46	; 0x2e
 800b99a:	d10c      	bne.n	800b9b6 <_vfiprintf_r+0x176>
 800b99c:	7863      	ldrb	r3, [r4, #1]
 800b99e:	2b2a      	cmp	r3, #42	; 0x2a
 800b9a0:	d135      	bne.n	800ba0e <_vfiprintf_r+0x1ce>
 800b9a2:	9b03      	ldr	r3, [sp, #12]
 800b9a4:	3402      	adds	r4, #2
 800b9a6:	1d1a      	adds	r2, r3, #4
 800b9a8:	681b      	ldr	r3, [r3, #0]
 800b9aa:	9203      	str	r2, [sp, #12]
 800b9ac:	2b00      	cmp	r3, #0
 800b9ae:	bfb8      	it	lt
 800b9b0:	f04f 33ff 	movlt.w	r3, #4294967295
 800b9b4:	9305      	str	r3, [sp, #20]
 800b9b6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800ba9c <_vfiprintf_r+0x25c>
 800b9ba:	2203      	movs	r2, #3
 800b9bc:	4650      	mov	r0, sl
 800b9be:	7821      	ldrb	r1, [r4, #0]
 800b9c0:	f7fe f9a6 	bl	8009d10 <memchr>
 800b9c4:	b140      	cbz	r0, 800b9d8 <_vfiprintf_r+0x198>
 800b9c6:	2340      	movs	r3, #64	; 0x40
 800b9c8:	eba0 000a 	sub.w	r0, r0, sl
 800b9cc:	fa03 f000 	lsl.w	r0, r3, r0
 800b9d0:	9b04      	ldr	r3, [sp, #16]
 800b9d2:	3401      	adds	r4, #1
 800b9d4:	4303      	orrs	r3, r0
 800b9d6:	9304      	str	r3, [sp, #16]
 800b9d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b9dc:	2206      	movs	r2, #6
 800b9de:	482c      	ldr	r0, [pc, #176]	; (800ba90 <_vfiprintf_r+0x250>)
 800b9e0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b9e4:	f7fe f994 	bl	8009d10 <memchr>
 800b9e8:	2800      	cmp	r0, #0
 800b9ea:	d03f      	beq.n	800ba6c <_vfiprintf_r+0x22c>
 800b9ec:	4b29      	ldr	r3, [pc, #164]	; (800ba94 <_vfiprintf_r+0x254>)
 800b9ee:	bb1b      	cbnz	r3, 800ba38 <_vfiprintf_r+0x1f8>
 800b9f0:	9b03      	ldr	r3, [sp, #12]
 800b9f2:	3307      	adds	r3, #7
 800b9f4:	f023 0307 	bic.w	r3, r3, #7
 800b9f8:	3308      	adds	r3, #8
 800b9fa:	9303      	str	r3, [sp, #12]
 800b9fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b9fe:	443b      	add	r3, r7
 800ba00:	9309      	str	r3, [sp, #36]	; 0x24
 800ba02:	e767      	b.n	800b8d4 <_vfiprintf_r+0x94>
 800ba04:	460c      	mov	r4, r1
 800ba06:	2001      	movs	r0, #1
 800ba08:	fb0c 3202 	mla	r2, ip, r2, r3
 800ba0c:	e7a5      	b.n	800b95a <_vfiprintf_r+0x11a>
 800ba0e:	2300      	movs	r3, #0
 800ba10:	f04f 0c0a 	mov.w	ip, #10
 800ba14:	4619      	mov	r1, r3
 800ba16:	3401      	adds	r4, #1
 800ba18:	9305      	str	r3, [sp, #20]
 800ba1a:	4620      	mov	r0, r4
 800ba1c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ba20:	3a30      	subs	r2, #48	; 0x30
 800ba22:	2a09      	cmp	r2, #9
 800ba24:	d903      	bls.n	800ba2e <_vfiprintf_r+0x1ee>
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	d0c5      	beq.n	800b9b6 <_vfiprintf_r+0x176>
 800ba2a:	9105      	str	r1, [sp, #20]
 800ba2c:	e7c3      	b.n	800b9b6 <_vfiprintf_r+0x176>
 800ba2e:	4604      	mov	r4, r0
 800ba30:	2301      	movs	r3, #1
 800ba32:	fb0c 2101 	mla	r1, ip, r1, r2
 800ba36:	e7f0      	b.n	800ba1a <_vfiprintf_r+0x1da>
 800ba38:	ab03      	add	r3, sp, #12
 800ba3a:	9300      	str	r3, [sp, #0]
 800ba3c:	462a      	mov	r2, r5
 800ba3e:	4630      	mov	r0, r6
 800ba40:	4b15      	ldr	r3, [pc, #84]	; (800ba98 <_vfiprintf_r+0x258>)
 800ba42:	a904      	add	r1, sp, #16
 800ba44:	f7fb fa24 	bl	8006e90 <_printf_float>
 800ba48:	4607      	mov	r7, r0
 800ba4a:	1c78      	adds	r0, r7, #1
 800ba4c:	d1d6      	bne.n	800b9fc <_vfiprintf_r+0x1bc>
 800ba4e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ba50:	07d9      	lsls	r1, r3, #31
 800ba52:	d405      	bmi.n	800ba60 <_vfiprintf_r+0x220>
 800ba54:	89ab      	ldrh	r3, [r5, #12]
 800ba56:	059a      	lsls	r2, r3, #22
 800ba58:	d402      	bmi.n	800ba60 <_vfiprintf_r+0x220>
 800ba5a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ba5c:	f7ff fe7b 	bl	800b756 <__retarget_lock_release_recursive>
 800ba60:	89ab      	ldrh	r3, [r5, #12]
 800ba62:	065b      	lsls	r3, r3, #25
 800ba64:	f53f af12 	bmi.w	800b88c <_vfiprintf_r+0x4c>
 800ba68:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ba6a:	e711      	b.n	800b890 <_vfiprintf_r+0x50>
 800ba6c:	ab03      	add	r3, sp, #12
 800ba6e:	9300      	str	r3, [sp, #0]
 800ba70:	462a      	mov	r2, r5
 800ba72:	4630      	mov	r0, r6
 800ba74:	4b08      	ldr	r3, [pc, #32]	; (800ba98 <_vfiprintf_r+0x258>)
 800ba76:	a904      	add	r1, sp, #16
 800ba78:	f7fb fca6 	bl	80073c8 <_printf_i>
 800ba7c:	e7e4      	b.n	800ba48 <_vfiprintf_r+0x208>
 800ba7e:	bf00      	nop
 800ba80:	0800c62c 	.word	0x0800c62c
 800ba84:	0800c64c 	.word	0x0800c64c
 800ba88:	0800c60c 	.word	0x0800c60c
 800ba8c:	0800c5a4 	.word	0x0800c5a4
 800ba90:	0800c5ae 	.word	0x0800c5ae
 800ba94:	08006e91 	.word	0x08006e91
 800ba98:	0800b81b 	.word	0x0800b81b
 800ba9c:	0800c5aa 	.word	0x0800c5aa

0800baa0 <__swbuf_r>:
 800baa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800baa2:	460e      	mov	r6, r1
 800baa4:	4614      	mov	r4, r2
 800baa6:	4605      	mov	r5, r0
 800baa8:	b118      	cbz	r0, 800bab2 <__swbuf_r+0x12>
 800baaa:	6983      	ldr	r3, [r0, #24]
 800baac:	b90b      	cbnz	r3, 800bab2 <__swbuf_r+0x12>
 800baae:	f7ff fda1 	bl	800b5f4 <__sinit>
 800bab2:	4b21      	ldr	r3, [pc, #132]	; (800bb38 <__swbuf_r+0x98>)
 800bab4:	429c      	cmp	r4, r3
 800bab6:	d12b      	bne.n	800bb10 <__swbuf_r+0x70>
 800bab8:	686c      	ldr	r4, [r5, #4]
 800baba:	69a3      	ldr	r3, [r4, #24]
 800babc:	60a3      	str	r3, [r4, #8]
 800babe:	89a3      	ldrh	r3, [r4, #12]
 800bac0:	071a      	lsls	r2, r3, #28
 800bac2:	d52f      	bpl.n	800bb24 <__swbuf_r+0x84>
 800bac4:	6923      	ldr	r3, [r4, #16]
 800bac6:	b36b      	cbz	r3, 800bb24 <__swbuf_r+0x84>
 800bac8:	6923      	ldr	r3, [r4, #16]
 800baca:	6820      	ldr	r0, [r4, #0]
 800bacc:	b2f6      	uxtb	r6, r6
 800bace:	1ac0      	subs	r0, r0, r3
 800bad0:	6963      	ldr	r3, [r4, #20]
 800bad2:	4637      	mov	r7, r6
 800bad4:	4283      	cmp	r3, r0
 800bad6:	dc04      	bgt.n	800bae2 <__swbuf_r+0x42>
 800bad8:	4621      	mov	r1, r4
 800bada:	4628      	mov	r0, r5
 800badc:	f7ff fcf6 	bl	800b4cc <_fflush_r>
 800bae0:	bb30      	cbnz	r0, 800bb30 <__swbuf_r+0x90>
 800bae2:	68a3      	ldr	r3, [r4, #8]
 800bae4:	3001      	adds	r0, #1
 800bae6:	3b01      	subs	r3, #1
 800bae8:	60a3      	str	r3, [r4, #8]
 800baea:	6823      	ldr	r3, [r4, #0]
 800baec:	1c5a      	adds	r2, r3, #1
 800baee:	6022      	str	r2, [r4, #0]
 800baf0:	701e      	strb	r6, [r3, #0]
 800baf2:	6963      	ldr	r3, [r4, #20]
 800baf4:	4283      	cmp	r3, r0
 800baf6:	d004      	beq.n	800bb02 <__swbuf_r+0x62>
 800baf8:	89a3      	ldrh	r3, [r4, #12]
 800bafa:	07db      	lsls	r3, r3, #31
 800bafc:	d506      	bpl.n	800bb0c <__swbuf_r+0x6c>
 800bafe:	2e0a      	cmp	r6, #10
 800bb00:	d104      	bne.n	800bb0c <__swbuf_r+0x6c>
 800bb02:	4621      	mov	r1, r4
 800bb04:	4628      	mov	r0, r5
 800bb06:	f7ff fce1 	bl	800b4cc <_fflush_r>
 800bb0a:	b988      	cbnz	r0, 800bb30 <__swbuf_r+0x90>
 800bb0c:	4638      	mov	r0, r7
 800bb0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bb10:	4b0a      	ldr	r3, [pc, #40]	; (800bb3c <__swbuf_r+0x9c>)
 800bb12:	429c      	cmp	r4, r3
 800bb14:	d101      	bne.n	800bb1a <__swbuf_r+0x7a>
 800bb16:	68ac      	ldr	r4, [r5, #8]
 800bb18:	e7cf      	b.n	800baba <__swbuf_r+0x1a>
 800bb1a:	4b09      	ldr	r3, [pc, #36]	; (800bb40 <__swbuf_r+0xa0>)
 800bb1c:	429c      	cmp	r4, r3
 800bb1e:	bf08      	it	eq
 800bb20:	68ec      	ldreq	r4, [r5, #12]
 800bb22:	e7ca      	b.n	800baba <__swbuf_r+0x1a>
 800bb24:	4621      	mov	r1, r4
 800bb26:	4628      	mov	r0, r5
 800bb28:	f000 f80c 	bl	800bb44 <__swsetup_r>
 800bb2c:	2800      	cmp	r0, #0
 800bb2e:	d0cb      	beq.n	800bac8 <__swbuf_r+0x28>
 800bb30:	f04f 37ff 	mov.w	r7, #4294967295
 800bb34:	e7ea      	b.n	800bb0c <__swbuf_r+0x6c>
 800bb36:	bf00      	nop
 800bb38:	0800c62c 	.word	0x0800c62c
 800bb3c:	0800c64c 	.word	0x0800c64c
 800bb40:	0800c60c 	.word	0x0800c60c

0800bb44 <__swsetup_r>:
 800bb44:	4b32      	ldr	r3, [pc, #200]	; (800bc10 <__swsetup_r+0xcc>)
 800bb46:	b570      	push	{r4, r5, r6, lr}
 800bb48:	681d      	ldr	r5, [r3, #0]
 800bb4a:	4606      	mov	r6, r0
 800bb4c:	460c      	mov	r4, r1
 800bb4e:	b125      	cbz	r5, 800bb5a <__swsetup_r+0x16>
 800bb50:	69ab      	ldr	r3, [r5, #24]
 800bb52:	b913      	cbnz	r3, 800bb5a <__swsetup_r+0x16>
 800bb54:	4628      	mov	r0, r5
 800bb56:	f7ff fd4d 	bl	800b5f4 <__sinit>
 800bb5a:	4b2e      	ldr	r3, [pc, #184]	; (800bc14 <__swsetup_r+0xd0>)
 800bb5c:	429c      	cmp	r4, r3
 800bb5e:	d10f      	bne.n	800bb80 <__swsetup_r+0x3c>
 800bb60:	686c      	ldr	r4, [r5, #4]
 800bb62:	89a3      	ldrh	r3, [r4, #12]
 800bb64:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bb68:	0719      	lsls	r1, r3, #28
 800bb6a:	d42c      	bmi.n	800bbc6 <__swsetup_r+0x82>
 800bb6c:	06dd      	lsls	r5, r3, #27
 800bb6e:	d411      	bmi.n	800bb94 <__swsetup_r+0x50>
 800bb70:	2309      	movs	r3, #9
 800bb72:	6033      	str	r3, [r6, #0]
 800bb74:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800bb78:	f04f 30ff 	mov.w	r0, #4294967295
 800bb7c:	81a3      	strh	r3, [r4, #12]
 800bb7e:	e03e      	b.n	800bbfe <__swsetup_r+0xba>
 800bb80:	4b25      	ldr	r3, [pc, #148]	; (800bc18 <__swsetup_r+0xd4>)
 800bb82:	429c      	cmp	r4, r3
 800bb84:	d101      	bne.n	800bb8a <__swsetup_r+0x46>
 800bb86:	68ac      	ldr	r4, [r5, #8]
 800bb88:	e7eb      	b.n	800bb62 <__swsetup_r+0x1e>
 800bb8a:	4b24      	ldr	r3, [pc, #144]	; (800bc1c <__swsetup_r+0xd8>)
 800bb8c:	429c      	cmp	r4, r3
 800bb8e:	bf08      	it	eq
 800bb90:	68ec      	ldreq	r4, [r5, #12]
 800bb92:	e7e6      	b.n	800bb62 <__swsetup_r+0x1e>
 800bb94:	0758      	lsls	r0, r3, #29
 800bb96:	d512      	bpl.n	800bbbe <__swsetup_r+0x7a>
 800bb98:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bb9a:	b141      	cbz	r1, 800bbae <__swsetup_r+0x6a>
 800bb9c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bba0:	4299      	cmp	r1, r3
 800bba2:	d002      	beq.n	800bbaa <__swsetup_r+0x66>
 800bba4:	4630      	mov	r0, r6
 800bba6:	f7fe fd95 	bl	800a6d4 <_free_r>
 800bbaa:	2300      	movs	r3, #0
 800bbac:	6363      	str	r3, [r4, #52]	; 0x34
 800bbae:	89a3      	ldrh	r3, [r4, #12]
 800bbb0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800bbb4:	81a3      	strh	r3, [r4, #12]
 800bbb6:	2300      	movs	r3, #0
 800bbb8:	6063      	str	r3, [r4, #4]
 800bbba:	6923      	ldr	r3, [r4, #16]
 800bbbc:	6023      	str	r3, [r4, #0]
 800bbbe:	89a3      	ldrh	r3, [r4, #12]
 800bbc0:	f043 0308 	orr.w	r3, r3, #8
 800bbc4:	81a3      	strh	r3, [r4, #12]
 800bbc6:	6923      	ldr	r3, [r4, #16]
 800bbc8:	b94b      	cbnz	r3, 800bbde <__swsetup_r+0x9a>
 800bbca:	89a3      	ldrh	r3, [r4, #12]
 800bbcc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800bbd0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bbd4:	d003      	beq.n	800bbde <__swsetup_r+0x9a>
 800bbd6:	4621      	mov	r1, r4
 800bbd8:	4630      	mov	r0, r6
 800bbda:	f000 f84d 	bl	800bc78 <__smakebuf_r>
 800bbde:	89a0      	ldrh	r0, [r4, #12]
 800bbe0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bbe4:	f010 0301 	ands.w	r3, r0, #1
 800bbe8:	d00a      	beq.n	800bc00 <__swsetup_r+0xbc>
 800bbea:	2300      	movs	r3, #0
 800bbec:	60a3      	str	r3, [r4, #8]
 800bbee:	6963      	ldr	r3, [r4, #20]
 800bbf0:	425b      	negs	r3, r3
 800bbf2:	61a3      	str	r3, [r4, #24]
 800bbf4:	6923      	ldr	r3, [r4, #16]
 800bbf6:	b943      	cbnz	r3, 800bc0a <__swsetup_r+0xc6>
 800bbf8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800bbfc:	d1ba      	bne.n	800bb74 <__swsetup_r+0x30>
 800bbfe:	bd70      	pop	{r4, r5, r6, pc}
 800bc00:	0781      	lsls	r1, r0, #30
 800bc02:	bf58      	it	pl
 800bc04:	6963      	ldrpl	r3, [r4, #20]
 800bc06:	60a3      	str	r3, [r4, #8]
 800bc08:	e7f4      	b.n	800bbf4 <__swsetup_r+0xb0>
 800bc0a:	2000      	movs	r0, #0
 800bc0c:	e7f7      	b.n	800bbfe <__swsetup_r+0xba>
 800bc0e:	bf00      	nop
 800bc10:	2000000c 	.word	0x2000000c
 800bc14:	0800c62c 	.word	0x0800c62c
 800bc18:	0800c64c 	.word	0x0800c64c
 800bc1c:	0800c60c 	.word	0x0800c60c

0800bc20 <abort>:
 800bc20:	2006      	movs	r0, #6
 800bc22:	b508      	push	{r3, lr}
 800bc24:	f000 f898 	bl	800bd58 <raise>
 800bc28:	2001      	movs	r0, #1
 800bc2a:	f7f6 fefc 	bl	8002a26 <_exit>

0800bc2e <__swhatbuf_r>:
 800bc2e:	b570      	push	{r4, r5, r6, lr}
 800bc30:	460e      	mov	r6, r1
 800bc32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bc36:	4614      	mov	r4, r2
 800bc38:	2900      	cmp	r1, #0
 800bc3a:	461d      	mov	r5, r3
 800bc3c:	b096      	sub	sp, #88	; 0x58
 800bc3e:	da07      	bge.n	800bc50 <__swhatbuf_r+0x22>
 800bc40:	2300      	movs	r3, #0
 800bc42:	602b      	str	r3, [r5, #0]
 800bc44:	89b3      	ldrh	r3, [r6, #12]
 800bc46:	061a      	lsls	r2, r3, #24
 800bc48:	d410      	bmi.n	800bc6c <__swhatbuf_r+0x3e>
 800bc4a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bc4e:	e00e      	b.n	800bc6e <__swhatbuf_r+0x40>
 800bc50:	466a      	mov	r2, sp
 800bc52:	f000 f89d 	bl	800bd90 <_fstat_r>
 800bc56:	2800      	cmp	r0, #0
 800bc58:	dbf2      	blt.n	800bc40 <__swhatbuf_r+0x12>
 800bc5a:	9a01      	ldr	r2, [sp, #4]
 800bc5c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800bc60:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800bc64:	425a      	negs	r2, r3
 800bc66:	415a      	adcs	r2, r3
 800bc68:	602a      	str	r2, [r5, #0]
 800bc6a:	e7ee      	b.n	800bc4a <__swhatbuf_r+0x1c>
 800bc6c:	2340      	movs	r3, #64	; 0x40
 800bc6e:	2000      	movs	r0, #0
 800bc70:	6023      	str	r3, [r4, #0]
 800bc72:	b016      	add	sp, #88	; 0x58
 800bc74:	bd70      	pop	{r4, r5, r6, pc}
	...

0800bc78 <__smakebuf_r>:
 800bc78:	898b      	ldrh	r3, [r1, #12]
 800bc7a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800bc7c:	079d      	lsls	r5, r3, #30
 800bc7e:	4606      	mov	r6, r0
 800bc80:	460c      	mov	r4, r1
 800bc82:	d507      	bpl.n	800bc94 <__smakebuf_r+0x1c>
 800bc84:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800bc88:	6023      	str	r3, [r4, #0]
 800bc8a:	6123      	str	r3, [r4, #16]
 800bc8c:	2301      	movs	r3, #1
 800bc8e:	6163      	str	r3, [r4, #20]
 800bc90:	b002      	add	sp, #8
 800bc92:	bd70      	pop	{r4, r5, r6, pc}
 800bc94:	466a      	mov	r2, sp
 800bc96:	ab01      	add	r3, sp, #4
 800bc98:	f7ff ffc9 	bl	800bc2e <__swhatbuf_r>
 800bc9c:	9900      	ldr	r1, [sp, #0]
 800bc9e:	4605      	mov	r5, r0
 800bca0:	4630      	mov	r0, r6
 800bca2:	f7fe fd63 	bl	800a76c <_malloc_r>
 800bca6:	b948      	cbnz	r0, 800bcbc <__smakebuf_r+0x44>
 800bca8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bcac:	059a      	lsls	r2, r3, #22
 800bcae:	d4ef      	bmi.n	800bc90 <__smakebuf_r+0x18>
 800bcb0:	f023 0303 	bic.w	r3, r3, #3
 800bcb4:	f043 0302 	orr.w	r3, r3, #2
 800bcb8:	81a3      	strh	r3, [r4, #12]
 800bcba:	e7e3      	b.n	800bc84 <__smakebuf_r+0xc>
 800bcbc:	4b0d      	ldr	r3, [pc, #52]	; (800bcf4 <__smakebuf_r+0x7c>)
 800bcbe:	62b3      	str	r3, [r6, #40]	; 0x28
 800bcc0:	89a3      	ldrh	r3, [r4, #12]
 800bcc2:	6020      	str	r0, [r4, #0]
 800bcc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bcc8:	81a3      	strh	r3, [r4, #12]
 800bcca:	9b00      	ldr	r3, [sp, #0]
 800bccc:	6120      	str	r0, [r4, #16]
 800bcce:	6163      	str	r3, [r4, #20]
 800bcd0:	9b01      	ldr	r3, [sp, #4]
 800bcd2:	b15b      	cbz	r3, 800bcec <__smakebuf_r+0x74>
 800bcd4:	4630      	mov	r0, r6
 800bcd6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bcda:	f000 f86b 	bl	800bdb4 <_isatty_r>
 800bcde:	b128      	cbz	r0, 800bcec <__smakebuf_r+0x74>
 800bce0:	89a3      	ldrh	r3, [r4, #12]
 800bce2:	f023 0303 	bic.w	r3, r3, #3
 800bce6:	f043 0301 	orr.w	r3, r3, #1
 800bcea:	81a3      	strh	r3, [r4, #12]
 800bcec:	89a0      	ldrh	r0, [r4, #12]
 800bcee:	4305      	orrs	r5, r0
 800bcf0:	81a5      	strh	r5, [r4, #12]
 800bcf2:	e7cd      	b.n	800bc90 <__smakebuf_r+0x18>
 800bcf4:	0800b58d 	.word	0x0800b58d

0800bcf8 <_malloc_usable_size_r>:
 800bcf8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bcfc:	1f18      	subs	r0, r3, #4
 800bcfe:	2b00      	cmp	r3, #0
 800bd00:	bfbc      	itt	lt
 800bd02:	580b      	ldrlt	r3, [r1, r0]
 800bd04:	18c0      	addlt	r0, r0, r3
 800bd06:	4770      	bx	lr

0800bd08 <_raise_r>:
 800bd08:	291f      	cmp	r1, #31
 800bd0a:	b538      	push	{r3, r4, r5, lr}
 800bd0c:	4604      	mov	r4, r0
 800bd0e:	460d      	mov	r5, r1
 800bd10:	d904      	bls.n	800bd1c <_raise_r+0x14>
 800bd12:	2316      	movs	r3, #22
 800bd14:	6003      	str	r3, [r0, #0]
 800bd16:	f04f 30ff 	mov.w	r0, #4294967295
 800bd1a:	bd38      	pop	{r3, r4, r5, pc}
 800bd1c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800bd1e:	b112      	cbz	r2, 800bd26 <_raise_r+0x1e>
 800bd20:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bd24:	b94b      	cbnz	r3, 800bd3a <_raise_r+0x32>
 800bd26:	4620      	mov	r0, r4
 800bd28:	f000 f830 	bl	800bd8c <_getpid_r>
 800bd2c:	462a      	mov	r2, r5
 800bd2e:	4601      	mov	r1, r0
 800bd30:	4620      	mov	r0, r4
 800bd32:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bd36:	f000 b817 	b.w	800bd68 <_kill_r>
 800bd3a:	2b01      	cmp	r3, #1
 800bd3c:	d00a      	beq.n	800bd54 <_raise_r+0x4c>
 800bd3e:	1c59      	adds	r1, r3, #1
 800bd40:	d103      	bne.n	800bd4a <_raise_r+0x42>
 800bd42:	2316      	movs	r3, #22
 800bd44:	6003      	str	r3, [r0, #0]
 800bd46:	2001      	movs	r0, #1
 800bd48:	e7e7      	b.n	800bd1a <_raise_r+0x12>
 800bd4a:	2400      	movs	r4, #0
 800bd4c:	4628      	mov	r0, r5
 800bd4e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800bd52:	4798      	blx	r3
 800bd54:	2000      	movs	r0, #0
 800bd56:	e7e0      	b.n	800bd1a <_raise_r+0x12>

0800bd58 <raise>:
 800bd58:	4b02      	ldr	r3, [pc, #8]	; (800bd64 <raise+0xc>)
 800bd5a:	4601      	mov	r1, r0
 800bd5c:	6818      	ldr	r0, [r3, #0]
 800bd5e:	f7ff bfd3 	b.w	800bd08 <_raise_r>
 800bd62:	bf00      	nop
 800bd64:	2000000c 	.word	0x2000000c

0800bd68 <_kill_r>:
 800bd68:	b538      	push	{r3, r4, r5, lr}
 800bd6a:	2300      	movs	r3, #0
 800bd6c:	4d06      	ldr	r5, [pc, #24]	; (800bd88 <_kill_r+0x20>)
 800bd6e:	4604      	mov	r4, r0
 800bd70:	4608      	mov	r0, r1
 800bd72:	4611      	mov	r1, r2
 800bd74:	602b      	str	r3, [r5, #0]
 800bd76:	f7f6 fe46 	bl	8002a06 <_kill>
 800bd7a:	1c43      	adds	r3, r0, #1
 800bd7c:	d102      	bne.n	800bd84 <_kill_r+0x1c>
 800bd7e:	682b      	ldr	r3, [r5, #0]
 800bd80:	b103      	cbz	r3, 800bd84 <_kill_r+0x1c>
 800bd82:	6023      	str	r3, [r4, #0]
 800bd84:	bd38      	pop	{r3, r4, r5, pc}
 800bd86:	bf00      	nop
 800bd88:	20000418 	.word	0x20000418

0800bd8c <_getpid_r>:
 800bd8c:	f7f6 be34 	b.w	80029f8 <_getpid>

0800bd90 <_fstat_r>:
 800bd90:	b538      	push	{r3, r4, r5, lr}
 800bd92:	2300      	movs	r3, #0
 800bd94:	4d06      	ldr	r5, [pc, #24]	; (800bdb0 <_fstat_r+0x20>)
 800bd96:	4604      	mov	r4, r0
 800bd98:	4608      	mov	r0, r1
 800bd9a:	4611      	mov	r1, r2
 800bd9c:	602b      	str	r3, [r5, #0]
 800bd9e:	f7f6 fe90 	bl	8002ac2 <_fstat>
 800bda2:	1c43      	adds	r3, r0, #1
 800bda4:	d102      	bne.n	800bdac <_fstat_r+0x1c>
 800bda6:	682b      	ldr	r3, [r5, #0]
 800bda8:	b103      	cbz	r3, 800bdac <_fstat_r+0x1c>
 800bdaa:	6023      	str	r3, [r4, #0]
 800bdac:	bd38      	pop	{r3, r4, r5, pc}
 800bdae:	bf00      	nop
 800bdb0:	20000418 	.word	0x20000418

0800bdb4 <_isatty_r>:
 800bdb4:	b538      	push	{r3, r4, r5, lr}
 800bdb6:	2300      	movs	r3, #0
 800bdb8:	4d05      	ldr	r5, [pc, #20]	; (800bdd0 <_isatty_r+0x1c>)
 800bdba:	4604      	mov	r4, r0
 800bdbc:	4608      	mov	r0, r1
 800bdbe:	602b      	str	r3, [r5, #0]
 800bdc0:	f7f6 fe8e 	bl	8002ae0 <_isatty>
 800bdc4:	1c43      	adds	r3, r0, #1
 800bdc6:	d102      	bne.n	800bdce <_isatty_r+0x1a>
 800bdc8:	682b      	ldr	r3, [r5, #0]
 800bdca:	b103      	cbz	r3, 800bdce <_isatty_r+0x1a>
 800bdcc:	6023      	str	r3, [r4, #0]
 800bdce:	bd38      	pop	{r3, r4, r5, pc}
 800bdd0:	20000418 	.word	0x20000418

0800bdd4 <_init>:
 800bdd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bdd6:	bf00      	nop
 800bdd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bdda:	bc08      	pop	{r3}
 800bddc:	469e      	mov	lr, r3
 800bdde:	4770      	bx	lr

0800bde0 <_fini>:
 800bde0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bde2:	bf00      	nop
 800bde4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bde6:	bc08      	pop	{r3}
 800bde8:	469e      	mov	lr, r3
 800bdea:	4770      	bx	lr
