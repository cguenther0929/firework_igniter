
firework_igniter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a074  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000067c  0800a260  0800a260  0001a260  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a8dc  0800a8dc  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800a8dc  0800a8dc  0001a8dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a8e4  0800a8e4  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a8e4  0800a8e4  0001a8e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a8e8  0800a8e8  0001a8e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800a8ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000023c  200001e0  0800aacc  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000041c  0800aacc  0002041c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017b56  00000000  00000000  00020209  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002f9f  00000000  00000000  00037d5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001450  00000000  00000000  0003ad00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001340  00000000  00000000  0003c150  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021fb1  00000000  00000000  0003d490  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017bd3  00000000  00000000  0005f441  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000bfc26  00000000  00000000  00077014  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00136c3a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006dc4  00000000  00000000  00136c90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	200001e0 	.word	0x200001e0
 8000204:	00000000 	.word	0x00000000
 8000208:	0800a244 	.word	0x0800a244

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	200001e4 	.word	0x200001e4
 8000224:	0800a244 	.word	0x0800a244

08000228 <strlen>:
 8000228:	4603      	mov	r3, r0
 800022a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022e:	2a00      	cmp	r2, #0
 8000230:	d1fb      	bne.n	800022a <strlen+0x2>
 8000232:	1a18      	subs	r0, r3, r0
 8000234:	3801      	subs	r0, #1
 8000236:	4770      	bx	lr

08000238 <__aeabi_drsub>:
 8000238:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800023c:	e002      	b.n	8000244 <__adddf3>
 800023e:	bf00      	nop

08000240 <__aeabi_dsub>:
 8000240:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000244 <__adddf3>:
 8000244:	b530      	push	{r4, r5, lr}
 8000246:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800024a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800024e:	ea94 0f05 	teq	r4, r5
 8000252:	bf08      	it	eq
 8000254:	ea90 0f02 	teqeq	r0, r2
 8000258:	bf1f      	itttt	ne
 800025a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800025e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000262:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000266:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800026a:	f000 80e2 	beq.w	8000432 <__adddf3+0x1ee>
 800026e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000272:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000276:	bfb8      	it	lt
 8000278:	426d      	neglt	r5, r5
 800027a:	dd0c      	ble.n	8000296 <__adddf3+0x52>
 800027c:	442c      	add	r4, r5
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	ea82 0000 	eor.w	r0, r2, r0
 800028a:	ea83 0101 	eor.w	r1, r3, r1
 800028e:	ea80 0202 	eor.w	r2, r0, r2
 8000292:	ea81 0303 	eor.w	r3, r1, r3
 8000296:	2d36      	cmp	r5, #54	; 0x36
 8000298:	bf88      	it	hi
 800029a:	bd30      	pophi	{r4, r5, pc}
 800029c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002a4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002ac:	d002      	beq.n	80002b4 <__adddf3+0x70>
 80002ae:	4240      	negs	r0, r0
 80002b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002b4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002bc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c0:	d002      	beq.n	80002c8 <__adddf3+0x84>
 80002c2:	4252      	negs	r2, r2
 80002c4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c8:	ea94 0f05 	teq	r4, r5
 80002cc:	f000 80a7 	beq.w	800041e <__adddf3+0x1da>
 80002d0:	f1a4 0401 	sub.w	r4, r4, #1
 80002d4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d8:	db0d      	blt.n	80002f6 <__adddf3+0xb2>
 80002da:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002de:	fa22 f205 	lsr.w	r2, r2, r5
 80002e2:	1880      	adds	r0, r0, r2
 80002e4:	f141 0100 	adc.w	r1, r1, #0
 80002e8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002ec:	1880      	adds	r0, r0, r2
 80002ee:	fa43 f305 	asr.w	r3, r3, r5
 80002f2:	4159      	adcs	r1, r3
 80002f4:	e00e      	b.n	8000314 <__adddf3+0xd0>
 80002f6:	f1a5 0520 	sub.w	r5, r5, #32
 80002fa:	f10e 0e20 	add.w	lr, lr, #32
 80002fe:	2a01      	cmp	r2, #1
 8000300:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000304:	bf28      	it	cs
 8000306:	f04c 0c02 	orrcs.w	ip, ip, #2
 800030a:	fa43 f305 	asr.w	r3, r3, r5
 800030e:	18c0      	adds	r0, r0, r3
 8000310:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000314:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000318:	d507      	bpl.n	800032a <__adddf3+0xe6>
 800031a:	f04f 0e00 	mov.w	lr, #0
 800031e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000322:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000326:	eb6e 0101 	sbc.w	r1, lr, r1
 800032a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800032e:	d31b      	bcc.n	8000368 <__adddf3+0x124>
 8000330:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000334:	d30c      	bcc.n	8000350 <__adddf3+0x10c>
 8000336:	0849      	lsrs	r1, r1, #1
 8000338:	ea5f 0030 	movs.w	r0, r0, rrx
 800033c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000340:	f104 0401 	add.w	r4, r4, #1
 8000344:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000348:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800034c:	f080 809a 	bcs.w	8000484 <__adddf3+0x240>
 8000350:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	ea41 0105 	orr.w	r1, r1, r5
 8000366:	bd30      	pop	{r4, r5, pc}
 8000368:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800036c:	4140      	adcs	r0, r0
 800036e:	eb41 0101 	adc.w	r1, r1, r1
 8000372:	3c01      	subs	r4, #1
 8000374:	bf28      	it	cs
 8000376:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800037a:	d2e9      	bcs.n	8000350 <__adddf3+0x10c>
 800037c:	f091 0f00 	teq	r1, #0
 8000380:	bf04      	itt	eq
 8000382:	4601      	moveq	r1, r0
 8000384:	2000      	moveq	r0, #0
 8000386:	fab1 f381 	clz	r3, r1
 800038a:	bf08      	it	eq
 800038c:	3320      	addeq	r3, #32
 800038e:	f1a3 030b 	sub.w	r3, r3, #11
 8000392:	f1b3 0220 	subs.w	r2, r3, #32
 8000396:	da0c      	bge.n	80003b2 <__adddf3+0x16e>
 8000398:	320c      	adds	r2, #12
 800039a:	dd08      	ble.n	80003ae <__adddf3+0x16a>
 800039c:	f102 0c14 	add.w	ip, r2, #20
 80003a0:	f1c2 020c 	rsb	r2, r2, #12
 80003a4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a8:	fa21 f102 	lsr.w	r1, r1, r2
 80003ac:	e00c      	b.n	80003c8 <__adddf3+0x184>
 80003ae:	f102 0214 	add.w	r2, r2, #20
 80003b2:	bfd8      	it	le
 80003b4:	f1c2 0c20 	rsble	ip, r2, #32
 80003b8:	fa01 f102 	lsl.w	r1, r1, r2
 80003bc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c0:	bfdc      	itt	le
 80003c2:	ea41 010c 	orrle.w	r1, r1, ip
 80003c6:	4090      	lslle	r0, r2
 80003c8:	1ae4      	subs	r4, r4, r3
 80003ca:	bfa2      	ittt	ge
 80003cc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d0:	4329      	orrge	r1, r5
 80003d2:	bd30      	popge	{r4, r5, pc}
 80003d4:	ea6f 0404 	mvn.w	r4, r4
 80003d8:	3c1f      	subs	r4, #31
 80003da:	da1c      	bge.n	8000416 <__adddf3+0x1d2>
 80003dc:	340c      	adds	r4, #12
 80003de:	dc0e      	bgt.n	80003fe <__adddf3+0x1ba>
 80003e0:	f104 0414 	add.w	r4, r4, #20
 80003e4:	f1c4 0220 	rsb	r2, r4, #32
 80003e8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ec:	fa01 f302 	lsl.w	r3, r1, r2
 80003f0:	ea40 0003 	orr.w	r0, r0, r3
 80003f4:	fa21 f304 	lsr.w	r3, r1, r4
 80003f8:	ea45 0103 	orr.w	r1, r5, r3
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f1c4 040c 	rsb	r4, r4, #12
 8000402:	f1c4 0220 	rsb	r2, r4, #32
 8000406:	fa20 f002 	lsr.w	r0, r0, r2
 800040a:	fa01 f304 	lsl.w	r3, r1, r4
 800040e:	ea40 0003 	orr.w	r0, r0, r3
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	fa21 f004 	lsr.w	r0, r1, r4
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	f094 0f00 	teq	r4, #0
 8000422:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000426:	bf06      	itte	eq
 8000428:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800042c:	3401      	addeq	r4, #1
 800042e:	3d01      	subne	r5, #1
 8000430:	e74e      	b.n	80002d0 <__adddf3+0x8c>
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf18      	it	ne
 8000438:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800043c:	d029      	beq.n	8000492 <__adddf3+0x24e>
 800043e:	ea94 0f05 	teq	r4, r5
 8000442:	bf08      	it	eq
 8000444:	ea90 0f02 	teqeq	r0, r2
 8000448:	d005      	beq.n	8000456 <__adddf3+0x212>
 800044a:	ea54 0c00 	orrs.w	ip, r4, r0
 800044e:	bf04      	itt	eq
 8000450:	4619      	moveq	r1, r3
 8000452:	4610      	moveq	r0, r2
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	ea91 0f03 	teq	r1, r3
 800045a:	bf1e      	ittt	ne
 800045c:	2100      	movne	r1, #0
 800045e:	2000      	movne	r0, #0
 8000460:	bd30      	popne	{r4, r5, pc}
 8000462:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000466:	d105      	bne.n	8000474 <__adddf3+0x230>
 8000468:	0040      	lsls	r0, r0, #1
 800046a:	4149      	adcs	r1, r1
 800046c:	bf28      	it	cs
 800046e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000472:	bd30      	pop	{r4, r5, pc}
 8000474:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000478:	bf3c      	itt	cc
 800047a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800047e:	bd30      	popcc	{r4, r5, pc}
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000488:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800048c:	f04f 0000 	mov.w	r0, #0
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000496:	bf1a      	itte	ne
 8000498:	4619      	movne	r1, r3
 800049a:	4610      	movne	r0, r2
 800049c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a0:	bf1c      	itt	ne
 80004a2:	460b      	movne	r3, r1
 80004a4:	4602      	movne	r2, r0
 80004a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004aa:	bf06      	itte	eq
 80004ac:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b0:	ea91 0f03 	teqeq	r1, r3
 80004b4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b8:	bd30      	pop	{r4, r5, pc}
 80004ba:	bf00      	nop

080004bc <__aeabi_ui2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f04f 0500 	mov.w	r5, #0
 80004d4:	f04f 0100 	mov.w	r1, #0
 80004d8:	e750      	b.n	800037c <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_i2d>:
 80004dc:	f090 0f00 	teq	r0, #0
 80004e0:	bf04      	itt	eq
 80004e2:	2100      	moveq	r1, #0
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ec:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004f0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004f4:	bf48      	it	mi
 80004f6:	4240      	negmi	r0, r0
 80004f8:	f04f 0100 	mov.w	r1, #0
 80004fc:	e73e      	b.n	800037c <__adddf3+0x138>
 80004fe:	bf00      	nop

08000500 <__aeabi_f2d>:
 8000500:	0042      	lsls	r2, r0, #1
 8000502:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000506:	ea4f 0131 	mov.w	r1, r1, rrx
 800050a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800050e:	bf1f      	itttt	ne
 8000510:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000514:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000518:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800051c:	4770      	bxne	lr
 800051e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000522:	bf08      	it	eq
 8000524:	4770      	bxeq	lr
 8000526:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800052a:	bf04      	itt	eq
 800052c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000530:	4770      	bxeq	lr
 8000532:	b530      	push	{r4, r5, lr}
 8000534:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000540:	e71c      	b.n	800037c <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_ul2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	e00a      	b.n	800056a <__aeabi_l2d+0x16>

08000554 <__aeabi_l2d>:
 8000554:	ea50 0201 	orrs.w	r2, r0, r1
 8000558:	bf08      	it	eq
 800055a:	4770      	bxeq	lr
 800055c:	b530      	push	{r4, r5, lr}
 800055e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000562:	d502      	bpl.n	800056a <__aeabi_l2d+0x16>
 8000564:	4240      	negs	r0, r0
 8000566:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800056a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800056e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000572:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000576:	f43f aed8 	beq.w	800032a <__adddf3+0xe6>
 800057a:	f04f 0203 	mov.w	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000592:	f1c2 0320 	rsb	r3, r2, #32
 8000596:	fa00 fc03 	lsl.w	ip, r0, r3
 800059a:	fa20 f002 	lsr.w	r0, r0, r2
 800059e:	fa01 fe03 	lsl.w	lr, r1, r3
 80005a2:	ea40 000e 	orr.w	r0, r0, lr
 80005a6:	fa21 f102 	lsr.w	r1, r1, r2
 80005aa:	4414      	add	r4, r2
 80005ac:	e6bd      	b.n	800032a <__adddf3+0xe6>
 80005ae:	bf00      	nop

080005b0 <__aeabi_dmul>:
 80005b0:	b570      	push	{r4, r5, r6, lr}
 80005b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005be:	bf1d      	ittte	ne
 80005c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005c4:	ea94 0f0c 	teqne	r4, ip
 80005c8:	ea95 0f0c 	teqne	r5, ip
 80005cc:	f000 f8de 	bleq	800078c <__aeabi_dmul+0x1dc>
 80005d0:	442c      	add	r4, r5
 80005d2:	ea81 0603 	eor.w	r6, r1, r3
 80005d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005e2:	bf18      	it	ne
 80005e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005f0:	d038      	beq.n	8000664 <__aeabi_dmul+0xb4>
 80005f2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005fe:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000602:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000606:	f04f 0600 	mov.w	r6, #0
 800060a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800060e:	f09c 0f00 	teq	ip, #0
 8000612:	bf18      	it	ne
 8000614:	f04e 0e01 	orrne.w	lr, lr, #1
 8000618:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800061c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000620:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000624:	d204      	bcs.n	8000630 <__aeabi_dmul+0x80>
 8000626:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800062a:	416d      	adcs	r5, r5
 800062c:	eb46 0606 	adc.w	r6, r6, r6
 8000630:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000634:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000638:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800063c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000640:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000644:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000648:	bf88      	it	hi
 800064a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800064e:	d81e      	bhi.n	800068e <__aeabi_dmul+0xde>
 8000650:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000654:	bf08      	it	eq
 8000656:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800065a:	f150 0000 	adcs.w	r0, r0, #0
 800065e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000668:	ea46 0101 	orr.w	r1, r6, r1
 800066c:	ea40 0002 	orr.w	r0, r0, r2
 8000670:	ea81 0103 	eor.w	r1, r1, r3
 8000674:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000678:	bfc2      	ittt	gt
 800067a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800067e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000682:	bd70      	popgt	{r4, r5, r6, pc}
 8000684:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000688:	f04f 0e00 	mov.w	lr, #0
 800068c:	3c01      	subs	r4, #1
 800068e:	f300 80ab 	bgt.w	80007e8 <__aeabi_dmul+0x238>
 8000692:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000696:	bfde      	ittt	le
 8000698:	2000      	movle	r0, #0
 800069a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800069e:	bd70      	pople	{r4, r5, r6, pc}
 80006a0:	f1c4 0400 	rsb	r4, r4, #0
 80006a4:	3c20      	subs	r4, #32
 80006a6:	da35      	bge.n	8000714 <__aeabi_dmul+0x164>
 80006a8:	340c      	adds	r4, #12
 80006aa:	dc1b      	bgt.n	80006e4 <__aeabi_dmul+0x134>
 80006ac:	f104 0414 	add.w	r4, r4, #20
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f305 	lsl.w	r3, r0, r5
 80006b8:	fa20 f004 	lsr.w	r0, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d0:	fa21 f604 	lsr.w	r6, r1, r4
 80006d4:	eb42 0106 	adc.w	r1, r2, r6
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 040c 	rsb	r4, r4, #12
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f304 	lsl.w	r3, r0, r4
 80006f0:	fa20 f005 	lsr.w	r0, r0, r5
 80006f4:	fa01 f204 	lsl.w	r2, r1, r4
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000704:	f141 0100 	adc.w	r1, r1, #0
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f1c4 0520 	rsb	r5, r4, #32
 8000718:	fa00 f205 	lsl.w	r2, r0, r5
 800071c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000720:	fa20 f304 	lsr.w	r3, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea43 0302 	orr.w	r3, r3, r2
 800072c:	fa21 f004 	lsr.w	r0, r1, r4
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000734:	fa21 f204 	lsr.w	r2, r1, r4
 8000738:	ea20 0002 	bic.w	r0, r0, r2
 800073c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f094 0f00 	teq	r4, #0
 8000750:	d10f      	bne.n	8000772 <__aeabi_dmul+0x1c2>
 8000752:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000756:	0040      	lsls	r0, r0, #1
 8000758:	eb41 0101 	adc.w	r1, r1, r1
 800075c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3c01      	subeq	r4, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1a6>
 8000766:	ea41 0106 	orr.w	r1, r1, r6
 800076a:	f095 0f00 	teq	r5, #0
 800076e:	bf18      	it	ne
 8000770:	4770      	bxne	lr
 8000772:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000776:	0052      	lsls	r2, r2, #1
 8000778:	eb43 0303 	adc.w	r3, r3, r3
 800077c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000780:	bf08      	it	eq
 8000782:	3d01      	subeq	r5, #1
 8000784:	d0f7      	beq.n	8000776 <__aeabi_dmul+0x1c6>
 8000786:	ea43 0306 	orr.w	r3, r3, r6
 800078a:	4770      	bx	lr
 800078c:	ea94 0f0c 	teq	r4, ip
 8000790:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000794:	bf18      	it	ne
 8000796:	ea95 0f0c 	teqne	r5, ip
 800079a:	d00c      	beq.n	80007b6 <__aeabi_dmul+0x206>
 800079c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a0:	bf18      	it	ne
 80007a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a6:	d1d1      	bne.n	800074c <__aeabi_dmul+0x19c>
 80007a8:	ea81 0103 	eor.w	r1, r1, r3
 80007ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b0:	f04f 0000 	mov.w	r0, #0
 80007b4:	bd70      	pop	{r4, r5, r6, pc}
 80007b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007ba:	bf06      	itte	eq
 80007bc:	4610      	moveq	r0, r2
 80007be:	4619      	moveq	r1, r3
 80007c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007c4:	d019      	beq.n	80007fa <__aeabi_dmul+0x24a>
 80007c6:	ea94 0f0c 	teq	r4, ip
 80007ca:	d102      	bne.n	80007d2 <__aeabi_dmul+0x222>
 80007cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007d0:	d113      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007d2:	ea95 0f0c 	teq	r5, ip
 80007d6:	d105      	bne.n	80007e4 <__aeabi_dmul+0x234>
 80007d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007dc:	bf1c      	itt	ne
 80007de:	4610      	movne	r0, r2
 80007e0:	4619      	movne	r1, r3
 80007e2:	d10a      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007e4:	ea81 0103 	eor.w	r1, r1, r3
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007f4:	f04f 0000 	mov.w	r0, #0
 80007f8:	bd70      	pop	{r4, r5, r6, pc}
 80007fa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007fe:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000802:	bd70      	pop	{r4, r5, r6, pc}

08000804 <__aeabi_ddiv>:
 8000804:	b570      	push	{r4, r5, r6, lr}
 8000806:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800080a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800080e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000812:	bf1d      	ittte	ne
 8000814:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000818:	ea94 0f0c 	teqne	r4, ip
 800081c:	ea95 0f0c 	teqne	r5, ip
 8000820:	f000 f8a7 	bleq	8000972 <__aeabi_ddiv+0x16e>
 8000824:	eba4 0405 	sub.w	r4, r4, r5
 8000828:	ea81 0e03 	eor.w	lr, r1, r3
 800082c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000830:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000834:	f000 8088 	beq.w	8000948 <__aeabi_ddiv+0x144>
 8000838:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800083c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000840:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000844:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000848:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800084c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000850:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000854:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000858:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800085c:	429d      	cmp	r5, r3
 800085e:	bf08      	it	eq
 8000860:	4296      	cmpeq	r6, r2
 8000862:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000866:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800086a:	d202      	bcs.n	8000872 <__aeabi_ddiv+0x6e>
 800086c:	085b      	lsrs	r3, r3, #1
 800086e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000872:	1ab6      	subs	r6, r6, r2
 8000874:	eb65 0503 	sbc.w	r5, r5, r3
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000882:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 000c 	orrcs.w	r0, r0, ip
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008e0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008e4:	d018      	beq.n	8000918 <__aeabi_ddiv+0x114>
 80008e6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ea:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ee:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008f2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008f6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008fa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008fe:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000902:	d1c0      	bne.n	8000886 <__aeabi_ddiv+0x82>
 8000904:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000908:	d10b      	bne.n	8000922 <__aeabi_ddiv+0x11e>
 800090a:	ea41 0100 	orr.w	r1, r1, r0
 800090e:	f04f 0000 	mov.w	r0, #0
 8000912:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000916:	e7b6      	b.n	8000886 <__aeabi_ddiv+0x82>
 8000918:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800091c:	bf04      	itt	eq
 800091e:	4301      	orreq	r1, r0
 8000920:	2000      	moveq	r0, #0
 8000922:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000926:	bf88      	it	hi
 8000928:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800092c:	f63f aeaf 	bhi.w	800068e <__aeabi_dmul+0xde>
 8000930:	ebb5 0c03 	subs.w	ip, r5, r3
 8000934:	bf04      	itt	eq
 8000936:	ebb6 0c02 	subseq.w	ip, r6, r2
 800093a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800093e:	f150 0000 	adcs.w	r0, r0, #0
 8000942:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000946:	bd70      	pop	{r4, r5, r6, pc}
 8000948:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800094c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000950:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000954:	bfc2      	ittt	gt
 8000956:	ebd4 050c 	rsbsgt	r5, r4, ip
 800095a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800095e:	bd70      	popgt	{r4, r5, r6, pc}
 8000960:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000964:	f04f 0e00 	mov.w	lr, #0
 8000968:	3c01      	subs	r4, #1
 800096a:	e690      	b.n	800068e <__aeabi_dmul+0xde>
 800096c:	ea45 0e06 	orr.w	lr, r5, r6
 8000970:	e68d      	b.n	800068e <__aeabi_dmul+0xde>
 8000972:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000976:	ea94 0f0c 	teq	r4, ip
 800097a:	bf08      	it	eq
 800097c:	ea95 0f0c 	teqeq	r5, ip
 8000980:	f43f af3b 	beq.w	80007fa <__aeabi_dmul+0x24a>
 8000984:	ea94 0f0c 	teq	r4, ip
 8000988:	d10a      	bne.n	80009a0 <__aeabi_ddiv+0x19c>
 800098a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800098e:	f47f af34 	bne.w	80007fa <__aeabi_dmul+0x24a>
 8000992:	ea95 0f0c 	teq	r5, ip
 8000996:	f47f af25 	bne.w	80007e4 <__aeabi_dmul+0x234>
 800099a:	4610      	mov	r0, r2
 800099c:	4619      	mov	r1, r3
 800099e:	e72c      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009a0:	ea95 0f0c 	teq	r5, ip
 80009a4:	d106      	bne.n	80009b4 <__aeabi_ddiv+0x1b0>
 80009a6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009aa:	f43f aefd 	beq.w	80007a8 <__aeabi_dmul+0x1f8>
 80009ae:	4610      	mov	r0, r2
 80009b0:	4619      	mov	r1, r3
 80009b2:	e722      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b8:	bf18      	it	ne
 80009ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009be:	f47f aec5 	bne.w	800074c <__aeabi_dmul+0x19c>
 80009c2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009c6:	f47f af0d 	bne.w	80007e4 <__aeabi_dmul+0x234>
 80009ca:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ce:	f47f aeeb 	bne.w	80007a8 <__aeabi_dmul+0x1f8>
 80009d2:	e712      	b.n	80007fa <__aeabi_dmul+0x24a>

080009d4 <__gedf2>:
 80009d4:	f04f 3cff 	mov.w	ip, #4294967295
 80009d8:	e006      	b.n	80009e8 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__ledf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	e002      	b.n	80009e8 <__cmpdf2+0x4>
 80009e2:	bf00      	nop

080009e4 <__cmpdf2>:
 80009e4:	f04f 0c01 	mov.w	ip, #1
 80009e8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009fe:	d01b      	beq.n	8000a38 <__cmpdf2+0x54>
 8000a00:	b001      	add	sp, #4
 8000a02:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a06:	bf0c      	ite	eq
 8000a08:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a0c:	ea91 0f03 	teqne	r1, r3
 8000a10:	bf02      	ittt	eq
 8000a12:	ea90 0f02 	teqeq	r0, r2
 8000a16:	2000      	moveq	r0, #0
 8000a18:	4770      	bxeq	lr
 8000a1a:	f110 0f00 	cmn.w	r0, #0
 8000a1e:	ea91 0f03 	teq	r1, r3
 8000a22:	bf58      	it	pl
 8000a24:	4299      	cmppl	r1, r3
 8000a26:	bf08      	it	eq
 8000a28:	4290      	cmpeq	r0, r2
 8000a2a:	bf2c      	ite	cs
 8000a2c:	17d8      	asrcs	r0, r3, #31
 8000a2e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a32:	f040 0001 	orr.w	r0, r0, #1
 8000a36:	4770      	bx	lr
 8000a38:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a40:	d102      	bne.n	8000a48 <__cmpdf2+0x64>
 8000a42:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a46:	d107      	bne.n	8000a58 <__cmpdf2+0x74>
 8000a48:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a50:	d1d6      	bne.n	8000a00 <__cmpdf2+0x1c>
 8000a52:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a56:	d0d3      	beq.n	8000a00 <__cmpdf2+0x1c>
 8000a58:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop

08000a60 <__aeabi_cdrcmple>:
 8000a60:	4684      	mov	ip, r0
 8000a62:	4610      	mov	r0, r2
 8000a64:	4662      	mov	r2, ip
 8000a66:	468c      	mov	ip, r1
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4663      	mov	r3, ip
 8000a6c:	e000      	b.n	8000a70 <__aeabi_cdcmpeq>
 8000a6e:	bf00      	nop

08000a70 <__aeabi_cdcmpeq>:
 8000a70:	b501      	push	{r0, lr}
 8000a72:	f7ff ffb7 	bl	80009e4 <__cmpdf2>
 8000a76:	2800      	cmp	r0, #0
 8000a78:	bf48      	it	mi
 8000a7a:	f110 0f00 	cmnmi.w	r0, #0
 8000a7e:	bd01      	pop	{r0, pc}

08000a80 <__aeabi_dcmpeq>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff fff4 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a88:	bf0c      	ite	eq
 8000a8a:	2001      	moveq	r0, #1
 8000a8c:	2000      	movne	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_dcmplt>:
 8000a94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a98:	f7ff ffea 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a9c:	bf34      	ite	cc
 8000a9e:	2001      	movcc	r0, #1
 8000aa0:	2000      	movcs	r0, #0
 8000aa2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_dcmple>:
 8000aa8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aac:	f7ff ffe0 	bl	8000a70 <__aeabi_cdcmpeq>
 8000ab0:	bf94      	ite	ls
 8000ab2:	2001      	movls	r0, #1
 8000ab4:	2000      	movhi	r0, #0
 8000ab6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aba:	bf00      	nop

08000abc <__aeabi_dcmpge>:
 8000abc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac0:	f7ff ffce 	bl	8000a60 <__aeabi_cdrcmple>
 8000ac4:	bf94      	ite	ls
 8000ac6:	2001      	movls	r0, #1
 8000ac8:	2000      	movhi	r0, #0
 8000aca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ace:	bf00      	nop

08000ad0 <__aeabi_dcmpgt>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff ffc4 	bl	8000a60 <__aeabi_cdrcmple>
 8000ad8:	bf34      	ite	cc
 8000ada:	2001      	movcc	r0, #1
 8000adc:	2000      	movcs	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmpun>:
 8000ae4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aec:	d102      	bne.n	8000af4 <__aeabi_dcmpun+0x10>
 8000aee:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000af2:	d10a      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000af4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000afc:	d102      	bne.n	8000b04 <__aeabi_dcmpun+0x20>
 8000afe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b02:	d102      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000b04:	f04f 0000 	mov.w	r0, #0
 8000b08:	4770      	bx	lr
 8000b0a:	f04f 0001 	mov.w	r0, #1
 8000b0e:	4770      	bx	lr

08000b10 <__aeabi_d2iz>:
 8000b10:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b14:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b18:	d215      	bcs.n	8000b46 <__aeabi_d2iz+0x36>
 8000b1a:	d511      	bpl.n	8000b40 <__aeabi_d2iz+0x30>
 8000b1c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b20:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b24:	d912      	bls.n	8000b4c <__aeabi_d2iz+0x3c>
 8000b26:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b2e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b32:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b36:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3a:	bf18      	it	ne
 8000b3c:	4240      	negne	r0, r0
 8000b3e:	4770      	bx	lr
 8000b40:	f04f 0000 	mov.w	r0, #0
 8000b44:	4770      	bx	lr
 8000b46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b4a:	d105      	bne.n	8000b58 <__aeabi_d2iz+0x48>
 8000b4c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b50:	bf08      	it	eq
 8000b52:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b56:	4770      	bx	lr
 8000b58:	f04f 0000 	mov.w	r0, #0
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop

08000b60 <__aeabi_d2uiz>:
 8000b60:	004a      	lsls	r2, r1, #1
 8000b62:	d211      	bcs.n	8000b88 <__aeabi_d2uiz+0x28>
 8000b64:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b68:	d211      	bcs.n	8000b8e <__aeabi_d2uiz+0x2e>
 8000b6a:	d50d      	bpl.n	8000b88 <__aeabi_d2uiz+0x28>
 8000b6c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b70:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b74:	d40e      	bmi.n	8000b94 <__aeabi_d2uiz+0x34>
 8000b76:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b7a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b7e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b82:	fa23 f002 	lsr.w	r0, r3, r2
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d102      	bne.n	8000b9a <__aeabi_d2uiz+0x3a>
 8000b94:	f04f 30ff 	mov.w	r0, #4294967295
 8000b98:	4770      	bx	lr
 8000b9a:	f04f 0000 	mov.w	r0, #0
 8000b9e:	4770      	bx	lr

08000ba0 <__aeabi_d2f>:
 8000ba0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ba4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ba8:	bf24      	itt	cs
 8000baa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bae:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bb2:	d90d      	bls.n	8000bd0 <__aeabi_d2f+0x30>
 8000bb4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bb8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bbc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bc4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bc8:	bf08      	it	eq
 8000bca:	f020 0001 	biceq.w	r0, r0, #1
 8000bce:	4770      	bx	lr
 8000bd0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bd4:	d121      	bne.n	8000c1a <__aeabi_d2f+0x7a>
 8000bd6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bda:	bfbc      	itt	lt
 8000bdc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be0:	4770      	bxlt	lr
 8000be2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000be6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bea:	f1c2 0218 	rsb	r2, r2, #24
 8000bee:	f1c2 0c20 	rsb	ip, r2, #32
 8000bf2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bf6:	fa20 f002 	lsr.w	r0, r0, r2
 8000bfa:	bf18      	it	ne
 8000bfc:	f040 0001 	orrne.w	r0, r0, #1
 8000c00:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c04:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c08:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c0c:	ea40 000c 	orr.w	r0, r0, ip
 8000c10:	fa23 f302 	lsr.w	r3, r3, r2
 8000c14:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c18:	e7cc      	b.n	8000bb4 <__aeabi_d2f+0x14>
 8000c1a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c1e:	d107      	bne.n	8000c30 <__aeabi_d2f+0x90>
 8000c20:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c24:	bf1e      	ittt	ne
 8000c26:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c2a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c2e:	4770      	bxne	lr
 8000c30:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c34:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c38:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c3c:	4770      	bx	lr
 8000c3e:	bf00      	nop

08000c40 <__aeabi_uldivmod>:
 8000c40:	b953      	cbnz	r3, 8000c58 <__aeabi_uldivmod+0x18>
 8000c42:	b94a      	cbnz	r2, 8000c58 <__aeabi_uldivmod+0x18>
 8000c44:	2900      	cmp	r1, #0
 8000c46:	bf08      	it	eq
 8000c48:	2800      	cmpeq	r0, #0
 8000c4a:	bf1c      	itt	ne
 8000c4c:	f04f 31ff 	movne.w	r1, #4294967295
 8000c50:	f04f 30ff 	movne.w	r0, #4294967295
 8000c54:	f000 b9a6 	b.w	8000fa4 <__aeabi_idiv0>
 8000c58:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c5c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c60:	f000 f83e 	bl	8000ce0 <__udivmoddi4>
 8000c64:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c68:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c6c:	b004      	add	sp, #16
 8000c6e:	4770      	bx	lr

08000c70 <__aeabi_d2lz>:
 8000c70:	b538      	push	{r3, r4, r5, lr}
 8000c72:	460c      	mov	r4, r1
 8000c74:	4605      	mov	r5, r0
 8000c76:	4621      	mov	r1, r4
 8000c78:	4628      	mov	r0, r5
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	f7ff ff09 	bl	8000a94 <__aeabi_dcmplt>
 8000c82:	b928      	cbnz	r0, 8000c90 <__aeabi_d2lz+0x20>
 8000c84:	4628      	mov	r0, r5
 8000c86:	4621      	mov	r1, r4
 8000c88:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c8c:	f000 b80a 	b.w	8000ca4 <__aeabi_d2ulz>
 8000c90:	4628      	mov	r0, r5
 8000c92:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8000c96:	f000 f805 	bl	8000ca4 <__aeabi_d2ulz>
 8000c9a:	4240      	negs	r0, r0
 8000c9c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ca0:	bd38      	pop	{r3, r4, r5, pc}
 8000ca2:	bf00      	nop

08000ca4 <__aeabi_d2ulz>:
 8000ca4:	b5d0      	push	{r4, r6, r7, lr}
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	4b0b      	ldr	r3, [pc, #44]	; (8000cd8 <__aeabi_d2ulz+0x34>)
 8000caa:	4606      	mov	r6, r0
 8000cac:	460f      	mov	r7, r1
 8000cae:	f7ff fc7f 	bl	80005b0 <__aeabi_dmul>
 8000cb2:	f7ff ff55 	bl	8000b60 <__aeabi_d2uiz>
 8000cb6:	4604      	mov	r4, r0
 8000cb8:	f7ff fc00 	bl	80004bc <__aeabi_ui2d>
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	4b07      	ldr	r3, [pc, #28]	; (8000cdc <__aeabi_d2ulz+0x38>)
 8000cc0:	f7ff fc76 	bl	80005b0 <__aeabi_dmul>
 8000cc4:	4602      	mov	r2, r0
 8000cc6:	460b      	mov	r3, r1
 8000cc8:	4630      	mov	r0, r6
 8000cca:	4639      	mov	r1, r7
 8000ccc:	f7ff fab8 	bl	8000240 <__aeabi_dsub>
 8000cd0:	f7ff ff46 	bl	8000b60 <__aeabi_d2uiz>
 8000cd4:	4621      	mov	r1, r4
 8000cd6:	bdd0      	pop	{r4, r6, r7, pc}
 8000cd8:	3df00000 	.word	0x3df00000
 8000cdc:	41f00000 	.word	0x41f00000

08000ce0 <__udivmoddi4>:
 8000ce0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ce4:	9e08      	ldr	r6, [sp, #32]
 8000ce6:	460d      	mov	r5, r1
 8000ce8:	4604      	mov	r4, r0
 8000cea:	468e      	mov	lr, r1
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	f040 8083 	bne.w	8000df8 <__udivmoddi4+0x118>
 8000cf2:	428a      	cmp	r2, r1
 8000cf4:	4617      	mov	r7, r2
 8000cf6:	d947      	bls.n	8000d88 <__udivmoddi4+0xa8>
 8000cf8:	fab2 f382 	clz	r3, r2
 8000cfc:	b14b      	cbz	r3, 8000d12 <__udivmoddi4+0x32>
 8000cfe:	f1c3 0120 	rsb	r1, r3, #32
 8000d02:	fa05 fe03 	lsl.w	lr, r5, r3
 8000d06:	fa20 f101 	lsr.w	r1, r0, r1
 8000d0a:	409f      	lsls	r7, r3
 8000d0c:	ea41 0e0e 	orr.w	lr, r1, lr
 8000d10:	409c      	lsls	r4, r3
 8000d12:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d16:	fbbe fcf8 	udiv	ip, lr, r8
 8000d1a:	fa1f f987 	uxth.w	r9, r7
 8000d1e:	fb08 e21c 	mls	r2, r8, ip, lr
 8000d22:	fb0c f009 	mul.w	r0, ip, r9
 8000d26:	0c21      	lsrs	r1, r4, #16
 8000d28:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 8000d2c:	4290      	cmp	r0, r2
 8000d2e:	d90a      	bls.n	8000d46 <__udivmoddi4+0x66>
 8000d30:	18ba      	adds	r2, r7, r2
 8000d32:	f10c 31ff 	add.w	r1, ip, #4294967295
 8000d36:	f080 8118 	bcs.w	8000f6a <__udivmoddi4+0x28a>
 8000d3a:	4290      	cmp	r0, r2
 8000d3c:	f240 8115 	bls.w	8000f6a <__udivmoddi4+0x28a>
 8000d40:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d44:	443a      	add	r2, r7
 8000d46:	1a12      	subs	r2, r2, r0
 8000d48:	fbb2 f0f8 	udiv	r0, r2, r8
 8000d4c:	fb08 2210 	mls	r2, r8, r0, r2
 8000d50:	fb00 f109 	mul.w	r1, r0, r9
 8000d54:	b2a4      	uxth	r4, r4
 8000d56:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d5a:	42a1      	cmp	r1, r4
 8000d5c:	d909      	bls.n	8000d72 <__udivmoddi4+0x92>
 8000d5e:	193c      	adds	r4, r7, r4
 8000d60:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d64:	f080 8103 	bcs.w	8000f6e <__udivmoddi4+0x28e>
 8000d68:	42a1      	cmp	r1, r4
 8000d6a:	f240 8100 	bls.w	8000f6e <__udivmoddi4+0x28e>
 8000d6e:	3802      	subs	r0, #2
 8000d70:	443c      	add	r4, r7
 8000d72:	1a64      	subs	r4, r4, r1
 8000d74:	2100      	movs	r1, #0
 8000d76:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d7a:	b11e      	cbz	r6, 8000d84 <__udivmoddi4+0xa4>
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	40dc      	lsrs	r4, r3
 8000d80:	e9c6 4200 	strd	r4, r2, [r6]
 8000d84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d88:	b902      	cbnz	r2, 8000d8c <__udivmoddi4+0xac>
 8000d8a:	deff      	udf	#255	; 0xff
 8000d8c:	fab2 f382 	clz	r3, r2
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d14f      	bne.n	8000e34 <__udivmoddi4+0x154>
 8000d94:	1a8d      	subs	r5, r1, r2
 8000d96:	2101      	movs	r1, #1
 8000d98:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8000d9c:	fa1f f882 	uxth.w	r8, r2
 8000da0:	fbb5 fcfe 	udiv	ip, r5, lr
 8000da4:	fb0e 551c 	mls	r5, lr, ip, r5
 8000da8:	fb08 f00c 	mul.w	r0, r8, ip
 8000dac:	0c22      	lsrs	r2, r4, #16
 8000dae:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 8000db2:	42a8      	cmp	r0, r5
 8000db4:	d907      	bls.n	8000dc6 <__udivmoddi4+0xe6>
 8000db6:	197d      	adds	r5, r7, r5
 8000db8:	f10c 32ff 	add.w	r2, ip, #4294967295
 8000dbc:	d202      	bcs.n	8000dc4 <__udivmoddi4+0xe4>
 8000dbe:	42a8      	cmp	r0, r5
 8000dc0:	f200 80e9 	bhi.w	8000f96 <__udivmoddi4+0x2b6>
 8000dc4:	4694      	mov	ip, r2
 8000dc6:	1a2d      	subs	r5, r5, r0
 8000dc8:	fbb5 f0fe 	udiv	r0, r5, lr
 8000dcc:	fb0e 5510 	mls	r5, lr, r0, r5
 8000dd0:	fb08 f800 	mul.w	r8, r8, r0
 8000dd4:	b2a4      	uxth	r4, r4
 8000dd6:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000dda:	45a0      	cmp	r8, r4
 8000ddc:	d907      	bls.n	8000dee <__udivmoddi4+0x10e>
 8000dde:	193c      	adds	r4, r7, r4
 8000de0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000de4:	d202      	bcs.n	8000dec <__udivmoddi4+0x10c>
 8000de6:	45a0      	cmp	r8, r4
 8000de8:	f200 80d9 	bhi.w	8000f9e <__udivmoddi4+0x2be>
 8000dec:	4610      	mov	r0, r2
 8000dee:	eba4 0408 	sub.w	r4, r4, r8
 8000df2:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000df6:	e7c0      	b.n	8000d7a <__udivmoddi4+0x9a>
 8000df8:	428b      	cmp	r3, r1
 8000dfa:	d908      	bls.n	8000e0e <__udivmoddi4+0x12e>
 8000dfc:	2e00      	cmp	r6, #0
 8000dfe:	f000 80b1 	beq.w	8000f64 <__udivmoddi4+0x284>
 8000e02:	2100      	movs	r1, #0
 8000e04:	e9c6 0500 	strd	r0, r5, [r6]
 8000e08:	4608      	mov	r0, r1
 8000e0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0e:	fab3 f183 	clz	r1, r3
 8000e12:	2900      	cmp	r1, #0
 8000e14:	d14b      	bne.n	8000eae <__udivmoddi4+0x1ce>
 8000e16:	42ab      	cmp	r3, r5
 8000e18:	d302      	bcc.n	8000e20 <__udivmoddi4+0x140>
 8000e1a:	4282      	cmp	r2, r0
 8000e1c:	f200 80b9 	bhi.w	8000f92 <__udivmoddi4+0x2b2>
 8000e20:	1a84      	subs	r4, r0, r2
 8000e22:	eb65 0303 	sbc.w	r3, r5, r3
 8000e26:	2001      	movs	r0, #1
 8000e28:	469e      	mov	lr, r3
 8000e2a:	2e00      	cmp	r6, #0
 8000e2c:	d0aa      	beq.n	8000d84 <__udivmoddi4+0xa4>
 8000e2e:	e9c6 4e00 	strd	r4, lr, [r6]
 8000e32:	e7a7      	b.n	8000d84 <__udivmoddi4+0xa4>
 8000e34:	409f      	lsls	r7, r3
 8000e36:	f1c3 0220 	rsb	r2, r3, #32
 8000e3a:	40d1      	lsrs	r1, r2
 8000e3c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e40:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e44:	fa1f f887 	uxth.w	r8, r7
 8000e48:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e4c:	fa24 f202 	lsr.w	r2, r4, r2
 8000e50:	409d      	lsls	r5, r3
 8000e52:	fb00 fc08 	mul.w	ip, r0, r8
 8000e56:	432a      	orrs	r2, r5
 8000e58:	0c15      	lsrs	r5, r2, #16
 8000e5a:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 8000e5e:	45ac      	cmp	ip, r5
 8000e60:	fa04 f403 	lsl.w	r4, r4, r3
 8000e64:	d909      	bls.n	8000e7a <__udivmoddi4+0x19a>
 8000e66:	197d      	adds	r5, r7, r5
 8000e68:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e6c:	f080 808f 	bcs.w	8000f8e <__udivmoddi4+0x2ae>
 8000e70:	45ac      	cmp	ip, r5
 8000e72:	f240 808c 	bls.w	8000f8e <__udivmoddi4+0x2ae>
 8000e76:	3802      	subs	r0, #2
 8000e78:	443d      	add	r5, r7
 8000e7a:	eba5 050c 	sub.w	r5, r5, ip
 8000e7e:	fbb5 f1fe 	udiv	r1, r5, lr
 8000e82:	fb0e 5c11 	mls	ip, lr, r1, r5
 8000e86:	fb01 f908 	mul.w	r9, r1, r8
 8000e8a:	b295      	uxth	r5, r2
 8000e8c:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000e90:	45a9      	cmp	r9, r5
 8000e92:	d907      	bls.n	8000ea4 <__udivmoddi4+0x1c4>
 8000e94:	197d      	adds	r5, r7, r5
 8000e96:	f101 32ff 	add.w	r2, r1, #4294967295
 8000e9a:	d274      	bcs.n	8000f86 <__udivmoddi4+0x2a6>
 8000e9c:	45a9      	cmp	r9, r5
 8000e9e:	d972      	bls.n	8000f86 <__udivmoddi4+0x2a6>
 8000ea0:	3902      	subs	r1, #2
 8000ea2:	443d      	add	r5, r7
 8000ea4:	eba5 0509 	sub.w	r5, r5, r9
 8000ea8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000eac:	e778      	b.n	8000da0 <__udivmoddi4+0xc0>
 8000eae:	f1c1 0720 	rsb	r7, r1, #32
 8000eb2:	408b      	lsls	r3, r1
 8000eb4:	fa22 fc07 	lsr.w	ip, r2, r7
 8000eb8:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ebc:	fa25 f407 	lsr.w	r4, r5, r7
 8000ec0:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000ec4:	fbb4 f9fe 	udiv	r9, r4, lr
 8000ec8:	fa1f f88c 	uxth.w	r8, ip
 8000ecc:	fb0e 4419 	mls	r4, lr, r9, r4
 8000ed0:	fa20 f307 	lsr.w	r3, r0, r7
 8000ed4:	fb09 fa08 	mul.w	sl, r9, r8
 8000ed8:	408d      	lsls	r5, r1
 8000eda:	431d      	orrs	r5, r3
 8000edc:	0c2b      	lsrs	r3, r5, #16
 8000ede:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000ee2:	45a2      	cmp	sl, r4
 8000ee4:	fa02 f201 	lsl.w	r2, r2, r1
 8000ee8:	fa00 f301 	lsl.w	r3, r0, r1
 8000eec:	d909      	bls.n	8000f02 <__udivmoddi4+0x222>
 8000eee:	eb1c 0404 	adds.w	r4, ip, r4
 8000ef2:	f109 30ff 	add.w	r0, r9, #4294967295
 8000ef6:	d248      	bcs.n	8000f8a <__udivmoddi4+0x2aa>
 8000ef8:	45a2      	cmp	sl, r4
 8000efa:	d946      	bls.n	8000f8a <__udivmoddi4+0x2aa>
 8000efc:	f1a9 0902 	sub.w	r9, r9, #2
 8000f00:	4464      	add	r4, ip
 8000f02:	eba4 040a 	sub.w	r4, r4, sl
 8000f06:	fbb4 f0fe 	udiv	r0, r4, lr
 8000f0a:	fb0e 4410 	mls	r4, lr, r0, r4
 8000f0e:	fb00 fa08 	mul.w	sl, r0, r8
 8000f12:	b2ad      	uxth	r5, r5
 8000f14:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000f18:	45a2      	cmp	sl, r4
 8000f1a:	d908      	bls.n	8000f2e <__udivmoddi4+0x24e>
 8000f1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f20:	f100 35ff 	add.w	r5, r0, #4294967295
 8000f24:	d22d      	bcs.n	8000f82 <__udivmoddi4+0x2a2>
 8000f26:	45a2      	cmp	sl, r4
 8000f28:	d92b      	bls.n	8000f82 <__udivmoddi4+0x2a2>
 8000f2a:	3802      	subs	r0, #2
 8000f2c:	4464      	add	r4, ip
 8000f2e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f32:	fba0 8902 	umull	r8, r9, r0, r2
 8000f36:	eba4 040a 	sub.w	r4, r4, sl
 8000f3a:	454c      	cmp	r4, r9
 8000f3c:	46c6      	mov	lr, r8
 8000f3e:	464d      	mov	r5, r9
 8000f40:	d319      	bcc.n	8000f76 <__udivmoddi4+0x296>
 8000f42:	d016      	beq.n	8000f72 <__udivmoddi4+0x292>
 8000f44:	b15e      	cbz	r6, 8000f5e <__udivmoddi4+0x27e>
 8000f46:	ebb3 020e 	subs.w	r2, r3, lr
 8000f4a:	eb64 0405 	sbc.w	r4, r4, r5
 8000f4e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f52:	fa22 f301 	lsr.w	r3, r2, r1
 8000f56:	431f      	orrs	r7, r3
 8000f58:	40cc      	lsrs	r4, r1
 8000f5a:	e9c6 7400 	strd	r7, r4, [r6]
 8000f5e:	2100      	movs	r1, #0
 8000f60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f64:	4631      	mov	r1, r6
 8000f66:	4630      	mov	r0, r6
 8000f68:	e70c      	b.n	8000d84 <__udivmoddi4+0xa4>
 8000f6a:	468c      	mov	ip, r1
 8000f6c:	e6eb      	b.n	8000d46 <__udivmoddi4+0x66>
 8000f6e:	4610      	mov	r0, r2
 8000f70:	e6ff      	b.n	8000d72 <__udivmoddi4+0x92>
 8000f72:	4543      	cmp	r3, r8
 8000f74:	d2e6      	bcs.n	8000f44 <__udivmoddi4+0x264>
 8000f76:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f7a:	eb69 050c 	sbc.w	r5, r9, ip
 8000f7e:	3801      	subs	r0, #1
 8000f80:	e7e0      	b.n	8000f44 <__udivmoddi4+0x264>
 8000f82:	4628      	mov	r0, r5
 8000f84:	e7d3      	b.n	8000f2e <__udivmoddi4+0x24e>
 8000f86:	4611      	mov	r1, r2
 8000f88:	e78c      	b.n	8000ea4 <__udivmoddi4+0x1c4>
 8000f8a:	4681      	mov	r9, r0
 8000f8c:	e7b9      	b.n	8000f02 <__udivmoddi4+0x222>
 8000f8e:	4608      	mov	r0, r1
 8000f90:	e773      	b.n	8000e7a <__udivmoddi4+0x19a>
 8000f92:	4608      	mov	r0, r1
 8000f94:	e749      	b.n	8000e2a <__udivmoddi4+0x14a>
 8000f96:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f9a:	443d      	add	r5, r7
 8000f9c:	e713      	b.n	8000dc6 <__udivmoddi4+0xe6>
 8000f9e:	3802      	subs	r0, #2
 8000fa0:	443c      	add	r4, r7
 8000fa2:	e724      	b.n	8000dee <__udivmoddi4+0x10e>

08000fa4 <__aeabi_idiv0>:
 8000fa4:	4770      	bx	lr
 8000fa6:	bf00      	nop

08000fa8 <getNumber_u8>:
#include "console.h"            //Include file to support console

struct UARTMembers uart;


uint8_t getNumber_u8 ( void ) {
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b082      	sub	sp, #8
 8000fac:	af00      	add	r7, sp, #0
    int number      = 0;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	603b      	str	r3, [r7, #0]
    uint8_t timeout     = 0;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	71fb      	strb	r3, [r7, #7]

    ResetRxBuffer();
 8000fb6:	f001 f913 	bl	80021e0 <ResetRxBuffer>
    
    uart.rxchar = '\0';
 8000fba:	4b1a      	ldr	r3, [pc, #104]	; (8001024 <getNumber_u8+0x7c>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while(uart.rxchar == '\0'){}                   // Wait for keyboard input 
 8000fc2:	bf00      	nop
 8000fc4:	4b17      	ldr	r3, [pc, #92]	; (8001024 <getNumber_u8+0x7c>)
 8000fc6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d0fa      	beq.n	8000fc4 <getNumber_u8+0x1c>
    
    while (timeout < 20) {
 8000fce:	e00a      	b.n	8000fe6 <getNumber_u8+0x3e>
        if(uart.rxchar == ENTER_KEY) break;
 8000fd0:	4b14      	ldr	r3, [pc, #80]	; (8001024 <getNumber_u8+0x7c>)
 8000fd2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000fd6:	2b0d      	cmp	r3, #13
 8000fd8:	d009      	beq.n	8000fee <getNumber_u8+0x46>

        blockingDelay100ms(1);
 8000fda:	2001      	movs	r0, #1
 8000fdc:	f000 fc9e 	bl	800191c <blockingDelay100ms>
        timeout++;
 8000fe0:	79fb      	ldrb	r3, [r7, #7]
 8000fe2:	3301      	adds	r3, #1
 8000fe4:	71fb      	strb	r3, [r7, #7]
    while (timeout < 20) {
 8000fe6:	79fb      	ldrb	r3, [r7, #7]
 8000fe8:	2b13      	cmp	r3, #19
 8000fea:	d9f1      	bls.n	8000fd0 <getNumber_u8+0x28>
 8000fec:	e000      	b.n	8000ff0 <getNumber_u8+0x48>
        if(uart.rxchar == ENTER_KEY) break;
 8000fee:	bf00      	nop
    }

    sscanf(uart.rxbuf,"%d",&number);
 8000ff0:	463b      	mov	r3, r7
 8000ff2:	461a      	mov	r2, r3
 8000ff4:	490c      	ldr	r1, [pc, #48]	; (8001028 <getNumber_u8+0x80>)
 8000ff6:	480b      	ldr	r0, [pc, #44]	; (8001024 <getNumber_u8+0x7c>)
 8000ff8:	f004 ff7a 	bl	8005ef0 <siscanf>

    print_string("Number Received: ",0);
 8000ffc:	2100      	movs	r1, #0
 8000ffe:	480b      	ldr	r0, [pc, #44]	; (800102c <getNumber_u8+0x84>)
 8001000:	f000 ffe6 	bl	8001fd0 <print_string>
    PrintUnsignedDecimal((uint8_t)number, LF);
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	b2db      	uxtb	r3, r3
 8001008:	b29b      	uxth	r3, r3
 800100a:	2101      	movs	r1, #1
 800100c:	4618      	mov	r0, r3
 800100e:	f001 f821 	bl	8002054 <PrintUnsignedDecimal>

    ResetRxBuffer();
 8001012:	f001 f8e5 	bl	80021e0 <ResetRxBuffer>
    return(number);
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	b2db      	uxtb	r3, r3
}
 800101a:	4618      	mov	r0, r3
 800101c:	3708      	adds	r7, #8
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	20000208 	.word	0x20000208
 8001028:	0800a260 	.word	0x0800a260
 800102c:	0800a264 	.word	0x0800a264

08001030 <getNumber_float>:


float getNumber_float( void ) {
 8001030:	b580      	push	{r7, lr}
 8001032:	b082      	sub	sp, #8
 8001034:	af00      	add	r7, sp, #0
    float number        = 0;
 8001036:	f04f 0300 	mov.w	r3, #0
 800103a:	603b      	str	r3, [r7, #0]
    uint8_t timeout     = 0;
 800103c:	2300      	movs	r3, #0
 800103e:	71fb      	strb	r3, [r7, #7]
    
    ResetRxBuffer();
 8001040:	f001 f8ce 	bl	80021e0 <ResetRxBuffer>
    
    uart.rxchar = '\0';
 8001044:	4b13      	ldr	r3, [pc, #76]	; (8001094 <getNumber_float+0x64>)
 8001046:	2200      	movs	r2, #0
 8001048:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while(uart.rxchar == '\0'){}                   // Wait for keyboard input 
 800104c:	bf00      	nop
 800104e:	4b11      	ldr	r3, [pc, #68]	; (8001094 <getNumber_float+0x64>)
 8001050:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001054:	2b00      	cmp	r3, #0
 8001056:	d0fa      	beq.n	800104e <getNumber_float+0x1e>
    
    while (timeout < 80) {
 8001058:	e00a      	b.n	8001070 <getNumber_float+0x40>
        
        if(uart.rxchar == ENTER_KEY) break;
 800105a:	4b0e      	ldr	r3, [pc, #56]	; (8001094 <getNumber_float+0x64>)
 800105c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001060:	2b0d      	cmp	r3, #13
 8001062:	d009      	beq.n	8001078 <getNumber_float+0x48>

        blockingDelay100ms(1);
 8001064:	2001      	movs	r0, #1
 8001066:	f000 fc59 	bl	800191c <blockingDelay100ms>
        timeout++;
 800106a:	79fb      	ldrb	r3, [r7, #7]
 800106c:	3301      	adds	r3, #1
 800106e:	71fb      	strb	r3, [r7, #7]
    while (timeout < 80) {
 8001070:	79fb      	ldrb	r3, [r7, #7]
 8001072:	2b4f      	cmp	r3, #79	; 0x4f
 8001074:	d9f1      	bls.n	800105a <getNumber_float+0x2a>
 8001076:	e000      	b.n	800107a <getNumber_float+0x4a>
        if(uart.rxchar == ENTER_KEY) break;
 8001078:	bf00      	nop
    }

    sscanf(uart.rxbuf,"%f.3",&number);
 800107a:	463b      	mov	r3, r7
 800107c:	461a      	mov	r2, r3
 800107e:	4906      	ldr	r1, [pc, #24]	; (8001098 <getNumber_float+0x68>)
 8001080:	4804      	ldr	r0, [pc, #16]	; (8001094 <getNumber_float+0x64>)
 8001082:	f004 ff35 	bl	8005ef0 <siscanf>
    // print_string("Float Number Enterd: ",LF);
    // print_float(number, LF);
    
    ResetRxBuffer();
 8001086:	f001 f8ab 	bl	80021e0 <ResetRxBuffer>

    return(number);
 800108a:	683b      	ldr	r3, [r7, #0]

}
 800108c:	4618      	mov	r0, r3
 800108e:	3708      	adds	r7, #8
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}
 8001094:	20000208 	.word	0x20000208
 8001098:	0800a278 	.word	0x0800a278

0800109c <MainMenu>:

void MainMenu( void ) {
 800109c:	b580      	push	{r7, lr}
 800109e:	b082      	sub	sp, #8
 80010a0:	af00      	add	r7, sp, #0
     * determined, the equation y=mx+b can be rewritten in
     * order to solve for b (b = y-mx).  
     * 
     */

	uint8_t     usr_number_u8       = 0;        // Number user has entered will be stored here
 80010a2:	2300      	movs	r3, #0
 80010a4:	71fb      	strb	r3, [r7, #7]
    uint16_t    dac_data_value      = 0;
 80010a6:	2300      	movs	r3, #0
 80010a8:	80bb      	strh	r3, [r7, #4]
    float       temp_float          = 0.0;
 80010aa:	f04f 0300 	mov.w	r3, #0
 80010ae:	603b      	str	r3, [r7, #0]
    
    uart.rxchar = '\0';                  
 80010b0:	4b50      	ldr	r3, [pc, #320]	; (80011f4 <MainMenu+0x158>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    ResetTerminal();                            // Clear all the contents on the terminal
 80010b8:	f001 f84e 	bl	8002158 <ResetTerminal>

    
    blockingDelay10ms(1);
 80010bc:	2001      	movs	r0, #1
 80010be:	f000 fc09 	bl	80018d4 <blockingDelay10ms>
    CursorTopLeft();
 80010c2:	f001 f831 	bl	8002128 <CursorTopLeft>
    blockingDelay10ms(1);
 80010c6:	2001      	movs	r0, #1
 80010c8:	f000 fc04 	bl	80018d4 <blockingDelay10ms>

    while(usr_number_u8 != 99) {
 80010cc:	e085      	b.n	80011da <MainMenu+0x13e>
        print_string("1 --- Manipulate DAC output.",LF);
 80010ce:	2101      	movs	r1, #1
 80010d0:	4849      	ldr	r0, [pc, #292]	; (80011f8 <MainMenu+0x15c>)
 80010d2:	f000 ff7d 	bl	8001fd0 <print_string>
        print_string("2 --- Set fuse current.",LF);
 80010d6:	2101      	movs	r1, #1
 80010d8:	4848      	ldr	r0, [pc, #288]	; (80011fc <MainMenu+0x160>)
 80010da:	f000 ff79 	bl	8001fd0 <print_string>
        print_string("3 --- Not implemented.",LF);
 80010de:	2101      	movs	r1, #1
 80010e0:	4847      	ldr	r0, [pc, #284]	; (8001200 <MainMenu+0x164>)
 80010e2:	f000 ff75 	bl	8001fd0 <print_string>
        
        print_string("99 -- Exit menu.",LF);  
 80010e6:	2101      	movs	r1, #1
 80010e8:	4846      	ldr	r0, [pc, #280]	; (8001204 <MainMenu+0x168>)
 80010ea:	f000 ff71 	bl	8001fd0 <print_string>
        InsertLineFeed(2);
 80010ee:	2002      	movs	r0, #2
 80010f0:	f001 f84a 	bl	8002188 <InsertLineFeed>
        
        print_string("Enter Selection:  ",0);
 80010f4:	2100      	movs	r1, #0
 80010f6:	4844      	ldr	r0, [pc, #272]	; (8001208 <MainMenu+0x16c>)
 80010f8:	f000 ff6a 	bl	8001fd0 <print_string>
        usr_number_u8 = getNumber_u8();
 80010fc:	f7ff ff54 	bl	8000fa8 <getNumber_u8>
 8001100:	4603      	mov	r3, r0
 8001102:	71fb      	strb	r3, [r7, #7]

       
        switch(usr_number_u8) {
 8001104:	79fb      	ldrb	r3, [r7, #7]
 8001106:	2b63      	cmp	r3, #99	; 0x63
 8001108:	d058      	beq.n	80011bc <MainMenu+0x120>
 800110a:	2b63      	cmp	r3, #99	; 0x63
 800110c:	dc63      	bgt.n	80011d6 <MainMenu+0x13a>
 800110e:	2b03      	cmp	r3, #3
 8001110:	d04f      	beq.n	80011b2 <MainMenu+0x116>
 8001112:	2b03      	cmp	r3, #3
 8001114:	dc5f      	bgt.n	80011d6 <MainMenu+0x13a>
 8001116:	2b01      	cmp	r3, #1
 8001118:	d002      	beq.n	8001120 <MainMenu+0x84>
 800111a:	2b02      	cmp	r3, #2
 800111c:	d015      	beq.n	800114a <MainMenu+0xae>
 800111e:	e05a      	b.n	80011d6 <MainMenu+0x13a>
            /* Manipulate DAC Voltage Output */
            case 1:
                print_string("What voltage shall the DAC be set to: ",0);
 8001120:	2100      	movs	r1, #0
 8001122:	483a      	ldr	r0, [pc, #232]	; (800120c <MainMenu+0x170>)
 8001124:	f000 ff54 	bl	8001fd0 <print_string>
                temp_float = getNumber_float();
 8001128:	f7ff ff82 	bl	8001030 <getNumber_float>
 800112c:	6038      	str	r0, [r7, #0]
            	dac_data_value = get_dac_data_value (temp_float);
 800112e:	6838      	ldr	r0, [r7, #0]
 8001130:	f000 f87e 	bl	8001230 <get_dac_data_value>
 8001134:	4603      	mov	r3, r0
 8001136:	80bb      	strh	r3, [r7, #4]
                HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, (uint32_t)dac_data_value);ClearScreen();
 8001138:	88bb      	ldrh	r3, [r7, #4]
 800113a:	2200      	movs	r2, #0
 800113c:	2100      	movs	r1, #0
 800113e:	4834      	ldr	r0, [pc, #208]	; (8001210 <MainMenu+0x174>)
 8001140:	f001 fc82 	bl	8002a48 <HAL_DAC_SetValue>
 8001144:	f000 ffd8 	bl	80020f8 <ClearScreen>
            break;
 8001148:	e047      	b.n	80011da <MainMenu+0x13e>
            
            /* Set fuse current */
            case 2:
                print_string("What shall the fuse current be (mA): ",0);
 800114a:	2100      	movs	r1, #0
 800114c:	4831      	ldr	r0, [pc, #196]	; (8001214 <MainMenu+0x178>)
 800114e:	f000 ff3f 	bl	8001fd0 <print_string>
                temp_float = getNumber_float();
 8001152:	f7ff ff6d 	bl	8001030 <getNumber_float>
 8001156:	6038      	str	r0, [r7, #0]
                temp_float = (float)(temp_float/1000.0*0.5);                  // Multiply by 0.5 to get voltage
 8001158:	6838      	ldr	r0, [r7, #0]
 800115a:	f7ff f9d1 	bl	8000500 <__aeabi_f2d>
 800115e:	f04f 0200 	mov.w	r2, #0
 8001162:	4b2d      	ldr	r3, [pc, #180]	; (8001218 <MainMenu+0x17c>)
 8001164:	f7ff fb4e 	bl	8000804 <__aeabi_ddiv>
 8001168:	4602      	mov	r2, r0
 800116a:	460b      	mov	r3, r1
 800116c:	4610      	mov	r0, r2
 800116e:	4619      	mov	r1, r3
 8001170:	f04f 0200 	mov.w	r2, #0
 8001174:	4b29      	ldr	r3, [pc, #164]	; (800121c <MainMenu+0x180>)
 8001176:	f7ff fa1b 	bl	80005b0 <__aeabi_dmul>
 800117a:	4602      	mov	r2, r0
 800117c:	460b      	mov	r3, r1
 800117e:	4610      	mov	r0, r2
 8001180:	4619      	mov	r1, r3
 8001182:	f7ff fd0d 	bl	8000ba0 <__aeabi_d2f>
 8001186:	4603      	mov	r3, r0
 8001188:	603b      	str	r3, [r7, #0]
                print_string("Required DAC Voltage: ",0);
 800118a:	2100      	movs	r1, #0
 800118c:	4824      	ldr	r0, [pc, #144]	; (8001220 <MainMenu+0x184>)
 800118e:	f000 ff1f 	bl	8001fd0 <print_string>
                print_float(temp_float,LF);
 8001192:	2101      	movs	r1, #1
 8001194:	6838      	ldr	r0, [r7, #0]
 8001196:	f000 fed3 	bl	8001f40 <print_float>

            	dac_data_value = get_dac_data_value (temp_float);
 800119a:	6838      	ldr	r0, [r7, #0]
 800119c:	f000 f848 	bl	8001230 <get_dac_data_value>
 80011a0:	4603      	mov	r3, r0
 80011a2:	80bb      	strh	r3, [r7, #4]
                
                HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, (uint32_t)dac_data_value);
 80011a4:	88bb      	ldrh	r3, [r7, #4]
 80011a6:	2200      	movs	r2, #0
 80011a8:	2100      	movs	r1, #0
 80011aa:	4819      	ldr	r0, [pc, #100]	; (8001210 <MainMenu+0x174>)
 80011ac:	f001 fc4c 	bl	8002a48 <HAL_DAC_SetValue>
            	
            break;
 80011b0:	e013      	b.n	80011da <MainMenu+0x13e>

            case 3:
                print_string("Not implemented...",LF);
 80011b2:	2101      	movs	r1, #1
 80011b4:	481b      	ldr	r0, [pc, #108]	; (8001224 <MainMenu+0x188>)
 80011b6:	f000 ff0b 	bl	8001fd0 <print_string>
                
            	
            break;
 80011ba:	e00e      	b.n	80011da <MainMenu+0x13e>



            case 99:
                ResetTerminal();              //Leaving menu, so clear the screen so not to confuse user
 80011bc:	f000 ffcc 	bl	8002158 <ResetTerminal>
                blockingDelay10ms(1);
 80011c0:	2001      	movs	r0, #1
 80011c2:	f000 fb87 	bl	80018d4 <blockingDelay10ms>
                CursorTopLeft();        //Make sure the cursor is in the Top Left position
 80011c6:	f000 ffaf 	bl	8002128 <CursorTopLeft>
                blockingDelay10ms(1);
 80011ca:	2001      	movs	r0, #1
 80011cc:	f000 fb82 	bl	80018d4 <blockingDelay10ms>
                usr_number_u8 = 99;
 80011d0:	2363      	movs	r3, #99	; 0x63
 80011d2:	71fb      	strb	r3, [r7, #7]
            break;
 80011d4:	e001      	b.n	80011da <MainMenu+0x13e>

            default:
                usr_number_u8 = 99;
 80011d6:	2363      	movs	r3, #99	; 0x63
 80011d8:	71fb      	strb	r3, [r7, #7]
    while(usr_number_u8 != 99) {
 80011da:	79fb      	ldrb	r3, [r7, #7]
 80011dc:	2b63      	cmp	r3, #99	; 0x63
 80011de:	f47f af76 	bne.w	80010ce <MainMenu+0x32>
        }   //END Switch(usr_number_u8)
    }  //END while(glbinfo.rxchar != 99)

    print_string("Leaving console.",LF);
 80011e2:	2101      	movs	r1, #1
 80011e4:	4810      	ldr	r0, [pc, #64]	; (8001228 <MainMenu+0x18c>)
 80011e6:	f000 fef3 	bl	8001fd0 <print_string>

}
 80011ea:	bf00      	nop
 80011ec:	3708      	adds	r7, #8
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	20000208 	.word	0x20000208
 80011f8:	0800a280 	.word	0x0800a280
 80011fc:	0800a2a0 	.word	0x0800a2a0
 8001200:	0800a2b8 	.word	0x0800a2b8
 8001204:	0800a2d0 	.word	0x0800a2d0
 8001208:	0800a2e4 	.word	0x0800a2e4
 800120c:	0800a2f8 	.word	0x0800a2f8
 8001210:	20000300 	.word	0x20000300
 8001214:	0800a320 	.word	0x0800a320
 8001218:	408f4000 	.word	0x408f4000
 800121c:	3fe00000 	.word	0x3fe00000
 8001220:	0800a348 	.word	0x0800a348
 8001224:	0800a360 	.word	0x0800a360
 8001228:	0800a374 	.word	0x0800a374
 800122c:	00000000 	.word	0x00000000

08001230 <get_dac_data_value>:
  ******************************************************************************
  */

#include "dac.h"

uint16_t get_dac_data_value (float voltage_setting) {
 8001230:	b580      	push	{r7, lr}
 8001232:	b084      	sub	sp, #16
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
    uint16_t dac_data_value;
    dac_data_value = (uint16_t)(4096/3.3*voltage_setting);
 8001238:	6878      	ldr	r0, [r7, #4]
 800123a:	f7ff f961 	bl	8000500 <__aeabi_f2d>
 800123e:	a30a      	add	r3, pc, #40	; (adr r3, 8001268 <get_dac_data_value+0x38>)
 8001240:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001244:	f7ff f9b4 	bl	80005b0 <__aeabi_dmul>
 8001248:	4602      	mov	r2, r0
 800124a:	460b      	mov	r3, r1
 800124c:	4610      	mov	r0, r2
 800124e:	4619      	mov	r1, r3
 8001250:	f7ff fc86 	bl	8000b60 <__aeabi_d2uiz>
 8001254:	4603      	mov	r3, r0
 8001256:	81fb      	strh	r3, [r7, #14]
    return dac_data_value;
 8001258:	89fb      	ldrh	r3, [r7, #14]
}
 800125a:	4618      	mov	r0, r3
 800125c:	3710      	adds	r7, #16
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	f3af 8000 	nop.w
 8001268:	364d9365 	.word	0x364d9365
 800126c:	409364d9 	.word	0x409364d9

08001270 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001274:	f000 fff4 	bl	8002260 <HAL_Init>

  /* USER CODE BEGIN Init */
  time.led_fast_blink = false;
 8001278:	4b2d      	ldr	r3, [pc, #180]	; (8001330 <main+0xc0>)
 800127a:	2200      	movs	r2, #0
 800127c:	725a      	strb	r2, [r3, #9]
  time.flag_10ms_tick = false;
 800127e:	4b2c      	ldr	r3, [pc, #176]	; (8001330 <main+0xc0>)
 8001280:	2200      	movs	r2, #0
 8001282:	719a      	strb	r2, [r3, #6]
  time.flag_100ms_tick = false;
 8001284:	4b2a      	ldr	r3, [pc, #168]	; (8001330 <main+0xc0>)
 8001286:	2200      	movs	r2, #0
 8001288:	71da      	strb	r2, [r3, #7]
  time.flag_500ms_tick = false;
 800128a:	4b29      	ldr	r3, [pc, #164]	; (8001330 <main+0xc0>)
 800128c:	2200      	movs	r2, #0
 800128e:	721a      	strb	r2, [r3, #8]
  time.ticks10ms = 0;
 8001290:	4b27      	ldr	r3, [pc, #156]	; (8001330 <main+0xc0>)
 8001292:	2200      	movs	r2, #0
 8001294:	801a      	strh	r2, [r3, #0]
  time.ticks100ms = 0;
 8001296:	4b26      	ldr	r3, [pc, #152]	; (8001330 <main+0xc0>)
 8001298:	2200      	movs	r2, #0
 800129a:	805a      	strh	r2, [r3, #2]
  time.ticks500ms = 0;
 800129c:	4b24      	ldr	r3, [pc, #144]	; (8001330 <main+0xc0>)
 800129e:	2200      	movs	r2, #0
 80012a0:	809a      	strh	r2, [r3, #4]

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012a2:	f000 f855 	bl	8001350 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012a6:	f000 fa0d 	bl	80016c4 <MX_GPIO_Init>
  MX_ADC1_Init();
 80012aa:	f000 f8b5 	bl	8001418 <MX_ADC1_Init>
  MX_DAC_Init();
 80012ae:	f000 f8f1 	bl	8001494 <MX_DAC_Init>
  MX_I2C2_Init();
 80012b2:	f000 f919 	bl	80014e8 <MX_I2C2_Init>
  MX_SPI1_Init();
 80012b6:	f000 f945 	bl	8001544 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 80012ba:	f000 f9af 	bl	800161c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80012be:	f000 f9d7 	bl	8001670 <MX_USART2_UART_Init>
  MX_TIM6_Init();
 80012c2:	f000 f975 	bl	80015b0 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */


  // Must use Base Start IT if using interrupts
  HAL_TIM_Base_Start_IT(&htim6);
 80012c6:	481b      	ldr	r0, [pc, #108]	; (8001334 <main+0xc4>)
 80012c8:	f002 ffa8 	bl	800421c <HAL_TIM_Base_Start_IT>
  HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 80012cc:	2100      	movs	r1, #0
 80012ce:	481a      	ldr	r0, [pc, #104]	; (8001338 <main+0xc8>)
 80012d0:	f001 fb69 	bl	80029a6 <HAL_DAC_Start>

  HAL_UART_Receive_IT(&huart1, &uart.rxchar, 1);
 80012d4:	2201      	movs	r2, #1
 80012d6:	4919      	ldr	r1, [pc, #100]	; (800133c <main+0xcc>)
 80012d8:	4819      	ldr	r0, [pc, #100]	; (8001340 <main+0xd0>)
 80012da:	f003 fae8 	bl	80048ae <HAL_UART_Receive_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  if(time.flag_10ms_tick) {
 80012de:	4b14      	ldr	r3, [pc, #80]	; (8001330 <main+0xc0>)
 80012e0:	799b      	ldrb	r3, [r3, #6]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d00d      	beq.n	8001302 <main+0x92>
		  time.flag_10ms_tick = false;
 80012e6:	4b12      	ldr	r3, [pc, #72]	; (8001330 <main+0xc0>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	719a      	strb	r2, [r3, #6]
      if(uart.rxchar == 'z') {
 80012ec:	4b15      	ldr	r3, [pc, #84]	; (8001344 <main+0xd4>)
 80012ee:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80012f2:	2b7a      	cmp	r3, #122	; 0x7a
 80012f4:	d105      	bne.n	8001302 <main+0x92>
        MainMenu();
 80012f6:	f7ff fed1 	bl	800109c <MainMenu>
        uart.rxchar = '\0';
 80012fa:	4b12      	ldr	r3, [pc, #72]	; (8001344 <main+0xd4>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
	  }

	  if(time.flag_100ms_tick) {
 8001302:	4b0b      	ldr	r3, [pc, #44]	; (8001330 <main+0xc0>)
 8001304:	79db      	ldrb	r3, [r3, #7]
 8001306:	2b00      	cmp	r3, #0
 8001308:	d002      	beq.n	8001310 <main+0xa0>
	      time.flag_100ms_tick = false;
 800130a:	4b09      	ldr	r3, [pc, #36]	; (8001330 <main+0xc0>)
 800130c:	2200      	movs	r2, #0
 800130e:	71da      	strb	r2, [r3, #7]
	  }

	    if(time.flag_500ms_tick) {
 8001310:	4b07      	ldr	r3, [pc, #28]	; (8001330 <main+0xc0>)
 8001312:	7a1b      	ldrb	r3, [r3, #8]
 8001314:	2b00      	cmp	r3, #0
 8001316:	d0e2      	beq.n	80012de <main+0x6e>
	      time.flag_500ms_tick = false;
 8001318:	4b05      	ldr	r3, [pc, #20]	; (8001330 <main+0xc0>)
 800131a:	2200      	movs	r2, #0
 800131c:	721a      	strb	r2, [r3, #8]
	      HAL_GPIO_TogglePin(HLTH_LED_GPIO_Port, HLTH_LED_Pin);
 800131e:	2101      	movs	r1, #1
 8001320:	4809      	ldr	r0, [pc, #36]	; (8001348 <main+0xd8>)
 8001322:	f001 fee1 	bl	80030e8 <HAL_GPIO_TogglePin>
        print_string(".",0);
 8001326:	2100      	movs	r1, #0
 8001328:	4808      	ldr	r0, [pc, #32]	; (800134c <main+0xdc>)
 800132a:	f000 fe51 	bl	8001fd0 <print_string>
	  if(time.flag_10ms_tick) {
 800132e:	e7d6      	b.n	80012de <main+0x6e>
 8001330:	2000035c 	.word	0x2000035c
 8001334:	20000314 	.word	0x20000314
 8001338:	20000300 	.word	0x20000300
 800133c:	20000229 	.word	0x20000229
 8001340:	200002bc 	.word	0x200002bc
 8001344:	20000208 	.word	0x20000208
 8001348:	40011000 	.word	0x40011000
 800134c:	0800a388 	.word	0x0800a388

08001350 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b09c      	sub	sp, #112	; 0x70
 8001354:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001356:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800135a:	2238      	movs	r2, #56	; 0x38
 800135c:	2100      	movs	r1, #0
 800135e:	4618      	mov	r0, r3
 8001360:	f003 ff28 	bl	80051b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001364:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001368:	2200      	movs	r2, #0
 800136a:	601a      	str	r2, [r3, #0]
 800136c:	605a      	str	r2, [r3, #4]
 800136e:	609a      	str	r2, [r3, #8]
 8001370:	60da      	str	r2, [r3, #12]
 8001372:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001374:	1d3b      	adds	r3, r7, #4
 8001376:	2220      	movs	r2, #32
 8001378:	2100      	movs	r1, #0
 800137a:	4618      	mov	r0, r3
 800137c:	f003 ff1a 	bl	80051b4 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001380:	2301      	movs	r3, #1
 8001382:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001384:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001388:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 800138a:	2301      	movs	r3, #1
 800138c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800138e:	2301      	movs	r3, #1
 8001390:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.Prediv1Source = RCC_PREDIV1_SOURCE_HSE;
 8001392:	2300      	movs	r3, #0
 8001394:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001396:	2302      	movs	r3, #2
 8001398:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800139a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800139e:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80013a0:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80013a4:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL2.PLL2State = RCC_PLL_NONE;
 80013a6:	2300      	movs	r3, #0
 80013a8:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013aa:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80013ae:	4618      	mov	r0, r3
 80013b0:	f001 fff8 	bl	80033a4 <HAL_RCC_OscConfig>
 80013b4:	4603      	mov	r3, r0
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d001      	beq.n	80013be <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80013ba:	f000 fad3 	bl	8001964 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013be:	230f      	movs	r3, #15
 80013c0:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013c2:	2302      	movs	r3, #2
 80013c4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013c6:	2300      	movs	r3, #0
 80013c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80013ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80013ce:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013d0:	2300      	movs	r3, #0
 80013d2:	637b      	str	r3, [r7, #52]	; 0x34

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80013d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013d8:	2102      	movs	r1, #2
 80013da:	4618      	mov	r0, r3
 80013dc:	f002 faf8 	bl	80039d0 <HAL_RCC_ClockConfig>
 80013e0:	4603      	mov	r3, r0
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d001      	beq.n	80013ea <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80013e6:	f000 fabd 	bl	8001964 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80013ea:	2302      	movs	r3, #2
 80013ec:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80013ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80013f2:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013f4:	1d3b      	adds	r3, r7, #4
 80013f6:	4618      	mov	r0, r3
 80013f8:	f002 fd0a 	bl	8003e10 <HAL_RCCEx_PeriphCLKConfig>
 80013fc:	4603      	mov	r3, r0
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d001      	beq.n	8001406 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8001402:	f000 faaf 	bl	8001964 <Error_Handler>
  }
  /** Configure the Systick interrupt time
  */
  __HAL_RCC_PLLI2S_ENABLE();
 8001406:	4b03      	ldr	r3, [pc, #12]	; (8001414 <SystemClock_Config+0xc4>)
 8001408:	2201      	movs	r2, #1
 800140a:	601a      	str	r2, [r3, #0]
}
 800140c:	bf00      	nop
 800140e:	3770      	adds	r7, #112	; 0x70
 8001410:	46bd      	mov	sp, r7
 8001412:	bd80      	pop	{r7, pc}
 8001414:	42420070 	.word	0x42420070

08001418 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b084      	sub	sp, #16
 800141c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800141e:	1d3b      	adds	r3, r7, #4
 8001420:	2200      	movs	r2, #0
 8001422:	601a      	str	r2, [r3, #0]
 8001424:	605a      	str	r2, [r3, #4]
 8001426:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8001428:	4b18      	ldr	r3, [pc, #96]	; (800148c <MX_ADC1_Init+0x74>)
 800142a:	4a19      	ldr	r2, [pc, #100]	; (8001490 <MX_ADC1_Init+0x78>)
 800142c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800142e:	4b17      	ldr	r3, [pc, #92]	; (800148c <MX_ADC1_Init+0x74>)
 8001430:	2200      	movs	r2, #0
 8001432:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001434:	4b15      	ldr	r3, [pc, #84]	; (800148c <MX_ADC1_Init+0x74>)
 8001436:	2200      	movs	r2, #0
 8001438:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800143a:	4b14      	ldr	r3, [pc, #80]	; (800148c <MX_ADC1_Init+0x74>)
 800143c:	2200      	movs	r2, #0
 800143e:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001440:	4b12      	ldr	r3, [pc, #72]	; (800148c <MX_ADC1_Init+0x74>)
 8001442:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001446:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001448:	4b10      	ldr	r3, [pc, #64]	; (800148c <MX_ADC1_Init+0x74>)
 800144a:	2200      	movs	r2, #0
 800144c:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800144e:	4b0f      	ldr	r3, [pc, #60]	; (800148c <MX_ADC1_Init+0x74>)
 8001450:	2201      	movs	r2, #1
 8001452:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001454:	480d      	ldr	r0, [pc, #52]	; (800148c <MX_ADC1_Init+0x74>)
 8001456:	f000 ff65 	bl	8002324 <HAL_ADC_Init>
 800145a:	4603      	mov	r3, r0
 800145c:	2b00      	cmp	r3, #0
 800145e:	d001      	beq.n	8001464 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8001460:	f000 fa80 	bl	8001964 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001464:	2300      	movs	r3, #0
 8001466:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001468:	2301      	movs	r3, #1
 800146a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800146c:	2300      	movs	r3, #0
 800146e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001470:	1d3b      	adds	r3, r7, #4
 8001472:	4619      	mov	r1, r3
 8001474:	4805      	ldr	r0, [pc, #20]	; (800148c <MX_ADC1_Init+0x74>)
 8001476:	f001 f82d 	bl	80024d4 <HAL_ADC_ConfigChannel>
 800147a:	4603      	mov	r3, r0
 800147c:	2b00      	cmp	r3, #0
 800147e:	d001      	beq.n	8001484 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8001480:	f000 fa70 	bl	8001964 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001484:	bf00      	nop
 8001486:	3710      	adds	r7, #16
 8001488:	46bd      	mov	sp, r7
 800148a:	bd80      	pop	{r7, pc}
 800148c:	2000028c 	.word	0x2000028c
 8001490:	40012400 	.word	0x40012400

08001494 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b082      	sub	sp, #8
 8001498:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800149a:	463b      	mov	r3, r7
 800149c:	2200      	movs	r2, #0
 800149e:	601a      	str	r2, [r3, #0]
 80014a0:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 80014a2:	4b0f      	ldr	r3, [pc, #60]	; (80014e0 <MX_DAC_Init+0x4c>)
 80014a4:	4a0f      	ldr	r2, [pc, #60]	; (80014e4 <MX_DAC_Init+0x50>)
 80014a6:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80014a8:	480d      	ldr	r0, [pc, #52]	; (80014e0 <MX_DAC_Init+0x4c>)
 80014aa:	f001 fa5a 	bl	8002962 <HAL_DAC_Init>
 80014ae:	4603      	mov	r3, r0
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d001      	beq.n	80014b8 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 80014b4:	f000 fa56 	bl	8001964 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80014b8:	2300      	movs	r3, #0
 80014ba:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80014bc:	2300      	movs	r3, #0
 80014be:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80014c0:	463b      	mov	r3, r7
 80014c2:	2200      	movs	r2, #0
 80014c4:	4619      	mov	r1, r3
 80014c6:	4806      	ldr	r0, [pc, #24]	; (80014e0 <MX_DAC_Init+0x4c>)
 80014c8:	f001 fae2 	bl	8002a90 <HAL_DAC_ConfigChannel>
 80014cc:	4603      	mov	r3, r0
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d001      	beq.n	80014d6 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 80014d2:	f000 fa47 	bl	8001964 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 80014d6:	bf00      	nop
 80014d8:	3708      	adds	r7, #8
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	20000300 	.word	0x20000300
 80014e4:	40007400 	.word	0x40007400

080014e8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80014ec:	4b12      	ldr	r3, [pc, #72]	; (8001538 <MX_I2C2_Init+0x50>)
 80014ee:	4a13      	ldr	r2, [pc, #76]	; (800153c <MX_I2C2_Init+0x54>)
 80014f0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80014f2:	4b11      	ldr	r3, [pc, #68]	; (8001538 <MX_I2C2_Init+0x50>)
 80014f4:	4a12      	ldr	r2, [pc, #72]	; (8001540 <MX_I2C2_Init+0x58>)
 80014f6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80014f8:	4b0f      	ldr	r3, [pc, #60]	; (8001538 <MX_I2C2_Init+0x50>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80014fe:	4b0e      	ldr	r3, [pc, #56]	; (8001538 <MX_I2C2_Init+0x50>)
 8001500:	2200      	movs	r2, #0
 8001502:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001504:	4b0c      	ldr	r3, [pc, #48]	; (8001538 <MX_I2C2_Init+0x50>)
 8001506:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800150a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800150c:	4b0a      	ldr	r3, [pc, #40]	; (8001538 <MX_I2C2_Init+0x50>)
 800150e:	2200      	movs	r2, #0
 8001510:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001512:	4b09      	ldr	r3, [pc, #36]	; (8001538 <MX_I2C2_Init+0x50>)
 8001514:	2200      	movs	r2, #0
 8001516:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001518:	4b07      	ldr	r3, [pc, #28]	; (8001538 <MX_I2C2_Init+0x50>)
 800151a:	2200      	movs	r2, #0
 800151c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800151e:	4b06      	ldr	r3, [pc, #24]	; (8001538 <MX_I2C2_Init+0x50>)
 8001520:	2200      	movs	r2, #0
 8001522:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001524:	4804      	ldr	r0, [pc, #16]	; (8001538 <MX_I2C2_Init+0x50>)
 8001526:	f001 fdf9 	bl	800311c <HAL_I2C_Init>
 800152a:	4603      	mov	r3, r0
 800152c:	2b00      	cmp	r3, #0
 800152e:	d001      	beq.n	8001534 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001530:	f000 fa18 	bl	8001964 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001534:	bf00      	nop
 8001536:	bd80      	pop	{r7, pc}
 8001538:	20000238 	.word	0x20000238
 800153c:	40005800 	.word	0x40005800
 8001540:	000186a0 	.word	0x000186a0

08001544 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001548:	4b17      	ldr	r3, [pc, #92]	; (80015a8 <MX_SPI1_Init+0x64>)
 800154a:	4a18      	ldr	r2, [pc, #96]	; (80015ac <MX_SPI1_Init+0x68>)
 800154c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800154e:	4b16      	ldr	r3, [pc, #88]	; (80015a8 <MX_SPI1_Init+0x64>)
 8001550:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001554:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001556:	4b14      	ldr	r3, [pc, #80]	; (80015a8 <MX_SPI1_Init+0x64>)
 8001558:	2200      	movs	r2, #0
 800155a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800155c:	4b12      	ldr	r3, [pc, #72]	; (80015a8 <MX_SPI1_Init+0x64>)
 800155e:	2200      	movs	r2, #0
 8001560:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001562:	4b11      	ldr	r3, [pc, #68]	; (80015a8 <MX_SPI1_Init+0x64>)
 8001564:	2200      	movs	r2, #0
 8001566:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001568:	4b0f      	ldr	r3, [pc, #60]	; (80015a8 <MX_SPI1_Init+0x64>)
 800156a:	2200      	movs	r2, #0
 800156c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800156e:	4b0e      	ldr	r3, [pc, #56]	; (80015a8 <MX_SPI1_Init+0x64>)
 8001570:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001574:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8001576:	4b0c      	ldr	r3, [pc, #48]	; (80015a8 <MX_SPI1_Init+0x64>)
 8001578:	2230      	movs	r2, #48	; 0x30
 800157a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800157c:	4b0a      	ldr	r3, [pc, #40]	; (80015a8 <MX_SPI1_Init+0x64>)
 800157e:	2200      	movs	r2, #0
 8001580:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001582:	4b09      	ldr	r3, [pc, #36]	; (80015a8 <MX_SPI1_Init+0x64>)
 8001584:	2200      	movs	r2, #0
 8001586:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001588:	4b07      	ldr	r3, [pc, #28]	; (80015a8 <MX_SPI1_Init+0x64>)
 800158a:	2200      	movs	r2, #0
 800158c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800158e:	4b06      	ldr	r3, [pc, #24]	; (80015a8 <MX_SPI1_Init+0x64>)
 8001590:	220a      	movs	r2, #10
 8001592:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001594:	4804      	ldr	r0, [pc, #16]	; (80015a8 <MX_SPI1_Init+0x64>)
 8001596:	f002 fd6d 	bl	8004074 <HAL_SPI_Init>
 800159a:	4603      	mov	r3, r0
 800159c:	2b00      	cmp	r3, #0
 800159e:	d001      	beq.n	80015a4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80015a0:	f000 f9e0 	bl	8001964 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80015a4:	bf00      	nop
 80015a6:	bd80      	pop	{r7, pc}
 80015a8:	20000368 	.word	0x20000368
 80015ac:	40013000 	.word	0x40013000

080015b0 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b082      	sub	sp, #8
 80015b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015b6:	463b      	mov	r3, r7
 80015b8:	2200      	movs	r2, #0
 80015ba:	601a      	str	r2, [r3, #0]
 80015bc:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80015be:	4b15      	ldr	r3, [pc, #84]	; (8001614 <MX_TIM6_Init+0x64>)
 80015c0:	4a15      	ldr	r2, [pc, #84]	; (8001618 <MX_TIM6_Init+0x68>)
 80015c2:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 72-1;
 80015c4:	4b13      	ldr	r3, [pc, #76]	; (8001614 <MX_TIM6_Init+0x64>)
 80015c6:	2247      	movs	r2, #71	; 0x47
 80015c8:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015ca:	4b12      	ldr	r3, [pc, #72]	; (8001614 <MX_TIM6_Init+0x64>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 10000-1;
 80015d0:	4b10      	ldr	r3, [pc, #64]	; (8001614 <MX_TIM6_Init+0x64>)
 80015d2:	f242 720f 	movw	r2, #9999	; 0x270f
 80015d6:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80015d8:	4b0e      	ldr	r3, [pc, #56]	; (8001614 <MX_TIM6_Init+0x64>)
 80015da:	2280      	movs	r2, #128	; 0x80
 80015dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80015de:	480d      	ldr	r0, [pc, #52]	; (8001614 <MX_TIM6_Init+0x64>)
 80015e0:	f002 fdcc 	bl	800417c <HAL_TIM_Base_Init>
 80015e4:	4603      	mov	r3, r0
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d001      	beq.n	80015ee <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 80015ea:	f000 f9bb 	bl	8001964 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015ee:	2300      	movs	r3, #0
 80015f0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015f2:	2300      	movs	r3, #0
 80015f4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80015f6:	463b      	mov	r3, r7
 80015f8:	4619      	mov	r1, r3
 80015fa:	4806      	ldr	r0, [pc, #24]	; (8001614 <MX_TIM6_Init+0x64>)
 80015fc:	f003 f800 	bl	8004600 <HAL_TIMEx_MasterConfigSynchronization>
 8001600:	4603      	mov	r3, r0
 8001602:	2b00      	cmp	r3, #0
 8001604:	d001      	beq.n	800160a <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8001606:	f000 f9ad 	bl	8001964 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800160a:	bf00      	nop
 800160c:	3708      	adds	r7, #8
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	20000314 	.word	0x20000314
 8001618:	40001000 	.word	0x40001000

0800161c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001620:	4b11      	ldr	r3, [pc, #68]	; (8001668 <MX_USART1_UART_Init+0x4c>)
 8001622:	4a12      	ldr	r2, [pc, #72]	; (800166c <MX_USART1_UART_Init+0x50>)
 8001624:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001626:	4b10      	ldr	r3, [pc, #64]	; (8001668 <MX_USART1_UART_Init+0x4c>)
 8001628:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800162c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800162e:	4b0e      	ldr	r3, [pc, #56]	; (8001668 <MX_USART1_UART_Init+0x4c>)
 8001630:	2200      	movs	r2, #0
 8001632:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001634:	4b0c      	ldr	r3, [pc, #48]	; (8001668 <MX_USART1_UART_Init+0x4c>)
 8001636:	2200      	movs	r2, #0
 8001638:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800163a:	4b0b      	ldr	r3, [pc, #44]	; (8001668 <MX_USART1_UART_Init+0x4c>)
 800163c:	2200      	movs	r2, #0
 800163e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001640:	4b09      	ldr	r3, [pc, #36]	; (8001668 <MX_USART1_UART_Init+0x4c>)
 8001642:	220c      	movs	r2, #12
 8001644:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001646:	4b08      	ldr	r3, [pc, #32]	; (8001668 <MX_USART1_UART_Init+0x4c>)
 8001648:	2200      	movs	r2, #0
 800164a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800164c:	4b06      	ldr	r3, [pc, #24]	; (8001668 <MX_USART1_UART_Init+0x4c>)
 800164e:	2200      	movs	r2, #0
 8001650:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001652:	4805      	ldr	r0, [pc, #20]	; (8001668 <MX_USART1_UART_Init+0x4c>)
 8001654:	f003 f84c 	bl	80046f0 <HAL_UART_Init>
 8001658:	4603      	mov	r3, r0
 800165a:	2b00      	cmp	r3, #0
 800165c:	d001      	beq.n	8001662 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800165e:	f000 f981 	bl	8001964 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001662:	bf00      	nop
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	200002bc 	.word	0x200002bc
 800166c:	40013800 	.word	0x40013800

08001670 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001674:	4b11      	ldr	r3, [pc, #68]	; (80016bc <MX_USART2_UART_Init+0x4c>)
 8001676:	4a12      	ldr	r2, [pc, #72]	; (80016c0 <MX_USART2_UART_Init+0x50>)
 8001678:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800167a:	4b10      	ldr	r3, [pc, #64]	; (80016bc <MX_USART2_UART_Init+0x4c>)
 800167c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001680:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001682:	4b0e      	ldr	r3, [pc, #56]	; (80016bc <MX_USART2_UART_Init+0x4c>)
 8001684:	2200      	movs	r2, #0
 8001686:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001688:	4b0c      	ldr	r3, [pc, #48]	; (80016bc <MX_USART2_UART_Init+0x4c>)
 800168a:	2200      	movs	r2, #0
 800168c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800168e:	4b0b      	ldr	r3, [pc, #44]	; (80016bc <MX_USART2_UART_Init+0x4c>)
 8001690:	2200      	movs	r2, #0
 8001692:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001694:	4b09      	ldr	r3, [pc, #36]	; (80016bc <MX_USART2_UART_Init+0x4c>)
 8001696:	220c      	movs	r2, #12
 8001698:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800169a:	4b08      	ldr	r3, [pc, #32]	; (80016bc <MX_USART2_UART_Init+0x4c>)
 800169c:	2200      	movs	r2, #0
 800169e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80016a0:	4b06      	ldr	r3, [pc, #24]	; (80016bc <MX_USART2_UART_Init+0x4c>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80016a6:	4805      	ldr	r0, [pc, #20]	; (80016bc <MX_USART2_UART_Init+0x4c>)
 80016a8:	f003 f822 	bl	80046f0 <HAL_UART_Init>
 80016ac:	4603      	mov	r3, r0
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d001      	beq.n	80016b6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80016b2:	f000 f957 	bl	8001964 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80016b6:	bf00      	nop
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	200003c0 	.word	0x200003c0
 80016c0:	40004400 	.word	0x40004400

080016c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b088      	sub	sp, #32
 80016c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016ca:	f107 0310 	add.w	r3, r7, #16
 80016ce:	2200      	movs	r2, #0
 80016d0:	601a      	str	r2, [r3, #0]
 80016d2:	605a      	str	r2, [r3, #4]
 80016d4:	609a      	str	r2, [r3, #8]
 80016d6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016d8:	4b3c      	ldr	r3, [pc, #240]	; (80017cc <MX_GPIO_Init+0x108>)
 80016da:	699b      	ldr	r3, [r3, #24]
 80016dc:	4a3b      	ldr	r2, [pc, #236]	; (80017cc <MX_GPIO_Init+0x108>)
 80016de:	f043 0310 	orr.w	r3, r3, #16
 80016e2:	6193      	str	r3, [r2, #24]
 80016e4:	4b39      	ldr	r3, [pc, #228]	; (80017cc <MX_GPIO_Init+0x108>)
 80016e6:	699b      	ldr	r3, [r3, #24]
 80016e8:	f003 0310 	and.w	r3, r3, #16
 80016ec:	60fb      	str	r3, [r7, #12]
 80016ee:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80016f0:	4b36      	ldr	r3, [pc, #216]	; (80017cc <MX_GPIO_Init+0x108>)
 80016f2:	699b      	ldr	r3, [r3, #24]
 80016f4:	4a35      	ldr	r2, [pc, #212]	; (80017cc <MX_GPIO_Init+0x108>)
 80016f6:	f043 0320 	orr.w	r3, r3, #32
 80016fa:	6193      	str	r3, [r2, #24]
 80016fc:	4b33      	ldr	r3, [pc, #204]	; (80017cc <MX_GPIO_Init+0x108>)
 80016fe:	699b      	ldr	r3, [r3, #24]
 8001700:	f003 0320 	and.w	r3, r3, #32
 8001704:	60bb      	str	r3, [r7, #8]
 8001706:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001708:	4b30      	ldr	r3, [pc, #192]	; (80017cc <MX_GPIO_Init+0x108>)
 800170a:	699b      	ldr	r3, [r3, #24]
 800170c:	4a2f      	ldr	r2, [pc, #188]	; (80017cc <MX_GPIO_Init+0x108>)
 800170e:	f043 0304 	orr.w	r3, r3, #4
 8001712:	6193      	str	r3, [r2, #24]
 8001714:	4b2d      	ldr	r3, [pc, #180]	; (80017cc <MX_GPIO_Init+0x108>)
 8001716:	699b      	ldr	r3, [r3, #24]
 8001718:	f003 0304 	and.w	r3, r3, #4
 800171c:	607b      	str	r3, [r7, #4]
 800171e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001720:	4b2a      	ldr	r3, [pc, #168]	; (80017cc <MX_GPIO_Init+0x108>)
 8001722:	699b      	ldr	r3, [r3, #24]
 8001724:	4a29      	ldr	r2, [pc, #164]	; (80017cc <MX_GPIO_Init+0x108>)
 8001726:	f043 0308 	orr.w	r3, r3, #8
 800172a:	6193      	str	r3, [r2, #24]
 800172c:	4b27      	ldr	r3, [pc, #156]	; (80017cc <MX_GPIO_Init+0x108>)
 800172e:	699b      	ldr	r3, [r3, #24]
 8001730:	f003 0308 	and.w	r3, r3, #8
 8001734:	603b      	str	r3, [r7, #0]
 8001736:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(HLTH_LED_GPIO_Port, HLTH_LED_Pin, GPIO_PIN_RESET);
 8001738:	2200      	movs	r2, #0
 800173a:	2101      	movs	r1, #1
 800173c:	4824      	ldr	r0, [pc, #144]	; (80017d0 <MX_GPIO_Init+0x10c>)
 800173e:	f001 fcbb 	bl	80030b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, EXT_LED_1_Pin|EXT_LED_2_Pin|EXT_LED_3_Pin, GPIO_PIN_SET);
 8001742:	2201      	movs	r2, #1
 8001744:	2170      	movs	r1, #112	; 0x70
 8001746:	4822      	ldr	r0, [pc, #136]	; (80017d0 <MX_GPIO_Init+0x10c>)
 8001748:	f001 fcb6 	bl	80030b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CH1_8_ANSW_CS_n_Pin|CH1_8_ADC_CS_n_Pin|CH9_12_ADC_CS_n_Pin|CH9_12_ANSW_CS_n_Pin
 800174c:	2200      	movs	r2, #0
 800174e:	f24f 0140 	movw	r1, #61504	; 0xf040
 8001752:	4820      	ldr	r0, [pc, #128]	; (80017d4 <MX_GPIO_Init+0x110>)
 8001754:	f001 fcb0 	bl	80030b8 <HAL_GPIO_WritePin>
                          |XB_RST_n_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : HW_REV_0_Pin HW_REV_1_Pin HW_REV_2_Pin PBTN_1_Pin
                           pbtn_2_Pin */
  GPIO_InitStruct.Pin = HW_REV_0_Pin|HW_REV_1_Pin|HW_REV_2_Pin|PBTN_1_Pin
 8001758:	f24e 0306 	movw	r3, #57350	; 0xe006
 800175c:	613b      	str	r3, [r7, #16]
                          |pbtn_2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800175e:	2300      	movs	r3, #0
 8001760:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001762:	2300      	movs	r3, #0
 8001764:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001766:	f107 0310 	add.w	r3, r7, #16
 800176a:	4619      	mov	r1, r3
 800176c:	4818      	ldr	r0, [pc, #96]	; (80017d0 <MX_GPIO_Init+0x10c>)
 800176e:	f001 fb1f 	bl	8002db0 <HAL_GPIO_Init>

  /*Configure GPIO pins : HLTH_LED_Pin EXT_LED_1_Pin EXT_LED_2_Pin EXT_LED_3_Pin */
  GPIO_InitStruct.Pin = HLTH_LED_Pin|EXT_LED_1_Pin|EXT_LED_2_Pin|EXT_LED_3_Pin;
 8001772:	2371      	movs	r3, #113	; 0x71
 8001774:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001776:	2301      	movs	r3, #1
 8001778:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800177a:	2300      	movs	r3, #0
 800177c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800177e:	2302      	movs	r3, #2
 8001780:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001782:	f107 0310 	add.w	r3, r7, #16
 8001786:	4619      	mov	r1, r3
 8001788:	4811      	ldr	r0, [pc, #68]	; (80017d0 <MX_GPIO_Init+0x10c>)
 800178a:	f001 fb11 	bl	8002db0 <HAL_GPIO_Init>

  /*Configure GPIO pins : CH1_8_ANSW_CS_n_Pin CH1_8_ADC_CS_n_Pin CH9_12_ADC_CS_n_Pin CH9_12_ANSW_CS_n_Pin
                           XB_RST_n_Pin */
  GPIO_InitStruct.Pin = CH1_8_ANSW_CS_n_Pin|CH1_8_ADC_CS_n_Pin|CH9_12_ADC_CS_n_Pin|CH9_12_ANSW_CS_n_Pin
 800178e:	f24f 0340 	movw	r3, #61504	; 0xf040
 8001792:	613b      	str	r3, [r7, #16]
                          |XB_RST_n_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001794:	2301      	movs	r3, #1
 8001796:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001798:	2300      	movs	r3, #0
 800179a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800179c:	2302      	movs	r3, #2
 800179e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017a0:	f107 0310 	add.w	r3, r7, #16
 80017a4:	4619      	mov	r1, r3
 80017a6:	480b      	ldr	r0, [pc, #44]	; (80017d4 <MX_GPIO_Init+0x110>)
 80017a8:	f001 fb02 	bl	8002db0 <HAL_GPIO_Init>

  /*Configure GPIO pin : XB_ON_Pin */
  GPIO_InitStruct.Pin = XB_ON_Pin;
 80017ac:	2320      	movs	r3, #32
 80017ae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017b0:	2300      	movs	r3, #0
 80017b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b4:	2300      	movs	r3, #0
 80017b6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(XB_ON_GPIO_Port, &GPIO_InitStruct);
 80017b8:	f107 0310 	add.w	r3, r7, #16
 80017bc:	4619      	mov	r1, r3
 80017be:	4805      	ldr	r0, [pc, #20]	; (80017d4 <MX_GPIO_Init+0x110>)
 80017c0:	f001 faf6 	bl	8002db0 <HAL_GPIO_Init>

}
 80017c4:	bf00      	nop
 80017c6:	3720      	adds	r7, #32
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bd80      	pop	{r7, pc}
 80017cc:	40021000 	.word	0x40021000
 80017d0:	40011000 	.word	0x40011000
 80017d4:	40010c00 	.word	0x40010c00

080017d8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
/********************************************//**
 *  @brief Handle Timer Interrupts 
 ***********************************************/
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80017d8:	b480      	push	{r7}
 80017da:	b083      	sub	sp, #12
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
	if(htim == &htim6){
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	4a1d      	ldr	r2, [pc, #116]	; (8001858 <HAL_TIM_PeriodElapsedCallback+0x80>)
 80017e4:	4293      	cmp	r3, r2
 80017e6:	d132      	bne.n	800184e <HAL_TIM_PeriodElapsedCallback+0x76>
			time.flag_10ms_tick = true;
 80017e8:	4b1c      	ldr	r3, [pc, #112]	; (800185c <HAL_TIM_PeriodElapsedCallback+0x84>)
 80017ea:	2201      	movs	r2, #1
 80017ec:	719a      	strb	r2, [r3, #6]

		 if(time.ticks10ms == 9) {
 80017ee:	4b1b      	ldr	r3, [pc, #108]	; (800185c <HAL_TIM_PeriodElapsedCallback+0x84>)
 80017f0:	881b      	ldrh	r3, [r3, #0]
 80017f2:	2b09      	cmp	r3, #9
 80017f4:	d125      	bne.n	8001842 <HAL_TIM_PeriodElapsedCallback+0x6a>
		   time.ticks10ms = 0;
 80017f6:	4b19      	ldr	r3, [pc, #100]	; (800185c <HAL_TIM_PeriodElapsedCallback+0x84>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	801a      	strh	r2, [r3, #0]
		   time.flag_100ms_tick = true;
 80017fc:	4b17      	ldr	r3, [pc, #92]	; (800185c <HAL_TIM_PeriodElapsedCallback+0x84>)
 80017fe:	2201      	movs	r2, #1
 8001800:	71da      	strb	r2, [r3, #7]

		   if(time.ticks100ms == 4) {
 8001802:	4b16      	ldr	r3, [pc, #88]	; (800185c <HAL_TIM_PeriodElapsedCallback+0x84>)
 8001804:	885b      	ldrh	r3, [r3, #2]
 8001806:	2b04      	cmp	r3, #4
 8001808:	d114      	bne.n	8001834 <HAL_TIM_PeriodElapsedCallback+0x5c>
			 time.ticks100ms = 0;
 800180a:	4b14      	ldr	r3, [pc, #80]	; (800185c <HAL_TIM_PeriodElapsedCallback+0x84>)
 800180c:	2200      	movs	r2, #0
 800180e:	805a      	strh	r2, [r3, #2]
			 time.flag_500ms_tick = true;
 8001810:	4b12      	ldr	r3, [pc, #72]	; (800185c <HAL_TIM_PeriodElapsedCallback+0x84>)
 8001812:	2201      	movs	r2, #1
 8001814:	721a      	strb	r2, [r3, #8]

			 if(time.ticks500ms == 119)										// One minute worth of half seconds
 8001816:	4b11      	ldr	r3, [pc, #68]	; (800185c <HAL_TIM_PeriodElapsedCallback+0x84>)
 8001818:	889b      	ldrh	r3, [r3, #4]
 800181a:	2b77      	cmp	r3, #119	; 0x77
 800181c:	d103      	bne.n	8001826 <HAL_TIM_PeriodElapsedCallback+0x4e>
			   time.ticks500ms = 0;
 800181e:	4b0f      	ldr	r3, [pc, #60]	; (800185c <HAL_TIM_PeriodElapsedCallback+0x84>)
 8001820:	2200      	movs	r2, #0
 8001822:	809a      	strh	r2, [r3, #4]
		 else {
		   time.ticks10ms += 1;
		 }

		}
}
 8001824:	e013      	b.n	800184e <HAL_TIM_PeriodElapsedCallback+0x76>
			   time.ticks500ms += 1;
 8001826:	4b0d      	ldr	r3, [pc, #52]	; (800185c <HAL_TIM_PeriodElapsedCallback+0x84>)
 8001828:	889b      	ldrh	r3, [r3, #4]
 800182a:	3301      	adds	r3, #1
 800182c:	b29a      	uxth	r2, r3
 800182e:	4b0b      	ldr	r3, [pc, #44]	; (800185c <HAL_TIM_PeriodElapsedCallback+0x84>)
 8001830:	809a      	strh	r2, [r3, #4]
}
 8001832:	e00c      	b.n	800184e <HAL_TIM_PeriodElapsedCallback+0x76>
			   time.ticks100ms += 1;
 8001834:	4b09      	ldr	r3, [pc, #36]	; (800185c <HAL_TIM_PeriodElapsedCallback+0x84>)
 8001836:	885b      	ldrh	r3, [r3, #2]
 8001838:	3301      	adds	r3, #1
 800183a:	b29a      	uxth	r2, r3
 800183c:	4b07      	ldr	r3, [pc, #28]	; (800185c <HAL_TIM_PeriodElapsedCallback+0x84>)
 800183e:	805a      	strh	r2, [r3, #2]
}
 8001840:	e005      	b.n	800184e <HAL_TIM_PeriodElapsedCallback+0x76>
		   time.ticks10ms += 1;
 8001842:	4b06      	ldr	r3, [pc, #24]	; (800185c <HAL_TIM_PeriodElapsedCallback+0x84>)
 8001844:	881b      	ldrh	r3, [r3, #0]
 8001846:	3301      	adds	r3, #1
 8001848:	b29a      	uxth	r2, r3
 800184a:	4b04      	ldr	r3, [pc, #16]	; (800185c <HAL_TIM_PeriodElapsedCallback+0x84>)
 800184c:	801a      	strh	r2, [r3, #0]
}
 800184e:	bf00      	nop
 8001850:	370c      	adds	r7, #12
 8001852:	46bd      	mov	sp, r7
 8001854:	bc80      	pop	{r7}
 8001856:	4770      	bx	lr
 8001858:	20000314 	.word	0x20000314
 800185c:	2000035c 	.word	0x2000035c

08001860 <HAL_UART_RxCpltCallback>:

/********************************************//**
 *  @brief Handle UART RX interrupts 
 ***********************************************/
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001860:	b580      	push	{r7, lr}
 8001862:	b082      	sub	sp, #8
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
	if(huart == &huart1) {
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	4a17      	ldr	r2, [pc, #92]	; (80018c8 <HAL_UART_RxCpltCallback+0x68>)
 800186c:	4293      	cmp	r3, r2
 800186e:	d127      	bne.n	80018c0 <HAL_UART_RxCpltCallback+0x60>

    uart.rxbuf[uart.producer_index] = uart.rxchar;          // Load this byte into rx buffer  
 8001870:	4b16      	ldr	r3, [pc, #88]	; (80018cc <HAL_UART_RxCpltCallback+0x6c>)
 8001872:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8001876:	461a      	mov	r2, r3
 8001878:	4b14      	ldr	r3, [pc, #80]	; (80018cc <HAL_UART_RxCpltCallback+0x6c>)
 800187a:	f893 1021 	ldrb.w	r1, [r3, #33]	; 0x21
 800187e:	4b13      	ldr	r3, [pc, #76]	; (80018cc <HAL_UART_RxCpltCallback+0x6c>)
 8001880:	5499      	strb	r1, [r3, r2]
    uart.byte_counter++;                                                   //Increase data counter
 8001882:	4b12      	ldr	r3, [pc, #72]	; (80018cc <HAL_UART_RxCpltCallback+0x6c>)
 8001884:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001888:	3301      	adds	r3, #1
 800188a:	b2da      	uxtb	r2, r3
 800188c:	4b0f      	ldr	r3, [pc, #60]	; (80018cc <HAL_UART_RxCpltCallback+0x6c>)
 800188e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    (uart.producer_index >= MAX_RX_BUF_INDEX) ? (uart.producer_index = 0):(uart.producer_index++);       
 8001892:	4b0e      	ldr	r3, [pc, #56]	; (80018cc <HAL_UART_RxCpltCallback+0x6c>)
 8001894:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8001898:	2b1f      	cmp	r3, #31
 800189a:	d904      	bls.n	80018a6 <HAL_UART_RxCpltCallback+0x46>
 800189c:	4b0b      	ldr	r3, [pc, #44]	; (80018cc <HAL_UART_RxCpltCallback+0x6c>)
 800189e:	2200      	movs	r2, #0
 80018a0:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 80018a4:	e007      	b.n	80018b6 <HAL_UART_RxCpltCallback+0x56>
 80018a6:	4b09      	ldr	r3, [pc, #36]	; (80018cc <HAL_UART_RxCpltCallback+0x6c>)
 80018a8:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80018ac:	3301      	adds	r3, #1
 80018ae:	b2da      	uxtb	r2, r3
 80018b0:	4b06      	ldr	r3, [pc, #24]	; (80018cc <HAL_UART_RxCpltCallback+0x6c>)
 80018b2:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
        //TODO remove the following 
		// print_string("Character Received: ",0);
		// print_string(&uart.rxchar,LF);
		// Restart the interrupt routine
		HAL_UART_Receive_IT(&huart1, &uart.rxchar, 1);
 80018b6:	2201      	movs	r2, #1
 80018b8:	4905      	ldr	r1, [pc, #20]	; (80018d0 <HAL_UART_RxCpltCallback+0x70>)
 80018ba:	4803      	ldr	r0, [pc, #12]	; (80018c8 <HAL_UART_RxCpltCallback+0x68>)
 80018bc:	f002 fff7 	bl	80048ae <HAL_UART_Receive_IT>
	}
}
 80018c0:	bf00      	nop
 80018c2:	3708      	adds	r7, #8
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bd80      	pop	{r7, pc}
 80018c8:	200002bc 	.word	0x200002bc
 80018cc:	20000208 	.word	0x20000208
 80018d0:	20000229 	.word	0x20000229

080018d4 <blockingDelay10ms>:

/********************************************//**
 *  @brief Blocking delay -- 10ms increments  
 ***********************************************/
void blockingDelay10ms( uint16_t ticks ) {
 80018d4:	b480      	push	{r7}
 80018d6:	b085      	sub	sp, #20
 80018d8:	af00      	add	r7, sp, #0
 80018da:	4603      	mov	r3, r0
 80018dc:	80fb      	strh	r3, [r7, #6]
    uint16_t i = 0;
 80018de:	2300      	movs	r3, #0
 80018e0:	81fb      	strh	r3, [r7, #14]
    uint16_t tick = 0;  //Used to lock time value
 80018e2:	2300      	movs	r3, #0
 80018e4:	81bb      	strh	r3, [r7, #12]
    for(i = ticks; i > 0; i--) {
 80018e6:	88fb      	ldrh	r3, [r7, #6]
 80018e8:	81fb      	strh	r3, [r7, #14]
 80018ea:	e00b      	b.n	8001904 <blockingDelay10ms+0x30>
        tick = time.ticks10ms;
 80018ec:	4b0a      	ldr	r3, [pc, #40]	; (8001918 <blockingDelay10ms+0x44>)
 80018ee:	881b      	ldrh	r3, [r3, #0]
 80018f0:	81bb      	strh	r3, [r7, #12]
        while (tick == time.ticks10ms);  //Wait for timer to advance
 80018f2:	bf00      	nop
 80018f4:	4b08      	ldr	r3, [pc, #32]	; (8001918 <blockingDelay10ms+0x44>)
 80018f6:	881b      	ldrh	r3, [r3, #0]
 80018f8:	89ba      	ldrh	r2, [r7, #12]
 80018fa:	429a      	cmp	r2, r3
 80018fc:	d0fa      	beq.n	80018f4 <blockingDelay10ms+0x20>
    for(i = ticks; i > 0; i--) {
 80018fe:	89fb      	ldrh	r3, [r7, #14]
 8001900:	3b01      	subs	r3, #1
 8001902:	81fb      	strh	r3, [r7, #14]
 8001904:	89fb      	ldrh	r3, [r7, #14]
 8001906:	2b00      	cmp	r3, #0
 8001908:	d1f0      	bne.n	80018ec <blockingDelay10ms+0x18>
    }
}
 800190a:	bf00      	nop
 800190c:	bf00      	nop
 800190e:	3714      	adds	r7, #20
 8001910:	46bd      	mov	sp, r7
 8001912:	bc80      	pop	{r7}
 8001914:	4770      	bx	lr
 8001916:	bf00      	nop
 8001918:	2000035c 	.word	0x2000035c

0800191c <blockingDelay100ms>:

void blockingDelay100ms( uint16_t ticks ) {
 800191c:	b480      	push	{r7}
 800191e:	b085      	sub	sp, #20
 8001920:	af00      	add	r7, sp, #0
 8001922:	4603      	mov	r3, r0
 8001924:	80fb      	strh	r3, [r7, #6]
    uint16_t i = 0;
 8001926:	2300      	movs	r3, #0
 8001928:	81fb      	strh	r3, [r7, #14]
    uint16_t tick = 0;  //Used to lock time value
 800192a:	2300      	movs	r3, #0
 800192c:	81bb      	strh	r3, [r7, #12]
    for(i = ticks; i > 0; i--) {
 800192e:	88fb      	ldrh	r3, [r7, #6]
 8001930:	81fb      	strh	r3, [r7, #14]
 8001932:	e00b      	b.n	800194c <blockingDelay100ms+0x30>
        tick = time.ticks100ms;
 8001934:	4b0a      	ldr	r3, [pc, #40]	; (8001960 <blockingDelay100ms+0x44>)
 8001936:	885b      	ldrh	r3, [r3, #2]
 8001938:	81bb      	strh	r3, [r7, #12]
        while (tick == time.ticks100ms);
 800193a:	bf00      	nop
 800193c:	4b08      	ldr	r3, [pc, #32]	; (8001960 <blockingDelay100ms+0x44>)
 800193e:	885b      	ldrh	r3, [r3, #2]
 8001940:	89ba      	ldrh	r2, [r7, #12]
 8001942:	429a      	cmp	r2, r3
 8001944:	d0fa      	beq.n	800193c <blockingDelay100ms+0x20>
    for(i = ticks; i > 0; i--) {
 8001946:	89fb      	ldrh	r3, [r7, #14]
 8001948:	3b01      	subs	r3, #1
 800194a:	81fb      	strh	r3, [r7, #14]
 800194c:	89fb      	ldrh	r3, [r7, #14]
 800194e:	2b00      	cmp	r3, #0
 8001950:	d1f0      	bne.n	8001934 <blockingDelay100ms+0x18>
    }
}
 8001952:	bf00      	nop
 8001954:	bf00      	nop
 8001956:	3714      	adds	r7, #20
 8001958:	46bd      	mov	sp, r7
 800195a:	bc80      	pop	{r7}
 800195c:	4770      	bx	lr
 800195e:	bf00      	nop
 8001960:	2000035c 	.word	0x2000035c

08001964 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001964:	b480      	push	{r7}
 8001966:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001968:	b672      	cpsid	i
}
 800196a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800196c:	e7fe      	b.n	800196c <Error_Handler+0x8>
	...

08001970 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001970:	b480      	push	{r7}
 8001972:	b085      	sub	sp, #20
 8001974:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001976:	4b15      	ldr	r3, [pc, #84]	; (80019cc <HAL_MspInit+0x5c>)
 8001978:	699b      	ldr	r3, [r3, #24]
 800197a:	4a14      	ldr	r2, [pc, #80]	; (80019cc <HAL_MspInit+0x5c>)
 800197c:	f043 0301 	orr.w	r3, r3, #1
 8001980:	6193      	str	r3, [r2, #24]
 8001982:	4b12      	ldr	r3, [pc, #72]	; (80019cc <HAL_MspInit+0x5c>)
 8001984:	699b      	ldr	r3, [r3, #24]
 8001986:	f003 0301 	and.w	r3, r3, #1
 800198a:	60bb      	str	r3, [r7, #8]
 800198c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800198e:	4b0f      	ldr	r3, [pc, #60]	; (80019cc <HAL_MspInit+0x5c>)
 8001990:	69db      	ldr	r3, [r3, #28]
 8001992:	4a0e      	ldr	r2, [pc, #56]	; (80019cc <HAL_MspInit+0x5c>)
 8001994:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001998:	61d3      	str	r3, [r2, #28]
 800199a:	4b0c      	ldr	r3, [pc, #48]	; (80019cc <HAL_MspInit+0x5c>)
 800199c:	69db      	ldr	r3, [r3, #28]
 800199e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019a2:	607b      	str	r3, [r7, #4]
 80019a4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80019a6:	4b0a      	ldr	r3, [pc, #40]	; (80019d0 <HAL_MspInit+0x60>)
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	60fb      	str	r3, [r7, #12]
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80019b2:	60fb      	str	r3, [r7, #12]
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80019ba:	60fb      	str	r3, [r7, #12]
 80019bc:	4a04      	ldr	r2, [pc, #16]	; (80019d0 <HAL_MspInit+0x60>)
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019c2:	bf00      	nop
 80019c4:	3714      	adds	r7, #20
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bc80      	pop	{r7}
 80019ca:	4770      	bx	lr
 80019cc:	40021000 	.word	0x40021000
 80019d0:	40010000 	.word	0x40010000

080019d4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b088      	sub	sp, #32
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019dc:	f107 0310 	add.w	r3, r7, #16
 80019e0:	2200      	movs	r2, #0
 80019e2:	601a      	str	r2, [r3, #0]
 80019e4:	605a      	str	r2, [r3, #4]
 80019e6:	609a      	str	r2, [r3, #8]
 80019e8:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	4a14      	ldr	r2, [pc, #80]	; (8001a40 <HAL_ADC_MspInit+0x6c>)
 80019f0:	4293      	cmp	r3, r2
 80019f2:	d121      	bne.n	8001a38 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80019f4:	4b13      	ldr	r3, [pc, #76]	; (8001a44 <HAL_ADC_MspInit+0x70>)
 80019f6:	699b      	ldr	r3, [r3, #24]
 80019f8:	4a12      	ldr	r2, [pc, #72]	; (8001a44 <HAL_ADC_MspInit+0x70>)
 80019fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80019fe:	6193      	str	r3, [r2, #24]
 8001a00:	4b10      	ldr	r3, [pc, #64]	; (8001a44 <HAL_ADC_MspInit+0x70>)
 8001a02:	699b      	ldr	r3, [r3, #24]
 8001a04:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001a08:	60fb      	str	r3, [r7, #12]
 8001a0a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a0c:	4b0d      	ldr	r3, [pc, #52]	; (8001a44 <HAL_ADC_MspInit+0x70>)
 8001a0e:	699b      	ldr	r3, [r3, #24]
 8001a10:	4a0c      	ldr	r2, [pc, #48]	; (8001a44 <HAL_ADC_MspInit+0x70>)
 8001a12:	f043 0304 	orr.w	r3, r3, #4
 8001a16:	6193      	str	r3, [r2, #24]
 8001a18:	4b0a      	ldr	r3, [pc, #40]	; (8001a44 <HAL_ADC_MspInit+0x70>)
 8001a1a:	699b      	ldr	r3, [r3, #24]
 8001a1c:	f003 0304 	and.w	r3, r3, #4
 8001a20:	60bb      	str	r3, [r7, #8]
 8001a22:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001a24:	2301      	movs	r3, #1
 8001a26:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a28:	2303      	movs	r3, #3
 8001a2a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a2c:	f107 0310 	add.w	r3, r7, #16
 8001a30:	4619      	mov	r1, r3
 8001a32:	4805      	ldr	r0, [pc, #20]	; (8001a48 <HAL_ADC_MspInit+0x74>)
 8001a34:	f001 f9bc 	bl	8002db0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001a38:	bf00      	nop
 8001a3a:	3720      	adds	r7, #32
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bd80      	pop	{r7, pc}
 8001a40:	40012400 	.word	0x40012400
 8001a44:	40021000 	.word	0x40021000
 8001a48:	40010800 	.word	0x40010800

08001a4c <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b088      	sub	sp, #32
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a54:	f107 0310 	add.w	r3, r7, #16
 8001a58:	2200      	movs	r2, #0
 8001a5a:	601a      	str	r2, [r3, #0]
 8001a5c:	605a      	str	r2, [r3, #4]
 8001a5e:	609a      	str	r2, [r3, #8]
 8001a60:	60da      	str	r2, [r3, #12]
  if(hdac->Instance==DAC)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4a14      	ldr	r2, [pc, #80]	; (8001ab8 <HAL_DAC_MspInit+0x6c>)
 8001a68:	4293      	cmp	r3, r2
 8001a6a:	d121      	bne.n	8001ab0 <HAL_DAC_MspInit+0x64>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8001a6c:	4b13      	ldr	r3, [pc, #76]	; (8001abc <HAL_DAC_MspInit+0x70>)
 8001a6e:	69db      	ldr	r3, [r3, #28]
 8001a70:	4a12      	ldr	r2, [pc, #72]	; (8001abc <HAL_DAC_MspInit+0x70>)
 8001a72:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001a76:	61d3      	str	r3, [r2, #28]
 8001a78:	4b10      	ldr	r3, [pc, #64]	; (8001abc <HAL_DAC_MspInit+0x70>)
 8001a7a:	69db      	ldr	r3, [r3, #28]
 8001a7c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001a80:	60fb      	str	r3, [r7, #12]
 8001a82:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a84:	4b0d      	ldr	r3, [pc, #52]	; (8001abc <HAL_DAC_MspInit+0x70>)
 8001a86:	699b      	ldr	r3, [r3, #24]
 8001a88:	4a0c      	ldr	r2, [pc, #48]	; (8001abc <HAL_DAC_MspInit+0x70>)
 8001a8a:	f043 0304 	orr.w	r3, r3, #4
 8001a8e:	6193      	str	r3, [r2, #24]
 8001a90:	4b0a      	ldr	r3, [pc, #40]	; (8001abc <HAL_DAC_MspInit+0x70>)
 8001a92:	699b      	ldr	r3, [r3, #24]
 8001a94:	f003 0304 	and.w	r3, r3, #4
 8001a98:	60bb      	str	r3, [r7, #8]
 8001a9a:	68bb      	ldr	r3, [r7, #8]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001a9c:	2310      	movs	r3, #16
 8001a9e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001aa0:	2303      	movs	r3, #3
 8001aa2:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001aa4:	f107 0310 	add.w	r3, r7, #16
 8001aa8:	4619      	mov	r1, r3
 8001aaa:	4805      	ldr	r0, [pc, #20]	; (8001ac0 <HAL_DAC_MspInit+0x74>)
 8001aac:	f001 f980 	bl	8002db0 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8001ab0:	bf00      	nop
 8001ab2:	3720      	adds	r7, #32
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bd80      	pop	{r7, pc}
 8001ab8:	40007400 	.word	0x40007400
 8001abc:	40021000 	.word	0x40021000
 8001ac0:	40010800 	.word	0x40010800

08001ac4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b088      	sub	sp, #32
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001acc:	f107 0310 	add.w	r3, r7, #16
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	601a      	str	r2, [r3, #0]
 8001ad4:	605a      	str	r2, [r3, #4]
 8001ad6:	609a      	str	r2, [r3, #8]
 8001ad8:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4a16      	ldr	r2, [pc, #88]	; (8001b38 <HAL_I2C_MspInit+0x74>)
 8001ae0:	4293      	cmp	r3, r2
 8001ae2:	d124      	bne.n	8001b2e <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ae4:	4b15      	ldr	r3, [pc, #84]	; (8001b3c <HAL_I2C_MspInit+0x78>)
 8001ae6:	699b      	ldr	r3, [r3, #24]
 8001ae8:	4a14      	ldr	r2, [pc, #80]	; (8001b3c <HAL_I2C_MspInit+0x78>)
 8001aea:	f043 0308 	orr.w	r3, r3, #8
 8001aee:	6193      	str	r3, [r2, #24]
 8001af0:	4b12      	ldr	r3, [pc, #72]	; (8001b3c <HAL_I2C_MspInit+0x78>)
 8001af2:	699b      	ldr	r3, [r3, #24]
 8001af4:	f003 0308 	and.w	r3, r3, #8
 8001af8:	60fb      	str	r3, [r7, #12]
 8001afa:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001afc:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001b00:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b02:	2312      	movs	r3, #18
 8001b04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b06:	2303      	movs	r3, #3
 8001b08:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b0a:	f107 0310 	add.w	r3, r7, #16
 8001b0e:	4619      	mov	r1, r3
 8001b10:	480b      	ldr	r0, [pc, #44]	; (8001b40 <HAL_I2C_MspInit+0x7c>)
 8001b12:	f001 f94d 	bl	8002db0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001b16:	4b09      	ldr	r3, [pc, #36]	; (8001b3c <HAL_I2C_MspInit+0x78>)
 8001b18:	69db      	ldr	r3, [r3, #28]
 8001b1a:	4a08      	ldr	r2, [pc, #32]	; (8001b3c <HAL_I2C_MspInit+0x78>)
 8001b1c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001b20:	61d3      	str	r3, [r2, #28]
 8001b22:	4b06      	ldr	r3, [pc, #24]	; (8001b3c <HAL_I2C_MspInit+0x78>)
 8001b24:	69db      	ldr	r3, [r3, #28]
 8001b26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b2a:	60bb      	str	r3, [r7, #8]
 8001b2c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001b2e:	bf00      	nop
 8001b30:	3720      	adds	r7, #32
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd80      	pop	{r7, pc}
 8001b36:	bf00      	nop
 8001b38:	40005800 	.word	0x40005800
 8001b3c:	40021000 	.word	0x40021000
 8001b40:	40010c00 	.word	0x40010c00

08001b44 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b088      	sub	sp, #32
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b4c:	f107 0310 	add.w	r3, r7, #16
 8001b50:	2200      	movs	r2, #0
 8001b52:	601a      	str	r2, [r3, #0]
 8001b54:	605a      	str	r2, [r3, #4]
 8001b56:	609a      	str	r2, [r3, #8]
 8001b58:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4a1b      	ldr	r2, [pc, #108]	; (8001bcc <HAL_SPI_MspInit+0x88>)
 8001b60:	4293      	cmp	r3, r2
 8001b62:	d12f      	bne.n	8001bc4 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001b64:	4b1a      	ldr	r3, [pc, #104]	; (8001bd0 <HAL_SPI_MspInit+0x8c>)
 8001b66:	699b      	ldr	r3, [r3, #24]
 8001b68:	4a19      	ldr	r2, [pc, #100]	; (8001bd0 <HAL_SPI_MspInit+0x8c>)
 8001b6a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001b6e:	6193      	str	r3, [r2, #24]
 8001b70:	4b17      	ldr	r3, [pc, #92]	; (8001bd0 <HAL_SPI_MspInit+0x8c>)
 8001b72:	699b      	ldr	r3, [r3, #24]
 8001b74:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b78:	60fb      	str	r3, [r7, #12]
 8001b7a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b7c:	4b14      	ldr	r3, [pc, #80]	; (8001bd0 <HAL_SPI_MspInit+0x8c>)
 8001b7e:	699b      	ldr	r3, [r3, #24]
 8001b80:	4a13      	ldr	r2, [pc, #76]	; (8001bd0 <HAL_SPI_MspInit+0x8c>)
 8001b82:	f043 0304 	orr.w	r3, r3, #4
 8001b86:	6193      	str	r3, [r2, #24]
 8001b88:	4b11      	ldr	r3, [pc, #68]	; (8001bd0 <HAL_SPI_MspInit+0x8c>)
 8001b8a:	699b      	ldr	r3, [r3, #24]
 8001b8c:	f003 0304 	and.w	r3, r3, #4
 8001b90:	60bb      	str	r3, [r7, #8]
 8001b92:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001b94:	23a0      	movs	r3, #160	; 0xa0
 8001b96:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b98:	2302      	movs	r3, #2
 8001b9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b9c:	2303      	movs	r3, #3
 8001b9e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ba0:	f107 0310 	add.w	r3, r7, #16
 8001ba4:	4619      	mov	r1, r3
 8001ba6:	480b      	ldr	r0, [pc, #44]	; (8001bd4 <HAL_SPI_MspInit+0x90>)
 8001ba8:	f001 f902 	bl	8002db0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001bac:	2340      	movs	r3, #64	; 0x40
 8001bae:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bb8:	f107 0310 	add.w	r3, r7, #16
 8001bbc:	4619      	mov	r1, r3
 8001bbe:	4805      	ldr	r0, [pc, #20]	; (8001bd4 <HAL_SPI_MspInit+0x90>)
 8001bc0:	f001 f8f6 	bl	8002db0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001bc4:	bf00      	nop
 8001bc6:	3720      	adds	r7, #32
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bd80      	pop	{r7, pc}
 8001bcc:	40013000 	.word	0x40013000
 8001bd0:	40021000 	.word	0x40021000
 8001bd4:	40010800 	.word	0x40010800

08001bd8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b084      	sub	sp, #16
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	4a0d      	ldr	r2, [pc, #52]	; (8001c1c <HAL_TIM_Base_MspInit+0x44>)
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d113      	bne.n	8001c12 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001bea:	4b0d      	ldr	r3, [pc, #52]	; (8001c20 <HAL_TIM_Base_MspInit+0x48>)
 8001bec:	69db      	ldr	r3, [r3, #28]
 8001bee:	4a0c      	ldr	r2, [pc, #48]	; (8001c20 <HAL_TIM_Base_MspInit+0x48>)
 8001bf0:	f043 0310 	orr.w	r3, r3, #16
 8001bf4:	61d3      	str	r3, [r2, #28]
 8001bf6:	4b0a      	ldr	r3, [pc, #40]	; (8001c20 <HAL_TIM_Base_MspInit+0x48>)
 8001bf8:	69db      	ldr	r3, [r3, #28]
 8001bfa:	f003 0310 	and.w	r3, r3, #16
 8001bfe:	60fb      	str	r3, [r7, #12]
 8001c00:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_IRQn, 0, 0);
 8001c02:	2200      	movs	r2, #0
 8001c04:	2100      	movs	r1, #0
 8001c06:	2036      	movs	r0, #54	; 0x36
 8001c08:	f000 fe75 	bl	80028f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8001c0c:	2036      	movs	r0, #54	; 0x36
 8001c0e:	f000 fe8e 	bl	800292e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8001c12:	bf00      	nop
 8001c14:	3710      	adds	r7, #16
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}
 8001c1a:	bf00      	nop
 8001c1c:	40001000 	.word	0x40001000
 8001c20:	40021000 	.word	0x40021000

08001c24 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b08a      	sub	sp, #40	; 0x28
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c2c:	f107 0318 	add.w	r3, r7, #24
 8001c30:	2200      	movs	r2, #0
 8001c32:	601a      	str	r2, [r3, #0]
 8001c34:	605a      	str	r2, [r3, #4]
 8001c36:	609a      	str	r2, [r3, #8]
 8001c38:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	4a3b      	ldr	r2, [pc, #236]	; (8001d2c <HAL_UART_MspInit+0x108>)
 8001c40:	4293      	cmp	r3, r2
 8001c42:	d13a      	bne.n	8001cba <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001c44:	4b3a      	ldr	r3, [pc, #232]	; (8001d30 <HAL_UART_MspInit+0x10c>)
 8001c46:	699b      	ldr	r3, [r3, #24]
 8001c48:	4a39      	ldr	r2, [pc, #228]	; (8001d30 <HAL_UART_MspInit+0x10c>)
 8001c4a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c4e:	6193      	str	r3, [r2, #24]
 8001c50:	4b37      	ldr	r3, [pc, #220]	; (8001d30 <HAL_UART_MspInit+0x10c>)
 8001c52:	699b      	ldr	r3, [r3, #24]
 8001c54:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c58:	617b      	str	r3, [r7, #20]
 8001c5a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c5c:	4b34      	ldr	r3, [pc, #208]	; (8001d30 <HAL_UART_MspInit+0x10c>)
 8001c5e:	699b      	ldr	r3, [r3, #24]
 8001c60:	4a33      	ldr	r2, [pc, #204]	; (8001d30 <HAL_UART_MspInit+0x10c>)
 8001c62:	f043 0304 	orr.w	r3, r3, #4
 8001c66:	6193      	str	r3, [r2, #24]
 8001c68:	4b31      	ldr	r3, [pc, #196]	; (8001d30 <HAL_UART_MspInit+0x10c>)
 8001c6a:	699b      	ldr	r3, [r3, #24]
 8001c6c:	f003 0304 	and.w	r3, r3, #4
 8001c70:	613b      	str	r3, [r7, #16]
 8001c72:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001c74:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c7a:	2302      	movs	r3, #2
 8001c7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c7e:	2303      	movs	r3, #3
 8001c80:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c82:	f107 0318 	add.w	r3, r7, #24
 8001c86:	4619      	mov	r1, r3
 8001c88:	482a      	ldr	r0, [pc, #168]	; (8001d34 <HAL_UART_MspInit+0x110>)
 8001c8a:	f001 f891 	bl	8002db0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001c8e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c94:	2300      	movs	r3, #0
 8001c96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c9c:	f107 0318 	add.w	r3, r7, #24
 8001ca0:	4619      	mov	r1, r3
 8001ca2:	4824      	ldr	r0, [pc, #144]	; (8001d34 <HAL_UART_MspInit+0x110>)
 8001ca4:	f001 f884 	bl	8002db0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001ca8:	2200      	movs	r2, #0
 8001caa:	2100      	movs	r1, #0
 8001cac:	2025      	movs	r0, #37	; 0x25
 8001cae:	f000 fe22 	bl	80028f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001cb2:	2025      	movs	r0, #37	; 0x25
 8001cb4:	f000 fe3b 	bl	800292e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001cb8:	e034      	b.n	8001d24 <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART2)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	4a1e      	ldr	r2, [pc, #120]	; (8001d38 <HAL_UART_MspInit+0x114>)
 8001cc0:	4293      	cmp	r3, r2
 8001cc2:	d12f      	bne.n	8001d24 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001cc4:	4b1a      	ldr	r3, [pc, #104]	; (8001d30 <HAL_UART_MspInit+0x10c>)
 8001cc6:	69db      	ldr	r3, [r3, #28]
 8001cc8:	4a19      	ldr	r2, [pc, #100]	; (8001d30 <HAL_UART_MspInit+0x10c>)
 8001cca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cce:	61d3      	str	r3, [r2, #28]
 8001cd0:	4b17      	ldr	r3, [pc, #92]	; (8001d30 <HAL_UART_MspInit+0x10c>)
 8001cd2:	69db      	ldr	r3, [r3, #28]
 8001cd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cd8:	60fb      	str	r3, [r7, #12]
 8001cda:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cdc:	4b14      	ldr	r3, [pc, #80]	; (8001d30 <HAL_UART_MspInit+0x10c>)
 8001cde:	699b      	ldr	r3, [r3, #24]
 8001ce0:	4a13      	ldr	r2, [pc, #76]	; (8001d30 <HAL_UART_MspInit+0x10c>)
 8001ce2:	f043 0304 	orr.w	r3, r3, #4
 8001ce6:	6193      	str	r3, [r2, #24]
 8001ce8:	4b11      	ldr	r3, [pc, #68]	; (8001d30 <HAL_UART_MspInit+0x10c>)
 8001cea:	699b      	ldr	r3, [r3, #24]
 8001cec:	f003 0304 	and.w	r3, r3, #4
 8001cf0:	60bb      	str	r3, [r7, #8]
 8001cf2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001cf4:	2304      	movs	r3, #4
 8001cf6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cf8:	2302      	movs	r3, #2
 8001cfa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001cfc:	2303      	movs	r3, #3
 8001cfe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d00:	f107 0318 	add.w	r3, r7, #24
 8001d04:	4619      	mov	r1, r3
 8001d06:	480b      	ldr	r0, [pc, #44]	; (8001d34 <HAL_UART_MspInit+0x110>)
 8001d08:	f001 f852 	bl	8002db0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001d0c:	2308      	movs	r3, #8
 8001d0e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d10:	2300      	movs	r3, #0
 8001d12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d14:	2300      	movs	r3, #0
 8001d16:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d18:	f107 0318 	add.w	r3, r7, #24
 8001d1c:	4619      	mov	r1, r3
 8001d1e:	4805      	ldr	r0, [pc, #20]	; (8001d34 <HAL_UART_MspInit+0x110>)
 8001d20:	f001 f846 	bl	8002db0 <HAL_GPIO_Init>
}
 8001d24:	bf00      	nop
 8001d26:	3728      	adds	r7, #40	; 0x28
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bd80      	pop	{r7, pc}
 8001d2c:	40013800 	.word	0x40013800
 8001d30:	40021000 	.word	0x40021000
 8001d34:	40010800 	.word	0x40010800
 8001d38:	40004400 	.word	0x40004400

08001d3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d40:	e7fe      	b.n	8001d40 <NMI_Handler+0x4>

08001d42 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d42:	b480      	push	{r7}
 8001d44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d46:	e7fe      	b.n	8001d46 <HardFault_Handler+0x4>

08001d48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d4c:	e7fe      	b.n	8001d4c <MemManage_Handler+0x4>

08001d4e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d4e:	b480      	push	{r7}
 8001d50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d52:	e7fe      	b.n	8001d52 <BusFault_Handler+0x4>

08001d54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d54:	b480      	push	{r7}
 8001d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d58:	e7fe      	b.n	8001d58 <UsageFault_Handler+0x4>

08001d5a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d5a:	b480      	push	{r7}
 8001d5c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d5e:	bf00      	nop
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bc80      	pop	{r7}
 8001d64:	4770      	bx	lr

08001d66 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d66:	b480      	push	{r7}
 8001d68:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d6a:	bf00      	nop
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bc80      	pop	{r7}
 8001d70:	4770      	bx	lr

08001d72 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d72:	b480      	push	{r7}
 8001d74:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d76:	bf00      	nop
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bc80      	pop	{r7}
 8001d7c:	4770      	bx	lr

08001d7e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d7e:	b580      	push	{r7, lr}
 8001d80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d82:	f000 fab3 	bl	80022ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d86:	bf00      	nop
 8001d88:	bd80      	pop	{r7, pc}
	...

08001d8c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001d90:	4802      	ldr	r0, [pc, #8]	; (8001d9c <USART1_IRQHandler+0x10>)
 8001d92:	f002 fdbd 	bl	8004910 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001d96:	bf00      	nop
 8001d98:	bd80      	pop	{r7, pc}
 8001d9a:	bf00      	nop
 8001d9c:	200002bc 	.word	0x200002bc

08001da0 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001da4:	4802      	ldr	r0, [pc, #8]	; (8001db0 <TIM6_IRQHandler+0x10>)
 8001da6:	f002 fa93 	bl	80042d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 8001daa:	bf00      	nop
 8001dac:	bd80      	pop	{r7, pc}
 8001dae:	bf00      	nop
 8001db0:	20000314 	.word	0x20000314

08001db4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001db4:	b480      	push	{r7}
 8001db6:	af00      	add	r7, sp, #0
	return 1;
 8001db8:	2301      	movs	r3, #1
}
 8001dba:	4618      	mov	r0, r3
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bc80      	pop	{r7}
 8001dc0:	4770      	bx	lr

08001dc2 <_kill>:

int _kill(int pid, int sig)
{
 8001dc2:	b580      	push	{r7, lr}
 8001dc4:	b082      	sub	sp, #8
 8001dc6:	af00      	add	r7, sp, #0
 8001dc8:	6078      	str	r0, [r7, #4]
 8001dca:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001dcc:	f003 f9c8 	bl	8005160 <__errno>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	2216      	movs	r2, #22
 8001dd4:	601a      	str	r2, [r3, #0]
	return -1;
 8001dd6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001dda:	4618      	mov	r0, r3
 8001ddc:	3708      	adds	r7, #8
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}

08001de2 <_exit>:

void _exit (int status)
{
 8001de2:	b580      	push	{r7, lr}
 8001de4:	b082      	sub	sp, #8
 8001de6:	af00      	add	r7, sp, #0
 8001de8:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001dea:	f04f 31ff 	mov.w	r1, #4294967295
 8001dee:	6878      	ldr	r0, [r7, #4]
 8001df0:	f7ff ffe7 	bl	8001dc2 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001df4:	e7fe      	b.n	8001df4 <_exit+0x12>

08001df6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001df6:	b580      	push	{r7, lr}
 8001df8:	b086      	sub	sp, #24
 8001dfa:	af00      	add	r7, sp, #0
 8001dfc:	60f8      	str	r0, [r7, #12]
 8001dfe:	60b9      	str	r1, [r7, #8]
 8001e00:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e02:	2300      	movs	r3, #0
 8001e04:	617b      	str	r3, [r7, #20]
 8001e06:	e00a      	b.n	8001e1e <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001e08:	f3af 8000 	nop.w
 8001e0c:	4601      	mov	r1, r0
 8001e0e:	68bb      	ldr	r3, [r7, #8]
 8001e10:	1c5a      	adds	r2, r3, #1
 8001e12:	60ba      	str	r2, [r7, #8]
 8001e14:	b2ca      	uxtb	r2, r1
 8001e16:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e18:	697b      	ldr	r3, [r7, #20]
 8001e1a:	3301      	adds	r3, #1
 8001e1c:	617b      	str	r3, [r7, #20]
 8001e1e:	697a      	ldr	r2, [r7, #20]
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	429a      	cmp	r2, r3
 8001e24:	dbf0      	blt.n	8001e08 <_read+0x12>
	}

return len;
 8001e26:	687b      	ldr	r3, [r7, #4]
}
 8001e28:	4618      	mov	r0, r3
 8001e2a:	3718      	adds	r7, #24
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bd80      	pop	{r7, pc}

08001e30 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b086      	sub	sp, #24
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	60f8      	str	r0, [r7, #12]
 8001e38:	60b9      	str	r1, [r7, #8]
 8001e3a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	617b      	str	r3, [r7, #20]
 8001e40:	e009      	b.n	8001e56 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001e42:	68bb      	ldr	r3, [r7, #8]
 8001e44:	1c5a      	adds	r2, r3, #1
 8001e46:	60ba      	str	r2, [r7, #8]
 8001e48:	781b      	ldrb	r3, [r3, #0]
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e50:	697b      	ldr	r3, [r7, #20]
 8001e52:	3301      	adds	r3, #1
 8001e54:	617b      	str	r3, [r7, #20]
 8001e56:	697a      	ldr	r2, [r7, #20]
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	429a      	cmp	r2, r3
 8001e5c:	dbf1      	blt.n	8001e42 <_write+0x12>
	}
	return len;
 8001e5e:	687b      	ldr	r3, [r7, #4]
}
 8001e60:	4618      	mov	r0, r3
 8001e62:	3718      	adds	r7, #24
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bd80      	pop	{r7, pc}

08001e68 <_close>:

int _close(int file)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	b083      	sub	sp, #12
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
	return -1;
 8001e70:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e74:	4618      	mov	r0, r3
 8001e76:	370c      	adds	r7, #12
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bc80      	pop	{r7}
 8001e7c:	4770      	bx	lr

08001e7e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001e7e:	b480      	push	{r7}
 8001e80:	b083      	sub	sp, #12
 8001e82:	af00      	add	r7, sp, #0
 8001e84:	6078      	str	r0, [r7, #4]
 8001e86:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001e8e:	605a      	str	r2, [r3, #4]
	return 0;
 8001e90:	2300      	movs	r3, #0
}
 8001e92:	4618      	mov	r0, r3
 8001e94:	370c      	adds	r7, #12
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bc80      	pop	{r7}
 8001e9a:	4770      	bx	lr

08001e9c <_isatty>:

int _isatty(int file)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	b083      	sub	sp, #12
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
	return 1;
 8001ea4:	2301      	movs	r3, #1
}
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	370c      	adds	r7, #12
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bc80      	pop	{r7}
 8001eae:	4770      	bx	lr

08001eb0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	b085      	sub	sp, #20
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	60f8      	str	r0, [r7, #12]
 8001eb8:	60b9      	str	r1, [r7, #8]
 8001eba:	607a      	str	r2, [r7, #4]
	return 0;
 8001ebc:	2300      	movs	r3, #0
}
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	3714      	adds	r7, #20
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bc80      	pop	{r7}
 8001ec6:	4770      	bx	lr

08001ec8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b086      	sub	sp, #24
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ed0:	4a14      	ldr	r2, [pc, #80]	; (8001f24 <_sbrk+0x5c>)
 8001ed2:	4b15      	ldr	r3, [pc, #84]	; (8001f28 <_sbrk+0x60>)
 8001ed4:	1ad3      	subs	r3, r2, r3
 8001ed6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ed8:	697b      	ldr	r3, [r7, #20]
 8001eda:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001edc:	4b13      	ldr	r3, [pc, #76]	; (8001f2c <_sbrk+0x64>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d102      	bne.n	8001eea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ee4:	4b11      	ldr	r3, [pc, #68]	; (8001f2c <_sbrk+0x64>)
 8001ee6:	4a12      	ldr	r2, [pc, #72]	; (8001f30 <_sbrk+0x68>)
 8001ee8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001eea:	4b10      	ldr	r3, [pc, #64]	; (8001f2c <_sbrk+0x64>)
 8001eec:	681a      	ldr	r2, [r3, #0]
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	4413      	add	r3, r2
 8001ef2:	693a      	ldr	r2, [r7, #16]
 8001ef4:	429a      	cmp	r2, r3
 8001ef6:	d207      	bcs.n	8001f08 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ef8:	f003 f932 	bl	8005160 <__errno>
 8001efc:	4603      	mov	r3, r0
 8001efe:	220c      	movs	r2, #12
 8001f00:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f02:	f04f 33ff 	mov.w	r3, #4294967295
 8001f06:	e009      	b.n	8001f1c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f08:	4b08      	ldr	r3, [pc, #32]	; (8001f2c <_sbrk+0x64>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f0e:	4b07      	ldr	r3, [pc, #28]	; (8001f2c <_sbrk+0x64>)
 8001f10:	681a      	ldr	r2, [r3, #0]
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	4413      	add	r3, r2
 8001f16:	4a05      	ldr	r2, [pc, #20]	; (8001f2c <_sbrk+0x64>)
 8001f18:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f1a:	68fb      	ldr	r3, [r7, #12]
}
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	3718      	adds	r7, #24
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bd80      	pop	{r7, pc}
 8001f24:	20010000 	.word	0x20010000
 8001f28:	00000400 	.word	0x00000400
 8001f2c:	200001fc 	.word	0x200001fc
 8001f30:	20000420 	.word	0x20000420

08001f34 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001f34:	b480      	push	{r7}
 8001f36:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f38:	bf00      	nop
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bc80      	pop	{r7}
 8001f3e:	4770      	bx	lr

08001f40 <print_float>:
 */
#include "uart.h"

struct UARTMembers uart;

void print_float (float number, uint8_t action) {
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b086      	sub	sp, #24
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
 8001f48:	460b      	mov	r3, r1
 8001f4a:	70fb      	strb	r3, [r7, #3]
    char temp_buffer[8];        //Define the array that will hold the ASCII values
    char c = '\0';
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	73fb      	strb	r3, [r7, #15]

    /* USE SPRINT F TO BUILD THE ARRAY OF ASCII CHARACTERS */
    sprintf(temp_buffer, "%.4f", number);   //f tells the function we want to print a float value
 8001f50:	6878      	ldr	r0, [r7, #4]
 8001f52:	f7fe fad5 	bl	8000500 <__aeabi_f2d>
 8001f56:	4602      	mov	r2, r0
 8001f58:	460b      	mov	r3, r1
 8001f5a:	f107 0010 	add.w	r0, r7, #16
 8001f5e:	491a      	ldr	r1, [pc, #104]	; (8001fc8 <print_float+0x88>)
 8001f60:	f003 ffa6 	bl	8005eb0 <siprintf>

    HAL_UART_Transmit(&huart1, (uint8_t *) temp_buffer, sizeof(temp_buffer), HAL_MAX_DELAY);
 8001f64:	f107 0110 	add.w	r1, r7, #16
 8001f68:	f04f 33ff 	mov.w	r3, #4294967295
 8001f6c:	2208      	movs	r2, #8
 8001f6e:	4817      	ldr	r0, [pc, #92]	; (8001fcc <print_float+0x8c>)
 8001f70:	f002 fc0b 	bl	800478a <HAL_UART_Transmit>

    /* CHECK TO SEE IF THE USER WISHES TO CREATE A NEW LINE */
    if(action == LF) {
 8001f74:	78fb      	ldrb	r3, [r7, #3]
 8001f76:	2b01      	cmp	r3, #1
 8001f78:	d114      	bne.n	8001fa4 <print_float+0x64>
        c = '\r';  HAL_UART_Transmit(&huart1,(uint8_t *) &c, (uint16_t) 0x01, HAL_MAX_DELAY);
 8001f7a:	230d      	movs	r3, #13
 8001f7c:	73fb      	strb	r3, [r7, #15]
 8001f7e:	f107 010f 	add.w	r1, r7, #15
 8001f82:	f04f 33ff 	mov.w	r3, #4294967295
 8001f86:	2201      	movs	r2, #1
 8001f88:	4810      	ldr	r0, [pc, #64]	; (8001fcc <print_float+0x8c>)
 8001f8a:	f002 fbfe 	bl	800478a <HAL_UART_Transmit>
        c = '\n';  HAL_UART_Transmit(&huart1, (uint8_t *) &c, (uint16_t) 0x01, HAL_MAX_DELAY);
 8001f8e:	230a      	movs	r3, #10
 8001f90:	73fb      	strb	r3, [r7, #15]
 8001f92:	f107 010f 	add.w	r1, r7, #15
 8001f96:	f04f 33ff 	mov.w	r3, #4294967295
 8001f9a:	2201      	movs	r2, #1
 8001f9c:	480b      	ldr	r0, [pc, #44]	; (8001fcc <print_float+0x8c>)
 8001f9e:	f002 fbf4 	bl	800478a <HAL_UART_Transmit>
    }
    else if(action == CR) {
        c = '\r';  HAL_UART_Transmit(&huart1,(uint8_t *) &c, (uint16_t) 0x01, HAL_MAX_DELAY);
    }
}
 8001fa2:	e00c      	b.n	8001fbe <print_float+0x7e>
    else if(action == CR) {
 8001fa4:	78fb      	ldrb	r3, [r7, #3]
 8001fa6:	2b02      	cmp	r3, #2
 8001fa8:	d109      	bne.n	8001fbe <print_float+0x7e>
        c = '\r';  HAL_UART_Transmit(&huart1,(uint8_t *) &c, (uint16_t) 0x01, HAL_MAX_DELAY);
 8001faa:	230d      	movs	r3, #13
 8001fac:	73fb      	strb	r3, [r7, #15]
 8001fae:	f107 010f 	add.w	r1, r7, #15
 8001fb2:	f04f 33ff 	mov.w	r3, #4294967295
 8001fb6:	2201      	movs	r2, #1
 8001fb8:	4804      	ldr	r0, [pc, #16]	; (8001fcc <print_float+0x8c>)
 8001fba:	f002 fbe6 	bl	800478a <HAL_UART_Transmit>
}
 8001fbe:	bf00      	nop
 8001fc0:	3718      	adds	r7, #24
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bd80      	pop	{r7, pc}
 8001fc6:	bf00      	nop
 8001fc8:	0800a38c 	.word	0x0800a38c
 8001fcc:	200002bc 	.word	0x200002bc

08001fd0 <print_string>:
    else if(action == CR) {
        c = '\r';  HAL_UART_Transmit(&huart1,(uint8_t *) &c, (uint16_t) 0x01, HAL_MAX_DELAY);
    }
}

void print_string(const char * s, uint8_t action) {
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b084      	sub	sp, #16
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
 8001fd8:	460b      	mov	r3, r1
 8001fda:	70fb      	strb	r3, [r7, #3]
    char c = '\0';
 8001fdc:	2300      	movs	r3, #0
 8001fde:	73fb      	strb	r3, [r7, #15]

    while(*s != '\0') {
 8001fe0:	e009      	b.n	8001ff6 <print_string+0x26>
        HAL_UART_Transmit(&huart1, (uint8_t *) s, (uint16_t) 0x01, HAL_MAX_DELAY);
 8001fe2:	f04f 33ff 	mov.w	r3, #4294967295
 8001fe6:	2201      	movs	r2, #1
 8001fe8:	6879      	ldr	r1, [r7, #4]
 8001fea:	4819      	ldr	r0, [pc, #100]	; (8002050 <print_string+0x80>)
 8001fec:	f002 fbcd 	bl	800478a <HAL_UART_Transmit>
        s++;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	3301      	adds	r3, #1
 8001ff4:	607b      	str	r3, [r7, #4]
    while(*s != '\0') {
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	781b      	ldrb	r3, [r3, #0]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d1f1      	bne.n	8001fe2 <print_string+0x12>
    }

    /* CHECK TO SEE IF THE USER WISHES TO CREATE A NEW LINE */
    if(action == LF) {
 8001ffe:	78fb      	ldrb	r3, [r7, #3]
 8002000:	2b01      	cmp	r3, #1
 8002002:	d114      	bne.n	800202e <print_string+0x5e>
        c = '\r';  HAL_UART_Transmit(&huart1,(uint8_t *) &c, (uint16_t) 0x01, HAL_MAX_DELAY);
 8002004:	230d      	movs	r3, #13
 8002006:	73fb      	strb	r3, [r7, #15]
 8002008:	f107 010f 	add.w	r1, r7, #15
 800200c:	f04f 33ff 	mov.w	r3, #4294967295
 8002010:	2201      	movs	r2, #1
 8002012:	480f      	ldr	r0, [pc, #60]	; (8002050 <print_string+0x80>)
 8002014:	f002 fbb9 	bl	800478a <HAL_UART_Transmit>
        c = '\n';  HAL_UART_Transmit(&huart1, (uint8_t *) &c, (uint16_t) 0x01, HAL_MAX_DELAY);
 8002018:	230a      	movs	r3, #10
 800201a:	73fb      	strb	r3, [r7, #15]
 800201c:	f107 010f 	add.w	r1, r7, #15
 8002020:	f04f 33ff 	mov.w	r3, #4294967295
 8002024:	2201      	movs	r2, #1
 8002026:	480a      	ldr	r0, [pc, #40]	; (8002050 <print_string+0x80>)
 8002028:	f002 fbaf 	bl	800478a <HAL_UART_Transmit>
    }
    else if(action == CR) {
        c = '\r';  HAL_UART_Transmit(&huart1,(uint8_t *) &c, (uint16_t) 0x01, HAL_MAX_DELAY);
    }

}
 800202c:	e00c      	b.n	8002048 <print_string+0x78>
    else if(action == CR) {
 800202e:	78fb      	ldrb	r3, [r7, #3]
 8002030:	2b02      	cmp	r3, #2
 8002032:	d109      	bne.n	8002048 <print_string+0x78>
        c = '\r';  HAL_UART_Transmit(&huart1,(uint8_t *) &c, (uint16_t) 0x01, HAL_MAX_DELAY);
 8002034:	230d      	movs	r3, #13
 8002036:	73fb      	strb	r3, [r7, #15]
 8002038:	f107 010f 	add.w	r1, r7, #15
 800203c:	f04f 33ff 	mov.w	r3, #4294967295
 8002040:	2201      	movs	r2, #1
 8002042:	4803      	ldr	r0, [pc, #12]	; (8002050 <print_string+0x80>)
 8002044:	f002 fba1 	bl	800478a <HAL_UART_Transmit>
}
 8002048:	bf00      	nop
 800204a:	3710      	adds	r7, #16
 800204c:	46bd      	mov	sp, r7
 800204e:	bd80      	pop	{r7, pc}
 8002050:	200002bc 	.word	0x200002bc

08002054 <PrintUnsignedDecimal>:

void PrintUnsignedDecimal (uint16_t number, uint8_t action) {
 8002054:	b580      	push	{r7, lr}
 8002056:	b086      	sub	sp, #24
 8002058:	af00      	add	r7, sp, #0
 800205a:	4603      	mov	r3, r0
 800205c:	460a      	mov	r2, r1
 800205e:	80fb      	strh	r3, [r7, #6]
 8002060:	4613      	mov	r3, r2
 8002062:	717b      	strb	r3, [r7, #5]
    char temphex[5];        //Define the array that will hold the ASCII values
    char c = '\r';
 8002064:	230d      	movs	r3, #13
 8002066:	73fb      	strb	r3, [r7, #15]
    uint8_t i;                
    uint8_t decimal_count;    //This is how many digits are written

    /* USE SPRINT F TO BUILD THE ARRAY OF ASCII CHARACTERS */
    decimal_count = (uint8_t)(sprintf(temphex, "%u", number)); //u tells the function we want an unsigned decimal number
 8002068:	88fa      	ldrh	r2, [r7, #6]
 800206a:	f107 0310 	add.w	r3, r7, #16
 800206e:	4920      	ldr	r1, [pc, #128]	; (80020f0 <PrintUnsignedDecimal+0x9c>)
 8002070:	4618      	mov	r0, r3
 8002072:	f003 ff1d 	bl	8005eb0 <siprintf>
 8002076:	4603      	mov	r3, r0
 8002078:	75bb      	strb	r3, [r7, #22]

    for(i = 0; i < decimal_count; i++) {    //Print out the array of ASCII characters.
 800207a:	2300      	movs	r3, #0
 800207c:	75fb      	strb	r3, [r7, #23]
 800207e:	e00c      	b.n	800209a <PrintUnsignedDecimal+0x46>
        // TXREG1 = (temphex[i]);
        HAL_UART_Transmit(&huart1,(uint8_t *) &temphex[i], (uint16_t) 0x01, HAL_MAX_DELAY);
 8002080:	7dfb      	ldrb	r3, [r7, #23]
 8002082:	f107 0210 	add.w	r2, r7, #16
 8002086:	18d1      	adds	r1, r2, r3
 8002088:	f04f 33ff 	mov.w	r3, #4294967295
 800208c:	2201      	movs	r2, #1
 800208e:	4819      	ldr	r0, [pc, #100]	; (80020f4 <PrintUnsignedDecimal+0xa0>)
 8002090:	f002 fb7b 	bl	800478a <HAL_UART_Transmit>
    for(i = 0; i < decimal_count; i++) {    //Print out the array of ASCII characters.
 8002094:	7dfb      	ldrb	r3, [r7, #23]
 8002096:	3301      	adds	r3, #1
 8002098:	75fb      	strb	r3, [r7, #23]
 800209a:	7dfa      	ldrb	r2, [r7, #23]
 800209c:	7dbb      	ldrb	r3, [r7, #22]
 800209e:	429a      	cmp	r2, r3
 80020a0:	d3ee      	bcc.n	8002080 <PrintUnsignedDecimal+0x2c>
    }

    /* CHECK TO SEE IF THE USER WISHES TO CREATE A NEW LINE */
    if(action == LF) {
 80020a2:	797b      	ldrb	r3, [r7, #5]
 80020a4:	2b01      	cmp	r3, #1
 80020a6:	d112      	bne.n	80020ce <PrintUnsignedDecimal+0x7a>
        HAL_UART_Transmit(&huart1,(uint8_t *) &c, (uint16_t) 0x01, HAL_MAX_DELAY);
 80020a8:	f107 010f 	add.w	r1, r7, #15
 80020ac:	f04f 33ff 	mov.w	r3, #4294967295
 80020b0:	2201      	movs	r2, #1
 80020b2:	4810      	ldr	r0, [pc, #64]	; (80020f4 <PrintUnsignedDecimal+0xa0>)
 80020b4:	f002 fb69 	bl	800478a <HAL_UART_Transmit>
        c = '\n';  HAL_UART_Transmit(&huart1, (uint8_t *) &c, (uint16_t) 0x01, HAL_MAX_DELAY);
 80020b8:	230a      	movs	r3, #10
 80020ba:	73fb      	strb	r3, [r7, #15]
 80020bc:	f107 010f 	add.w	r1, r7, #15
 80020c0:	f04f 33ff 	mov.w	r3, #4294967295
 80020c4:	2201      	movs	r2, #1
 80020c6:	480b      	ldr	r0, [pc, #44]	; (80020f4 <PrintUnsignedDecimal+0xa0>)
 80020c8:	f002 fb5f 	bl	800478a <HAL_UART_Transmit>
    }
    else if(action == CR) {
        c = '\r';  HAL_UART_Transmit(&huart1,(uint8_t *) &c, (uint16_t) 0x01, HAL_MAX_DELAY);
    }
}
 80020cc:	e00c      	b.n	80020e8 <PrintUnsignedDecimal+0x94>
    else if(action == CR) {
 80020ce:	797b      	ldrb	r3, [r7, #5]
 80020d0:	2b02      	cmp	r3, #2
 80020d2:	d109      	bne.n	80020e8 <PrintUnsignedDecimal+0x94>
        c = '\r';  HAL_UART_Transmit(&huart1,(uint8_t *) &c, (uint16_t) 0x01, HAL_MAX_DELAY);
 80020d4:	230d      	movs	r3, #13
 80020d6:	73fb      	strb	r3, [r7, #15]
 80020d8:	f107 010f 	add.w	r1, r7, #15
 80020dc:	f04f 33ff 	mov.w	r3, #4294967295
 80020e0:	2201      	movs	r2, #1
 80020e2:	4804      	ldr	r0, [pc, #16]	; (80020f4 <PrintUnsignedDecimal+0xa0>)
 80020e4:	f002 fb51 	bl	800478a <HAL_UART_Transmit>
}
 80020e8:	bf00      	nop
 80020ea:	3718      	adds	r7, #24
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bd80      	pop	{r7, pc}
 80020f0:	0800a394 	.word	0x0800a394
 80020f4:	200002bc 	.word	0x200002bc

080020f8 <ClearScreen>:
    HAL_UART_Transmit(&huart1,(uint8_t *) &c, (uint16_t) 0x01, HAL_MAX_DELAY);
    print_string("[1J",0);        //Send the rest of the sequence to clear the screen

}

void ClearScreen( void ) {
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b082      	sub	sp, #8
 80020fc:	af00      	add	r7, sp, #0
    char c = 0x1B;
 80020fe:	231b      	movs	r3, #27
 8002100:	71fb      	strb	r3, [r7, #7]
    HAL_UART_Transmit(&huart1,(uint8_t *) &c, (uint16_t) 0x01, HAL_MAX_DELAY);
 8002102:	1df9      	adds	r1, r7, #7
 8002104:	f04f 33ff 	mov.w	r3, #4294967295
 8002108:	2201      	movs	r2, #1
 800210a:	4805      	ldr	r0, [pc, #20]	; (8002120 <ClearScreen+0x28>)
 800210c:	f002 fb3d 	bl	800478a <HAL_UART_Transmit>
    print_string("[2J",0);        //Send the rest of the sequence to clear the screen
 8002110:	2100      	movs	r1, #0
 8002112:	4804      	ldr	r0, [pc, #16]	; (8002124 <ClearScreen+0x2c>)
 8002114:	f7ff ff5c 	bl	8001fd0 <print_string>
}
 8002118:	bf00      	nop
 800211a:	3708      	adds	r7, #8
 800211c:	46bd      	mov	sp, r7
 800211e:	bd80      	pop	{r7, pc}
 8002120:	200002bc 	.word	0x200002bc
 8002124:	0800a39c 	.word	0x0800a39c

08002128 <CursorTopLeft>:
    HAL_UART_Transmit(&huart1,(uint8_t *) &c, (uint16_t) 0x01, HAL_MAX_DELAY);
    print_string("[2K",0);        //Send the rest of the sequence to clear the screen

}

void CursorTopLeft( void ) {
 8002128:	b580      	push	{r7, lr}
 800212a:	b082      	sub	sp, #8
 800212c:	af00      	add	r7, sp, #0
    char c = 0x1B;
 800212e:	231b      	movs	r3, #27
 8002130:	71fb      	strb	r3, [r7, #7]
    HAL_UART_Transmit(&huart1,(uint8_t *) &c, (uint16_t) 0x01, HAL_MAX_DELAY);
 8002132:	1df9      	adds	r1, r7, #7
 8002134:	f04f 33ff 	mov.w	r3, #4294967295
 8002138:	2201      	movs	r2, #1
 800213a:	4805      	ldr	r0, [pc, #20]	; (8002150 <CursorTopLeft+0x28>)
 800213c:	f002 fb25 	bl	800478a <HAL_UART_Transmit>
    print_string("[H",0);     //Send the rest of the sequence to clear the screen
 8002140:	2100      	movs	r1, #0
 8002142:	4804      	ldr	r0, [pc, #16]	; (8002154 <CursorTopLeft+0x2c>)
 8002144:	f7ff ff44 	bl	8001fd0 <print_string>
}
 8002148:	bf00      	nop
 800214a:	3708      	adds	r7, #8
 800214c:	46bd      	mov	sp, r7
 800214e:	bd80      	pop	{r7, pc}
 8002150:	200002bc 	.word	0x200002bc
 8002154:	0800a3a4 	.word	0x0800a3a4

08002158 <ResetTerminal>:

void ResetTerminal( void ) {
 8002158:	b580      	push	{r7, lr}
 800215a:	b082      	sub	sp, #8
 800215c:	af00      	add	r7, sp, #0
    char c = 0x1B;
 800215e:	231b      	movs	r3, #27
 8002160:	71fb      	strb	r3, [r7, #7]
    HAL_UART_Transmit(&huart1,(uint8_t *) &c, (uint16_t) 0x01, HAL_MAX_DELAY);
 8002162:	1df9      	adds	r1, r7, #7
 8002164:	f04f 33ff 	mov.w	r3, #4294967295
 8002168:	2201      	movs	r2, #1
 800216a:	4805      	ldr	r0, [pc, #20]	; (8002180 <ResetTerminal+0x28>)
 800216c:	f002 fb0d 	bl	800478a <HAL_UART_Transmit>
    print_string("c",0);      //Send the rest of the sequence to clear the screen
 8002170:	2100      	movs	r1, #0
 8002172:	4804      	ldr	r0, [pc, #16]	; (8002184 <ResetTerminal+0x2c>)
 8002174:	f7ff ff2c 	bl	8001fd0 <print_string>
}
 8002178:	bf00      	nop
 800217a:	3708      	adds	r7, #8
 800217c:	46bd      	mov	sp, r7
 800217e:	bd80      	pop	{r7, pc}
 8002180:	200002bc 	.word	0x200002bc
 8002184:	0800a3a8 	.word	0x0800a3a8

08002188 <InsertLineFeed>:

void InsertLineFeed( uint8_t line_feeds ) {
 8002188:	b580      	push	{r7, lr}
 800218a:	b084      	sub	sp, #16
 800218c:	af00      	add	r7, sp, #0
 800218e:	4603      	mov	r3, r0
 8002190:	71fb      	strb	r3, [r7, #7]
    uint8_t i = 0;         //Use this as a counter
 8002192:	2300      	movs	r3, #0
 8002194:	73fb      	strb	r3, [r7, #15]
    char c = '\r';
 8002196:	230d      	movs	r3, #13
 8002198:	73bb      	strb	r3, [r7, #14]
    
    for(i = 0; i < line_feeds; i++){
 800219a:	2300      	movs	r3, #0
 800219c:	73fb      	strb	r3, [r7, #15]
 800219e:	e014      	b.n	80021ca <InsertLineFeed+0x42>
        HAL_UART_Transmit(&huart1,(uint8_t *) &c, (uint16_t) 0x01, HAL_MAX_DELAY);
 80021a0:	f107 010e 	add.w	r1, r7, #14
 80021a4:	f04f 33ff 	mov.w	r3, #4294967295
 80021a8:	2201      	movs	r2, #1
 80021aa:	480c      	ldr	r0, [pc, #48]	; (80021dc <InsertLineFeed+0x54>)
 80021ac:	f002 faed 	bl	800478a <HAL_UART_Transmit>
        c = '\n'; 
 80021b0:	230a      	movs	r3, #10
 80021b2:	73bb      	strb	r3, [r7, #14]
        HAL_UART_Transmit(&huart1,(uint8_t *) &c, (uint16_t) 0x01, HAL_MAX_DELAY);
 80021b4:	f107 010e 	add.w	r1, r7, #14
 80021b8:	f04f 33ff 	mov.w	r3, #4294967295
 80021bc:	2201      	movs	r2, #1
 80021be:	4807      	ldr	r0, [pc, #28]	; (80021dc <InsertLineFeed+0x54>)
 80021c0:	f002 fae3 	bl	800478a <HAL_UART_Transmit>
    for(i = 0; i < line_feeds; i++){
 80021c4:	7bfb      	ldrb	r3, [r7, #15]
 80021c6:	3301      	adds	r3, #1
 80021c8:	73fb      	strb	r3, [r7, #15]
 80021ca:	7bfa      	ldrb	r2, [r7, #15]
 80021cc:	79fb      	ldrb	r3, [r7, #7]
 80021ce:	429a      	cmp	r2, r3
 80021d0:	d3e6      	bcc.n	80021a0 <InsertLineFeed+0x18>
    }
}
 80021d2:	bf00      	nop
 80021d4:	bf00      	nop
 80021d6:	3710      	adds	r7, #16
 80021d8:	46bd      	mov	sp, r7
 80021da:	bd80      	pop	{r7, pc}
 80021dc:	200002bc 	.word	0x200002bc

080021e0 <ResetRxBuffer>:

void InsertLineSeparator( void ) {
    print_string("---------------------------------", LF);
}

void ResetRxBuffer( void ) {
 80021e0:	b580      	push	{r7, lr}
 80021e2:	af00      	add	r7, sp, #0

    uart.consumer_index = uart.producer_index = 0;                              //Reset the pointers
 80021e4:	4b0a      	ldr	r3, [pc, #40]	; (8002210 <ResetRxBuffer+0x30>)
 80021e6:	2200      	movs	r2, #0
 80021e8:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 80021ec:	4b08      	ldr	r3, [pc, #32]	; (8002210 <ResetRxBuffer+0x30>)
 80021ee:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 80021f2:	4b07      	ldr	r3, [pc, #28]	; (8002210 <ResetRxBuffer+0x30>)
 80021f4:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
    uart.byte_counter = 0;                                            //Reset the data counter
 80021f8:	4b05      	ldr	r3, [pc, #20]	; (8002210 <ResetRxBuffer+0x30>)
 80021fa:	2200      	movs	r2, #0
 80021fc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    memset(uart.rxbuf,'\0',MAX_ELEMENTS);                           //Null out the buffer
 8002200:	2221      	movs	r2, #33	; 0x21
 8002202:	2100      	movs	r1, #0
 8002204:	4802      	ldr	r0, [pc, #8]	; (8002210 <ResetRxBuffer+0x30>)
 8002206:	f002 ffd5 	bl	80051b4 <memset>
} /* End of ResetRxBuffer */
 800220a:	bf00      	nop
 800220c:	bd80      	pop	{r7, pc}
 800220e:	bf00      	nop
 8002210:	20000208 	.word	0x20000208

08002214 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002214:	480c      	ldr	r0, [pc, #48]	; (8002248 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002216:	490d      	ldr	r1, [pc, #52]	; (800224c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002218:	4a0d      	ldr	r2, [pc, #52]	; (8002250 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800221a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800221c:	e002      	b.n	8002224 <LoopCopyDataInit>

0800221e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800221e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002220:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002222:	3304      	adds	r3, #4

08002224 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002224:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002226:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002228:	d3f9      	bcc.n	800221e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800222a:	4a0a      	ldr	r2, [pc, #40]	; (8002254 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800222c:	4c0a      	ldr	r4, [pc, #40]	; (8002258 <LoopFillZerobss+0x22>)
  movs r3, #0
 800222e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002230:	e001      	b.n	8002236 <LoopFillZerobss>

08002232 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002232:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002234:	3204      	adds	r2, #4

08002236 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002236:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002238:	d3fb      	bcc.n	8002232 <FillZerobss>
/* Call the clock system intitialization function.*/
    bl  SystemInit
 800223a:	f7ff fe7b 	bl	8001f34 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800223e:	f002 ff95 	bl	800516c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002242:	f7ff f815 	bl	8001270 <main>
  bx lr
 8002246:	4770      	bx	lr
  ldr r0, =_sdata
 8002248:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800224c:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8002250:	0800a8ec 	.word	0x0800a8ec
  ldr r2, =_sbss
 8002254:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8002258:	2000041c 	.word	0x2000041c

0800225c <ADC1_2_IRQHandler>:
 * @retval None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800225c:	e7fe      	b.n	800225c <ADC1_2_IRQHandler>
	...

08002260 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002264:	4b08      	ldr	r3, [pc, #32]	; (8002288 <HAL_Init+0x28>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4a07      	ldr	r2, [pc, #28]	; (8002288 <HAL_Init+0x28>)
 800226a:	f043 0310 	orr.w	r3, r3, #16
 800226e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002270:	2003      	movs	r0, #3
 8002272:	f000 fb35 	bl	80028e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002276:	200f      	movs	r0, #15
 8002278:	f000 f808 	bl	800228c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800227c:	f7ff fb78 	bl	8001970 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002280:	2300      	movs	r3, #0
}
 8002282:	4618      	mov	r0, r3
 8002284:	bd80      	pop	{r7, pc}
 8002286:	bf00      	nop
 8002288:	40022000 	.word	0x40022000

0800228c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b082      	sub	sp, #8
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002294:	4b12      	ldr	r3, [pc, #72]	; (80022e0 <HAL_InitTick+0x54>)
 8002296:	681a      	ldr	r2, [r3, #0]
 8002298:	4b12      	ldr	r3, [pc, #72]	; (80022e4 <HAL_InitTick+0x58>)
 800229a:	781b      	ldrb	r3, [r3, #0]
 800229c:	4619      	mov	r1, r3
 800229e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80022a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80022aa:	4618      	mov	r0, r3
 80022ac:	f000 fb4d 	bl	800294a <HAL_SYSTICK_Config>
 80022b0:	4603      	mov	r3, r0
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d001      	beq.n	80022ba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80022b6:	2301      	movs	r3, #1
 80022b8:	e00e      	b.n	80022d8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	2b0f      	cmp	r3, #15
 80022be:	d80a      	bhi.n	80022d6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80022c0:	2200      	movs	r2, #0
 80022c2:	6879      	ldr	r1, [r7, #4]
 80022c4:	f04f 30ff 	mov.w	r0, #4294967295
 80022c8:	f000 fb15 	bl	80028f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80022cc:	4a06      	ldr	r2, [pc, #24]	; (80022e8 <HAL_InitTick+0x5c>)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80022d2:	2300      	movs	r3, #0
 80022d4:	e000      	b.n	80022d8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80022d6:	2301      	movs	r3, #1
}
 80022d8:	4618      	mov	r0, r3
 80022da:	3708      	adds	r7, #8
 80022dc:	46bd      	mov	sp, r7
 80022de:	bd80      	pop	{r7, pc}
 80022e0:	20000000 	.word	0x20000000
 80022e4:	20000008 	.word	0x20000008
 80022e8:	20000004 	.word	0x20000004

080022ec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80022ec:	b480      	push	{r7}
 80022ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80022f0:	4b05      	ldr	r3, [pc, #20]	; (8002308 <HAL_IncTick+0x1c>)
 80022f2:	781b      	ldrb	r3, [r3, #0]
 80022f4:	461a      	mov	r2, r3
 80022f6:	4b05      	ldr	r3, [pc, #20]	; (800230c <HAL_IncTick+0x20>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	4413      	add	r3, r2
 80022fc:	4a03      	ldr	r2, [pc, #12]	; (800230c <HAL_IncTick+0x20>)
 80022fe:	6013      	str	r3, [r2, #0]
}
 8002300:	bf00      	nop
 8002302:	46bd      	mov	sp, r7
 8002304:	bc80      	pop	{r7}
 8002306:	4770      	bx	lr
 8002308:	20000008 	.word	0x20000008
 800230c:	20000408 	.word	0x20000408

08002310 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002310:	b480      	push	{r7}
 8002312:	af00      	add	r7, sp, #0
  return uwTick;
 8002314:	4b02      	ldr	r3, [pc, #8]	; (8002320 <HAL_GetTick+0x10>)
 8002316:	681b      	ldr	r3, [r3, #0]
}
 8002318:	4618      	mov	r0, r3
 800231a:	46bd      	mov	sp, r7
 800231c:	bc80      	pop	{r7}
 800231e:	4770      	bx	lr
 8002320:	20000408 	.word	0x20000408

08002324 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b086      	sub	sp, #24
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800232c:	2300      	movs	r3, #0
 800232e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002330:	2300      	movs	r3, #0
 8002332:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002334:	2300      	movs	r3, #0
 8002336:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002338:	2300      	movs	r3, #0
 800233a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d101      	bne.n	8002346 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002342:	2301      	movs	r3, #1
 8002344:	e0be      	b.n	80024c4 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	689b      	ldr	r3, [r3, #8]
 800234a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002350:	2b00      	cmp	r3, #0
 8002352:	d109      	bne.n	8002368 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2200      	movs	r2, #0
 8002358:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	2200      	movs	r2, #0
 800235e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002362:	6878      	ldr	r0, [r7, #4]
 8002364:	f7ff fb36 	bl	80019d4 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002368:	6878      	ldr	r0, [r7, #4]
 800236a:	f000 f9ab 	bl	80026c4 <ADC_ConversionStop_Disable>
 800236e:	4603      	mov	r3, r0
 8002370:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002376:	f003 0310 	and.w	r3, r3, #16
 800237a:	2b00      	cmp	r3, #0
 800237c:	f040 8099 	bne.w	80024b2 <HAL_ADC_Init+0x18e>
 8002380:	7dfb      	ldrb	r3, [r7, #23]
 8002382:	2b00      	cmp	r3, #0
 8002384:	f040 8095 	bne.w	80024b2 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800238c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002390:	f023 0302 	bic.w	r3, r3, #2
 8002394:	f043 0202 	orr.w	r2, r3, #2
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80023a4:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	7b1b      	ldrb	r3, [r3, #12]
 80023aa:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80023ac:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80023ae:	68ba      	ldr	r2, [r7, #8]
 80023b0:	4313      	orrs	r3, r2
 80023b2:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	689b      	ldr	r3, [r3, #8]
 80023b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80023bc:	d003      	beq.n	80023c6 <HAL_ADC_Init+0xa2>
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	689b      	ldr	r3, [r3, #8]
 80023c2:	2b01      	cmp	r3, #1
 80023c4:	d102      	bne.n	80023cc <HAL_ADC_Init+0xa8>
 80023c6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80023ca:	e000      	b.n	80023ce <HAL_ADC_Init+0xaa>
 80023cc:	2300      	movs	r3, #0
 80023ce:	693a      	ldr	r2, [r7, #16]
 80023d0:	4313      	orrs	r3, r2
 80023d2:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	7d1b      	ldrb	r3, [r3, #20]
 80023d8:	2b01      	cmp	r3, #1
 80023da:	d119      	bne.n	8002410 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	7b1b      	ldrb	r3, [r3, #12]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d109      	bne.n	80023f8 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	699b      	ldr	r3, [r3, #24]
 80023e8:	3b01      	subs	r3, #1
 80023ea:	035a      	lsls	r2, r3, #13
 80023ec:	693b      	ldr	r3, [r7, #16]
 80023ee:	4313      	orrs	r3, r2
 80023f0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80023f4:	613b      	str	r3, [r7, #16]
 80023f6:	e00b      	b.n	8002410 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023fc:	f043 0220 	orr.w	r2, r3, #32
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002408:	f043 0201 	orr.w	r2, r3, #1
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	685b      	ldr	r3, [r3, #4]
 8002416:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	693a      	ldr	r2, [r7, #16]
 8002420:	430a      	orrs	r2, r1
 8002422:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	689a      	ldr	r2, [r3, #8]
 800242a:	4b28      	ldr	r3, [pc, #160]	; (80024cc <HAL_ADC_Init+0x1a8>)
 800242c:	4013      	ands	r3, r2
 800242e:	687a      	ldr	r2, [r7, #4]
 8002430:	6812      	ldr	r2, [r2, #0]
 8002432:	68b9      	ldr	r1, [r7, #8]
 8002434:	430b      	orrs	r3, r1
 8002436:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	689b      	ldr	r3, [r3, #8]
 800243c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002440:	d003      	beq.n	800244a <HAL_ADC_Init+0x126>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	689b      	ldr	r3, [r3, #8]
 8002446:	2b01      	cmp	r3, #1
 8002448:	d104      	bne.n	8002454 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	691b      	ldr	r3, [r3, #16]
 800244e:	3b01      	subs	r3, #1
 8002450:	051b      	lsls	r3, r3, #20
 8002452:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800245a:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	68fa      	ldr	r2, [r7, #12]
 8002464:	430a      	orrs	r2, r1
 8002466:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	689a      	ldr	r2, [r3, #8]
 800246e:	4b18      	ldr	r3, [pc, #96]	; (80024d0 <HAL_ADC_Init+0x1ac>)
 8002470:	4013      	ands	r3, r2
 8002472:	68ba      	ldr	r2, [r7, #8]
 8002474:	429a      	cmp	r2, r3
 8002476:	d10b      	bne.n	8002490 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2200      	movs	r2, #0
 800247c:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002482:	f023 0303 	bic.w	r3, r3, #3
 8002486:	f043 0201 	orr.w	r2, r3, #1
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800248e:	e018      	b.n	80024c2 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002494:	f023 0312 	bic.w	r3, r3, #18
 8002498:	f043 0210 	orr.w	r2, r3, #16
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024a4:	f043 0201 	orr.w	r2, r3, #1
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80024ac:	2301      	movs	r3, #1
 80024ae:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80024b0:	e007      	b.n	80024c2 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024b6:	f043 0210 	orr.w	r2, r3, #16
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80024be:	2301      	movs	r3, #1
 80024c0:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80024c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80024c4:	4618      	mov	r0, r3
 80024c6:	3718      	adds	r7, #24
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bd80      	pop	{r7, pc}
 80024cc:	ffe1f7fd 	.word	0xffe1f7fd
 80024d0:	ff1f0efe 	.word	0xff1f0efe

080024d4 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80024d4:	b480      	push	{r7}
 80024d6:	b085      	sub	sp, #20
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
 80024dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80024de:	2300      	movs	r3, #0
 80024e0:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80024e2:	2300      	movs	r3, #0
 80024e4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80024ec:	2b01      	cmp	r3, #1
 80024ee:	d101      	bne.n	80024f4 <HAL_ADC_ConfigChannel+0x20>
 80024f0:	2302      	movs	r3, #2
 80024f2:	e0dc      	b.n	80026ae <HAL_ADC_ConfigChannel+0x1da>
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2201      	movs	r2, #1
 80024f8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	2b06      	cmp	r3, #6
 8002502:	d81c      	bhi.n	800253e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	685a      	ldr	r2, [r3, #4]
 800250e:	4613      	mov	r3, r2
 8002510:	009b      	lsls	r3, r3, #2
 8002512:	4413      	add	r3, r2
 8002514:	3b05      	subs	r3, #5
 8002516:	221f      	movs	r2, #31
 8002518:	fa02 f303 	lsl.w	r3, r2, r3
 800251c:	43db      	mvns	r3, r3
 800251e:	4019      	ands	r1, r3
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	6818      	ldr	r0, [r3, #0]
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	685a      	ldr	r2, [r3, #4]
 8002528:	4613      	mov	r3, r2
 800252a:	009b      	lsls	r3, r3, #2
 800252c:	4413      	add	r3, r2
 800252e:	3b05      	subs	r3, #5
 8002530:	fa00 f203 	lsl.w	r2, r0, r3
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	430a      	orrs	r2, r1
 800253a:	635a      	str	r2, [r3, #52]	; 0x34
 800253c:	e03c      	b.n	80025b8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	2b0c      	cmp	r3, #12
 8002544:	d81c      	bhi.n	8002580 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	685a      	ldr	r2, [r3, #4]
 8002550:	4613      	mov	r3, r2
 8002552:	009b      	lsls	r3, r3, #2
 8002554:	4413      	add	r3, r2
 8002556:	3b23      	subs	r3, #35	; 0x23
 8002558:	221f      	movs	r2, #31
 800255a:	fa02 f303 	lsl.w	r3, r2, r3
 800255e:	43db      	mvns	r3, r3
 8002560:	4019      	ands	r1, r3
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	6818      	ldr	r0, [r3, #0]
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	685a      	ldr	r2, [r3, #4]
 800256a:	4613      	mov	r3, r2
 800256c:	009b      	lsls	r3, r3, #2
 800256e:	4413      	add	r3, r2
 8002570:	3b23      	subs	r3, #35	; 0x23
 8002572:	fa00 f203 	lsl.w	r2, r0, r3
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	430a      	orrs	r2, r1
 800257c:	631a      	str	r2, [r3, #48]	; 0x30
 800257e:	e01b      	b.n	80025b8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	685a      	ldr	r2, [r3, #4]
 800258a:	4613      	mov	r3, r2
 800258c:	009b      	lsls	r3, r3, #2
 800258e:	4413      	add	r3, r2
 8002590:	3b41      	subs	r3, #65	; 0x41
 8002592:	221f      	movs	r2, #31
 8002594:	fa02 f303 	lsl.w	r3, r2, r3
 8002598:	43db      	mvns	r3, r3
 800259a:	4019      	ands	r1, r3
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	6818      	ldr	r0, [r3, #0]
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	685a      	ldr	r2, [r3, #4]
 80025a4:	4613      	mov	r3, r2
 80025a6:	009b      	lsls	r3, r3, #2
 80025a8:	4413      	add	r3, r2
 80025aa:	3b41      	subs	r3, #65	; 0x41
 80025ac:	fa00 f203 	lsl.w	r2, r0, r3
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	430a      	orrs	r2, r1
 80025b6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	2b09      	cmp	r3, #9
 80025be:	d91c      	bls.n	80025fa <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	68d9      	ldr	r1, [r3, #12]
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	681a      	ldr	r2, [r3, #0]
 80025ca:	4613      	mov	r3, r2
 80025cc:	005b      	lsls	r3, r3, #1
 80025ce:	4413      	add	r3, r2
 80025d0:	3b1e      	subs	r3, #30
 80025d2:	2207      	movs	r2, #7
 80025d4:	fa02 f303 	lsl.w	r3, r2, r3
 80025d8:	43db      	mvns	r3, r3
 80025da:	4019      	ands	r1, r3
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	6898      	ldr	r0, [r3, #8]
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	681a      	ldr	r2, [r3, #0]
 80025e4:	4613      	mov	r3, r2
 80025e6:	005b      	lsls	r3, r3, #1
 80025e8:	4413      	add	r3, r2
 80025ea:	3b1e      	subs	r3, #30
 80025ec:	fa00 f203 	lsl.w	r2, r0, r3
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	430a      	orrs	r2, r1
 80025f6:	60da      	str	r2, [r3, #12]
 80025f8:	e019      	b.n	800262e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	6919      	ldr	r1, [r3, #16]
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	681a      	ldr	r2, [r3, #0]
 8002604:	4613      	mov	r3, r2
 8002606:	005b      	lsls	r3, r3, #1
 8002608:	4413      	add	r3, r2
 800260a:	2207      	movs	r2, #7
 800260c:	fa02 f303 	lsl.w	r3, r2, r3
 8002610:	43db      	mvns	r3, r3
 8002612:	4019      	ands	r1, r3
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	6898      	ldr	r0, [r3, #8]
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	681a      	ldr	r2, [r3, #0]
 800261c:	4613      	mov	r3, r2
 800261e:	005b      	lsls	r3, r3, #1
 8002620:	4413      	add	r3, r2
 8002622:	fa00 f203 	lsl.w	r2, r0, r3
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	430a      	orrs	r2, r1
 800262c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	2b10      	cmp	r3, #16
 8002634:	d003      	beq.n	800263e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800263a:	2b11      	cmp	r3, #17
 800263c:	d132      	bne.n	80026a4 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4a1d      	ldr	r2, [pc, #116]	; (80026b8 <HAL_ADC_ConfigChannel+0x1e4>)
 8002644:	4293      	cmp	r3, r2
 8002646:	d125      	bne.n	8002694 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	689b      	ldr	r3, [r3, #8]
 800264e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002652:	2b00      	cmp	r3, #0
 8002654:	d126      	bne.n	80026a4 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	689a      	ldr	r2, [r3, #8]
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002664:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	2b10      	cmp	r3, #16
 800266c:	d11a      	bne.n	80026a4 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800266e:	4b13      	ldr	r3, [pc, #76]	; (80026bc <HAL_ADC_ConfigChannel+0x1e8>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	4a13      	ldr	r2, [pc, #76]	; (80026c0 <HAL_ADC_ConfigChannel+0x1ec>)
 8002674:	fba2 2303 	umull	r2, r3, r2, r3
 8002678:	0c9a      	lsrs	r2, r3, #18
 800267a:	4613      	mov	r3, r2
 800267c:	009b      	lsls	r3, r3, #2
 800267e:	4413      	add	r3, r2
 8002680:	005b      	lsls	r3, r3, #1
 8002682:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002684:	e002      	b.n	800268c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002686:	68bb      	ldr	r3, [r7, #8]
 8002688:	3b01      	subs	r3, #1
 800268a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800268c:	68bb      	ldr	r3, [r7, #8]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d1f9      	bne.n	8002686 <HAL_ADC_ConfigChannel+0x1b2>
 8002692:	e007      	b.n	80026a4 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002698:	f043 0220 	orr.w	r2, r3, #32
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80026a0:	2301      	movs	r3, #1
 80026a2:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2200      	movs	r2, #0
 80026a8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80026ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80026ae:	4618      	mov	r0, r3
 80026b0:	3714      	adds	r7, #20
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bc80      	pop	{r7}
 80026b6:	4770      	bx	lr
 80026b8:	40012400 	.word	0x40012400
 80026bc:	20000000 	.word	0x20000000
 80026c0:	431bde83 	.word	0x431bde83

080026c4 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b084      	sub	sp, #16
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80026cc:	2300      	movs	r3, #0
 80026ce:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	689b      	ldr	r3, [r3, #8]
 80026d6:	f003 0301 	and.w	r3, r3, #1
 80026da:	2b01      	cmp	r3, #1
 80026dc:	d12e      	bne.n	800273c <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	689a      	ldr	r2, [r3, #8]
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f022 0201 	bic.w	r2, r2, #1
 80026ec:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80026ee:	f7ff fe0f 	bl	8002310 <HAL_GetTick>
 80026f2:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80026f4:	e01b      	b.n	800272e <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80026f6:	f7ff fe0b 	bl	8002310 <HAL_GetTick>
 80026fa:	4602      	mov	r2, r0
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	1ad3      	subs	r3, r2, r3
 8002700:	2b02      	cmp	r3, #2
 8002702:	d914      	bls.n	800272e <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	689b      	ldr	r3, [r3, #8]
 800270a:	f003 0301 	and.w	r3, r3, #1
 800270e:	2b01      	cmp	r3, #1
 8002710:	d10d      	bne.n	800272e <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002716:	f043 0210 	orr.w	r2, r3, #16
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002722:	f043 0201 	orr.w	r2, r3, #1
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 800272a:	2301      	movs	r3, #1
 800272c:	e007      	b.n	800273e <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	689b      	ldr	r3, [r3, #8]
 8002734:	f003 0301 	and.w	r3, r3, #1
 8002738:	2b01      	cmp	r3, #1
 800273a:	d0dc      	beq.n	80026f6 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800273c:	2300      	movs	r3, #0
}
 800273e:	4618      	mov	r0, r3
 8002740:	3710      	adds	r7, #16
 8002742:	46bd      	mov	sp, r7
 8002744:	bd80      	pop	{r7, pc}
	...

08002748 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002748:	b480      	push	{r7}
 800274a:	b085      	sub	sp, #20
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	f003 0307 	and.w	r3, r3, #7
 8002756:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002758:	4b0c      	ldr	r3, [pc, #48]	; (800278c <__NVIC_SetPriorityGrouping+0x44>)
 800275a:	68db      	ldr	r3, [r3, #12]
 800275c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800275e:	68ba      	ldr	r2, [r7, #8]
 8002760:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002764:	4013      	ands	r3, r2
 8002766:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800276c:	68bb      	ldr	r3, [r7, #8]
 800276e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002770:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002774:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002778:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800277a:	4a04      	ldr	r2, [pc, #16]	; (800278c <__NVIC_SetPriorityGrouping+0x44>)
 800277c:	68bb      	ldr	r3, [r7, #8]
 800277e:	60d3      	str	r3, [r2, #12]
}
 8002780:	bf00      	nop
 8002782:	3714      	adds	r7, #20
 8002784:	46bd      	mov	sp, r7
 8002786:	bc80      	pop	{r7}
 8002788:	4770      	bx	lr
 800278a:	bf00      	nop
 800278c:	e000ed00 	.word	0xe000ed00

08002790 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002790:	b480      	push	{r7}
 8002792:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002794:	4b04      	ldr	r3, [pc, #16]	; (80027a8 <__NVIC_GetPriorityGrouping+0x18>)
 8002796:	68db      	ldr	r3, [r3, #12]
 8002798:	0a1b      	lsrs	r3, r3, #8
 800279a:	f003 0307 	and.w	r3, r3, #7
}
 800279e:	4618      	mov	r0, r3
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bc80      	pop	{r7}
 80027a4:	4770      	bx	lr
 80027a6:	bf00      	nop
 80027a8:	e000ed00 	.word	0xe000ed00

080027ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027ac:	b480      	push	{r7}
 80027ae:	b083      	sub	sp, #12
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	4603      	mov	r3, r0
 80027b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	db0b      	blt.n	80027d6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80027be:	79fb      	ldrb	r3, [r7, #7]
 80027c0:	f003 021f 	and.w	r2, r3, #31
 80027c4:	4906      	ldr	r1, [pc, #24]	; (80027e0 <__NVIC_EnableIRQ+0x34>)
 80027c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027ca:	095b      	lsrs	r3, r3, #5
 80027cc:	2001      	movs	r0, #1
 80027ce:	fa00 f202 	lsl.w	r2, r0, r2
 80027d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80027d6:	bf00      	nop
 80027d8:	370c      	adds	r7, #12
 80027da:	46bd      	mov	sp, r7
 80027dc:	bc80      	pop	{r7}
 80027de:	4770      	bx	lr
 80027e0:	e000e100 	.word	0xe000e100

080027e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80027e4:	b480      	push	{r7}
 80027e6:	b083      	sub	sp, #12
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	4603      	mov	r3, r0
 80027ec:	6039      	str	r1, [r7, #0]
 80027ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	db0a      	blt.n	800280e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	b2da      	uxtb	r2, r3
 80027fc:	490c      	ldr	r1, [pc, #48]	; (8002830 <__NVIC_SetPriority+0x4c>)
 80027fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002802:	0112      	lsls	r2, r2, #4
 8002804:	b2d2      	uxtb	r2, r2
 8002806:	440b      	add	r3, r1
 8002808:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800280c:	e00a      	b.n	8002824 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	b2da      	uxtb	r2, r3
 8002812:	4908      	ldr	r1, [pc, #32]	; (8002834 <__NVIC_SetPriority+0x50>)
 8002814:	79fb      	ldrb	r3, [r7, #7]
 8002816:	f003 030f 	and.w	r3, r3, #15
 800281a:	3b04      	subs	r3, #4
 800281c:	0112      	lsls	r2, r2, #4
 800281e:	b2d2      	uxtb	r2, r2
 8002820:	440b      	add	r3, r1
 8002822:	761a      	strb	r2, [r3, #24]
}
 8002824:	bf00      	nop
 8002826:	370c      	adds	r7, #12
 8002828:	46bd      	mov	sp, r7
 800282a:	bc80      	pop	{r7}
 800282c:	4770      	bx	lr
 800282e:	bf00      	nop
 8002830:	e000e100 	.word	0xe000e100
 8002834:	e000ed00 	.word	0xe000ed00

08002838 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002838:	b480      	push	{r7}
 800283a:	b089      	sub	sp, #36	; 0x24
 800283c:	af00      	add	r7, sp, #0
 800283e:	60f8      	str	r0, [r7, #12]
 8002840:	60b9      	str	r1, [r7, #8]
 8002842:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	f003 0307 	and.w	r3, r3, #7
 800284a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800284c:	69fb      	ldr	r3, [r7, #28]
 800284e:	f1c3 0307 	rsb	r3, r3, #7
 8002852:	2b04      	cmp	r3, #4
 8002854:	bf28      	it	cs
 8002856:	2304      	movcs	r3, #4
 8002858:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800285a:	69fb      	ldr	r3, [r7, #28]
 800285c:	3304      	adds	r3, #4
 800285e:	2b06      	cmp	r3, #6
 8002860:	d902      	bls.n	8002868 <NVIC_EncodePriority+0x30>
 8002862:	69fb      	ldr	r3, [r7, #28]
 8002864:	3b03      	subs	r3, #3
 8002866:	e000      	b.n	800286a <NVIC_EncodePriority+0x32>
 8002868:	2300      	movs	r3, #0
 800286a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800286c:	f04f 32ff 	mov.w	r2, #4294967295
 8002870:	69bb      	ldr	r3, [r7, #24]
 8002872:	fa02 f303 	lsl.w	r3, r2, r3
 8002876:	43da      	mvns	r2, r3
 8002878:	68bb      	ldr	r3, [r7, #8]
 800287a:	401a      	ands	r2, r3
 800287c:	697b      	ldr	r3, [r7, #20]
 800287e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002880:	f04f 31ff 	mov.w	r1, #4294967295
 8002884:	697b      	ldr	r3, [r7, #20]
 8002886:	fa01 f303 	lsl.w	r3, r1, r3
 800288a:	43d9      	mvns	r1, r3
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002890:	4313      	orrs	r3, r2
         );
}
 8002892:	4618      	mov	r0, r3
 8002894:	3724      	adds	r7, #36	; 0x24
 8002896:	46bd      	mov	sp, r7
 8002898:	bc80      	pop	{r7}
 800289a:	4770      	bx	lr

0800289c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b082      	sub	sp, #8
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	3b01      	subs	r3, #1
 80028a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80028ac:	d301      	bcc.n	80028b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80028ae:	2301      	movs	r3, #1
 80028b0:	e00f      	b.n	80028d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80028b2:	4a0a      	ldr	r2, [pc, #40]	; (80028dc <SysTick_Config+0x40>)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	3b01      	subs	r3, #1
 80028b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80028ba:	210f      	movs	r1, #15
 80028bc:	f04f 30ff 	mov.w	r0, #4294967295
 80028c0:	f7ff ff90 	bl	80027e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80028c4:	4b05      	ldr	r3, [pc, #20]	; (80028dc <SysTick_Config+0x40>)
 80028c6:	2200      	movs	r2, #0
 80028c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80028ca:	4b04      	ldr	r3, [pc, #16]	; (80028dc <SysTick_Config+0x40>)
 80028cc:	2207      	movs	r2, #7
 80028ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80028d0:	2300      	movs	r3, #0
}
 80028d2:	4618      	mov	r0, r3
 80028d4:	3708      	adds	r7, #8
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bd80      	pop	{r7, pc}
 80028da:	bf00      	nop
 80028dc:	e000e010 	.word	0xe000e010

080028e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b082      	sub	sp, #8
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80028e8:	6878      	ldr	r0, [r7, #4]
 80028ea:	f7ff ff2d 	bl	8002748 <__NVIC_SetPriorityGrouping>
}
 80028ee:	bf00      	nop
 80028f0:	3708      	adds	r7, #8
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bd80      	pop	{r7, pc}

080028f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80028f6:	b580      	push	{r7, lr}
 80028f8:	b086      	sub	sp, #24
 80028fa:	af00      	add	r7, sp, #0
 80028fc:	4603      	mov	r3, r0
 80028fe:	60b9      	str	r1, [r7, #8]
 8002900:	607a      	str	r2, [r7, #4]
 8002902:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002904:	2300      	movs	r3, #0
 8002906:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002908:	f7ff ff42 	bl	8002790 <__NVIC_GetPriorityGrouping>
 800290c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800290e:	687a      	ldr	r2, [r7, #4]
 8002910:	68b9      	ldr	r1, [r7, #8]
 8002912:	6978      	ldr	r0, [r7, #20]
 8002914:	f7ff ff90 	bl	8002838 <NVIC_EncodePriority>
 8002918:	4602      	mov	r2, r0
 800291a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800291e:	4611      	mov	r1, r2
 8002920:	4618      	mov	r0, r3
 8002922:	f7ff ff5f 	bl	80027e4 <__NVIC_SetPriority>
}
 8002926:	bf00      	nop
 8002928:	3718      	adds	r7, #24
 800292a:	46bd      	mov	sp, r7
 800292c:	bd80      	pop	{r7, pc}

0800292e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800292e:	b580      	push	{r7, lr}
 8002930:	b082      	sub	sp, #8
 8002932:	af00      	add	r7, sp, #0
 8002934:	4603      	mov	r3, r0
 8002936:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002938:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800293c:	4618      	mov	r0, r3
 800293e:	f7ff ff35 	bl	80027ac <__NVIC_EnableIRQ>
}
 8002942:	bf00      	nop
 8002944:	3708      	adds	r7, #8
 8002946:	46bd      	mov	sp, r7
 8002948:	bd80      	pop	{r7, pc}

0800294a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800294a:	b580      	push	{r7, lr}
 800294c:	b082      	sub	sp, #8
 800294e:	af00      	add	r7, sp, #0
 8002950:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002952:	6878      	ldr	r0, [r7, #4]
 8002954:	f7ff ffa2 	bl	800289c <SysTick_Config>
 8002958:	4603      	mov	r3, r0
}
 800295a:	4618      	mov	r0, r3
 800295c:	3708      	adds	r7, #8
 800295e:	46bd      	mov	sp, r7
 8002960:	bd80      	pop	{r7, pc}

08002962 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002962:	b580      	push	{r7, lr}
 8002964:	b082      	sub	sp, #8
 8002966:	af00      	add	r7, sp, #0
 8002968:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2b00      	cmp	r3, #0
 800296e:	d101      	bne.n	8002974 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8002970:	2301      	movs	r3, #1
 8002972:	e014      	b.n	800299e <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	791b      	ldrb	r3, [r3, #4]
 8002978:	b2db      	uxtb	r3, r3
 800297a:	2b00      	cmp	r3, #0
 800297c:	d105      	bne.n	800298a <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2200      	movs	r2, #0
 8002982:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002984:	6878      	ldr	r0, [r7, #4]
 8002986:	f7ff f861 	bl	8001a4c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	2202      	movs	r2, #2
 800298e:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2200      	movs	r2, #0
 8002994:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2201      	movs	r2, #1
 800299a:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800299c:	2300      	movs	r3, #0
}
 800299e:	4618      	mov	r0, r3
 80029a0:	3708      	adds	r7, #8
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bd80      	pop	{r7, pc}

080029a6 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80029a6:	b480      	push	{r7}
 80029a8:	b083      	sub	sp, #12
 80029aa:	af00      	add	r7, sp, #0
 80029ac:	6078      	str	r0, [r7, #4]
 80029ae:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	795b      	ldrb	r3, [r3, #5]
 80029b4:	2b01      	cmp	r3, #1
 80029b6:	d101      	bne.n	80029bc <HAL_DAC_Start+0x16>
 80029b8:	2302      	movs	r3, #2
 80029ba:	e040      	b.n	8002a3e <HAL_DAC_Start+0x98>
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2201      	movs	r2, #1
 80029c0:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2202      	movs	r2, #2
 80029c6:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	6819      	ldr	r1, [r3, #0]
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	f003 0310 	and.w	r3, r3, #16
 80029d4:	2201      	movs	r2, #1
 80029d6:	409a      	lsls	r2, r3
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	430a      	orrs	r2, r1
 80029de:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d10f      	bne.n	8002a06 <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 80029f0:	2b3c      	cmp	r3, #60	; 0x3c
 80029f2:	d11d      	bne.n	8002a30 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	685a      	ldr	r2, [r3, #4]
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f042 0201 	orr.w	r2, r2, #1
 8002a02:	605a      	str	r2, [r3, #4]
 8002a04:	e014      	b.n	8002a30 <HAL_DAC_Start+0x8a>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	f003 0310 	and.w	r3, r3, #16
 8002a16:	213c      	movs	r1, #60	; 0x3c
 8002a18:	fa01 f303 	lsl.w	r3, r1, r3
 8002a1c:	429a      	cmp	r2, r3
 8002a1e:	d107      	bne.n	8002a30 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	685a      	ldr	r2, [r3, #4]
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f042 0202 	orr.w	r2, r2, #2
 8002a2e:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2201      	movs	r2, #1
 8002a34:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2200      	movs	r2, #0
 8002a3a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002a3c:	2300      	movs	r3, #0
}
 8002a3e:	4618      	mov	r0, r3
 8002a40:	370c      	adds	r7, #12
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bc80      	pop	{r7}
 8002a46:	4770      	bx	lr

08002a48 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8002a48:	b480      	push	{r7}
 8002a4a:	b087      	sub	sp, #28
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	60f8      	str	r0, [r7, #12]
 8002a50:	60b9      	str	r1, [r7, #8]
 8002a52:	607a      	str	r2, [r7, #4]
 8002a54:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8002a56:	2300      	movs	r3, #0
 8002a58:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8002a60:	68bb      	ldr	r3, [r7, #8]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d105      	bne.n	8002a72 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8002a66:	697a      	ldr	r2, [r7, #20]
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	4413      	add	r3, r2
 8002a6c:	3308      	adds	r3, #8
 8002a6e:	617b      	str	r3, [r7, #20]
 8002a70:	e004      	b.n	8002a7c <HAL_DAC_SetValue+0x34>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8002a72:	697a      	ldr	r2, [r7, #20]
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	4413      	add	r3, r2
 8002a78:	3314      	adds	r3, #20
 8002a7a:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8002a7c:	697b      	ldr	r3, [r7, #20]
 8002a7e:	461a      	mov	r2, r3
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8002a84:	2300      	movs	r3, #0
}
 8002a86:	4618      	mov	r0, r3
 8002a88:	371c      	adds	r7, #28
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bc80      	pop	{r7}
 8002a8e:	4770      	bx	lr

08002a90 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002a90:	b480      	push	{r7}
 8002a92:	b087      	sub	sp, #28
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	60f8      	str	r0, [r7, #12]
 8002a98:	60b9      	str	r1, [r7, #8]
 8002a9a:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	795b      	ldrb	r3, [r3, #5]
 8002aa0:	2b01      	cmp	r3, #1
 8002aa2:	d101      	bne.n	8002aa8 <HAL_DAC_ConfigChannel+0x18>
 8002aa4:	2302      	movs	r3, #2
 8002aa6:	e03c      	b.n	8002b22 <HAL_DAC_ConfigChannel+0x92>
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	2201      	movs	r2, #1
 8002aac:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	2202      	movs	r2, #2
 8002ab2:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	f003 0310 	and.w	r3, r3, #16
 8002ac2:	f640 72fe 	movw	r2, #4094	; 0xffe
 8002ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8002aca:	43db      	mvns	r3, r3
 8002acc:	697a      	ldr	r2, [r7, #20]
 8002ace:	4013      	ands	r3, r2
 8002ad0:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8002ad2:	68bb      	ldr	r3, [r7, #8]
 8002ad4:	681a      	ldr	r2, [r3, #0]
 8002ad6:	68bb      	ldr	r3, [r7, #8]
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	4313      	orrs	r3, r2
 8002adc:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	f003 0310 	and.w	r3, r3, #16
 8002ae4:	693a      	ldr	r2, [r7, #16]
 8002ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8002aea:	697a      	ldr	r2, [r7, #20]
 8002aec:	4313      	orrs	r3, r2
 8002aee:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	697a      	ldr	r2, [r7, #20]
 8002af6:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	6819      	ldr	r1, [r3, #0]
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	f003 0310 	and.w	r3, r3, #16
 8002b04:	22c0      	movs	r2, #192	; 0xc0
 8002b06:	fa02 f303 	lsl.w	r3, r2, r3
 8002b0a:	43da      	mvns	r2, r3
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	400a      	ands	r2, r1
 8002b12:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	2201      	movs	r2, #1
 8002b18:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002b20:	2300      	movs	r3, #0
}
 8002b22:	4618      	mov	r0, r3
 8002b24:	371c      	adds	r7, #28
 8002b26:	46bd      	mov	sp, r7
 8002b28:	bc80      	pop	{r7}
 8002b2a:	4770      	bx	lr

08002b2c <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	b085      	sub	sp, #20
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b34:	2300      	movs	r3, #0
 8002b36:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002b3e:	2b02      	cmp	r3, #2
 8002b40:	d008      	beq.n	8002b54 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2204      	movs	r2, #4
 8002b46:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002b50:	2301      	movs	r3, #1
 8002b52:	e020      	b.n	8002b96 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	681a      	ldr	r2, [r3, #0]
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f022 020e 	bic.w	r2, r2, #14
 8002b62:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	681a      	ldr	r2, [r3, #0]
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f022 0201 	bic.w	r2, r2, #1
 8002b72:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b7c:	2101      	movs	r1, #1
 8002b7e:	fa01 f202 	lsl.w	r2, r1, r2
 8002b82:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2201      	movs	r2, #1
 8002b88:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2200      	movs	r2, #0
 8002b90:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002b94:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b96:	4618      	mov	r0, r3
 8002b98:	3714      	adds	r7, #20
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bc80      	pop	{r7}
 8002b9e:	4770      	bx	lr

08002ba0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b084      	sub	sp, #16
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ba8:	2300      	movs	r3, #0
 8002baa:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002bb2:	2b02      	cmp	r3, #2
 8002bb4:	d005      	beq.n	8002bc2 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2204      	movs	r2, #4
 8002bba:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002bbc:	2301      	movs	r3, #1
 8002bbe:	73fb      	strb	r3, [r7, #15]
 8002bc0:	e0d6      	b.n	8002d70 <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	681a      	ldr	r2, [r3, #0]
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f022 020e 	bic.w	r2, r2, #14
 8002bd0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	681a      	ldr	r2, [r3, #0]
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f022 0201 	bic.w	r2, r2, #1
 8002be0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	461a      	mov	r2, r3
 8002be8:	4b64      	ldr	r3, [pc, #400]	; (8002d7c <HAL_DMA_Abort_IT+0x1dc>)
 8002bea:	429a      	cmp	r2, r3
 8002bec:	d958      	bls.n	8002ca0 <HAL_DMA_Abort_IT+0x100>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4a63      	ldr	r2, [pc, #396]	; (8002d80 <HAL_DMA_Abort_IT+0x1e0>)
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	d04f      	beq.n	8002c98 <HAL_DMA_Abort_IT+0xf8>
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4a61      	ldr	r2, [pc, #388]	; (8002d84 <HAL_DMA_Abort_IT+0x1e4>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d048      	beq.n	8002c94 <HAL_DMA_Abort_IT+0xf4>
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4a60      	ldr	r2, [pc, #384]	; (8002d88 <HAL_DMA_Abort_IT+0x1e8>)
 8002c08:	4293      	cmp	r3, r2
 8002c0a:	d040      	beq.n	8002c8e <HAL_DMA_Abort_IT+0xee>
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4a5e      	ldr	r2, [pc, #376]	; (8002d8c <HAL_DMA_Abort_IT+0x1ec>)
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d038      	beq.n	8002c88 <HAL_DMA_Abort_IT+0xe8>
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4a5d      	ldr	r2, [pc, #372]	; (8002d90 <HAL_DMA_Abort_IT+0x1f0>)
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	d030      	beq.n	8002c82 <HAL_DMA_Abort_IT+0xe2>
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4a5b      	ldr	r2, [pc, #364]	; (8002d94 <HAL_DMA_Abort_IT+0x1f4>)
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d028      	beq.n	8002c7c <HAL_DMA_Abort_IT+0xdc>
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4a53      	ldr	r2, [pc, #332]	; (8002d7c <HAL_DMA_Abort_IT+0x1dc>)
 8002c30:	4293      	cmp	r3, r2
 8002c32:	d020      	beq.n	8002c76 <HAL_DMA_Abort_IT+0xd6>
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4a57      	ldr	r2, [pc, #348]	; (8002d98 <HAL_DMA_Abort_IT+0x1f8>)
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d019      	beq.n	8002c72 <HAL_DMA_Abort_IT+0xd2>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4a56      	ldr	r2, [pc, #344]	; (8002d9c <HAL_DMA_Abort_IT+0x1fc>)
 8002c44:	4293      	cmp	r3, r2
 8002c46:	d012      	beq.n	8002c6e <HAL_DMA_Abort_IT+0xce>
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4a54      	ldr	r2, [pc, #336]	; (8002da0 <HAL_DMA_Abort_IT+0x200>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d00a      	beq.n	8002c68 <HAL_DMA_Abort_IT+0xc8>
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4a53      	ldr	r2, [pc, #332]	; (8002da4 <HAL_DMA_Abort_IT+0x204>)
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	d102      	bne.n	8002c62 <HAL_DMA_Abort_IT+0xc2>
 8002c5c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c60:	e01b      	b.n	8002c9a <HAL_DMA_Abort_IT+0xfa>
 8002c62:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002c66:	e018      	b.n	8002c9a <HAL_DMA_Abort_IT+0xfa>
 8002c68:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002c6c:	e015      	b.n	8002c9a <HAL_DMA_Abort_IT+0xfa>
 8002c6e:	2310      	movs	r3, #16
 8002c70:	e013      	b.n	8002c9a <HAL_DMA_Abort_IT+0xfa>
 8002c72:	2301      	movs	r3, #1
 8002c74:	e011      	b.n	8002c9a <HAL_DMA_Abort_IT+0xfa>
 8002c76:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002c7a:	e00e      	b.n	8002c9a <HAL_DMA_Abort_IT+0xfa>
 8002c7c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002c80:	e00b      	b.n	8002c9a <HAL_DMA_Abort_IT+0xfa>
 8002c82:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002c86:	e008      	b.n	8002c9a <HAL_DMA_Abort_IT+0xfa>
 8002c88:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c8c:	e005      	b.n	8002c9a <HAL_DMA_Abort_IT+0xfa>
 8002c8e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002c92:	e002      	b.n	8002c9a <HAL_DMA_Abort_IT+0xfa>
 8002c94:	2310      	movs	r3, #16
 8002c96:	e000      	b.n	8002c9a <HAL_DMA_Abort_IT+0xfa>
 8002c98:	2301      	movs	r3, #1
 8002c9a:	4a43      	ldr	r2, [pc, #268]	; (8002da8 <HAL_DMA_Abort_IT+0x208>)
 8002c9c:	6053      	str	r3, [r2, #4]
 8002c9e:	e057      	b.n	8002d50 <HAL_DMA_Abort_IT+0x1b0>
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4a36      	ldr	r2, [pc, #216]	; (8002d80 <HAL_DMA_Abort_IT+0x1e0>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d04f      	beq.n	8002d4a <HAL_DMA_Abort_IT+0x1aa>
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4a35      	ldr	r2, [pc, #212]	; (8002d84 <HAL_DMA_Abort_IT+0x1e4>)
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d048      	beq.n	8002d46 <HAL_DMA_Abort_IT+0x1a6>
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4a33      	ldr	r2, [pc, #204]	; (8002d88 <HAL_DMA_Abort_IT+0x1e8>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d040      	beq.n	8002d40 <HAL_DMA_Abort_IT+0x1a0>
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4a32      	ldr	r2, [pc, #200]	; (8002d8c <HAL_DMA_Abort_IT+0x1ec>)
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	d038      	beq.n	8002d3a <HAL_DMA_Abort_IT+0x19a>
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4a30      	ldr	r2, [pc, #192]	; (8002d90 <HAL_DMA_Abort_IT+0x1f0>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d030      	beq.n	8002d34 <HAL_DMA_Abort_IT+0x194>
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4a2f      	ldr	r2, [pc, #188]	; (8002d94 <HAL_DMA_Abort_IT+0x1f4>)
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	d028      	beq.n	8002d2e <HAL_DMA_Abort_IT+0x18e>
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4a26      	ldr	r2, [pc, #152]	; (8002d7c <HAL_DMA_Abort_IT+0x1dc>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d020      	beq.n	8002d28 <HAL_DMA_Abort_IT+0x188>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	4a2b      	ldr	r2, [pc, #172]	; (8002d98 <HAL_DMA_Abort_IT+0x1f8>)
 8002cec:	4293      	cmp	r3, r2
 8002cee:	d019      	beq.n	8002d24 <HAL_DMA_Abort_IT+0x184>
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4a29      	ldr	r2, [pc, #164]	; (8002d9c <HAL_DMA_Abort_IT+0x1fc>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d012      	beq.n	8002d20 <HAL_DMA_Abort_IT+0x180>
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4a28      	ldr	r2, [pc, #160]	; (8002da0 <HAL_DMA_Abort_IT+0x200>)
 8002d00:	4293      	cmp	r3, r2
 8002d02:	d00a      	beq.n	8002d1a <HAL_DMA_Abort_IT+0x17a>
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4a26      	ldr	r2, [pc, #152]	; (8002da4 <HAL_DMA_Abort_IT+0x204>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d102      	bne.n	8002d14 <HAL_DMA_Abort_IT+0x174>
 8002d0e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d12:	e01b      	b.n	8002d4c <HAL_DMA_Abort_IT+0x1ac>
 8002d14:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002d18:	e018      	b.n	8002d4c <HAL_DMA_Abort_IT+0x1ac>
 8002d1a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002d1e:	e015      	b.n	8002d4c <HAL_DMA_Abort_IT+0x1ac>
 8002d20:	2310      	movs	r3, #16
 8002d22:	e013      	b.n	8002d4c <HAL_DMA_Abort_IT+0x1ac>
 8002d24:	2301      	movs	r3, #1
 8002d26:	e011      	b.n	8002d4c <HAL_DMA_Abort_IT+0x1ac>
 8002d28:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002d2c:	e00e      	b.n	8002d4c <HAL_DMA_Abort_IT+0x1ac>
 8002d2e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002d32:	e00b      	b.n	8002d4c <HAL_DMA_Abort_IT+0x1ac>
 8002d34:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002d38:	e008      	b.n	8002d4c <HAL_DMA_Abort_IT+0x1ac>
 8002d3a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d3e:	e005      	b.n	8002d4c <HAL_DMA_Abort_IT+0x1ac>
 8002d40:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002d44:	e002      	b.n	8002d4c <HAL_DMA_Abort_IT+0x1ac>
 8002d46:	2310      	movs	r3, #16
 8002d48:	e000      	b.n	8002d4c <HAL_DMA_Abort_IT+0x1ac>
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	4a17      	ldr	r2, [pc, #92]	; (8002dac <HAL_DMA_Abort_IT+0x20c>)
 8002d4e:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2201      	movs	r2, #1
 8002d54:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d003      	beq.n	8002d70 <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d6c:	6878      	ldr	r0, [r7, #4]
 8002d6e:	4798      	blx	r3
    } 
  }
  return status;
 8002d70:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d72:	4618      	mov	r0, r3
 8002d74:	3710      	adds	r7, #16
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bd80      	pop	{r7, pc}
 8002d7a:	bf00      	nop
 8002d7c:	40020080 	.word	0x40020080
 8002d80:	40020008 	.word	0x40020008
 8002d84:	4002001c 	.word	0x4002001c
 8002d88:	40020030 	.word	0x40020030
 8002d8c:	40020044 	.word	0x40020044
 8002d90:	40020058 	.word	0x40020058
 8002d94:	4002006c 	.word	0x4002006c
 8002d98:	40020408 	.word	0x40020408
 8002d9c:	4002041c 	.word	0x4002041c
 8002da0:	40020430 	.word	0x40020430
 8002da4:	40020444 	.word	0x40020444
 8002da8:	40020400 	.word	0x40020400
 8002dac:	40020000 	.word	0x40020000

08002db0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002db0:	b480      	push	{r7}
 8002db2:	b08b      	sub	sp, #44	; 0x2c
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
 8002db8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002dba:	2300      	movs	r3, #0
 8002dbc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002dc2:	e169      	b.n	8003098 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002dc4:	2201      	movs	r2, #1
 8002dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dcc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	69fa      	ldr	r2, [r7, #28]
 8002dd4:	4013      	ands	r3, r2
 8002dd6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002dd8:	69ba      	ldr	r2, [r7, #24]
 8002dda:	69fb      	ldr	r3, [r7, #28]
 8002ddc:	429a      	cmp	r2, r3
 8002dde:	f040 8158 	bne.w	8003092 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	4a9a      	ldr	r2, [pc, #616]	; (8003050 <HAL_GPIO_Init+0x2a0>)
 8002de8:	4293      	cmp	r3, r2
 8002dea:	d05e      	beq.n	8002eaa <HAL_GPIO_Init+0xfa>
 8002dec:	4a98      	ldr	r2, [pc, #608]	; (8003050 <HAL_GPIO_Init+0x2a0>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d875      	bhi.n	8002ede <HAL_GPIO_Init+0x12e>
 8002df2:	4a98      	ldr	r2, [pc, #608]	; (8003054 <HAL_GPIO_Init+0x2a4>)
 8002df4:	4293      	cmp	r3, r2
 8002df6:	d058      	beq.n	8002eaa <HAL_GPIO_Init+0xfa>
 8002df8:	4a96      	ldr	r2, [pc, #600]	; (8003054 <HAL_GPIO_Init+0x2a4>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d86f      	bhi.n	8002ede <HAL_GPIO_Init+0x12e>
 8002dfe:	4a96      	ldr	r2, [pc, #600]	; (8003058 <HAL_GPIO_Init+0x2a8>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d052      	beq.n	8002eaa <HAL_GPIO_Init+0xfa>
 8002e04:	4a94      	ldr	r2, [pc, #592]	; (8003058 <HAL_GPIO_Init+0x2a8>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d869      	bhi.n	8002ede <HAL_GPIO_Init+0x12e>
 8002e0a:	4a94      	ldr	r2, [pc, #592]	; (800305c <HAL_GPIO_Init+0x2ac>)
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d04c      	beq.n	8002eaa <HAL_GPIO_Init+0xfa>
 8002e10:	4a92      	ldr	r2, [pc, #584]	; (800305c <HAL_GPIO_Init+0x2ac>)
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d863      	bhi.n	8002ede <HAL_GPIO_Init+0x12e>
 8002e16:	4a92      	ldr	r2, [pc, #584]	; (8003060 <HAL_GPIO_Init+0x2b0>)
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	d046      	beq.n	8002eaa <HAL_GPIO_Init+0xfa>
 8002e1c:	4a90      	ldr	r2, [pc, #576]	; (8003060 <HAL_GPIO_Init+0x2b0>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d85d      	bhi.n	8002ede <HAL_GPIO_Init+0x12e>
 8002e22:	2b12      	cmp	r3, #18
 8002e24:	d82a      	bhi.n	8002e7c <HAL_GPIO_Init+0xcc>
 8002e26:	2b12      	cmp	r3, #18
 8002e28:	d859      	bhi.n	8002ede <HAL_GPIO_Init+0x12e>
 8002e2a:	a201      	add	r2, pc, #4	; (adr r2, 8002e30 <HAL_GPIO_Init+0x80>)
 8002e2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e30:	08002eab 	.word	0x08002eab
 8002e34:	08002e85 	.word	0x08002e85
 8002e38:	08002e97 	.word	0x08002e97
 8002e3c:	08002ed9 	.word	0x08002ed9
 8002e40:	08002edf 	.word	0x08002edf
 8002e44:	08002edf 	.word	0x08002edf
 8002e48:	08002edf 	.word	0x08002edf
 8002e4c:	08002edf 	.word	0x08002edf
 8002e50:	08002edf 	.word	0x08002edf
 8002e54:	08002edf 	.word	0x08002edf
 8002e58:	08002edf 	.word	0x08002edf
 8002e5c:	08002edf 	.word	0x08002edf
 8002e60:	08002edf 	.word	0x08002edf
 8002e64:	08002edf 	.word	0x08002edf
 8002e68:	08002edf 	.word	0x08002edf
 8002e6c:	08002edf 	.word	0x08002edf
 8002e70:	08002edf 	.word	0x08002edf
 8002e74:	08002e8d 	.word	0x08002e8d
 8002e78:	08002ea1 	.word	0x08002ea1
 8002e7c:	4a79      	ldr	r2, [pc, #484]	; (8003064 <HAL_GPIO_Init+0x2b4>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d013      	beq.n	8002eaa <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002e82:	e02c      	b.n	8002ede <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	68db      	ldr	r3, [r3, #12]
 8002e88:	623b      	str	r3, [r7, #32]
          break;
 8002e8a:	e029      	b.n	8002ee0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	68db      	ldr	r3, [r3, #12]
 8002e90:	3304      	adds	r3, #4
 8002e92:	623b      	str	r3, [r7, #32]
          break;
 8002e94:	e024      	b.n	8002ee0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	68db      	ldr	r3, [r3, #12]
 8002e9a:	3308      	adds	r3, #8
 8002e9c:	623b      	str	r3, [r7, #32]
          break;
 8002e9e:	e01f      	b.n	8002ee0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	68db      	ldr	r3, [r3, #12]
 8002ea4:	330c      	adds	r3, #12
 8002ea6:	623b      	str	r3, [r7, #32]
          break;
 8002ea8:	e01a      	b.n	8002ee0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	689b      	ldr	r3, [r3, #8]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d102      	bne.n	8002eb8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002eb2:	2304      	movs	r3, #4
 8002eb4:	623b      	str	r3, [r7, #32]
          break;
 8002eb6:	e013      	b.n	8002ee0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	689b      	ldr	r3, [r3, #8]
 8002ebc:	2b01      	cmp	r3, #1
 8002ebe:	d105      	bne.n	8002ecc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002ec0:	2308      	movs	r3, #8
 8002ec2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	69fa      	ldr	r2, [r7, #28]
 8002ec8:	611a      	str	r2, [r3, #16]
          break;
 8002eca:	e009      	b.n	8002ee0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002ecc:	2308      	movs	r3, #8
 8002ece:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	69fa      	ldr	r2, [r7, #28]
 8002ed4:	615a      	str	r2, [r3, #20]
          break;
 8002ed6:	e003      	b.n	8002ee0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002ed8:	2300      	movs	r3, #0
 8002eda:	623b      	str	r3, [r7, #32]
          break;
 8002edc:	e000      	b.n	8002ee0 <HAL_GPIO_Init+0x130>
          break;
 8002ede:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002ee0:	69bb      	ldr	r3, [r7, #24]
 8002ee2:	2bff      	cmp	r3, #255	; 0xff
 8002ee4:	d801      	bhi.n	8002eea <HAL_GPIO_Init+0x13a>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	e001      	b.n	8002eee <HAL_GPIO_Init+0x13e>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	3304      	adds	r3, #4
 8002eee:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002ef0:	69bb      	ldr	r3, [r7, #24]
 8002ef2:	2bff      	cmp	r3, #255	; 0xff
 8002ef4:	d802      	bhi.n	8002efc <HAL_GPIO_Init+0x14c>
 8002ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ef8:	009b      	lsls	r3, r3, #2
 8002efa:	e002      	b.n	8002f02 <HAL_GPIO_Init+0x152>
 8002efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002efe:	3b08      	subs	r3, #8
 8002f00:	009b      	lsls	r3, r3, #2
 8002f02:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002f04:	697b      	ldr	r3, [r7, #20]
 8002f06:	681a      	ldr	r2, [r3, #0]
 8002f08:	210f      	movs	r1, #15
 8002f0a:	693b      	ldr	r3, [r7, #16]
 8002f0c:	fa01 f303 	lsl.w	r3, r1, r3
 8002f10:	43db      	mvns	r3, r3
 8002f12:	401a      	ands	r2, r3
 8002f14:	6a39      	ldr	r1, [r7, #32]
 8002f16:	693b      	ldr	r3, [r7, #16]
 8002f18:	fa01 f303 	lsl.w	r3, r1, r3
 8002f1c:	431a      	orrs	r2, r3
 8002f1e:	697b      	ldr	r3, [r7, #20]
 8002f20:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	f000 80b1 	beq.w	8003092 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002f30:	4b4d      	ldr	r3, [pc, #308]	; (8003068 <HAL_GPIO_Init+0x2b8>)
 8002f32:	699b      	ldr	r3, [r3, #24]
 8002f34:	4a4c      	ldr	r2, [pc, #304]	; (8003068 <HAL_GPIO_Init+0x2b8>)
 8002f36:	f043 0301 	orr.w	r3, r3, #1
 8002f3a:	6193      	str	r3, [r2, #24]
 8002f3c:	4b4a      	ldr	r3, [pc, #296]	; (8003068 <HAL_GPIO_Init+0x2b8>)
 8002f3e:	699b      	ldr	r3, [r3, #24]
 8002f40:	f003 0301 	and.w	r3, r3, #1
 8002f44:	60bb      	str	r3, [r7, #8]
 8002f46:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002f48:	4a48      	ldr	r2, [pc, #288]	; (800306c <HAL_GPIO_Init+0x2bc>)
 8002f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f4c:	089b      	lsrs	r3, r3, #2
 8002f4e:	3302      	adds	r3, #2
 8002f50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f54:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f58:	f003 0303 	and.w	r3, r3, #3
 8002f5c:	009b      	lsls	r3, r3, #2
 8002f5e:	220f      	movs	r2, #15
 8002f60:	fa02 f303 	lsl.w	r3, r2, r3
 8002f64:	43db      	mvns	r3, r3
 8002f66:	68fa      	ldr	r2, [r7, #12]
 8002f68:	4013      	ands	r3, r2
 8002f6a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	4a40      	ldr	r2, [pc, #256]	; (8003070 <HAL_GPIO_Init+0x2c0>)
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d013      	beq.n	8002f9c <HAL_GPIO_Init+0x1ec>
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	4a3f      	ldr	r2, [pc, #252]	; (8003074 <HAL_GPIO_Init+0x2c4>)
 8002f78:	4293      	cmp	r3, r2
 8002f7a:	d00d      	beq.n	8002f98 <HAL_GPIO_Init+0x1e8>
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	4a3e      	ldr	r2, [pc, #248]	; (8003078 <HAL_GPIO_Init+0x2c8>)
 8002f80:	4293      	cmp	r3, r2
 8002f82:	d007      	beq.n	8002f94 <HAL_GPIO_Init+0x1e4>
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	4a3d      	ldr	r2, [pc, #244]	; (800307c <HAL_GPIO_Init+0x2cc>)
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	d101      	bne.n	8002f90 <HAL_GPIO_Init+0x1e0>
 8002f8c:	2303      	movs	r3, #3
 8002f8e:	e006      	b.n	8002f9e <HAL_GPIO_Init+0x1ee>
 8002f90:	2304      	movs	r3, #4
 8002f92:	e004      	b.n	8002f9e <HAL_GPIO_Init+0x1ee>
 8002f94:	2302      	movs	r3, #2
 8002f96:	e002      	b.n	8002f9e <HAL_GPIO_Init+0x1ee>
 8002f98:	2301      	movs	r3, #1
 8002f9a:	e000      	b.n	8002f9e <HAL_GPIO_Init+0x1ee>
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fa0:	f002 0203 	and.w	r2, r2, #3
 8002fa4:	0092      	lsls	r2, r2, #2
 8002fa6:	4093      	lsls	r3, r2
 8002fa8:	68fa      	ldr	r2, [r7, #12]
 8002faa:	4313      	orrs	r3, r2
 8002fac:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002fae:	492f      	ldr	r1, [pc, #188]	; (800306c <HAL_GPIO_Init+0x2bc>)
 8002fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fb2:	089b      	lsrs	r3, r3, #2
 8002fb4:	3302      	adds	r3, #2
 8002fb6:	68fa      	ldr	r2, [r7, #12]
 8002fb8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	685b      	ldr	r3, [r3, #4]
 8002fc0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d006      	beq.n	8002fd6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002fc8:	4b2d      	ldr	r3, [pc, #180]	; (8003080 <HAL_GPIO_Init+0x2d0>)
 8002fca:	681a      	ldr	r2, [r3, #0]
 8002fcc:	492c      	ldr	r1, [pc, #176]	; (8003080 <HAL_GPIO_Init+0x2d0>)
 8002fce:	69bb      	ldr	r3, [r7, #24]
 8002fd0:	4313      	orrs	r3, r2
 8002fd2:	600b      	str	r3, [r1, #0]
 8002fd4:	e006      	b.n	8002fe4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002fd6:	4b2a      	ldr	r3, [pc, #168]	; (8003080 <HAL_GPIO_Init+0x2d0>)
 8002fd8:	681a      	ldr	r2, [r3, #0]
 8002fda:	69bb      	ldr	r3, [r7, #24]
 8002fdc:	43db      	mvns	r3, r3
 8002fde:	4928      	ldr	r1, [pc, #160]	; (8003080 <HAL_GPIO_Init+0x2d0>)
 8002fe0:	4013      	ands	r3, r2
 8002fe2:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d006      	beq.n	8002ffe <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002ff0:	4b23      	ldr	r3, [pc, #140]	; (8003080 <HAL_GPIO_Init+0x2d0>)
 8002ff2:	685a      	ldr	r2, [r3, #4]
 8002ff4:	4922      	ldr	r1, [pc, #136]	; (8003080 <HAL_GPIO_Init+0x2d0>)
 8002ff6:	69bb      	ldr	r3, [r7, #24]
 8002ff8:	4313      	orrs	r3, r2
 8002ffa:	604b      	str	r3, [r1, #4]
 8002ffc:	e006      	b.n	800300c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002ffe:	4b20      	ldr	r3, [pc, #128]	; (8003080 <HAL_GPIO_Init+0x2d0>)
 8003000:	685a      	ldr	r2, [r3, #4]
 8003002:	69bb      	ldr	r3, [r7, #24]
 8003004:	43db      	mvns	r3, r3
 8003006:	491e      	ldr	r1, [pc, #120]	; (8003080 <HAL_GPIO_Init+0x2d0>)
 8003008:	4013      	ands	r3, r2
 800300a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	685b      	ldr	r3, [r3, #4]
 8003010:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003014:	2b00      	cmp	r3, #0
 8003016:	d006      	beq.n	8003026 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003018:	4b19      	ldr	r3, [pc, #100]	; (8003080 <HAL_GPIO_Init+0x2d0>)
 800301a:	689a      	ldr	r2, [r3, #8]
 800301c:	4918      	ldr	r1, [pc, #96]	; (8003080 <HAL_GPIO_Init+0x2d0>)
 800301e:	69bb      	ldr	r3, [r7, #24]
 8003020:	4313      	orrs	r3, r2
 8003022:	608b      	str	r3, [r1, #8]
 8003024:	e006      	b.n	8003034 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003026:	4b16      	ldr	r3, [pc, #88]	; (8003080 <HAL_GPIO_Init+0x2d0>)
 8003028:	689a      	ldr	r2, [r3, #8]
 800302a:	69bb      	ldr	r3, [r7, #24]
 800302c:	43db      	mvns	r3, r3
 800302e:	4914      	ldr	r1, [pc, #80]	; (8003080 <HAL_GPIO_Init+0x2d0>)
 8003030:	4013      	ands	r3, r2
 8003032:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	685b      	ldr	r3, [r3, #4]
 8003038:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800303c:	2b00      	cmp	r3, #0
 800303e:	d021      	beq.n	8003084 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003040:	4b0f      	ldr	r3, [pc, #60]	; (8003080 <HAL_GPIO_Init+0x2d0>)
 8003042:	68da      	ldr	r2, [r3, #12]
 8003044:	490e      	ldr	r1, [pc, #56]	; (8003080 <HAL_GPIO_Init+0x2d0>)
 8003046:	69bb      	ldr	r3, [r7, #24]
 8003048:	4313      	orrs	r3, r2
 800304a:	60cb      	str	r3, [r1, #12]
 800304c:	e021      	b.n	8003092 <HAL_GPIO_Init+0x2e2>
 800304e:	bf00      	nop
 8003050:	10320000 	.word	0x10320000
 8003054:	10310000 	.word	0x10310000
 8003058:	10220000 	.word	0x10220000
 800305c:	10210000 	.word	0x10210000
 8003060:	10120000 	.word	0x10120000
 8003064:	10110000 	.word	0x10110000
 8003068:	40021000 	.word	0x40021000
 800306c:	40010000 	.word	0x40010000
 8003070:	40010800 	.word	0x40010800
 8003074:	40010c00 	.word	0x40010c00
 8003078:	40011000 	.word	0x40011000
 800307c:	40011400 	.word	0x40011400
 8003080:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003084:	4b0b      	ldr	r3, [pc, #44]	; (80030b4 <HAL_GPIO_Init+0x304>)
 8003086:	68da      	ldr	r2, [r3, #12]
 8003088:	69bb      	ldr	r3, [r7, #24]
 800308a:	43db      	mvns	r3, r3
 800308c:	4909      	ldr	r1, [pc, #36]	; (80030b4 <HAL_GPIO_Init+0x304>)
 800308e:	4013      	ands	r3, r2
 8003090:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8003092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003094:	3301      	adds	r3, #1
 8003096:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	681a      	ldr	r2, [r3, #0]
 800309c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800309e:	fa22 f303 	lsr.w	r3, r2, r3
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	f47f ae8e 	bne.w	8002dc4 <HAL_GPIO_Init+0x14>
  }
}
 80030a8:	bf00      	nop
 80030aa:	bf00      	nop
 80030ac:	372c      	adds	r7, #44	; 0x2c
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bc80      	pop	{r7}
 80030b2:	4770      	bx	lr
 80030b4:	40010400 	.word	0x40010400

080030b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80030b8:	b480      	push	{r7}
 80030ba:	b083      	sub	sp, #12
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
 80030c0:	460b      	mov	r3, r1
 80030c2:	807b      	strh	r3, [r7, #2]
 80030c4:	4613      	mov	r3, r2
 80030c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80030c8:	787b      	ldrb	r3, [r7, #1]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d003      	beq.n	80030d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80030ce:	887a      	ldrh	r2, [r7, #2]
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80030d4:	e003      	b.n	80030de <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80030d6:	887b      	ldrh	r3, [r7, #2]
 80030d8:	041a      	lsls	r2, r3, #16
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	611a      	str	r2, [r3, #16]
}
 80030de:	bf00      	nop
 80030e0:	370c      	adds	r7, #12
 80030e2:	46bd      	mov	sp, r7
 80030e4:	bc80      	pop	{r7}
 80030e6:	4770      	bx	lr

080030e8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80030e8:	b480      	push	{r7}
 80030ea:	b085      	sub	sp, #20
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
 80030f0:	460b      	mov	r3, r1
 80030f2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	68db      	ldr	r3, [r3, #12]
 80030f8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80030fa:	887a      	ldrh	r2, [r7, #2]
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	4013      	ands	r3, r2
 8003100:	041a      	lsls	r2, r3, #16
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	43d9      	mvns	r1, r3
 8003106:	887b      	ldrh	r3, [r7, #2]
 8003108:	400b      	ands	r3, r1
 800310a:	431a      	orrs	r2, r3
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	611a      	str	r2, [r3, #16]
}
 8003110:	bf00      	nop
 8003112:	3714      	adds	r7, #20
 8003114:	46bd      	mov	sp, r7
 8003116:	bc80      	pop	{r7}
 8003118:	4770      	bx	lr
	...

0800311c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b084      	sub	sp, #16
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d101      	bne.n	800312e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800312a:	2301      	movs	r3, #1
 800312c:	e12b      	b.n	8003386 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003134:	b2db      	uxtb	r3, r3
 8003136:	2b00      	cmp	r3, #0
 8003138:	d106      	bne.n	8003148 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2200      	movs	r2, #0
 800313e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003142:	6878      	ldr	r0, [r7, #4]
 8003144:	f7fe fcbe 	bl	8001ac4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2224      	movs	r2, #36	; 0x24
 800314c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	681a      	ldr	r2, [r3, #0]
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f022 0201 	bic.w	r2, r2, #1
 800315e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	681a      	ldr	r2, [r3, #0]
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800316e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	681a      	ldr	r2, [r3, #0]
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800317e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003180:	f000 fe00 	bl	8003d84 <HAL_RCC_GetPCLK1Freq>
 8003184:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	4a81      	ldr	r2, [pc, #516]	; (8003390 <HAL_I2C_Init+0x274>)
 800318c:	4293      	cmp	r3, r2
 800318e:	d807      	bhi.n	80031a0 <HAL_I2C_Init+0x84>
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	4a80      	ldr	r2, [pc, #512]	; (8003394 <HAL_I2C_Init+0x278>)
 8003194:	4293      	cmp	r3, r2
 8003196:	bf94      	ite	ls
 8003198:	2301      	movls	r3, #1
 800319a:	2300      	movhi	r3, #0
 800319c:	b2db      	uxtb	r3, r3
 800319e:	e006      	b.n	80031ae <HAL_I2C_Init+0x92>
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	4a7d      	ldr	r2, [pc, #500]	; (8003398 <HAL_I2C_Init+0x27c>)
 80031a4:	4293      	cmp	r3, r2
 80031a6:	bf94      	ite	ls
 80031a8:	2301      	movls	r3, #1
 80031aa:	2300      	movhi	r3, #0
 80031ac:	b2db      	uxtb	r3, r3
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d001      	beq.n	80031b6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80031b2:	2301      	movs	r3, #1
 80031b4:	e0e7      	b.n	8003386 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	4a78      	ldr	r2, [pc, #480]	; (800339c <HAL_I2C_Init+0x280>)
 80031ba:	fba2 2303 	umull	r2, r3, r2, r3
 80031be:	0c9b      	lsrs	r3, r3, #18
 80031c0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	685b      	ldr	r3, [r3, #4]
 80031c8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	68ba      	ldr	r2, [r7, #8]
 80031d2:	430a      	orrs	r2, r1
 80031d4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	6a1b      	ldr	r3, [r3, #32]
 80031dc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	685b      	ldr	r3, [r3, #4]
 80031e4:	4a6a      	ldr	r2, [pc, #424]	; (8003390 <HAL_I2C_Init+0x274>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d802      	bhi.n	80031f0 <HAL_I2C_Init+0xd4>
 80031ea:	68bb      	ldr	r3, [r7, #8]
 80031ec:	3301      	adds	r3, #1
 80031ee:	e009      	b.n	8003204 <HAL_I2C_Init+0xe8>
 80031f0:	68bb      	ldr	r3, [r7, #8]
 80031f2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80031f6:	fb02 f303 	mul.w	r3, r2, r3
 80031fa:	4a69      	ldr	r2, [pc, #420]	; (80033a0 <HAL_I2C_Init+0x284>)
 80031fc:	fba2 2303 	umull	r2, r3, r2, r3
 8003200:	099b      	lsrs	r3, r3, #6
 8003202:	3301      	adds	r3, #1
 8003204:	687a      	ldr	r2, [r7, #4]
 8003206:	6812      	ldr	r2, [r2, #0]
 8003208:	430b      	orrs	r3, r1
 800320a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	69db      	ldr	r3, [r3, #28]
 8003212:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003216:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	495c      	ldr	r1, [pc, #368]	; (8003390 <HAL_I2C_Init+0x274>)
 8003220:	428b      	cmp	r3, r1
 8003222:	d819      	bhi.n	8003258 <HAL_I2C_Init+0x13c>
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	1e59      	subs	r1, r3, #1
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	005b      	lsls	r3, r3, #1
 800322e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003232:	1c59      	adds	r1, r3, #1
 8003234:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003238:	400b      	ands	r3, r1
 800323a:	2b00      	cmp	r3, #0
 800323c:	d00a      	beq.n	8003254 <HAL_I2C_Init+0x138>
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	1e59      	subs	r1, r3, #1
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	005b      	lsls	r3, r3, #1
 8003248:	fbb1 f3f3 	udiv	r3, r1, r3
 800324c:	3301      	adds	r3, #1
 800324e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003252:	e051      	b.n	80032f8 <HAL_I2C_Init+0x1dc>
 8003254:	2304      	movs	r3, #4
 8003256:	e04f      	b.n	80032f8 <HAL_I2C_Init+0x1dc>
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	689b      	ldr	r3, [r3, #8]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d111      	bne.n	8003284 <HAL_I2C_Init+0x168>
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	1e58      	subs	r0, r3, #1
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6859      	ldr	r1, [r3, #4]
 8003268:	460b      	mov	r3, r1
 800326a:	005b      	lsls	r3, r3, #1
 800326c:	440b      	add	r3, r1
 800326e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003272:	3301      	adds	r3, #1
 8003274:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003278:	2b00      	cmp	r3, #0
 800327a:	bf0c      	ite	eq
 800327c:	2301      	moveq	r3, #1
 800327e:	2300      	movne	r3, #0
 8003280:	b2db      	uxtb	r3, r3
 8003282:	e012      	b.n	80032aa <HAL_I2C_Init+0x18e>
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	1e58      	subs	r0, r3, #1
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6859      	ldr	r1, [r3, #4]
 800328c:	460b      	mov	r3, r1
 800328e:	009b      	lsls	r3, r3, #2
 8003290:	440b      	add	r3, r1
 8003292:	0099      	lsls	r1, r3, #2
 8003294:	440b      	add	r3, r1
 8003296:	fbb0 f3f3 	udiv	r3, r0, r3
 800329a:	3301      	adds	r3, #1
 800329c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	bf0c      	ite	eq
 80032a4:	2301      	moveq	r3, #1
 80032a6:	2300      	movne	r3, #0
 80032a8:	b2db      	uxtb	r3, r3
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d001      	beq.n	80032b2 <HAL_I2C_Init+0x196>
 80032ae:	2301      	movs	r3, #1
 80032b0:	e022      	b.n	80032f8 <HAL_I2C_Init+0x1dc>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	689b      	ldr	r3, [r3, #8]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d10e      	bne.n	80032d8 <HAL_I2C_Init+0x1bc>
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	1e58      	subs	r0, r3, #1
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6859      	ldr	r1, [r3, #4]
 80032c2:	460b      	mov	r3, r1
 80032c4:	005b      	lsls	r3, r3, #1
 80032c6:	440b      	add	r3, r1
 80032c8:	fbb0 f3f3 	udiv	r3, r0, r3
 80032cc:	3301      	adds	r3, #1
 80032ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80032d6:	e00f      	b.n	80032f8 <HAL_I2C_Init+0x1dc>
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	1e58      	subs	r0, r3, #1
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6859      	ldr	r1, [r3, #4]
 80032e0:	460b      	mov	r3, r1
 80032e2:	009b      	lsls	r3, r3, #2
 80032e4:	440b      	add	r3, r1
 80032e6:	0099      	lsls	r1, r3, #2
 80032e8:	440b      	add	r3, r1
 80032ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80032ee:	3301      	adds	r3, #1
 80032f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032f4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80032f8:	6879      	ldr	r1, [r7, #4]
 80032fa:	6809      	ldr	r1, [r1, #0]
 80032fc:	4313      	orrs	r3, r2
 80032fe:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	69da      	ldr	r2, [r3, #28]
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6a1b      	ldr	r3, [r3, #32]
 8003312:	431a      	orrs	r2, r3
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	430a      	orrs	r2, r1
 800331a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	689b      	ldr	r3, [r3, #8]
 8003322:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003326:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800332a:	687a      	ldr	r2, [r7, #4]
 800332c:	6911      	ldr	r1, [r2, #16]
 800332e:	687a      	ldr	r2, [r7, #4]
 8003330:	68d2      	ldr	r2, [r2, #12]
 8003332:	4311      	orrs	r1, r2
 8003334:	687a      	ldr	r2, [r7, #4]
 8003336:	6812      	ldr	r2, [r2, #0]
 8003338:	430b      	orrs	r3, r1
 800333a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	68db      	ldr	r3, [r3, #12]
 8003342:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	695a      	ldr	r2, [r3, #20]
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	699b      	ldr	r3, [r3, #24]
 800334e:	431a      	orrs	r2, r3
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	430a      	orrs	r2, r1
 8003356:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	681a      	ldr	r2, [r3, #0]
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f042 0201 	orr.w	r2, r2, #1
 8003366:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2200      	movs	r2, #0
 800336c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2220      	movs	r2, #32
 8003372:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2200      	movs	r2, #0
 800337a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2200      	movs	r2, #0
 8003380:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003384:	2300      	movs	r3, #0
}
 8003386:	4618      	mov	r0, r3
 8003388:	3710      	adds	r7, #16
 800338a:	46bd      	mov	sp, r7
 800338c:	bd80      	pop	{r7, pc}
 800338e:	bf00      	nop
 8003390:	000186a0 	.word	0x000186a0
 8003394:	001e847f 	.word	0x001e847f
 8003398:	003d08ff 	.word	0x003d08ff
 800339c:	431bde83 	.word	0x431bde83
 80033a0:	10624dd3 	.word	0x10624dd3

080033a4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b086      	sub	sp, #24
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d101      	bne.n	80033b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80033b2:	2301      	movs	r3, #1
 80033b4:	e304      	b.n	80039c0 <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f003 0301 	and.w	r3, r3, #1
 80033be:	2b00      	cmp	r3, #0
 80033c0:	f000 8087 	beq.w	80034d2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80033c4:	4b92      	ldr	r3, [pc, #584]	; (8003610 <HAL_RCC_OscConfig+0x26c>)
 80033c6:	685b      	ldr	r3, [r3, #4]
 80033c8:	f003 030c 	and.w	r3, r3, #12
 80033cc:	2b04      	cmp	r3, #4
 80033ce:	d00c      	beq.n	80033ea <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80033d0:	4b8f      	ldr	r3, [pc, #572]	; (8003610 <HAL_RCC_OscConfig+0x26c>)
 80033d2:	685b      	ldr	r3, [r3, #4]
 80033d4:	f003 030c 	and.w	r3, r3, #12
 80033d8:	2b08      	cmp	r3, #8
 80033da:	d112      	bne.n	8003402 <HAL_RCC_OscConfig+0x5e>
 80033dc:	4b8c      	ldr	r3, [pc, #560]	; (8003610 <HAL_RCC_OscConfig+0x26c>)
 80033de:	685b      	ldr	r3, [r3, #4]
 80033e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033e8:	d10b      	bne.n	8003402 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033ea:	4b89      	ldr	r3, [pc, #548]	; (8003610 <HAL_RCC_OscConfig+0x26c>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d06c      	beq.n	80034d0 <HAL_RCC_OscConfig+0x12c>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	689b      	ldr	r3, [r3, #8]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d168      	bne.n	80034d0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80033fe:	2301      	movs	r3, #1
 8003400:	e2de      	b.n	80039c0 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	689b      	ldr	r3, [r3, #8]
 8003406:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800340a:	d106      	bne.n	800341a <HAL_RCC_OscConfig+0x76>
 800340c:	4b80      	ldr	r3, [pc, #512]	; (8003610 <HAL_RCC_OscConfig+0x26c>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4a7f      	ldr	r2, [pc, #508]	; (8003610 <HAL_RCC_OscConfig+0x26c>)
 8003412:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003416:	6013      	str	r3, [r2, #0]
 8003418:	e02e      	b.n	8003478 <HAL_RCC_OscConfig+0xd4>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	689b      	ldr	r3, [r3, #8]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d10c      	bne.n	800343c <HAL_RCC_OscConfig+0x98>
 8003422:	4b7b      	ldr	r3, [pc, #492]	; (8003610 <HAL_RCC_OscConfig+0x26c>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	4a7a      	ldr	r2, [pc, #488]	; (8003610 <HAL_RCC_OscConfig+0x26c>)
 8003428:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800342c:	6013      	str	r3, [r2, #0]
 800342e:	4b78      	ldr	r3, [pc, #480]	; (8003610 <HAL_RCC_OscConfig+0x26c>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	4a77      	ldr	r2, [pc, #476]	; (8003610 <HAL_RCC_OscConfig+0x26c>)
 8003434:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003438:	6013      	str	r3, [r2, #0]
 800343a:	e01d      	b.n	8003478 <HAL_RCC_OscConfig+0xd4>
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	689b      	ldr	r3, [r3, #8]
 8003440:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003444:	d10c      	bne.n	8003460 <HAL_RCC_OscConfig+0xbc>
 8003446:	4b72      	ldr	r3, [pc, #456]	; (8003610 <HAL_RCC_OscConfig+0x26c>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	4a71      	ldr	r2, [pc, #452]	; (8003610 <HAL_RCC_OscConfig+0x26c>)
 800344c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003450:	6013      	str	r3, [r2, #0]
 8003452:	4b6f      	ldr	r3, [pc, #444]	; (8003610 <HAL_RCC_OscConfig+0x26c>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	4a6e      	ldr	r2, [pc, #440]	; (8003610 <HAL_RCC_OscConfig+0x26c>)
 8003458:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800345c:	6013      	str	r3, [r2, #0]
 800345e:	e00b      	b.n	8003478 <HAL_RCC_OscConfig+0xd4>
 8003460:	4b6b      	ldr	r3, [pc, #428]	; (8003610 <HAL_RCC_OscConfig+0x26c>)
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	4a6a      	ldr	r2, [pc, #424]	; (8003610 <HAL_RCC_OscConfig+0x26c>)
 8003466:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800346a:	6013      	str	r3, [r2, #0]
 800346c:	4b68      	ldr	r3, [pc, #416]	; (8003610 <HAL_RCC_OscConfig+0x26c>)
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4a67      	ldr	r2, [pc, #412]	; (8003610 <HAL_RCC_OscConfig+0x26c>)
 8003472:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003476:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	689b      	ldr	r3, [r3, #8]
 800347c:	2b00      	cmp	r3, #0
 800347e:	d013      	beq.n	80034a8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003480:	f7fe ff46 	bl	8002310 <HAL_GetTick>
 8003484:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003486:	e008      	b.n	800349a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003488:	f7fe ff42 	bl	8002310 <HAL_GetTick>
 800348c:	4602      	mov	r2, r0
 800348e:	693b      	ldr	r3, [r7, #16]
 8003490:	1ad3      	subs	r3, r2, r3
 8003492:	2b64      	cmp	r3, #100	; 0x64
 8003494:	d901      	bls.n	800349a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003496:	2303      	movs	r3, #3
 8003498:	e292      	b.n	80039c0 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800349a:	4b5d      	ldr	r3, [pc, #372]	; (8003610 <HAL_RCC_OscConfig+0x26c>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d0f0      	beq.n	8003488 <HAL_RCC_OscConfig+0xe4>
 80034a6:	e014      	b.n	80034d2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034a8:	f7fe ff32 	bl	8002310 <HAL_GetTick>
 80034ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034ae:	e008      	b.n	80034c2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80034b0:	f7fe ff2e 	bl	8002310 <HAL_GetTick>
 80034b4:	4602      	mov	r2, r0
 80034b6:	693b      	ldr	r3, [r7, #16]
 80034b8:	1ad3      	subs	r3, r2, r3
 80034ba:	2b64      	cmp	r3, #100	; 0x64
 80034bc:	d901      	bls.n	80034c2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80034be:	2303      	movs	r3, #3
 80034c0:	e27e      	b.n	80039c0 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034c2:	4b53      	ldr	r3, [pc, #332]	; (8003610 <HAL_RCC_OscConfig+0x26c>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d1f0      	bne.n	80034b0 <HAL_RCC_OscConfig+0x10c>
 80034ce:	e000      	b.n	80034d2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f003 0302 	and.w	r3, r3, #2
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d063      	beq.n	80035a6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80034de:	4b4c      	ldr	r3, [pc, #304]	; (8003610 <HAL_RCC_OscConfig+0x26c>)
 80034e0:	685b      	ldr	r3, [r3, #4]
 80034e2:	f003 030c 	and.w	r3, r3, #12
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d00b      	beq.n	8003502 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80034ea:	4b49      	ldr	r3, [pc, #292]	; (8003610 <HAL_RCC_OscConfig+0x26c>)
 80034ec:	685b      	ldr	r3, [r3, #4]
 80034ee:	f003 030c 	and.w	r3, r3, #12
 80034f2:	2b08      	cmp	r3, #8
 80034f4:	d11c      	bne.n	8003530 <HAL_RCC_OscConfig+0x18c>
 80034f6:	4b46      	ldr	r3, [pc, #280]	; (8003610 <HAL_RCC_OscConfig+0x26c>)
 80034f8:	685b      	ldr	r3, [r3, #4]
 80034fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d116      	bne.n	8003530 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003502:	4b43      	ldr	r3, [pc, #268]	; (8003610 <HAL_RCC_OscConfig+0x26c>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f003 0302 	and.w	r3, r3, #2
 800350a:	2b00      	cmp	r3, #0
 800350c:	d005      	beq.n	800351a <HAL_RCC_OscConfig+0x176>
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	695b      	ldr	r3, [r3, #20]
 8003512:	2b01      	cmp	r3, #1
 8003514:	d001      	beq.n	800351a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003516:	2301      	movs	r3, #1
 8003518:	e252      	b.n	80039c0 <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800351a:	4b3d      	ldr	r3, [pc, #244]	; (8003610 <HAL_RCC_OscConfig+0x26c>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	699b      	ldr	r3, [r3, #24]
 8003526:	00db      	lsls	r3, r3, #3
 8003528:	4939      	ldr	r1, [pc, #228]	; (8003610 <HAL_RCC_OscConfig+0x26c>)
 800352a:	4313      	orrs	r3, r2
 800352c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800352e:	e03a      	b.n	80035a6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	695b      	ldr	r3, [r3, #20]
 8003534:	2b00      	cmp	r3, #0
 8003536:	d020      	beq.n	800357a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003538:	4b36      	ldr	r3, [pc, #216]	; (8003614 <HAL_RCC_OscConfig+0x270>)
 800353a:	2201      	movs	r2, #1
 800353c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800353e:	f7fe fee7 	bl	8002310 <HAL_GetTick>
 8003542:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003544:	e008      	b.n	8003558 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003546:	f7fe fee3 	bl	8002310 <HAL_GetTick>
 800354a:	4602      	mov	r2, r0
 800354c:	693b      	ldr	r3, [r7, #16]
 800354e:	1ad3      	subs	r3, r2, r3
 8003550:	2b02      	cmp	r3, #2
 8003552:	d901      	bls.n	8003558 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003554:	2303      	movs	r3, #3
 8003556:	e233      	b.n	80039c0 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003558:	4b2d      	ldr	r3, [pc, #180]	; (8003610 <HAL_RCC_OscConfig+0x26c>)
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f003 0302 	and.w	r3, r3, #2
 8003560:	2b00      	cmp	r3, #0
 8003562:	d0f0      	beq.n	8003546 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003564:	4b2a      	ldr	r3, [pc, #168]	; (8003610 <HAL_RCC_OscConfig+0x26c>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	699b      	ldr	r3, [r3, #24]
 8003570:	00db      	lsls	r3, r3, #3
 8003572:	4927      	ldr	r1, [pc, #156]	; (8003610 <HAL_RCC_OscConfig+0x26c>)
 8003574:	4313      	orrs	r3, r2
 8003576:	600b      	str	r3, [r1, #0]
 8003578:	e015      	b.n	80035a6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800357a:	4b26      	ldr	r3, [pc, #152]	; (8003614 <HAL_RCC_OscConfig+0x270>)
 800357c:	2200      	movs	r2, #0
 800357e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003580:	f7fe fec6 	bl	8002310 <HAL_GetTick>
 8003584:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003586:	e008      	b.n	800359a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003588:	f7fe fec2 	bl	8002310 <HAL_GetTick>
 800358c:	4602      	mov	r2, r0
 800358e:	693b      	ldr	r3, [r7, #16]
 8003590:	1ad3      	subs	r3, r2, r3
 8003592:	2b02      	cmp	r3, #2
 8003594:	d901      	bls.n	800359a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003596:	2303      	movs	r3, #3
 8003598:	e212      	b.n	80039c0 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800359a:	4b1d      	ldr	r3, [pc, #116]	; (8003610 <HAL_RCC_OscConfig+0x26c>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f003 0302 	and.w	r3, r3, #2
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d1f0      	bne.n	8003588 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f003 0308 	and.w	r3, r3, #8
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d03a      	beq.n	8003628 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	69db      	ldr	r3, [r3, #28]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d019      	beq.n	80035ee <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80035ba:	4b17      	ldr	r3, [pc, #92]	; (8003618 <HAL_RCC_OscConfig+0x274>)
 80035bc:	2201      	movs	r2, #1
 80035be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035c0:	f7fe fea6 	bl	8002310 <HAL_GetTick>
 80035c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035c6:	e008      	b.n	80035da <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80035c8:	f7fe fea2 	bl	8002310 <HAL_GetTick>
 80035cc:	4602      	mov	r2, r0
 80035ce:	693b      	ldr	r3, [r7, #16]
 80035d0:	1ad3      	subs	r3, r2, r3
 80035d2:	2b02      	cmp	r3, #2
 80035d4:	d901      	bls.n	80035da <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80035d6:	2303      	movs	r3, #3
 80035d8:	e1f2      	b.n	80039c0 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035da:	4b0d      	ldr	r3, [pc, #52]	; (8003610 <HAL_RCC_OscConfig+0x26c>)
 80035dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035de:	f003 0302 	and.w	r3, r3, #2
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d0f0      	beq.n	80035c8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80035e6:	2001      	movs	r0, #1
 80035e8:	f000 fbf4 	bl	8003dd4 <RCC_Delay>
 80035ec:	e01c      	b.n	8003628 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80035ee:	4b0a      	ldr	r3, [pc, #40]	; (8003618 <HAL_RCC_OscConfig+0x274>)
 80035f0:	2200      	movs	r2, #0
 80035f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035f4:	f7fe fe8c 	bl	8002310 <HAL_GetTick>
 80035f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035fa:	e00f      	b.n	800361c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80035fc:	f7fe fe88 	bl	8002310 <HAL_GetTick>
 8003600:	4602      	mov	r2, r0
 8003602:	693b      	ldr	r3, [r7, #16]
 8003604:	1ad3      	subs	r3, r2, r3
 8003606:	2b02      	cmp	r3, #2
 8003608:	d908      	bls.n	800361c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800360a:	2303      	movs	r3, #3
 800360c:	e1d8      	b.n	80039c0 <HAL_RCC_OscConfig+0x61c>
 800360e:	bf00      	nop
 8003610:	40021000 	.word	0x40021000
 8003614:	42420000 	.word	0x42420000
 8003618:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800361c:	4b9b      	ldr	r3, [pc, #620]	; (800388c <HAL_RCC_OscConfig+0x4e8>)
 800361e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003620:	f003 0302 	and.w	r3, r3, #2
 8003624:	2b00      	cmp	r3, #0
 8003626:	d1e9      	bne.n	80035fc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f003 0304 	and.w	r3, r3, #4
 8003630:	2b00      	cmp	r3, #0
 8003632:	f000 80a6 	beq.w	8003782 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003636:	2300      	movs	r3, #0
 8003638:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800363a:	4b94      	ldr	r3, [pc, #592]	; (800388c <HAL_RCC_OscConfig+0x4e8>)
 800363c:	69db      	ldr	r3, [r3, #28]
 800363e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003642:	2b00      	cmp	r3, #0
 8003644:	d10d      	bne.n	8003662 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003646:	4b91      	ldr	r3, [pc, #580]	; (800388c <HAL_RCC_OscConfig+0x4e8>)
 8003648:	69db      	ldr	r3, [r3, #28]
 800364a:	4a90      	ldr	r2, [pc, #576]	; (800388c <HAL_RCC_OscConfig+0x4e8>)
 800364c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003650:	61d3      	str	r3, [r2, #28]
 8003652:	4b8e      	ldr	r3, [pc, #568]	; (800388c <HAL_RCC_OscConfig+0x4e8>)
 8003654:	69db      	ldr	r3, [r3, #28]
 8003656:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800365a:	60bb      	str	r3, [r7, #8]
 800365c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800365e:	2301      	movs	r3, #1
 8003660:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003662:	4b8b      	ldr	r3, [pc, #556]	; (8003890 <HAL_RCC_OscConfig+0x4ec>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800366a:	2b00      	cmp	r3, #0
 800366c:	d118      	bne.n	80036a0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800366e:	4b88      	ldr	r3, [pc, #544]	; (8003890 <HAL_RCC_OscConfig+0x4ec>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	4a87      	ldr	r2, [pc, #540]	; (8003890 <HAL_RCC_OscConfig+0x4ec>)
 8003674:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003678:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800367a:	f7fe fe49 	bl	8002310 <HAL_GetTick>
 800367e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003680:	e008      	b.n	8003694 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003682:	f7fe fe45 	bl	8002310 <HAL_GetTick>
 8003686:	4602      	mov	r2, r0
 8003688:	693b      	ldr	r3, [r7, #16]
 800368a:	1ad3      	subs	r3, r2, r3
 800368c:	2b64      	cmp	r3, #100	; 0x64
 800368e:	d901      	bls.n	8003694 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003690:	2303      	movs	r3, #3
 8003692:	e195      	b.n	80039c0 <HAL_RCC_OscConfig+0x61c>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003694:	4b7e      	ldr	r3, [pc, #504]	; (8003890 <HAL_RCC_OscConfig+0x4ec>)
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800369c:	2b00      	cmp	r3, #0
 800369e:	d0f0      	beq.n	8003682 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	691b      	ldr	r3, [r3, #16]
 80036a4:	2b01      	cmp	r3, #1
 80036a6:	d106      	bne.n	80036b6 <HAL_RCC_OscConfig+0x312>
 80036a8:	4b78      	ldr	r3, [pc, #480]	; (800388c <HAL_RCC_OscConfig+0x4e8>)
 80036aa:	6a1b      	ldr	r3, [r3, #32]
 80036ac:	4a77      	ldr	r2, [pc, #476]	; (800388c <HAL_RCC_OscConfig+0x4e8>)
 80036ae:	f043 0301 	orr.w	r3, r3, #1
 80036b2:	6213      	str	r3, [r2, #32]
 80036b4:	e02d      	b.n	8003712 <HAL_RCC_OscConfig+0x36e>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	691b      	ldr	r3, [r3, #16]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d10c      	bne.n	80036d8 <HAL_RCC_OscConfig+0x334>
 80036be:	4b73      	ldr	r3, [pc, #460]	; (800388c <HAL_RCC_OscConfig+0x4e8>)
 80036c0:	6a1b      	ldr	r3, [r3, #32]
 80036c2:	4a72      	ldr	r2, [pc, #456]	; (800388c <HAL_RCC_OscConfig+0x4e8>)
 80036c4:	f023 0301 	bic.w	r3, r3, #1
 80036c8:	6213      	str	r3, [r2, #32]
 80036ca:	4b70      	ldr	r3, [pc, #448]	; (800388c <HAL_RCC_OscConfig+0x4e8>)
 80036cc:	6a1b      	ldr	r3, [r3, #32]
 80036ce:	4a6f      	ldr	r2, [pc, #444]	; (800388c <HAL_RCC_OscConfig+0x4e8>)
 80036d0:	f023 0304 	bic.w	r3, r3, #4
 80036d4:	6213      	str	r3, [r2, #32]
 80036d6:	e01c      	b.n	8003712 <HAL_RCC_OscConfig+0x36e>
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	691b      	ldr	r3, [r3, #16]
 80036dc:	2b05      	cmp	r3, #5
 80036de:	d10c      	bne.n	80036fa <HAL_RCC_OscConfig+0x356>
 80036e0:	4b6a      	ldr	r3, [pc, #424]	; (800388c <HAL_RCC_OscConfig+0x4e8>)
 80036e2:	6a1b      	ldr	r3, [r3, #32]
 80036e4:	4a69      	ldr	r2, [pc, #420]	; (800388c <HAL_RCC_OscConfig+0x4e8>)
 80036e6:	f043 0304 	orr.w	r3, r3, #4
 80036ea:	6213      	str	r3, [r2, #32]
 80036ec:	4b67      	ldr	r3, [pc, #412]	; (800388c <HAL_RCC_OscConfig+0x4e8>)
 80036ee:	6a1b      	ldr	r3, [r3, #32]
 80036f0:	4a66      	ldr	r2, [pc, #408]	; (800388c <HAL_RCC_OscConfig+0x4e8>)
 80036f2:	f043 0301 	orr.w	r3, r3, #1
 80036f6:	6213      	str	r3, [r2, #32]
 80036f8:	e00b      	b.n	8003712 <HAL_RCC_OscConfig+0x36e>
 80036fa:	4b64      	ldr	r3, [pc, #400]	; (800388c <HAL_RCC_OscConfig+0x4e8>)
 80036fc:	6a1b      	ldr	r3, [r3, #32]
 80036fe:	4a63      	ldr	r2, [pc, #396]	; (800388c <HAL_RCC_OscConfig+0x4e8>)
 8003700:	f023 0301 	bic.w	r3, r3, #1
 8003704:	6213      	str	r3, [r2, #32]
 8003706:	4b61      	ldr	r3, [pc, #388]	; (800388c <HAL_RCC_OscConfig+0x4e8>)
 8003708:	6a1b      	ldr	r3, [r3, #32]
 800370a:	4a60      	ldr	r2, [pc, #384]	; (800388c <HAL_RCC_OscConfig+0x4e8>)
 800370c:	f023 0304 	bic.w	r3, r3, #4
 8003710:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	691b      	ldr	r3, [r3, #16]
 8003716:	2b00      	cmp	r3, #0
 8003718:	d015      	beq.n	8003746 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800371a:	f7fe fdf9 	bl	8002310 <HAL_GetTick>
 800371e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003720:	e00a      	b.n	8003738 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003722:	f7fe fdf5 	bl	8002310 <HAL_GetTick>
 8003726:	4602      	mov	r2, r0
 8003728:	693b      	ldr	r3, [r7, #16]
 800372a:	1ad3      	subs	r3, r2, r3
 800372c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003730:	4293      	cmp	r3, r2
 8003732:	d901      	bls.n	8003738 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003734:	2303      	movs	r3, #3
 8003736:	e143      	b.n	80039c0 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003738:	4b54      	ldr	r3, [pc, #336]	; (800388c <HAL_RCC_OscConfig+0x4e8>)
 800373a:	6a1b      	ldr	r3, [r3, #32]
 800373c:	f003 0302 	and.w	r3, r3, #2
 8003740:	2b00      	cmp	r3, #0
 8003742:	d0ee      	beq.n	8003722 <HAL_RCC_OscConfig+0x37e>
 8003744:	e014      	b.n	8003770 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003746:	f7fe fde3 	bl	8002310 <HAL_GetTick>
 800374a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800374c:	e00a      	b.n	8003764 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800374e:	f7fe fddf 	bl	8002310 <HAL_GetTick>
 8003752:	4602      	mov	r2, r0
 8003754:	693b      	ldr	r3, [r7, #16]
 8003756:	1ad3      	subs	r3, r2, r3
 8003758:	f241 3288 	movw	r2, #5000	; 0x1388
 800375c:	4293      	cmp	r3, r2
 800375e:	d901      	bls.n	8003764 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003760:	2303      	movs	r3, #3
 8003762:	e12d      	b.n	80039c0 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003764:	4b49      	ldr	r3, [pc, #292]	; (800388c <HAL_RCC_OscConfig+0x4e8>)
 8003766:	6a1b      	ldr	r3, [r3, #32]
 8003768:	f003 0302 	and.w	r3, r3, #2
 800376c:	2b00      	cmp	r3, #0
 800376e:	d1ee      	bne.n	800374e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003770:	7dfb      	ldrb	r3, [r7, #23]
 8003772:	2b01      	cmp	r3, #1
 8003774:	d105      	bne.n	8003782 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003776:	4b45      	ldr	r3, [pc, #276]	; (800388c <HAL_RCC_OscConfig+0x4e8>)
 8003778:	69db      	ldr	r3, [r3, #28]
 800377a:	4a44      	ldr	r2, [pc, #272]	; (800388c <HAL_RCC_OscConfig+0x4e8>)
 800377c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003780:	61d3      	str	r3, [r2, #28]

#if defined(RCC_CR_PLL2ON)
  /*-------------------------------- PLL2 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL2(RCC_OscInitStruct->PLL2.PLL2State));
  if ((RCC_OscInitStruct->PLL2.PLL2State) != RCC_PLL2_NONE)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003786:	2b00      	cmp	r3, #0
 8003788:	f000 808c 	beq.w	80038a4 <HAL_RCC_OscConfig+0x500>
  {
    /* This bit can not be cleared if the PLL2 clock is used indirectly as system
      clock (i.e. it is used as PLL clock entry that is used as system clock). */
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 800378c:	4b3f      	ldr	r3, [pc, #252]	; (800388c <HAL_RCC_OscConfig+0x4e8>)
 800378e:	685b      	ldr	r3, [r3, #4]
 8003790:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003794:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003798:	d10e      	bne.n	80037b8 <HAL_RCC_OscConfig+0x414>
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 800379a:	4b3c      	ldr	r3, [pc, #240]	; (800388c <HAL_RCC_OscConfig+0x4e8>)
 800379c:	685b      	ldr	r3, [r3, #4]
 800379e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 80037a2:	2b08      	cmp	r3, #8
 80037a4:	d108      	bne.n	80037b8 <HAL_RCC_OscConfig+0x414>
        ((READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC)) == RCC_CFGR2_PREDIV1SRC_PLL2))
 80037a6:	4b39      	ldr	r3, [pc, #228]	; (800388c <HAL_RCC_OscConfig+0x4e8>)
 80037a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 80037ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037b2:	d101      	bne.n	80037b8 <HAL_RCC_OscConfig+0x414>
    {
      return HAL_ERROR;
 80037b4:	2301      	movs	r3, #1
 80037b6:	e103      	b.n	80039c0 <HAL_RCC_OscConfig+0x61c>
    }
    else
    {
      if ((RCC_OscInitStruct->PLL2.PLL2State) == RCC_PLL2_ON)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037bc:	2b02      	cmp	r3, #2
 80037be:	d14e      	bne.n	800385e <HAL_RCC_OscConfig+0x4ba>
        assert_param(IS_RCC_PLL2_MUL(RCC_OscInitStruct->PLL2.PLL2MUL));
        assert_param(IS_RCC_HSE_PREDIV2(RCC_OscInitStruct->PLL2.HSEPrediv2Value));

        /* Prediv2 can be written only when the PLLI2S is disabled. */
        /* Return an error only if new value is different from the programmed value */
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 80037c0:	4b32      	ldr	r3, [pc, #200]	; (800388c <HAL_RCC_OscConfig+0x4e8>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d009      	beq.n	80037e0 <HAL_RCC_OscConfig+0x43c>
            (__HAL_RCC_HSE_GET_PREDIV2() != RCC_OscInitStruct->PLL2.HSEPrediv2Value))
 80037cc:	4b2f      	ldr	r3, [pc, #188]	; (800388c <HAL_RCC_OscConfig+0x4e8>)
 80037ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037d0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 80037d8:	429a      	cmp	r2, r3
 80037da:	d001      	beq.n	80037e0 <HAL_RCC_OscConfig+0x43c>
        {
          return HAL_ERROR;
 80037dc:	2301      	movs	r3, #1
 80037de:	e0ef      	b.n	80039c0 <HAL_RCC_OscConfig+0x61c>
        }

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 80037e0:	4b2c      	ldr	r3, [pc, #176]	; (8003894 <HAL_RCC_OscConfig+0x4f0>)
 80037e2:	2200      	movs	r2, #0
 80037e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037e6:	f7fe fd93 	bl	8002310 <HAL_GetTick>
 80037ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 80037ec:	e008      	b.n	8003800 <HAL_RCC_OscConfig+0x45c>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80037ee:	f7fe fd8f 	bl	8002310 <HAL_GetTick>
 80037f2:	4602      	mov	r2, r0
 80037f4:	693b      	ldr	r3, [r7, #16]
 80037f6:	1ad3      	subs	r3, r2, r3
 80037f8:	2b64      	cmp	r3, #100	; 0x64
 80037fa:	d901      	bls.n	8003800 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80037fc:	2303      	movs	r3, #3
 80037fe:	e0df      	b.n	80039c0 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8003800:	4b22      	ldr	r3, [pc, #136]	; (800388c <HAL_RCC_OscConfig+0x4e8>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003808:	2b00      	cmp	r3, #0
 800380a:	d1f0      	bne.n	80037ee <HAL_RCC_OscConfig+0x44a>
          }
        }

        /* Configure the HSE prediv2 factor --------------------------------*/
        __HAL_RCC_HSE_PREDIV2_CONFIG(RCC_OscInitStruct->PLL2.HSEPrediv2Value);
 800380c:	4b1f      	ldr	r3, [pc, #124]	; (800388c <HAL_RCC_OscConfig+0x4e8>)
 800380e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003810:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003818:	491c      	ldr	r1, [pc, #112]	; (800388c <HAL_RCC_OscConfig+0x4e8>)
 800381a:	4313      	orrs	r3, r2
 800381c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Configure the main PLL2 multiplication factors. */
        __HAL_RCC_PLL2_CONFIG(RCC_OscInitStruct->PLL2.PLL2MUL);
 800381e:	4b1b      	ldr	r3, [pc, #108]	; (800388c <HAL_RCC_OscConfig+0x4e8>)
 8003820:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003822:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800382a:	4918      	ldr	r1, [pc, #96]	; (800388c <HAL_RCC_OscConfig+0x4e8>)
 800382c:	4313      	orrs	r3, r2
 800382e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable the main PLL2. */
        __HAL_RCC_PLL2_ENABLE();
 8003830:	4b18      	ldr	r3, [pc, #96]	; (8003894 <HAL_RCC_OscConfig+0x4f0>)
 8003832:	2201      	movs	r2, #1
 8003834:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003836:	f7fe fd6b 	bl	8002310 <HAL_GetTick>
 800383a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 800383c:	e008      	b.n	8003850 <HAL_RCC_OscConfig+0x4ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800383e:	f7fe fd67 	bl	8002310 <HAL_GetTick>
 8003842:	4602      	mov	r2, r0
 8003844:	693b      	ldr	r3, [r7, #16]
 8003846:	1ad3      	subs	r3, r2, r3
 8003848:	2b64      	cmp	r3, #100	; 0x64
 800384a:	d901      	bls.n	8003850 <HAL_RCC_OscConfig+0x4ac>
          {
            return HAL_TIMEOUT;
 800384c:	2303      	movs	r3, #3
 800384e:	e0b7      	b.n	80039c0 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 8003850:	4b0e      	ldr	r3, [pc, #56]	; (800388c <HAL_RCC_OscConfig+0x4e8>)
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003858:	2b00      	cmp	r3, #0
 800385a:	d0f0      	beq.n	800383e <HAL_RCC_OscConfig+0x49a>
 800385c:	e022      	b.n	80038a4 <HAL_RCC_OscConfig+0x500>
        }
      }
      else
      {
        /* Set PREDIV1 source to HSE */
        CLEAR_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC);
 800385e:	4b0b      	ldr	r3, [pc, #44]	; (800388c <HAL_RCC_OscConfig+0x4e8>)
 8003860:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003862:	4a0a      	ldr	r2, [pc, #40]	; (800388c <HAL_RCC_OscConfig+0x4e8>)
 8003864:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003868:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 800386a:	4b0a      	ldr	r3, [pc, #40]	; (8003894 <HAL_RCC_OscConfig+0x4f0>)
 800386c:	2200      	movs	r2, #0
 800386e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003870:	f7fe fd4e 	bl	8002310 <HAL_GetTick>
 8003874:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 8003876:	e00f      	b.n	8003898 <HAL_RCC_OscConfig+0x4f4>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003878:	f7fe fd4a 	bl	8002310 <HAL_GetTick>
 800387c:	4602      	mov	r2, r0
 800387e:	693b      	ldr	r3, [r7, #16]
 8003880:	1ad3      	subs	r3, r2, r3
 8003882:	2b64      	cmp	r3, #100	; 0x64
 8003884:	d908      	bls.n	8003898 <HAL_RCC_OscConfig+0x4f4>
          {
            return HAL_TIMEOUT;
 8003886:	2303      	movs	r3, #3
 8003888:	e09a      	b.n	80039c0 <HAL_RCC_OscConfig+0x61c>
 800388a:	bf00      	nop
 800388c:	40021000 	.word	0x40021000
 8003890:	40007000 	.word	0x40007000
 8003894:	42420068 	.word	0x42420068
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 8003898:	4b4b      	ldr	r3, [pc, #300]	; (80039c8 <HAL_RCC_OscConfig+0x624>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d1e9      	bne.n	8003878 <HAL_RCC_OscConfig+0x4d4>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6a1b      	ldr	r3, [r3, #32]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	f000 8088 	beq.w	80039be <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80038ae:	4b46      	ldr	r3, [pc, #280]	; (80039c8 <HAL_RCC_OscConfig+0x624>)
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	f003 030c 	and.w	r3, r3, #12
 80038b6:	2b08      	cmp	r3, #8
 80038b8:	d068      	beq.n	800398c <HAL_RCC_OscConfig+0x5e8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6a1b      	ldr	r3, [r3, #32]
 80038be:	2b02      	cmp	r3, #2
 80038c0:	d14d      	bne.n	800395e <HAL_RCC_OscConfig+0x5ba>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038c2:	4b42      	ldr	r3, [pc, #264]	; (80039cc <HAL_RCC_OscConfig+0x628>)
 80038c4:	2200      	movs	r2, #0
 80038c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038c8:	f7fe fd22 	bl	8002310 <HAL_GetTick>
 80038cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80038ce:	e008      	b.n	80038e2 <HAL_RCC_OscConfig+0x53e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038d0:	f7fe fd1e 	bl	8002310 <HAL_GetTick>
 80038d4:	4602      	mov	r2, r0
 80038d6:	693b      	ldr	r3, [r7, #16]
 80038d8:	1ad3      	subs	r3, r2, r3
 80038da:	2b02      	cmp	r3, #2
 80038dc:	d901      	bls.n	80038e2 <HAL_RCC_OscConfig+0x53e>
          {
            return HAL_TIMEOUT;
 80038de:	2303      	movs	r3, #3
 80038e0:	e06e      	b.n	80039c0 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80038e2:	4b39      	ldr	r3, [pc, #228]	; (80039c8 <HAL_RCC_OscConfig+0x624>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d1f0      	bne.n	80038d0 <HAL_RCC_OscConfig+0x52c>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038f6:	d10f      	bne.n	8003918 <HAL_RCC_OscConfig+0x574>
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
#if defined(RCC_CFGR2_PREDIV1SRC)
          assert_param(IS_RCC_PREDIV1_SOURCE(RCC_OscInitStruct->Prediv1Source));

          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
 80038f8:	4b33      	ldr	r3, [pc, #204]	; (80039c8 <HAL_RCC_OscConfig+0x624>)
 80038fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	685b      	ldr	r3, [r3, #4]
 8003900:	4931      	ldr	r1, [pc, #196]	; (80039c8 <HAL_RCC_OscConfig+0x624>)
 8003902:	4313      	orrs	r3, r2
 8003904:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003906:	4b30      	ldr	r3, [pc, #192]	; (80039c8 <HAL_RCC_OscConfig+0x624>)
 8003908:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800390a:	f023 020f 	bic.w	r2, r3, #15
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	68db      	ldr	r3, [r3, #12]
 8003912:	492d      	ldr	r1, [pc, #180]	; (80039c8 <HAL_RCC_OscConfig+0x624>)
 8003914:	4313      	orrs	r3, r2
 8003916:	62cb      	str	r3, [r1, #44]	; 0x2c
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003918:	4b2b      	ldr	r3, [pc, #172]	; (80039c8 <HAL_RCC_OscConfig+0x624>)
 800391a:	685b      	ldr	r3, [r3, #4]
 800391c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003928:	430b      	orrs	r3, r1
 800392a:	4927      	ldr	r1, [pc, #156]	; (80039c8 <HAL_RCC_OscConfig+0x624>)
 800392c:	4313      	orrs	r3, r2
 800392e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003930:	4b26      	ldr	r3, [pc, #152]	; (80039cc <HAL_RCC_OscConfig+0x628>)
 8003932:	2201      	movs	r2, #1
 8003934:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003936:	f7fe fceb 	bl	8002310 <HAL_GetTick>
 800393a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800393c:	e008      	b.n	8003950 <HAL_RCC_OscConfig+0x5ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800393e:	f7fe fce7 	bl	8002310 <HAL_GetTick>
 8003942:	4602      	mov	r2, r0
 8003944:	693b      	ldr	r3, [r7, #16]
 8003946:	1ad3      	subs	r3, r2, r3
 8003948:	2b02      	cmp	r3, #2
 800394a:	d901      	bls.n	8003950 <HAL_RCC_OscConfig+0x5ac>
          {
            return HAL_TIMEOUT;
 800394c:	2303      	movs	r3, #3
 800394e:	e037      	b.n	80039c0 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003950:	4b1d      	ldr	r3, [pc, #116]	; (80039c8 <HAL_RCC_OscConfig+0x624>)
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003958:	2b00      	cmp	r3, #0
 800395a:	d0f0      	beq.n	800393e <HAL_RCC_OscConfig+0x59a>
 800395c:	e02f      	b.n	80039be <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800395e:	4b1b      	ldr	r3, [pc, #108]	; (80039cc <HAL_RCC_OscConfig+0x628>)
 8003960:	2200      	movs	r2, #0
 8003962:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003964:	f7fe fcd4 	bl	8002310 <HAL_GetTick>
 8003968:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800396a:	e008      	b.n	800397e <HAL_RCC_OscConfig+0x5da>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800396c:	f7fe fcd0 	bl	8002310 <HAL_GetTick>
 8003970:	4602      	mov	r2, r0
 8003972:	693b      	ldr	r3, [r7, #16]
 8003974:	1ad3      	subs	r3, r2, r3
 8003976:	2b02      	cmp	r3, #2
 8003978:	d901      	bls.n	800397e <HAL_RCC_OscConfig+0x5da>
          {
            return HAL_TIMEOUT;
 800397a:	2303      	movs	r3, #3
 800397c:	e020      	b.n	80039c0 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800397e:	4b12      	ldr	r3, [pc, #72]	; (80039c8 <HAL_RCC_OscConfig+0x624>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003986:	2b00      	cmp	r3, #0
 8003988:	d1f0      	bne.n	800396c <HAL_RCC_OscConfig+0x5c8>
 800398a:	e018      	b.n	80039be <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6a1b      	ldr	r3, [r3, #32]
 8003990:	2b01      	cmp	r3, #1
 8003992:	d101      	bne.n	8003998 <HAL_RCC_OscConfig+0x5f4>
      {
        return HAL_ERROR;
 8003994:	2301      	movs	r3, #1
 8003996:	e013      	b.n	80039c0 <HAL_RCC_OscConfig+0x61c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003998:	4b0b      	ldr	r3, [pc, #44]	; (80039c8 <HAL_RCC_OscConfig+0x624>)
 800399a:	685b      	ldr	r3, [r3, #4]
 800399c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039a8:	429a      	cmp	r2, r3
 80039aa:	d106      	bne.n	80039ba <HAL_RCC_OscConfig+0x616>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039b6:	429a      	cmp	r2, r3
 80039b8:	d001      	beq.n	80039be <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 80039ba:	2301      	movs	r3, #1
 80039bc:	e000      	b.n	80039c0 <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }

  return HAL_OK;
 80039be:	2300      	movs	r3, #0
}
 80039c0:	4618      	mov	r0, r3
 80039c2:	3718      	adds	r7, #24
 80039c4:	46bd      	mov	sp, r7
 80039c6:	bd80      	pop	{r7, pc}
 80039c8:	40021000 	.word	0x40021000
 80039cc:	42420060 	.word	0x42420060

080039d0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b084      	sub	sp, #16
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
 80039d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d101      	bne.n	80039e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80039e0:	2301      	movs	r3, #1
 80039e2:	e0d0      	b.n	8003b86 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80039e4:	4b6a      	ldr	r3, [pc, #424]	; (8003b90 <HAL_RCC_ClockConfig+0x1c0>)
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f003 0307 	and.w	r3, r3, #7
 80039ec:	683a      	ldr	r2, [r7, #0]
 80039ee:	429a      	cmp	r2, r3
 80039f0:	d910      	bls.n	8003a14 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039f2:	4b67      	ldr	r3, [pc, #412]	; (8003b90 <HAL_RCC_ClockConfig+0x1c0>)
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f023 0207 	bic.w	r2, r3, #7
 80039fa:	4965      	ldr	r1, [pc, #404]	; (8003b90 <HAL_RCC_ClockConfig+0x1c0>)
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	4313      	orrs	r3, r2
 8003a00:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a02:	4b63      	ldr	r3, [pc, #396]	; (8003b90 <HAL_RCC_ClockConfig+0x1c0>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f003 0307 	and.w	r3, r3, #7
 8003a0a:	683a      	ldr	r2, [r7, #0]
 8003a0c:	429a      	cmp	r2, r3
 8003a0e:	d001      	beq.n	8003a14 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003a10:	2301      	movs	r3, #1
 8003a12:	e0b8      	b.n	8003b86 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f003 0302 	and.w	r3, r3, #2
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d020      	beq.n	8003a62 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f003 0304 	and.w	r3, r3, #4
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d005      	beq.n	8003a38 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a2c:	4b59      	ldr	r3, [pc, #356]	; (8003b94 <HAL_RCC_ClockConfig+0x1c4>)
 8003a2e:	685b      	ldr	r3, [r3, #4]
 8003a30:	4a58      	ldr	r2, [pc, #352]	; (8003b94 <HAL_RCC_ClockConfig+0x1c4>)
 8003a32:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003a36:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f003 0308 	and.w	r3, r3, #8
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d005      	beq.n	8003a50 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003a44:	4b53      	ldr	r3, [pc, #332]	; (8003b94 <HAL_RCC_ClockConfig+0x1c4>)
 8003a46:	685b      	ldr	r3, [r3, #4]
 8003a48:	4a52      	ldr	r2, [pc, #328]	; (8003b94 <HAL_RCC_ClockConfig+0x1c4>)
 8003a4a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003a4e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a50:	4b50      	ldr	r3, [pc, #320]	; (8003b94 <HAL_RCC_ClockConfig+0x1c4>)
 8003a52:	685b      	ldr	r3, [r3, #4]
 8003a54:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	689b      	ldr	r3, [r3, #8]
 8003a5c:	494d      	ldr	r1, [pc, #308]	; (8003b94 <HAL_RCC_ClockConfig+0x1c4>)
 8003a5e:	4313      	orrs	r3, r2
 8003a60:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f003 0301 	and.w	r3, r3, #1
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d040      	beq.n	8003af0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	685b      	ldr	r3, [r3, #4]
 8003a72:	2b01      	cmp	r3, #1
 8003a74:	d107      	bne.n	8003a86 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a76:	4b47      	ldr	r3, [pc, #284]	; (8003b94 <HAL_RCC_ClockConfig+0x1c4>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d115      	bne.n	8003aae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a82:	2301      	movs	r3, #1
 8003a84:	e07f      	b.n	8003b86 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	685b      	ldr	r3, [r3, #4]
 8003a8a:	2b02      	cmp	r3, #2
 8003a8c:	d107      	bne.n	8003a9e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a8e:	4b41      	ldr	r3, [pc, #260]	; (8003b94 <HAL_RCC_ClockConfig+0x1c4>)
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d109      	bne.n	8003aae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	e073      	b.n	8003b86 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a9e:	4b3d      	ldr	r3, [pc, #244]	; (8003b94 <HAL_RCC_ClockConfig+0x1c4>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f003 0302 	and.w	r3, r3, #2
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d101      	bne.n	8003aae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003aaa:	2301      	movs	r3, #1
 8003aac:	e06b      	b.n	8003b86 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003aae:	4b39      	ldr	r3, [pc, #228]	; (8003b94 <HAL_RCC_ClockConfig+0x1c4>)
 8003ab0:	685b      	ldr	r3, [r3, #4]
 8003ab2:	f023 0203 	bic.w	r2, r3, #3
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	685b      	ldr	r3, [r3, #4]
 8003aba:	4936      	ldr	r1, [pc, #216]	; (8003b94 <HAL_RCC_ClockConfig+0x1c4>)
 8003abc:	4313      	orrs	r3, r2
 8003abe:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003ac0:	f7fe fc26 	bl	8002310 <HAL_GetTick>
 8003ac4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ac6:	e00a      	b.n	8003ade <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ac8:	f7fe fc22 	bl	8002310 <HAL_GetTick>
 8003acc:	4602      	mov	r2, r0
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	1ad3      	subs	r3, r2, r3
 8003ad2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d901      	bls.n	8003ade <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003ada:	2303      	movs	r3, #3
 8003adc:	e053      	b.n	8003b86 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ade:	4b2d      	ldr	r3, [pc, #180]	; (8003b94 <HAL_RCC_ClockConfig+0x1c4>)
 8003ae0:	685b      	ldr	r3, [r3, #4]
 8003ae2:	f003 020c 	and.w	r2, r3, #12
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	685b      	ldr	r3, [r3, #4]
 8003aea:	009b      	lsls	r3, r3, #2
 8003aec:	429a      	cmp	r2, r3
 8003aee:	d1eb      	bne.n	8003ac8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003af0:	4b27      	ldr	r3, [pc, #156]	; (8003b90 <HAL_RCC_ClockConfig+0x1c0>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f003 0307 	and.w	r3, r3, #7
 8003af8:	683a      	ldr	r2, [r7, #0]
 8003afa:	429a      	cmp	r2, r3
 8003afc:	d210      	bcs.n	8003b20 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003afe:	4b24      	ldr	r3, [pc, #144]	; (8003b90 <HAL_RCC_ClockConfig+0x1c0>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f023 0207 	bic.w	r2, r3, #7
 8003b06:	4922      	ldr	r1, [pc, #136]	; (8003b90 <HAL_RCC_ClockConfig+0x1c0>)
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	4313      	orrs	r3, r2
 8003b0c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b0e:	4b20      	ldr	r3, [pc, #128]	; (8003b90 <HAL_RCC_ClockConfig+0x1c0>)
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f003 0307 	and.w	r3, r3, #7
 8003b16:	683a      	ldr	r2, [r7, #0]
 8003b18:	429a      	cmp	r2, r3
 8003b1a:	d001      	beq.n	8003b20 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003b1c:	2301      	movs	r3, #1
 8003b1e:	e032      	b.n	8003b86 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f003 0304 	and.w	r3, r3, #4
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d008      	beq.n	8003b3e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b2c:	4b19      	ldr	r3, [pc, #100]	; (8003b94 <HAL_RCC_ClockConfig+0x1c4>)
 8003b2e:	685b      	ldr	r3, [r3, #4]
 8003b30:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	68db      	ldr	r3, [r3, #12]
 8003b38:	4916      	ldr	r1, [pc, #88]	; (8003b94 <HAL_RCC_ClockConfig+0x1c4>)
 8003b3a:	4313      	orrs	r3, r2
 8003b3c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f003 0308 	and.w	r3, r3, #8
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d009      	beq.n	8003b5e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003b4a:	4b12      	ldr	r3, [pc, #72]	; (8003b94 <HAL_RCC_ClockConfig+0x1c4>)
 8003b4c:	685b      	ldr	r3, [r3, #4]
 8003b4e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	691b      	ldr	r3, [r3, #16]
 8003b56:	00db      	lsls	r3, r3, #3
 8003b58:	490e      	ldr	r1, [pc, #56]	; (8003b94 <HAL_RCC_ClockConfig+0x1c4>)
 8003b5a:	4313      	orrs	r3, r2
 8003b5c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003b5e:	f000 f821 	bl	8003ba4 <HAL_RCC_GetSysClockFreq>
 8003b62:	4602      	mov	r2, r0
 8003b64:	4b0b      	ldr	r3, [pc, #44]	; (8003b94 <HAL_RCC_ClockConfig+0x1c4>)
 8003b66:	685b      	ldr	r3, [r3, #4]
 8003b68:	091b      	lsrs	r3, r3, #4
 8003b6a:	f003 030f 	and.w	r3, r3, #15
 8003b6e:	490a      	ldr	r1, [pc, #40]	; (8003b98 <HAL_RCC_ClockConfig+0x1c8>)
 8003b70:	5ccb      	ldrb	r3, [r1, r3]
 8003b72:	fa22 f303 	lsr.w	r3, r2, r3
 8003b76:	4a09      	ldr	r2, [pc, #36]	; (8003b9c <HAL_RCC_ClockConfig+0x1cc>)
 8003b78:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003b7a:	4b09      	ldr	r3, [pc, #36]	; (8003ba0 <HAL_RCC_ClockConfig+0x1d0>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	4618      	mov	r0, r3
 8003b80:	f7fe fb84 	bl	800228c <HAL_InitTick>

  return HAL_OK;
 8003b84:	2300      	movs	r3, #0
}
 8003b86:	4618      	mov	r0, r3
 8003b88:	3710      	adds	r7, #16
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	bd80      	pop	{r7, pc}
 8003b8e:	bf00      	nop
 8003b90:	40022000 	.word	0x40022000
 8003b94:	40021000 	.word	0x40021000
 8003b98:	0800a3fc 	.word	0x0800a3fc
 8003b9c:	20000000 	.word	0x20000000
 8003ba0:	20000004 	.word	0x20000004

08003ba4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ba4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003ba8:	b091      	sub	sp, #68	; 0x44
 8003baa:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
 8003bac:	4b6a      	ldr	r3, [pc, #424]	; (8003d58 <HAL_RCC_GetSysClockFreq+0x1b4>)
 8003bae:	f107 0414 	add.w	r4, r7, #20
 8003bb2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003bb4:	c407      	stmia	r4!, {r0, r1, r2}
 8003bb6:	8023      	strh	r3, [r4, #0]
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
 8003bb8:	4b68      	ldr	r3, [pc, #416]	; (8003d5c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003bba:	1d3c      	adds	r4, r7, #4
 8003bbc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003bbe:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	637b      	str	r3, [r7, #52]	; 0x34
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	633b      	str	r3, [r7, #48]	; 0x30
 8003bca:	2300      	movs	r3, #0
 8003bcc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003bce:	2300      	movs	r3, #0
 8003bd0:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t sysclockfreq = 0U;
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	63bb      	str	r3, [r7, #56]	; 0x38
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	62bb      	str	r3, [r7, #40]	; 0x28
 8003bda:	2300      	movs	r3, #0
 8003bdc:	627b      	str	r3, [r7, #36]	; 0x24
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003bde:	4b60      	ldr	r3, [pc, #384]	; (8003d60 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003be0:	685b      	ldr	r3, [r3, #4]
 8003be2:	637b      	str	r3, [r7, #52]	; 0x34

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003be4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003be6:	f003 030c 	and.w	r3, r3, #12
 8003bea:	2b04      	cmp	r3, #4
 8003bec:	d002      	beq.n	8003bf4 <HAL_RCC_GetSysClockFreq+0x50>
 8003bee:	2b08      	cmp	r3, #8
 8003bf0:	d003      	beq.n	8003bfa <HAL_RCC_GetSysClockFreq+0x56>
 8003bf2:	e0a8      	b.n	8003d46 <HAL_RCC_GetSysClockFreq+0x1a2>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003bf4:	4b5b      	ldr	r3, [pc, #364]	; (8003d64 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003bf6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003bf8:	e0a8      	b.n	8003d4c <HAL_RCC_GetSysClockFreq+0x1a8>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003bfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bfc:	0c9b      	lsrs	r3, r3, #18
 8003bfe:	f003 030f 	and.w	r3, r3, #15
 8003c02:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8003c06:	4413      	add	r3, r2
 8003c08:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 8003c0c:	62fb      	str	r3, [r7, #44]	; 0x2c
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003c0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	f000 808e 	beq.w	8003d36 <HAL_RCC_GetSysClockFreq+0x192>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 8003c1a:	4b51      	ldr	r3, [pc, #324]	; (8003d60 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003c1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c1e:	f003 030f 	and.w	r3, r3, #15
 8003c22:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8003c26:	4413      	add	r3, r2
 8003c28:	f813 3c3c 	ldrb.w	r3, [r3, #-60]
 8003c2c:	633b      	str	r3, [r7, #48]	; 0x30
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
#endif /*RCC_CFGR2_PREDIV1*/
#if defined(RCC_CFGR2_PREDIV1SRC)

        if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC))
 8003c2e:	4b4c      	ldr	r3, [pc, #304]	; (8003d60 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003c30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c32:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d06b      	beq.n	8003d12 <HAL_RCC_GetSysClockFreq+0x16e>
        {
          /* PLL2 selected as Prediv1 source */
          /* PLLCLK = PLL2CLK / PREDIV1 * PLLMUL with PLL2CLK = HSE/PREDIV2 * PLL2MUL */
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 8003c3a:	4b49      	ldr	r3, [pc, #292]	; (8003d60 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003c3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c3e:	091b      	lsrs	r3, r3, #4
 8003c40:	f003 030f 	and.w	r3, r3, #15
 8003c44:	3301      	adds	r3, #1
 8003c46:	62bb      	str	r3, [r7, #40]	; 0x28
          pll2mul = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> RCC_CFGR2_PLL2MUL_Pos) + 2;
 8003c48:	4b45      	ldr	r3, [pc, #276]	; (8003d60 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003c4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c4c:	0a1b      	lsrs	r3, r3, #8
 8003c4e:	f003 030f 	and.w	r3, r3, #15
 8003c52:	3302      	adds	r3, #2
 8003c54:	627b      	str	r3, [r7, #36]	; 0x24
          pllclk = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pll2mul * (uint64_t)pllmul) / ((uint64_t)prediv2 * (uint64_t)prediv));
 8003c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c58:	4618      	mov	r0, r3
 8003c5a:	f04f 0100 	mov.w	r1, #0
 8003c5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c60:	461a      	mov	r2, r3
 8003c62:	f04f 0300 	mov.w	r3, #0
 8003c66:	fb02 f501 	mul.w	r5, r2, r1
 8003c6a:	fb00 f403 	mul.w	r4, r0, r3
 8003c6e:	192e      	adds	r6, r5, r4
 8003c70:	fba0 4502 	umull	r4, r5, r0, r2
 8003c74:	1973      	adds	r3, r6, r5
 8003c76:	461d      	mov	r5, r3
 8003c78:	4620      	mov	r0, r4
 8003c7a:	4629      	mov	r1, r5
 8003c7c:	f04f 0200 	mov.w	r2, #0
 8003c80:	f04f 0300 	mov.w	r3, #0
 8003c84:	014b      	lsls	r3, r1, #5
 8003c86:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003c8a:	0142      	lsls	r2, r0, #5
 8003c8c:	4610      	mov	r0, r2
 8003c8e:	4619      	mov	r1, r3
 8003c90:	1b00      	subs	r0, r0, r4
 8003c92:	eb61 0105 	sbc.w	r1, r1, r5
 8003c96:	f04f 0200 	mov.w	r2, #0
 8003c9a:	f04f 0300 	mov.w	r3, #0
 8003c9e:	018b      	lsls	r3, r1, #6
 8003ca0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003ca4:	0182      	lsls	r2, r0, #6
 8003ca6:	1a12      	subs	r2, r2, r0
 8003ca8:	eb63 0301 	sbc.w	r3, r3, r1
 8003cac:	f04f 0000 	mov.w	r0, #0
 8003cb0:	f04f 0100 	mov.w	r1, #0
 8003cb4:	00d9      	lsls	r1, r3, #3
 8003cb6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003cba:	00d0      	lsls	r0, r2, #3
 8003cbc:	4602      	mov	r2, r0
 8003cbe:	460b      	mov	r3, r1
 8003cc0:	1912      	adds	r2, r2, r4
 8003cc2:	eb45 0303 	adc.w	r3, r5, r3
 8003cc6:	f04f 0000 	mov.w	r0, #0
 8003cca:	f04f 0100 	mov.w	r1, #0
 8003cce:	0299      	lsls	r1, r3, #10
 8003cd0:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003cd4:	0290      	lsls	r0, r2, #10
 8003cd6:	4602      	mov	r2, r0
 8003cd8:	460b      	mov	r3, r1
 8003cda:	4690      	mov	r8, r2
 8003cdc:	4699      	mov	r9, r3
 8003cde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	f04f 0100 	mov.w	r1, #0
 8003ce6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ce8:	461a      	mov	r2, r3
 8003cea:	f04f 0300 	mov.w	r3, #0
 8003cee:	fb02 f501 	mul.w	r5, r2, r1
 8003cf2:	fb00 f403 	mul.w	r4, r0, r3
 8003cf6:	442c      	add	r4, r5
 8003cf8:	fba0 2302 	umull	r2, r3, r0, r2
 8003cfc:	18e1      	adds	r1, r4, r3
 8003cfe:	460b      	mov	r3, r1
 8003d00:	4640      	mov	r0, r8
 8003d02:	4649      	mov	r1, r9
 8003d04:	f7fc ff9c 	bl	8000c40 <__aeabi_uldivmod>
 8003d08:	4602      	mov	r2, r0
 8003d0a:	460b      	mov	r3, r1
 8003d0c:	4613      	mov	r3, r2
 8003d0e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003d10:	e007      	b.n	8003d22 <HAL_RCC_GetSysClockFreq+0x17e>
        }
        else
        {
          /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
          pllclk = (uint32_t)((HSE_VALUE * pllmul) / prediv);
 8003d12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d14:	4a13      	ldr	r2, [pc, #76]	; (8003d64 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003d16:	fb02 f203 	mul.w	r2, r2, r3
 8003d1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d20:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        /* If PLLMUL was set to 13 means that it was to cover the case PLLMUL 6.5 (avoid using float) */
        /* In this case need to divide pllclk by 2 */
        if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
 8003d22:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8003d26:	461a      	mov	r2, r3
 8003d28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d108      	bne.n	8003d40 <HAL_RCC_GetSysClockFreq+0x19c>
        {
          pllclk = pllclk / 2;
 8003d2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d30:	085b      	lsrs	r3, r3, #1
 8003d32:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003d34:	e004      	b.n	8003d40 <HAL_RCC_GetSysClockFreq+0x19c>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003d36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d38:	4a0b      	ldr	r2, [pc, #44]	; (8003d68 <HAL_RCC_GetSysClockFreq+0x1c4>)
 8003d3a:	fb02 f303 	mul.w	r3, r2, r3
 8003d3e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      sysclockfreq = pllclk;
 8003d40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d42:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003d44:	e002      	b.n	8003d4c <HAL_RCC_GetSysClockFreq+0x1a8>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003d46:	4b09      	ldr	r3, [pc, #36]	; (8003d6c <HAL_RCC_GetSysClockFreq+0x1c8>)
 8003d48:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003d4a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003d4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003d4e:	4618      	mov	r0, r3
 8003d50:	3744      	adds	r7, #68	; 0x44
 8003d52:	46bd      	mov	sp, r7
 8003d54:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003d58:	0800a3d0 	.word	0x0800a3d0
 8003d5c:	0800a3e0 	.word	0x0800a3e0
 8003d60:	40021000 	.word	0x40021000
 8003d64:	00f42400 	.word	0x00f42400
 8003d68:	003d0900 	.word	0x003d0900
 8003d6c:	007a1200 	.word	0x007a1200

08003d70 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d70:	b480      	push	{r7}
 8003d72:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d74:	4b02      	ldr	r3, [pc, #8]	; (8003d80 <HAL_RCC_GetHCLKFreq+0x10>)
 8003d76:	681b      	ldr	r3, [r3, #0]
}
 8003d78:	4618      	mov	r0, r3
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	bc80      	pop	{r7}
 8003d7e:	4770      	bx	lr
 8003d80:	20000000 	.word	0x20000000

08003d84 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003d88:	f7ff fff2 	bl	8003d70 <HAL_RCC_GetHCLKFreq>
 8003d8c:	4602      	mov	r2, r0
 8003d8e:	4b05      	ldr	r3, [pc, #20]	; (8003da4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003d90:	685b      	ldr	r3, [r3, #4]
 8003d92:	0a1b      	lsrs	r3, r3, #8
 8003d94:	f003 0307 	and.w	r3, r3, #7
 8003d98:	4903      	ldr	r1, [pc, #12]	; (8003da8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d9a:	5ccb      	ldrb	r3, [r1, r3]
 8003d9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003da0:	4618      	mov	r0, r3
 8003da2:	bd80      	pop	{r7, pc}
 8003da4:	40021000 	.word	0x40021000
 8003da8:	0800a40c 	.word	0x0800a40c

08003dac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003db0:	f7ff ffde 	bl	8003d70 <HAL_RCC_GetHCLKFreq>
 8003db4:	4602      	mov	r2, r0
 8003db6:	4b05      	ldr	r3, [pc, #20]	; (8003dcc <HAL_RCC_GetPCLK2Freq+0x20>)
 8003db8:	685b      	ldr	r3, [r3, #4]
 8003dba:	0adb      	lsrs	r3, r3, #11
 8003dbc:	f003 0307 	and.w	r3, r3, #7
 8003dc0:	4903      	ldr	r1, [pc, #12]	; (8003dd0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003dc2:	5ccb      	ldrb	r3, [r1, r3]
 8003dc4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003dc8:	4618      	mov	r0, r3
 8003dca:	bd80      	pop	{r7, pc}
 8003dcc:	40021000 	.word	0x40021000
 8003dd0:	0800a40c 	.word	0x0800a40c

08003dd4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003dd4:	b480      	push	{r7}
 8003dd6:	b085      	sub	sp, #20
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003ddc:	4b0a      	ldr	r3, [pc, #40]	; (8003e08 <RCC_Delay+0x34>)
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	4a0a      	ldr	r2, [pc, #40]	; (8003e0c <RCC_Delay+0x38>)
 8003de2:	fba2 2303 	umull	r2, r3, r2, r3
 8003de6:	0a5b      	lsrs	r3, r3, #9
 8003de8:	687a      	ldr	r2, [r7, #4]
 8003dea:	fb02 f303 	mul.w	r3, r2, r3
 8003dee:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003df0:	bf00      	nop
  }
  while (Delay --);
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	1e5a      	subs	r2, r3, #1
 8003df6:	60fa      	str	r2, [r7, #12]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d1f9      	bne.n	8003df0 <RCC_Delay+0x1c>
}
 8003dfc:	bf00      	nop
 8003dfe:	bf00      	nop
 8003e00:	3714      	adds	r7, #20
 8003e02:	46bd      	mov	sp, r7
 8003e04:	bc80      	pop	{r7}
 8003e06:	4770      	bx	lr
 8003e08:	20000000 	.word	0x20000000
 8003e0c:	10624dd3 	.word	0x10624dd3

08003e10 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b088      	sub	sp, #32
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003e18:	2300      	movs	r3, #0
 8003e1a:	617b      	str	r3, [r7, #20]
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	613b      	str	r3, [r7, #16]
#if defined(STM32F105xC) || defined(STM32F107xC)
  uint32_t  pllactive = 0U;
 8003e20:	2300      	movs	r3, #0
 8003e22:	61fb      	str	r3, [r7, #28]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f003 0301 	and.w	r3, r3, #1
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d07d      	beq.n	8003f2c <HAL_RCCEx_PeriphCLKConfig+0x11c>
  {
    FlagStatus pwrclkchanged = RESET;
 8003e30:	2300      	movs	r3, #0
 8003e32:	76fb      	strb	r3, [r7, #27]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e34:	4b8b      	ldr	r3, [pc, #556]	; (8004064 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003e36:	69db      	ldr	r3, [r3, #28]
 8003e38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d10d      	bne.n	8003e5c <HAL_RCCEx_PeriphCLKConfig+0x4c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e40:	4b88      	ldr	r3, [pc, #544]	; (8004064 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003e42:	69db      	ldr	r3, [r3, #28]
 8003e44:	4a87      	ldr	r2, [pc, #540]	; (8004064 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003e46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e4a:	61d3      	str	r3, [r2, #28]
 8003e4c:	4b85      	ldr	r3, [pc, #532]	; (8004064 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003e4e:	69db      	ldr	r3, [r3, #28]
 8003e50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e54:	60fb      	str	r3, [r7, #12]
 8003e56:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003e58:	2301      	movs	r3, #1
 8003e5a:	76fb      	strb	r3, [r7, #27]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e5c:	4b82      	ldr	r3, [pc, #520]	; (8004068 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d118      	bne.n	8003e9a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e68:	4b7f      	ldr	r3, [pc, #508]	; (8004068 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	4a7e      	ldr	r2, [pc, #504]	; (8004068 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003e6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e72:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e74:	f7fe fa4c 	bl	8002310 <HAL_GetTick>
 8003e78:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e7a:	e008      	b.n	8003e8e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e7c:	f7fe fa48 	bl	8002310 <HAL_GetTick>
 8003e80:	4602      	mov	r2, r0
 8003e82:	697b      	ldr	r3, [r7, #20]
 8003e84:	1ad3      	subs	r3, r2, r3
 8003e86:	2b64      	cmp	r3, #100	; 0x64
 8003e88:	d901      	bls.n	8003e8e <HAL_RCCEx_PeriphCLKConfig+0x7e>
        {
          return HAL_TIMEOUT;
 8003e8a:	2303      	movs	r3, #3
 8003e8c:	e0e5      	b.n	800405a <HAL_RCCEx_PeriphCLKConfig+0x24a>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e8e:	4b76      	ldr	r3, [pc, #472]	; (8004068 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d0f0      	beq.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0x6c>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003e9a:	4b72      	ldr	r3, [pc, #456]	; (8004064 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003e9c:	6a1b      	ldr	r3, [r3, #32]
 8003e9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ea2:	613b      	str	r3, [r7, #16]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003ea4:	693b      	ldr	r3, [r7, #16]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d02e      	beq.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0xf8>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	685b      	ldr	r3, [r3, #4]
 8003eae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003eb2:	693a      	ldr	r2, [r7, #16]
 8003eb4:	429a      	cmp	r2, r3
 8003eb6:	d027      	beq.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003eb8:	4b6a      	ldr	r3, [pc, #424]	; (8004064 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003eba:	6a1b      	ldr	r3, [r3, #32]
 8003ebc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ec0:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003ec2:	4b6a      	ldr	r3, [pc, #424]	; (800406c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003ec4:	2201      	movs	r2, #1
 8003ec6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003ec8:	4b68      	ldr	r3, [pc, #416]	; (800406c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003eca:	2200      	movs	r2, #0
 8003ecc:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003ece:	4a65      	ldr	r2, [pc, #404]	; (8004064 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003ed0:	693b      	ldr	r3, [r7, #16]
 8003ed2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003ed4:	693b      	ldr	r3, [r7, #16]
 8003ed6:	f003 0301 	and.w	r3, r3, #1
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d014      	beq.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0xf8>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ede:	f7fe fa17 	bl	8002310 <HAL_GetTick>
 8003ee2:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ee4:	e00a      	b.n	8003efc <HAL_RCCEx_PeriphCLKConfig+0xec>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ee6:	f7fe fa13 	bl	8002310 <HAL_GetTick>
 8003eea:	4602      	mov	r2, r0
 8003eec:	697b      	ldr	r3, [r7, #20]
 8003eee:	1ad3      	subs	r3, r2, r3
 8003ef0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	d901      	bls.n	8003efc <HAL_RCCEx_PeriphCLKConfig+0xec>
          {
            return HAL_TIMEOUT;
 8003ef8:	2303      	movs	r3, #3
 8003efa:	e0ae      	b.n	800405a <HAL_RCCEx_PeriphCLKConfig+0x24a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003efc:	4b59      	ldr	r3, [pc, #356]	; (8004064 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003efe:	6a1b      	ldr	r3, [r3, #32]
 8003f00:	f003 0302 	and.w	r3, r3, #2
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d0ee      	beq.n	8003ee6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003f08:	4b56      	ldr	r3, [pc, #344]	; (8004064 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003f0a:	6a1b      	ldr	r3, [r3, #32]
 8003f0c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	685b      	ldr	r3, [r3, #4]
 8003f14:	4953      	ldr	r1, [pc, #332]	; (8004064 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003f16:	4313      	orrs	r3, r2
 8003f18:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003f1a:	7efb      	ldrb	r3, [r7, #27]
 8003f1c:	2b01      	cmp	r3, #1
 8003f1e:	d105      	bne.n	8003f2c <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f20:	4b50      	ldr	r3, [pc, #320]	; (8004064 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003f22:	69db      	ldr	r3, [r3, #28]
 8003f24:	4a4f      	ldr	r2, [pc, #316]	; (8004064 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003f26:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f2a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f003 0302 	and.w	r3, r3, #2
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d008      	beq.n	8003f4a <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003f38:	4b4a      	ldr	r3, [pc, #296]	; (8004064 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003f3a:	685b      	ldr	r3, [r3, #4]
 8003f3c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	689b      	ldr	r3, [r3, #8]
 8003f44:	4947      	ldr	r1, [pc, #284]	; (8004064 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003f46:	4313      	orrs	r3, r2
 8003f48:	604b      	str	r3, [r1, #4]
  }

#if defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ I2S2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f003 0304 	and.w	r3, r3, #4
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d008      	beq.n	8003f68 <HAL_RCCEx_PeriphCLKConfig+0x158>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8003f56:	4b43      	ldr	r3, [pc, #268]	; (8004064 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003f58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f5a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	68db      	ldr	r3, [r3, #12]
 8003f62:	4940      	ldr	r1, [pc, #256]	; (8004064 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003f64:	4313      	orrs	r3, r2
 8003f66:	62cb      	str	r3, [r1, #44]	; 0x2c
  }

  /*------------------------------ I2S3 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S3) == RCC_PERIPHCLK_I2S3)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f003 0308 	and.w	r3, r3, #8
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d008      	beq.n	8003f86 <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S3CLKSOURCE(PeriphClkInit->I2s3ClockSelection));

    /* Configure the I2S3 clock source */
    __HAL_RCC_I2S3_CONFIG(PeriphClkInit->I2s3ClockSelection);
 8003f74:	4b3b      	ldr	r3, [pc, #236]	; (8004064 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003f76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f78:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	691b      	ldr	r3, [r3, #16]
 8003f80:	4938      	ldr	r1, [pc, #224]	; (8004064 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003f82:	4313      	orrs	r3, r2
 8003f84:	62cb      	str	r3, [r1, #44]	; 0x2c
  }

  /*------------------------------ PLL I2S Configuration ----------------------*/
  /* Check that PLLI2S need to be enabled */
  if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_I2S2SRC) || HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_I2S3SRC))
 8003f86:	4b37      	ldr	r3, [pc, #220]	; (8004064 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003f88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d105      	bne.n	8003f9e <HAL_RCCEx_PeriphCLKConfig+0x18e>
 8003f92:	4b34      	ldr	r3, [pc, #208]	; (8004064 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003f94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f96:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d001      	beq.n	8003fa2 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Update flag to indicate that PLL I2S should be active */
    pllactive = 1;
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	61fb      	str	r3, [r7, #28]
  }

  /* Check if PLL I2S need to be enabled */
  if (pllactive == 1)
 8003fa2:	69fb      	ldr	r3, [r7, #28]
 8003fa4:	2b01      	cmp	r3, #1
 8003fa6:	d148      	bne.n	800403a <HAL_RCCEx_PeriphCLKConfig+0x22a>
  {
    /* Enable PLL I2S only if not active */
    if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_PLL3ON))
 8003fa8:	4b2e      	ldr	r3, [pc, #184]	; (8004064 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d138      	bne.n	8004026 <HAL_RCCEx_PeriphCLKConfig+0x216>
      assert_param(IS_RCC_PLLI2S_MUL(PeriphClkInit->PLLI2S.PLLI2SMUL));
      assert_param(IS_RCC_HSE_PREDIV2(PeriphClkInit->PLLI2S.HSEPrediv2Value));

      /* Prediv2 can be written only when the PLL2 is disabled. */
      /* Return an error only if new value is different from the programmed value */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2ON) && \
 8003fb4:	4b2b      	ldr	r3, [pc, #172]	; (8004064 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d009      	beq.n	8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
          (__HAL_RCC_HSE_GET_PREDIV2() != PeriphClkInit->PLLI2S.HSEPrediv2Value))
 8003fc0:	4b28      	ldr	r3, [pc, #160]	; (8004064 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003fc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fc4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	699b      	ldr	r3, [r3, #24]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2ON) && \
 8003fcc:	429a      	cmp	r2, r3
 8003fce:	d001      	beq.n	8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
      {
        return HAL_ERROR;
 8003fd0:	2301      	movs	r3, #1
 8003fd2:	e042      	b.n	800405a <HAL_RCCEx_PeriphCLKConfig+0x24a>
      }

      /* Configure the HSE prediv2 factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV2_CONFIG(PeriphClkInit->PLLI2S.HSEPrediv2Value);
 8003fd4:	4b23      	ldr	r3, [pc, #140]	; (8004064 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003fd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fd8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	699b      	ldr	r3, [r3, #24]
 8003fe0:	4920      	ldr	r1, [pc, #128]	; (8004064 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003fe2:	4313      	orrs	r3, r2
 8003fe4:	62cb      	str	r3, [r1, #44]	; 0x2c

      /* Configure the main PLLI2S multiplication factors. */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SMUL);
 8003fe6:	4b1f      	ldr	r3, [pc, #124]	; (8004064 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003fe8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fea:	f423 4270 	bic.w	r2, r3, #61440	; 0xf000
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	695b      	ldr	r3, [r3, #20]
 8003ff2:	491c      	ldr	r1, [pc, #112]	; (8004064 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003ff4:	4313      	orrs	r3, r2
 8003ff6:	62cb      	str	r3, [r1, #44]	; 0x2c

      /* Enable the main PLLI2S. */
      __HAL_RCC_PLLI2S_ENABLE();
 8003ff8:	4b1d      	ldr	r3, [pc, #116]	; (8004070 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ffa:	2201      	movs	r2, #1
 8003ffc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ffe:	f7fe f987 	bl	8002310 <HAL_GetTick>
 8004002:	6178      	str	r0, [r7, #20]

      /* Wait till PLLI2S is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004004:	e008      	b.n	8004018 <HAL_RCCEx_PeriphCLKConfig+0x208>
      {
        if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004006:	f7fe f983 	bl	8002310 <HAL_GetTick>
 800400a:	4602      	mov	r2, r0
 800400c:	697b      	ldr	r3, [r7, #20]
 800400e:	1ad3      	subs	r3, r2, r3
 8004010:	2b64      	cmp	r3, #100	; 0x64
 8004012:	d901      	bls.n	8004018 <HAL_RCCEx_PeriphCLKConfig+0x208>
        {
          return HAL_TIMEOUT;
 8004014:	2303      	movs	r3, #3
 8004016:	e020      	b.n	800405a <HAL_RCCEx_PeriphCLKConfig+0x24a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004018:	4b12      	ldr	r3, [pc, #72]	; (8004064 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004020:	2b00      	cmp	r3, #0
 8004022:	d0f0      	beq.n	8004006 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8004024:	e009      	b.n	800403a <HAL_RCCEx_PeriphCLKConfig+0x22a>
      }
    }
    else
    {
      /* Return an error only if user wants to change the PLLI2SMUL whereas PLLI2S is active */
      if (READ_BIT(RCC->CFGR2, RCC_CFGR2_PLL3MUL) != PeriphClkInit->PLLI2S.PLLI2SMUL)
 8004026:	4b0f      	ldr	r3, [pc, #60]	; (8004064 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004028:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800402a:	f403 4270 	and.w	r2, r3, #61440	; 0xf000
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	695b      	ldr	r3, [r3, #20]
 8004032:	429a      	cmp	r2, r3
 8004034:	d001      	beq.n	800403a <HAL_RCCEx_PeriphCLKConfig+0x22a>
      {
        return HAL_ERROR;
 8004036:	2301      	movs	r3, #1
 8004038:	e00f      	b.n	800405a <HAL_RCCEx_PeriphCLKConfig+0x24a>

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f003 0310 	and.w	r3, r3, #16
 8004042:	2b00      	cmp	r3, #0
 8004044:	d008      	beq.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004046:	4b07      	ldr	r3, [pc, #28]	; (8004064 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004048:	685b      	ldr	r3, [r3, #4]
 800404a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	69db      	ldr	r3, [r3, #28]
 8004052:	4904      	ldr	r1, [pc, #16]	; (8004064 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004054:	4313      	orrs	r3, r2
 8004056:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004058:	2300      	movs	r3, #0
}
 800405a:	4618      	mov	r0, r3
 800405c:	3720      	adds	r7, #32
 800405e:	46bd      	mov	sp, r7
 8004060:	bd80      	pop	{r7, pc}
 8004062:	bf00      	nop
 8004064:	40021000 	.word	0x40021000
 8004068:	40007000 	.word	0x40007000
 800406c:	42420440 	.word	0x42420440
 8004070:	42420070 	.word	0x42420070

08004074 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004074:	b580      	push	{r7, lr}
 8004076:	b082      	sub	sp, #8
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2b00      	cmp	r3, #0
 8004080:	d101      	bne.n	8004086 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004082:	2301      	movs	r3, #1
 8004084:	e076      	b.n	8004174 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800408a:	2b00      	cmp	r3, #0
 800408c:	d108      	bne.n	80040a0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	685b      	ldr	r3, [r3, #4]
 8004092:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004096:	d009      	beq.n	80040ac <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2200      	movs	r2, #0
 800409c:	61da      	str	r2, [r3, #28]
 800409e:	e005      	b.n	80040ac <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2200      	movs	r2, #0
 80040a4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	2200      	movs	r2, #0
 80040aa:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2200      	movs	r2, #0
 80040b0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80040b8:	b2db      	uxtb	r3, r3
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d106      	bne.n	80040cc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2200      	movs	r2, #0
 80040c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80040c6:	6878      	ldr	r0, [r7, #4]
 80040c8:	f7fd fd3c 	bl	8001b44 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2202      	movs	r2, #2
 80040d0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	681a      	ldr	r2, [r3, #0]
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80040e2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	685b      	ldr	r3, [r3, #4]
 80040e8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	689b      	ldr	r3, [r3, #8]
 80040f0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80040f4:	431a      	orrs	r2, r3
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	68db      	ldr	r3, [r3, #12]
 80040fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80040fe:	431a      	orrs	r2, r3
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	691b      	ldr	r3, [r3, #16]
 8004104:	f003 0302 	and.w	r3, r3, #2
 8004108:	431a      	orrs	r2, r3
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	695b      	ldr	r3, [r3, #20]
 800410e:	f003 0301 	and.w	r3, r3, #1
 8004112:	431a      	orrs	r2, r3
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	699b      	ldr	r3, [r3, #24]
 8004118:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800411c:	431a      	orrs	r2, r3
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	69db      	ldr	r3, [r3, #28]
 8004122:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004126:	431a      	orrs	r2, r3
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6a1b      	ldr	r3, [r3, #32]
 800412c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004130:	ea42 0103 	orr.w	r1, r2, r3
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004138:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	430a      	orrs	r2, r1
 8004142:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	699b      	ldr	r3, [r3, #24]
 8004148:	0c1a      	lsrs	r2, r3, #16
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f002 0204 	and.w	r2, r2, #4
 8004152:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	69da      	ldr	r2, [r3, #28]
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004162:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2200      	movs	r2, #0
 8004168:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	2201      	movs	r2, #1
 800416e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004172:	2300      	movs	r3, #0
}
 8004174:	4618      	mov	r0, r3
 8004176:	3708      	adds	r7, #8
 8004178:	46bd      	mov	sp, r7
 800417a:	bd80      	pop	{r7, pc}

0800417c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	b082      	sub	sp, #8
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2b00      	cmp	r3, #0
 8004188:	d101      	bne.n	800418e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800418a:	2301      	movs	r3, #1
 800418c:	e041      	b.n	8004212 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004194:	b2db      	uxtb	r3, r3
 8004196:	2b00      	cmp	r3, #0
 8004198:	d106      	bne.n	80041a8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	2200      	movs	r2, #0
 800419e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80041a2:	6878      	ldr	r0, [r7, #4]
 80041a4:	f7fd fd18 	bl	8001bd8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2202      	movs	r2, #2
 80041ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681a      	ldr	r2, [r3, #0]
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	3304      	adds	r3, #4
 80041b8:	4619      	mov	r1, r3
 80041ba:	4610      	mov	r0, r2
 80041bc:	f000 f9b4 	bl	8004528 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2201      	movs	r2, #1
 80041c4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2201      	movs	r2, #1
 80041cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2201      	movs	r2, #1
 80041d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2201      	movs	r2, #1
 80041dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2201      	movs	r2, #1
 80041e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2201      	movs	r2, #1
 80041ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2201      	movs	r2, #1
 80041f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2201      	movs	r2, #1
 80041fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2201      	movs	r2, #1
 8004204:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2201      	movs	r2, #1
 800420c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004210:	2300      	movs	r3, #0
}
 8004212:	4618      	mov	r0, r3
 8004214:	3708      	adds	r7, #8
 8004216:	46bd      	mov	sp, r7
 8004218:	bd80      	pop	{r7, pc}
	...

0800421c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800421c:	b480      	push	{r7}
 800421e:	b085      	sub	sp, #20
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800422a:	b2db      	uxtb	r3, r3
 800422c:	2b01      	cmp	r3, #1
 800422e:	d001      	beq.n	8004234 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004230:	2301      	movs	r3, #1
 8004232:	e03f      	b.n	80042b4 <HAL_TIM_Base_Start_IT+0x98>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2202      	movs	r2, #2
 8004238:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	68da      	ldr	r2, [r3, #12]
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f042 0201 	orr.w	r2, r2, #1
 800424a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	4a1b      	ldr	r2, [pc, #108]	; (80042c0 <HAL_TIM_Base_Start_IT+0xa4>)
 8004252:	4293      	cmp	r3, r2
 8004254:	d013      	beq.n	800427e <HAL_TIM_Base_Start_IT+0x62>
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800425e:	d00e      	beq.n	800427e <HAL_TIM_Base_Start_IT+0x62>
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	4a17      	ldr	r2, [pc, #92]	; (80042c4 <HAL_TIM_Base_Start_IT+0xa8>)
 8004266:	4293      	cmp	r3, r2
 8004268:	d009      	beq.n	800427e <HAL_TIM_Base_Start_IT+0x62>
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	4a16      	ldr	r2, [pc, #88]	; (80042c8 <HAL_TIM_Base_Start_IT+0xac>)
 8004270:	4293      	cmp	r3, r2
 8004272:	d004      	beq.n	800427e <HAL_TIM_Base_Start_IT+0x62>
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	4a14      	ldr	r2, [pc, #80]	; (80042cc <HAL_TIM_Base_Start_IT+0xb0>)
 800427a:	4293      	cmp	r3, r2
 800427c:	d111      	bne.n	80042a2 <HAL_TIM_Base_Start_IT+0x86>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	689b      	ldr	r3, [r3, #8]
 8004284:	f003 0307 	and.w	r3, r3, #7
 8004288:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	2b06      	cmp	r3, #6
 800428e:	d010      	beq.n	80042b2 <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	681a      	ldr	r2, [r3, #0]
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f042 0201 	orr.w	r2, r2, #1
 800429e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042a0:	e007      	b.n	80042b2 <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	681a      	ldr	r2, [r3, #0]
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f042 0201 	orr.w	r2, r2, #1
 80042b0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80042b2:	2300      	movs	r3, #0
}
 80042b4:	4618      	mov	r0, r3
 80042b6:	3714      	adds	r7, #20
 80042b8:	46bd      	mov	sp, r7
 80042ba:	bc80      	pop	{r7}
 80042bc:	4770      	bx	lr
 80042be:	bf00      	nop
 80042c0:	40012c00 	.word	0x40012c00
 80042c4:	40000400 	.word	0x40000400
 80042c8:	40000800 	.word	0x40000800
 80042cc:	40000c00 	.word	0x40000c00

080042d0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b082      	sub	sp, #8
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	691b      	ldr	r3, [r3, #16]
 80042de:	f003 0302 	and.w	r3, r3, #2
 80042e2:	2b02      	cmp	r3, #2
 80042e4:	d122      	bne.n	800432c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	68db      	ldr	r3, [r3, #12]
 80042ec:	f003 0302 	and.w	r3, r3, #2
 80042f0:	2b02      	cmp	r3, #2
 80042f2:	d11b      	bne.n	800432c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f06f 0202 	mvn.w	r2, #2
 80042fc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2201      	movs	r2, #1
 8004302:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	699b      	ldr	r3, [r3, #24]
 800430a:	f003 0303 	and.w	r3, r3, #3
 800430e:	2b00      	cmp	r3, #0
 8004310:	d003      	beq.n	800431a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004312:	6878      	ldr	r0, [r7, #4]
 8004314:	f000 f8ed 	bl	80044f2 <HAL_TIM_IC_CaptureCallback>
 8004318:	e005      	b.n	8004326 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800431a:	6878      	ldr	r0, [r7, #4]
 800431c:	f000 f8e0 	bl	80044e0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004320:	6878      	ldr	r0, [r7, #4]
 8004322:	f000 f8ef 	bl	8004504 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	2200      	movs	r2, #0
 800432a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	691b      	ldr	r3, [r3, #16]
 8004332:	f003 0304 	and.w	r3, r3, #4
 8004336:	2b04      	cmp	r3, #4
 8004338:	d122      	bne.n	8004380 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	68db      	ldr	r3, [r3, #12]
 8004340:	f003 0304 	and.w	r3, r3, #4
 8004344:	2b04      	cmp	r3, #4
 8004346:	d11b      	bne.n	8004380 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f06f 0204 	mvn.w	r2, #4
 8004350:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2202      	movs	r2, #2
 8004356:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	699b      	ldr	r3, [r3, #24]
 800435e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004362:	2b00      	cmp	r3, #0
 8004364:	d003      	beq.n	800436e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004366:	6878      	ldr	r0, [r7, #4]
 8004368:	f000 f8c3 	bl	80044f2 <HAL_TIM_IC_CaptureCallback>
 800436c:	e005      	b.n	800437a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800436e:	6878      	ldr	r0, [r7, #4]
 8004370:	f000 f8b6 	bl	80044e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004374:	6878      	ldr	r0, [r7, #4]
 8004376:	f000 f8c5 	bl	8004504 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	2200      	movs	r2, #0
 800437e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	691b      	ldr	r3, [r3, #16]
 8004386:	f003 0308 	and.w	r3, r3, #8
 800438a:	2b08      	cmp	r3, #8
 800438c:	d122      	bne.n	80043d4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	68db      	ldr	r3, [r3, #12]
 8004394:	f003 0308 	and.w	r3, r3, #8
 8004398:	2b08      	cmp	r3, #8
 800439a:	d11b      	bne.n	80043d4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f06f 0208 	mvn.w	r2, #8
 80043a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2204      	movs	r2, #4
 80043aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	69db      	ldr	r3, [r3, #28]
 80043b2:	f003 0303 	and.w	r3, r3, #3
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d003      	beq.n	80043c2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043ba:	6878      	ldr	r0, [r7, #4]
 80043bc:	f000 f899 	bl	80044f2 <HAL_TIM_IC_CaptureCallback>
 80043c0:	e005      	b.n	80043ce <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043c2:	6878      	ldr	r0, [r7, #4]
 80043c4:	f000 f88c 	bl	80044e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043c8:	6878      	ldr	r0, [r7, #4]
 80043ca:	f000 f89b 	bl	8004504 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	2200      	movs	r2, #0
 80043d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	691b      	ldr	r3, [r3, #16]
 80043da:	f003 0310 	and.w	r3, r3, #16
 80043de:	2b10      	cmp	r3, #16
 80043e0:	d122      	bne.n	8004428 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	68db      	ldr	r3, [r3, #12]
 80043e8:	f003 0310 	and.w	r3, r3, #16
 80043ec:	2b10      	cmp	r3, #16
 80043ee:	d11b      	bne.n	8004428 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f06f 0210 	mvn.w	r2, #16
 80043f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	2208      	movs	r2, #8
 80043fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	69db      	ldr	r3, [r3, #28]
 8004406:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800440a:	2b00      	cmp	r3, #0
 800440c:	d003      	beq.n	8004416 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800440e:	6878      	ldr	r0, [r7, #4]
 8004410:	f000 f86f 	bl	80044f2 <HAL_TIM_IC_CaptureCallback>
 8004414:	e005      	b.n	8004422 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004416:	6878      	ldr	r0, [r7, #4]
 8004418:	f000 f862 	bl	80044e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800441c:	6878      	ldr	r0, [r7, #4]
 800441e:	f000 f871 	bl	8004504 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	2200      	movs	r2, #0
 8004426:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	691b      	ldr	r3, [r3, #16]
 800442e:	f003 0301 	and.w	r3, r3, #1
 8004432:	2b01      	cmp	r3, #1
 8004434:	d10e      	bne.n	8004454 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	68db      	ldr	r3, [r3, #12]
 800443c:	f003 0301 	and.w	r3, r3, #1
 8004440:	2b01      	cmp	r3, #1
 8004442:	d107      	bne.n	8004454 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f06f 0201 	mvn.w	r2, #1
 800444c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800444e:	6878      	ldr	r0, [r7, #4]
 8004450:	f7fd f9c2 	bl	80017d8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	691b      	ldr	r3, [r3, #16]
 800445a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800445e:	2b80      	cmp	r3, #128	; 0x80
 8004460:	d10e      	bne.n	8004480 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	68db      	ldr	r3, [r3, #12]
 8004468:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800446c:	2b80      	cmp	r3, #128	; 0x80
 800446e:	d107      	bne.n	8004480 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004478:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800447a:	6878      	ldr	r0, [r7, #4]
 800447c:	f000 f92f 	bl	80046de <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	691b      	ldr	r3, [r3, #16]
 8004486:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800448a:	2b40      	cmp	r3, #64	; 0x40
 800448c:	d10e      	bne.n	80044ac <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	68db      	ldr	r3, [r3, #12]
 8004494:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004498:	2b40      	cmp	r3, #64	; 0x40
 800449a:	d107      	bne.n	80044ac <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80044a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80044a6:	6878      	ldr	r0, [r7, #4]
 80044a8:	f000 f835 	bl	8004516 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	691b      	ldr	r3, [r3, #16]
 80044b2:	f003 0320 	and.w	r3, r3, #32
 80044b6:	2b20      	cmp	r3, #32
 80044b8:	d10e      	bne.n	80044d8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	68db      	ldr	r3, [r3, #12]
 80044c0:	f003 0320 	and.w	r3, r3, #32
 80044c4:	2b20      	cmp	r3, #32
 80044c6:	d107      	bne.n	80044d8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f06f 0220 	mvn.w	r2, #32
 80044d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80044d2:	6878      	ldr	r0, [r7, #4]
 80044d4:	f000 f8fa 	bl	80046cc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80044d8:	bf00      	nop
 80044da:	3708      	adds	r7, #8
 80044dc:	46bd      	mov	sp, r7
 80044de:	bd80      	pop	{r7, pc}

080044e0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80044e0:	b480      	push	{r7}
 80044e2:	b083      	sub	sp, #12
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80044e8:	bf00      	nop
 80044ea:	370c      	adds	r7, #12
 80044ec:	46bd      	mov	sp, r7
 80044ee:	bc80      	pop	{r7}
 80044f0:	4770      	bx	lr

080044f2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80044f2:	b480      	push	{r7}
 80044f4:	b083      	sub	sp, #12
 80044f6:	af00      	add	r7, sp, #0
 80044f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80044fa:	bf00      	nop
 80044fc:	370c      	adds	r7, #12
 80044fe:	46bd      	mov	sp, r7
 8004500:	bc80      	pop	{r7}
 8004502:	4770      	bx	lr

08004504 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004504:	b480      	push	{r7}
 8004506:	b083      	sub	sp, #12
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800450c:	bf00      	nop
 800450e:	370c      	adds	r7, #12
 8004510:	46bd      	mov	sp, r7
 8004512:	bc80      	pop	{r7}
 8004514:	4770      	bx	lr

08004516 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004516:	b480      	push	{r7}
 8004518:	b083      	sub	sp, #12
 800451a:	af00      	add	r7, sp, #0
 800451c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800451e:	bf00      	nop
 8004520:	370c      	adds	r7, #12
 8004522:	46bd      	mov	sp, r7
 8004524:	bc80      	pop	{r7}
 8004526:	4770      	bx	lr

08004528 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004528:	b480      	push	{r7}
 800452a:	b085      	sub	sp, #20
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
 8004530:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	4a2d      	ldr	r2, [pc, #180]	; (80045f0 <TIM_Base_SetConfig+0xc8>)
 800453c:	4293      	cmp	r3, r2
 800453e:	d00f      	beq.n	8004560 <TIM_Base_SetConfig+0x38>
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004546:	d00b      	beq.n	8004560 <TIM_Base_SetConfig+0x38>
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	4a2a      	ldr	r2, [pc, #168]	; (80045f4 <TIM_Base_SetConfig+0xcc>)
 800454c:	4293      	cmp	r3, r2
 800454e:	d007      	beq.n	8004560 <TIM_Base_SetConfig+0x38>
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	4a29      	ldr	r2, [pc, #164]	; (80045f8 <TIM_Base_SetConfig+0xd0>)
 8004554:	4293      	cmp	r3, r2
 8004556:	d003      	beq.n	8004560 <TIM_Base_SetConfig+0x38>
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	4a28      	ldr	r2, [pc, #160]	; (80045fc <TIM_Base_SetConfig+0xd4>)
 800455c:	4293      	cmp	r3, r2
 800455e:	d108      	bne.n	8004572 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004566:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	685b      	ldr	r3, [r3, #4]
 800456c:	68fa      	ldr	r2, [r7, #12]
 800456e:	4313      	orrs	r3, r2
 8004570:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	4a1e      	ldr	r2, [pc, #120]	; (80045f0 <TIM_Base_SetConfig+0xc8>)
 8004576:	4293      	cmp	r3, r2
 8004578:	d00f      	beq.n	800459a <TIM_Base_SetConfig+0x72>
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004580:	d00b      	beq.n	800459a <TIM_Base_SetConfig+0x72>
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	4a1b      	ldr	r2, [pc, #108]	; (80045f4 <TIM_Base_SetConfig+0xcc>)
 8004586:	4293      	cmp	r3, r2
 8004588:	d007      	beq.n	800459a <TIM_Base_SetConfig+0x72>
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	4a1a      	ldr	r2, [pc, #104]	; (80045f8 <TIM_Base_SetConfig+0xd0>)
 800458e:	4293      	cmp	r3, r2
 8004590:	d003      	beq.n	800459a <TIM_Base_SetConfig+0x72>
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	4a19      	ldr	r2, [pc, #100]	; (80045fc <TIM_Base_SetConfig+0xd4>)
 8004596:	4293      	cmp	r3, r2
 8004598:	d108      	bne.n	80045ac <TIM_Base_SetConfig+0x84>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	68db      	ldr	r3, [r3, #12]
 80045a6:	68fa      	ldr	r2, [r7, #12]
 80045a8:	4313      	orrs	r3, r2
 80045aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	695b      	ldr	r3, [r3, #20]
 80045b6:	4313      	orrs	r3, r2
 80045b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	68fa      	ldr	r2, [r7, #12]
 80045be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	689a      	ldr	r2, [r3, #8]
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	681a      	ldr	r2, [r3, #0]
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	4a07      	ldr	r2, [pc, #28]	; (80045f0 <TIM_Base_SetConfig+0xc8>)
 80045d4:	4293      	cmp	r3, r2
 80045d6:	d103      	bne.n	80045e0 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	691a      	ldr	r2, [r3, #16]
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2201      	movs	r2, #1
 80045e4:	615a      	str	r2, [r3, #20]
}
 80045e6:	bf00      	nop
 80045e8:	3714      	adds	r7, #20
 80045ea:	46bd      	mov	sp, r7
 80045ec:	bc80      	pop	{r7}
 80045ee:	4770      	bx	lr
 80045f0:	40012c00 	.word	0x40012c00
 80045f4:	40000400 	.word	0x40000400
 80045f8:	40000800 	.word	0x40000800
 80045fc:	40000c00 	.word	0x40000c00

08004600 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004600:	b480      	push	{r7}
 8004602:	b085      	sub	sp, #20
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
 8004608:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004610:	2b01      	cmp	r3, #1
 8004612:	d101      	bne.n	8004618 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004614:	2302      	movs	r3, #2
 8004616:	e04b      	b.n	80046b0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2201      	movs	r2, #1
 800461c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2202      	movs	r2, #2
 8004624:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	685b      	ldr	r3, [r3, #4]
 800462e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	689b      	ldr	r3, [r3, #8]
 8004636:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800463e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	68fa      	ldr	r2, [r7, #12]
 8004646:	4313      	orrs	r3, r2
 8004648:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	68fa      	ldr	r2, [r7, #12]
 8004650:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	4a19      	ldr	r2, [pc, #100]	; (80046bc <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8004658:	4293      	cmp	r3, r2
 800465a:	d013      	beq.n	8004684 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004664:	d00e      	beq.n	8004684 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	4a15      	ldr	r2, [pc, #84]	; (80046c0 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 800466c:	4293      	cmp	r3, r2
 800466e:	d009      	beq.n	8004684 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	4a13      	ldr	r2, [pc, #76]	; (80046c4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004676:	4293      	cmp	r3, r2
 8004678:	d004      	beq.n	8004684 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	4a12      	ldr	r2, [pc, #72]	; (80046c8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004680:	4293      	cmp	r3, r2
 8004682:	d10c      	bne.n	800469e <HAL_TIMEx_MasterConfigSynchronization+0x9e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004684:	68bb      	ldr	r3, [r7, #8]
 8004686:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800468a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	685b      	ldr	r3, [r3, #4]
 8004690:	68ba      	ldr	r2, [r7, #8]
 8004692:	4313      	orrs	r3, r2
 8004694:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	68ba      	ldr	r2, [r7, #8]
 800469c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	2201      	movs	r2, #1
 80046a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2200      	movs	r2, #0
 80046aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80046ae:	2300      	movs	r3, #0
}
 80046b0:	4618      	mov	r0, r3
 80046b2:	3714      	adds	r7, #20
 80046b4:	46bd      	mov	sp, r7
 80046b6:	bc80      	pop	{r7}
 80046b8:	4770      	bx	lr
 80046ba:	bf00      	nop
 80046bc:	40012c00 	.word	0x40012c00
 80046c0:	40000400 	.word	0x40000400
 80046c4:	40000800 	.word	0x40000800
 80046c8:	40000c00 	.word	0x40000c00

080046cc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80046cc:	b480      	push	{r7}
 80046ce:	b083      	sub	sp, #12
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80046d4:	bf00      	nop
 80046d6:	370c      	adds	r7, #12
 80046d8:	46bd      	mov	sp, r7
 80046da:	bc80      	pop	{r7}
 80046dc:	4770      	bx	lr

080046de <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80046de:	b480      	push	{r7}
 80046e0:	b083      	sub	sp, #12
 80046e2:	af00      	add	r7, sp, #0
 80046e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80046e6:	bf00      	nop
 80046e8:	370c      	adds	r7, #12
 80046ea:	46bd      	mov	sp, r7
 80046ec:	bc80      	pop	{r7}
 80046ee:	4770      	bx	lr

080046f0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b082      	sub	sp, #8
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d101      	bne.n	8004702 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80046fe:	2301      	movs	r3, #1
 8004700:	e03f      	b.n	8004782 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004708:	b2db      	uxtb	r3, r3
 800470a:	2b00      	cmp	r3, #0
 800470c:	d106      	bne.n	800471c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2200      	movs	r2, #0
 8004712:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004716:	6878      	ldr	r0, [r7, #4]
 8004718:	f7fd fa84 	bl	8001c24 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2224      	movs	r2, #36	; 0x24
 8004720:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	68da      	ldr	r2, [r3, #12]
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004732:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004734:	6878      	ldr	r0, [r7, #4]
 8004736:	f000 fc85 	bl	8005044 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	691a      	ldr	r2, [r3, #16]
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004748:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	695a      	ldr	r2, [r3, #20]
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004758:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	68da      	ldr	r2, [r3, #12]
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004768:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	2200      	movs	r2, #0
 800476e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2220      	movs	r2, #32
 8004774:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2220      	movs	r2, #32
 800477c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004780:	2300      	movs	r3, #0
}
 8004782:	4618      	mov	r0, r3
 8004784:	3708      	adds	r7, #8
 8004786:	46bd      	mov	sp, r7
 8004788:	bd80      	pop	{r7, pc}

0800478a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800478a:	b580      	push	{r7, lr}
 800478c:	b08a      	sub	sp, #40	; 0x28
 800478e:	af02      	add	r7, sp, #8
 8004790:	60f8      	str	r0, [r7, #12]
 8004792:	60b9      	str	r1, [r7, #8]
 8004794:	603b      	str	r3, [r7, #0]
 8004796:	4613      	mov	r3, r2
 8004798:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800479a:	2300      	movs	r3, #0
 800479c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047a4:	b2db      	uxtb	r3, r3
 80047a6:	2b20      	cmp	r3, #32
 80047a8:	d17c      	bne.n	80048a4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80047aa:	68bb      	ldr	r3, [r7, #8]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d002      	beq.n	80047b6 <HAL_UART_Transmit+0x2c>
 80047b0:	88fb      	ldrh	r3, [r7, #6]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d101      	bne.n	80047ba <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80047b6:	2301      	movs	r3, #1
 80047b8:	e075      	b.n	80048a6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047c0:	2b01      	cmp	r3, #1
 80047c2:	d101      	bne.n	80047c8 <HAL_UART_Transmit+0x3e>
 80047c4:	2302      	movs	r3, #2
 80047c6:	e06e      	b.n	80048a6 <HAL_UART_Transmit+0x11c>
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	2201      	movs	r2, #1
 80047cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	2200      	movs	r2, #0
 80047d4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	2221      	movs	r2, #33	; 0x21
 80047da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80047de:	f7fd fd97 	bl	8002310 <HAL_GetTick>
 80047e2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	88fa      	ldrh	r2, [r7, #6]
 80047e8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	88fa      	ldrh	r2, [r7, #6]
 80047ee:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	689b      	ldr	r3, [r3, #8]
 80047f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047f8:	d108      	bne.n	800480c <HAL_UART_Transmit+0x82>
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	691b      	ldr	r3, [r3, #16]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d104      	bne.n	800480c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004802:	2300      	movs	r3, #0
 8004804:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004806:	68bb      	ldr	r3, [r7, #8]
 8004808:	61bb      	str	r3, [r7, #24]
 800480a:	e003      	b.n	8004814 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800480c:	68bb      	ldr	r3, [r7, #8]
 800480e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004810:	2300      	movs	r3, #0
 8004812:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	2200      	movs	r2, #0
 8004818:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800481c:	e02a      	b.n	8004874 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	9300      	str	r3, [sp, #0]
 8004822:	697b      	ldr	r3, [r7, #20]
 8004824:	2200      	movs	r2, #0
 8004826:	2180      	movs	r1, #128	; 0x80
 8004828:	68f8      	ldr	r0, [r7, #12]
 800482a:	f000 fa38 	bl	8004c9e <UART_WaitOnFlagUntilTimeout>
 800482e:	4603      	mov	r3, r0
 8004830:	2b00      	cmp	r3, #0
 8004832:	d001      	beq.n	8004838 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004834:	2303      	movs	r3, #3
 8004836:	e036      	b.n	80048a6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004838:	69fb      	ldr	r3, [r7, #28]
 800483a:	2b00      	cmp	r3, #0
 800483c:	d10b      	bne.n	8004856 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800483e:	69bb      	ldr	r3, [r7, #24]
 8004840:	881b      	ldrh	r3, [r3, #0]
 8004842:	461a      	mov	r2, r3
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800484c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800484e:	69bb      	ldr	r3, [r7, #24]
 8004850:	3302      	adds	r3, #2
 8004852:	61bb      	str	r3, [r7, #24]
 8004854:	e007      	b.n	8004866 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004856:	69fb      	ldr	r3, [r7, #28]
 8004858:	781a      	ldrb	r2, [r3, #0]
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004860:	69fb      	ldr	r3, [r7, #28]
 8004862:	3301      	adds	r3, #1
 8004864:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800486a:	b29b      	uxth	r3, r3
 800486c:	3b01      	subs	r3, #1
 800486e:	b29a      	uxth	r2, r3
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004878:	b29b      	uxth	r3, r3
 800487a:	2b00      	cmp	r3, #0
 800487c:	d1cf      	bne.n	800481e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	9300      	str	r3, [sp, #0]
 8004882:	697b      	ldr	r3, [r7, #20]
 8004884:	2200      	movs	r2, #0
 8004886:	2140      	movs	r1, #64	; 0x40
 8004888:	68f8      	ldr	r0, [r7, #12]
 800488a:	f000 fa08 	bl	8004c9e <UART_WaitOnFlagUntilTimeout>
 800488e:	4603      	mov	r3, r0
 8004890:	2b00      	cmp	r3, #0
 8004892:	d001      	beq.n	8004898 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004894:	2303      	movs	r3, #3
 8004896:	e006      	b.n	80048a6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	2220      	movs	r2, #32
 800489c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80048a0:	2300      	movs	r3, #0
 80048a2:	e000      	b.n	80048a6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80048a4:	2302      	movs	r3, #2
  }
}
 80048a6:	4618      	mov	r0, r3
 80048a8:	3720      	adds	r7, #32
 80048aa:	46bd      	mov	sp, r7
 80048ac:	bd80      	pop	{r7, pc}

080048ae <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80048ae:	b580      	push	{r7, lr}
 80048b0:	b084      	sub	sp, #16
 80048b2:	af00      	add	r7, sp, #0
 80048b4:	60f8      	str	r0, [r7, #12]
 80048b6:	60b9      	str	r1, [r7, #8]
 80048b8:	4613      	mov	r3, r2
 80048ba:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80048c2:	b2db      	uxtb	r3, r3
 80048c4:	2b20      	cmp	r3, #32
 80048c6:	d11d      	bne.n	8004904 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80048c8:	68bb      	ldr	r3, [r7, #8]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d002      	beq.n	80048d4 <HAL_UART_Receive_IT+0x26>
 80048ce:	88fb      	ldrh	r3, [r7, #6]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d101      	bne.n	80048d8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80048d4:	2301      	movs	r3, #1
 80048d6:	e016      	b.n	8004906 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80048de:	2b01      	cmp	r3, #1
 80048e0:	d101      	bne.n	80048e6 <HAL_UART_Receive_IT+0x38>
 80048e2:	2302      	movs	r3, #2
 80048e4:	e00f      	b.n	8004906 <HAL_UART_Receive_IT+0x58>
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	2201      	movs	r2, #1
 80048ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	2200      	movs	r2, #0
 80048f2:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 80048f4:	88fb      	ldrh	r3, [r7, #6]
 80048f6:	461a      	mov	r2, r3
 80048f8:	68b9      	ldr	r1, [r7, #8]
 80048fa:	68f8      	ldr	r0, [r7, #12]
 80048fc:	f000 fa19 	bl	8004d32 <UART_Start_Receive_IT>
 8004900:	4603      	mov	r3, r0
 8004902:	e000      	b.n	8004906 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8004904:	2302      	movs	r3, #2
  }
}
 8004906:	4618      	mov	r0, r3
 8004908:	3710      	adds	r7, #16
 800490a:	46bd      	mov	sp, r7
 800490c:	bd80      	pop	{r7, pc}
	...

08004910 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004910:	b580      	push	{r7, lr}
 8004912:	b08a      	sub	sp, #40	; 0x28
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	68db      	ldr	r3, [r3, #12]
 8004926:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	695b      	ldr	r3, [r3, #20]
 800492e:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8004930:	2300      	movs	r3, #0
 8004932:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8004934:	2300      	movs	r3, #0
 8004936:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800493a:	f003 030f 	and.w	r3, r3, #15
 800493e:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8004940:	69bb      	ldr	r3, [r7, #24]
 8004942:	2b00      	cmp	r3, #0
 8004944:	d10d      	bne.n	8004962 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004948:	f003 0320 	and.w	r3, r3, #32
 800494c:	2b00      	cmp	r3, #0
 800494e:	d008      	beq.n	8004962 <HAL_UART_IRQHandler+0x52>
 8004950:	6a3b      	ldr	r3, [r7, #32]
 8004952:	f003 0320 	and.w	r3, r3, #32
 8004956:	2b00      	cmp	r3, #0
 8004958:	d003      	beq.n	8004962 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800495a:	6878      	ldr	r0, [r7, #4]
 800495c:	f000 fac9 	bl	8004ef2 <UART_Receive_IT>
      return;
 8004960:	e17b      	b.n	8004c5a <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004962:	69bb      	ldr	r3, [r7, #24]
 8004964:	2b00      	cmp	r3, #0
 8004966:	f000 80b1 	beq.w	8004acc <HAL_UART_IRQHandler+0x1bc>
 800496a:	69fb      	ldr	r3, [r7, #28]
 800496c:	f003 0301 	and.w	r3, r3, #1
 8004970:	2b00      	cmp	r3, #0
 8004972:	d105      	bne.n	8004980 <HAL_UART_IRQHandler+0x70>
 8004974:	6a3b      	ldr	r3, [r7, #32]
 8004976:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800497a:	2b00      	cmp	r3, #0
 800497c:	f000 80a6 	beq.w	8004acc <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004982:	f003 0301 	and.w	r3, r3, #1
 8004986:	2b00      	cmp	r3, #0
 8004988:	d00a      	beq.n	80049a0 <HAL_UART_IRQHandler+0x90>
 800498a:	6a3b      	ldr	r3, [r7, #32]
 800498c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004990:	2b00      	cmp	r3, #0
 8004992:	d005      	beq.n	80049a0 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004998:	f043 0201 	orr.w	r2, r3, #1
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80049a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049a2:	f003 0304 	and.w	r3, r3, #4
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d00a      	beq.n	80049c0 <HAL_UART_IRQHandler+0xb0>
 80049aa:	69fb      	ldr	r3, [r7, #28]
 80049ac:	f003 0301 	and.w	r3, r3, #1
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d005      	beq.n	80049c0 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049b8:	f043 0202 	orr.w	r2, r3, #2
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80049c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049c2:	f003 0302 	and.w	r3, r3, #2
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d00a      	beq.n	80049e0 <HAL_UART_IRQHandler+0xd0>
 80049ca:	69fb      	ldr	r3, [r7, #28]
 80049cc:	f003 0301 	and.w	r3, r3, #1
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d005      	beq.n	80049e0 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049d8:	f043 0204 	orr.w	r2, r3, #4
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80049e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049e2:	f003 0308 	and.w	r3, r3, #8
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d00f      	beq.n	8004a0a <HAL_UART_IRQHandler+0xfa>
 80049ea:	6a3b      	ldr	r3, [r7, #32]
 80049ec:	f003 0320 	and.w	r3, r3, #32
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d104      	bne.n	80049fe <HAL_UART_IRQHandler+0xee>
 80049f4:	69fb      	ldr	r3, [r7, #28]
 80049f6:	f003 0301 	and.w	r3, r3, #1
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d005      	beq.n	8004a0a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a02:	f043 0208 	orr.w	r2, r3, #8
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	f000 811e 	beq.w	8004c50 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a16:	f003 0320 	and.w	r3, r3, #32
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d007      	beq.n	8004a2e <HAL_UART_IRQHandler+0x11e>
 8004a1e:	6a3b      	ldr	r3, [r7, #32]
 8004a20:	f003 0320 	and.w	r3, r3, #32
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d002      	beq.n	8004a2e <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8004a28:	6878      	ldr	r0, [r7, #4]
 8004a2a:	f000 fa62 	bl	8004ef2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	695b      	ldr	r3, [r3, #20]
 8004a34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	bf14      	ite	ne
 8004a3c:	2301      	movne	r3, #1
 8004a3e:	2300      	moveq	r3, #0
 8004a40:	b2db      	uxtb	r3, r3
 8004a42:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a48:	f003 0308 	and.w	r3, r3, #8
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d102      	bne.n	8004a56 <HAL_UART_IRQHandler+0x146>
 8004a50:	697b      	ldr	r3, [r7, #20]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d031      	beq.n	8004aba <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004a56:	6878      	ldr	r0, [r7, #4]
 8004a58:	f000 f9a4 	bl	8004da4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	695b      	ldr	r3, [r3, #20]
 8004a62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d023      	beq.n	8004ab2 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	695a      	ldr	r2, [r3, #20]
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a78:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d013      	beq.n	8004aaa <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a86:	4a76      	ldr	r2, [pc, #472]	; (8004c60 <HAL_UART_IRQHandler+0x350>)
 8004a88:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a8e:	4618      	mov	r0, r3
 8004a90:	f7fe f886 	bl	8002ba0 <HAL_DMA_Abort_IT>
 8004a94:	4603      	mov	r3, r0
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d016      	beq.n	8004ac8 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004aa0:	687a      	ldr	r2, [r7, #4]
 8004aa2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004aa4:	4610      	mov	r0, r2
 8004aa6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004aa8:	e00e      	b.n	8004ac8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004aaa:	6878      	ldr	r0, [r7, #4]
 8004aac:	f000 f8e3 	bl	8004c76 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ab0:	e00a      	b.n	8004ac8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004ab2:	6878      	ldr	r0, [r7, #4]
 8004ab4:	f000 f8df 	bl	8004c76 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ab8:	e006      	b.n	8004ac8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004aba:	6878      	ldr	r0, [r7, #4]
 8004abc:	f000 f8db 	bl	8004c76 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004ac6:	e0c3      	b.n	8004c50 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ac8:	bf00      	nop
    return;
 8004aca:	e0c1      	b.n	8004c50 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ad0:	2b01      	cmp	r3, #1
 8004ad2:	f040 80a1 	bne.w	8004c18 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8004ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ad8:	f003 0310 	and.w	r3, r3, #16
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	f000 809b 	beq.w	8004c18 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8004ae2:	6a3b      	ldr	r3, [r7, #32]
 8004ae4:	f003 0310 	and.w	r3, r3, #16
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	f000 8095 	beq.w	8004c18 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004aee:	2300      	movs	r3, #0
 8004af0:	60fb      	str	r3, [r7, #12]
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	60fb      	str	r3, [r7, #12]
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	685b      	ldr	r3, [r3, #4]
 8004b00:	60fb      	str	r3, [r7, #12]
 8004b02:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	695b      	ldr	r3, [r3, #20]
 8004b0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d04e      	beq.n	8004bb0 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	685b      	ldr	r3, [r3, #4]
 8004b1a:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8004b1c:	8a3b      	ldrh	r3, [r7, #16]
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	f000 8098 	beq.w	8004c54 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004b28:	8a3a      	ldrh	r2, [r7, #16]
 8004b2a:	429a      	cmp	r2, r3
 8004b2c:	f080 8092 	bcs.w	8004c54 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	8a3a      	ldrh	r2, [r7, #16]
 8004b34:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b3a:	699b      	ldr	r3, [r3, #24]
 8004b3c:	2b20      	cmp	r3, #32
 8004b3e:	d02b      	beq.n	8004b98 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	68da      	ldr	r2, [r3, #12]
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004b4e:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	695a      	ldr	r2, [r3, #20]
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f022 0201 	bic.w	r2, r2, #1
 8004b5e:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	695a      	ldr	r2, [r3, #20]
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b6e:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2220      	movs	r2, #32
 8004b74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	68da      	ldr	r2, [r3, #12]
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f022 0210 	bic.w	r2, r2, #16
 8004b8c:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b92:	4618      	mov	r0, r3
 8004b94:	f7fd ffca 	bl	8002b2c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004ba0:	b29b      	uxth	r3, r3
 8004ba2:	1ad3      	subs	r3, r2, r3
 8004ba4:	b29b      	uxth	r3, r3
 8004ba6:	4619      	mov	r1, r3
 8004ba8:	6878      	ldr	r0, [r7, #4]
 8004baa:	f000 f86d 	bl	8004c88 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004bae:	e051      	b.n	8004c54 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004bb8:	b29b      	uxth	r3, r3
 8004bba:	1ad3      	subs	r3, r2, r3
 8004bbc:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004bc2:	b29b      	uxth	r3, r3
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d047      	beq.n	8004c58 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8004bc8:	8a7b      	ldrh	r3, [r7, #18]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d044      	beq.n	8004c58 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	68da      	ldr	r2, [r3, #12]
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004bdc:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	695a      	ldr	r2, [r3, #20]
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f022 0201 	bic.w	r2, r2, #1
 8004bec:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	2220      	movs	r2, #32
 8004bf2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	68da      	ldr	r2, [r3, #12]
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f022 0210 	bic.w	r2, r2, #16
 8004c0a:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004c0c:	8a7b      	ldrh	r3, [r7, #18]
 8004c0e:	4619      	mov	r1, r3
 8004c10:	6878      	ldr	r0, [r7, #4]
 8004c12:	f000 f839 	bl	8004c88 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004c16:	e01f      	b.n	8004c58 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d008      	beq.n	8004c34 <HAL_UART_IRQHandler+0x324>
 8004c22:	6a3b      	ldr	r3, [r7, #32]
 8004c24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d003      	beq.n	8004c34 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8004c2c:	6878      	ldr	r0, [r7, #4]
 8004c2e:	f000 f8f9 	bl	8004e24 <UART_Transmit_IT>
    return;
 8004c32:	e012      	b.n	8004c5a <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d00d      	beq.n	8004c5a <HAL_UART_IRQHandler+0x34a>
 8004c3e:	6a3b      	ldr	r3, [r7, #32]
 8004c40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d008      	beq.n	8004c5a <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8004c48:	6878      	ldr	r0, [r7, #4]
 8004c4a:	f000 f93a 	bl	8004ec2 <UART_EndTransmit_IT>
    return;
 8004c4e:	e004      	b.n	8004c5a <HAL_UART_IRQHandler+0x34a>
    return;
 8004c50:	bf00      	nop
 8004c52:	e002      	b.n	8004c5a <HAL_UART_IRQHandler+0x34a>
      return;
 8004c54:	bf00      	nop
 8004c56:	e000      	b.n	8004c5a <HAL_UART_IRQHandler+0x34a>
      return;
 8004c58:	bf00      	nop
  }
}
 8004c5a:	3728      	adds	r7, #40	; 0x28
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	bd80      	pop	{r7, pc}
 8004c60:	08004dfd 	.word	0x08004dfd

08004c64 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004c64:	b480      	push	{r7}
 8004c66:	b083      	sub	sp, #12
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004c6c:	bf00      	nop
 8004c6e:	370c      	adds	r7, #12
 8004c70:	46bd      	mov	sp, r7
 8004c72:	bc80      	pop	{r7}
 8004c74:	4770      	bx	lr

08004c76 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004c76:	b480      	push	{r7}
 8004c78:	b083      	sub	sp, #12
 8004c7a:	af00      	add	r7, sp, #0
 8004c7c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004c7e:	bf00      	nop
 8004c80:	370c      	adds	r7, #12
 8004c82:	46bd      	mov	sp, r7
 8004c84:	bc80      	pop	{r7}
 8004c86:	4770      	bx	lr

08004c88 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004c88:	b480      	push	{r7}
 8004c8a:	b083      	sub	sp, #12
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
 8004c90:	460b      	mov	r3, r1
 8004c92:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004c94:	bf00      	nop
 8004c96:	370c      	adds	r7, #12
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	bc80      	pop	{r7}
 8004c9c:	4770      	bx	lr

08004c9e <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004c9e:	b580      	push	{r7, lr}
 8004ca0:	b084      	sub	sp, #16
 8004ca2:	af00      	add	r7, sp, #0
 8004ca4:	60f8      	str	r0, [r7, #12]
 8004ca6:	60b9      	str	r1, [r7, #8]
 8004ca8:	603b      	str	r3, [r7, #0]
 8004caa:	4613      	mov	r3, r2
 8004cac:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004cae:	e02c      	b.n	8004d0a <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004cb0:	69bb      	ldr	r3, [r7, #24]
 8004cb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cb6:	d028      	beq.n	8004d0a <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004cb8:	69bb      	ldr	r3, [r7, #24]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d007      	beq.n	8004cce <UART_WaitOnFlagUntilTimeout+0x30>
 8004cbe:	f7fd fb27 	bl	8002310 <HAL_GetTick>
 8004cc2:	4602      	mov	r2, r0
 8004cc4:	683b      	ldr	r3, [r7, #0]
 8004cc6:	1ad3      	subs	r3, r2, r3
 8004cc8:	69ba      	ldr	r2, [r7, #24]
 8004cca:	429a      	cmp	r2, r3
 8004ccc:	d21d      	bcs.n	8004d0a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	68da      	ldr	r2, [r3, #12]
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004cdc:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	695a      	ldr	r2, [r3, #20]
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f022 0201 	bic.w	r2, r2, #1
 8004cec:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	2220      	movs	r2, #32
 8004cf2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	2220      	movs	r2, #32
 8004cfa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	2200      	movs	r2, #0
 8004d02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004d06:	2303      	movs	r3, #3
 8004d08:	e00f      	b.n	8004d2a <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	681a      	ldr	r2, [r3, #0]
 8004d10:	68bb      	ldr	r3, [r7, #8]
 8004d12:	4013      	ands	r3, r2
 8004d14:	68ba      	ldr	r2, [r7, #8]
 8004d16:	429a      	cmp	r2, r3
 8004d18:	bf0c      	ite	eq
 8004d1a:	2301      	moveq	r3, #1
 8004d1c:	2300      	movne	r3, #0
 8004d1e:	b2db      	uxtb	r3, r3
 8004d20:	461a      	mov	r2, r3
 8004d22:	79fb      	ldrb	r3, [r7, #7]
 8004d24:	429a      	cmp	r2, r3
 8004d26:	d0c3      	beq.n	8004cb0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004d28:	2300      	movs	r3, #0
}
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	3710      	adds	r7, #16
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	bd80      	pop	{r7, pc}

08004d32 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004d32:	b480      	push	{r7}
 8004d34:	b085      	sub	sp, #20
 8004d36:	af00      	add	r7, sp, #0
 8004d38:	60f8      	str	r0, [r7, #12]
 8004d3a:	60b9      	str	r1, [r7, #8]
 8004d3c:	4613      	mov	r3, r2
 8004d3e:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	68ba      	ldr	r2, [r7, #8]
 8004d44:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	88fa      	ldrh	r2, [r7, #6]
 8004d4a:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	88fa      	ldrh	r2, [r7, #6]
 8004d50:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	2200      	movs	r2, #0
 8004d56:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	2222      	movs	r2, #34	; 0x22
 8004d5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	2200      	movs	r2, #0
 8004d64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	68da      	ldr	r2, [r3, #12]
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004d76:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	695a      	ldr	r2, [r3, #20]
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f042 0201 	orr.w	r2, r2, #1
 8004d86:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	68da      	ldr	r2, [r3, #12]
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f042 0220 	orr.w	r2, r2, #32
 8004d96:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004d98:	2300      	movs	r3, #0
}
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	3714      	adds	r7, #20
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	bc80      	pop	{r7}
 8004da2:	4770      	bx	lr

08004da4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004da4:	b480      	push	{r7}
 8004da6:	b083      	sub	sp, #12
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	68da      	ldr	r2, [r3, #12]
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004dba:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	695a      	ldr	r2, [r3, #20]
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f022 0201 	bic.w	r2, r2, #1
 8004dca:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dd0:	2b01      	cmp	r3, #1
 8004dd2:	d107      	bne.n	8004de4 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	68da      	ldr	r2, [r3, #12]
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f022 0210 	bic.w	r2, r2, #16
 8004de2:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2220      	movs	r2, #32
 8004de8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2200      	movs	r2, #0
 8004df0:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004df2:	bf00      	nop
 8004df4:	370c      	adds	r7, #12
 8004df6:	46bd      	mov	sp, r7
 8004df8:	bc80      	pop	{r7}
 8004dfa:	4770      	bx	lr

08004dfc <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	b084      	sub	sp, #16
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e08:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	2200      	movs	r2, #0
 8004e14:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004e16:	68f8      	ldr	r0, [r7, #12]
 8004e18:	f7ff ff2d 	bl	8004c76 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004e1c:	bf00      	nop
 8004e1e:	3710      	adds	r7, #16
 8004e20:	46bd      	mov	sp, r7
 8004e22:	bd80      	pop	{r7, pc}

08004e24 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004e24:	b480      	push	{r7}
 8004e26:	b085      	sub	sp, #20
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e32:	b2db      	uxtb	r3, r3
 8004e34:	2b21      	cmp	r3, #33	; 0x21
 8004e36:	d13e      	bne.n	8004eb6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	689b      	ldr	r3, [r3, #8]
 8004e3c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e40:	d114      	bne.n	8004e6c <UART_Transmit_IT+0x48>
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	691b      	ldr	r3, [r3, #16]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d110      	bne.n	8004e6c <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6a1b      	ldr	r3, [r3, #32]
 8004e4e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	881b      	ldrh	r3, [r3, #0]
 8004e54:	461a      	mov	r2, r3
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004e5e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	6a1b      	ldr	r3, [r3, #32]
 8004e64:	1c9a      	adds	r2, r3, #2
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	621a      	str	r2, [r3, #32]
 8004e6a:	e008      	b.n	8004e7e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	6a1b      	ldr	r3, [r3, #32]
 8004e70:	1c59      	adds	r1, r3, #1
 8004e72:	687a      	ldr	r2, [r7, #4]
 8004e74:	6211      	str	r1, [r2, #32]
 8004e76:	781a      	ldrb	r2, [r3, #0]
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004e82:	b29b      	uxth	r3, r3
 8004e84:	3b01      	subs	r3, #1
 8004e86:	b29b      	uxth	r3, r3
 8004e88:	687a      	ldr	r2, [r7, #4]
 8004e8a:	4619      	mov	r1, r3
 8004e8c:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d10f      	bne.n	8004eb2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	68da      	ldr	r2, [r3, #12]
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004ea0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	68da      	ldr	r2, [r3, #12]
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004eb0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	e000      	b.n	8004eb8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004eb6:	2302      	movs	r3, #2
  }
}
 8004eb8:	4618      	mov	r0, r3
 8004eba:	3714      	adds	r7, #20
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	bc80      	pop	{r7}
 8004ec0:	4770      	bx	lr

08004ec2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004ec2:	b580      	push	{r7, lr}
 8004ec4:	b082      	sub	sp, #8
 8004ec6:	af00      	add	r7, sp, #0
 8004ec8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	68da      	ldr	r2, [r3, #12]
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ed8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	2220      	movs	r2, #32
 8004ede:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004ee2:	6878      	ldr	r0, [r7, #4]
 8004ee4:	f7ff febe 	bl	8004c64 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004ee8:	2300      	movs	r3, #0
}
 8004eea:	4618      	mov	r0, r3
 8004eec:	3708      	adds	r7, #8
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	bd80      	pop	{r7, pc}

08004ef2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004ef2:	b580      	push	{r7, lr}
 8004ef4:	b086      	sub	sp, #24
 8004ef6:	af00      	add	r7, sp, #0
 8004ef8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004f00:	b2db      	uxtb	r3, r3
 8004f02:	2b22      	cmp	r3, #34	; 0x22
 8004f04:	f040 8099 	bne.w	800503a <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	689b      	ldr	r3, [r3, #8]
 8004f0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f10:	d117      	bne.n	8004f42 <UART_Receive_IT+0x50>
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	691b      	ldr	r3, [r3, #16]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d113      	bne.n	8004f42 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004f1a:	2300      	movs	r3, #0
 8004f1c:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f22:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	685b      	ldr	r3, [r3, #4]
 8004f2a:	b29b      	uxth	r3, r3
 8004f2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f30:	b29a      	uxth	r2, r3
 8004f32:	693b      	ldr	r3, [r7, #16]
 8004f34:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f3a:	1c9a      	adds	r2, r3, #2
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	629a      	str	r2, [r3, #40]	; 0x28
 8004f40:	e026      	b.n	8004f90 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f46:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8004f48:	2300      	movs	r3, #0
 8004f4a:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	689b      	ldr	r3, [r3, #8]
 8004f50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f54:	d007      	beq.n	8004f66 <UART_Receive_IT+0x74>
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	689b      	ldr	r3, [r3, #8]
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d10a      	bne.n	8004f74 <UART_Receive_IT+0x82>
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	691b      	ldr	r3, [r3, #16]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d106      	bne.n	8004f74 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	685b      	ldr	r3, [r3, #4]
 8004f6c:	b2da      	uxtb	r2, r3
 8004f6e:	697b      	ldr	r3, [r7, #20]
 8004f70:	701a      	strb	r2, [r3, #0]
 8004f72:	e008      	b.n	8004f86 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	685b      	ldr	r3, [r3, #4]
 8004f7a:	b2db      	uxtb	r3, r3
 8004f7c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004f80:	b2da      	uxtb	r2, r3
 8004f82:	697b      	ldr	r3, [r7, #20]
 8004f84:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f8a:	1c5a      	adds	r2, r3, #1
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004f94:	b29b      	uxth	r3, r3
 8004f96:	3b01      	subs	r3, #1
 8004f98:	b29b      	uxth	r3, r3
 8004f9a:	687a      	ldr	r2, [r7, #4]
 8004f9c:	4619      	mov	r1, r3
 8004f9e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d148      	bne.n	8005036 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	68da      	ldr	r2, [r3, #12]
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f022 0220 	bic.w	r2, r2, #32
 8004fb2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	68da      	ldr	r2, [r3, #12]
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004fc2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	695a      	ldr	r2, [r3, #20]
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f022 0201 	bic.w	r2, r2, #1
 8004fd2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2220      	movs	r2, #32
 8004fd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fe0:	2b01      	cmp	r3, #1
 8004fe2:	d123      	bne.n	800502c <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	68da      	ldr	r2, [r3, #12]
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f022 0210 	bic.w	r2, r2, #16
 8004ff8:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f003 0310 	and.w	r3, r3, #16
 8005004:	2b10      	cmp	r3, #16
 8005006:	d10a      	bne.n	800501e <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005008:	2300      	movs	r3, #0
 800500a:	60fb      	str	r3, [r7, #12]
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	60fb      	str	r3, [r7, #12]
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	685b      	ldr	r3, [r3, #4]
 800501a:	60fb      	str	r3, [r7, #12]
 800501c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005022:	4619      	mov	r1, r3
 8005024:	6878      	ldr	r0, [r7, #4]
 8005026:	f7ff fe2f 	bl	8004c88 <HAL_UARTEx_RxEventCallback>
 800502a:	e002      	b.n	8005032 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 800502c:	6878      	ldr	r0, [r7, #4]
 800502e:	f7fc fc17 	bl	8001860 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005032:	2300      	movs	r3, #0
 8005034:	e002      	b.n	800503c <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8005036:	2300      	movs	r3, #0
 8005038:	e000      	b.n	800503c <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 800503a:	2302      	movs	r3, #2
  }
}
 800503c:	4618      	mov	r0, r3
 800503e:	3718      	adds	r7, #24
 8005040:	46bd      	mov	sp, r7
 8005042:	bd80      	pop	{r7, pc}

08005044 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005044:	b580      	push	{r7, lr}
 8005046:	b084      	sub	sp, #16
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	691b      	ldr	r3, [r3, #16]
 8005052:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	68da      	ldr	r2, [r3, #12]
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	430a      	orrs	r2, r1
 8005060:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	689a      	ldr	r2, [r3, #8]
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	691b      	ldr	r3, [r3, #16]
 800506a:	431a      	orrs	r2, r3
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	695b      	ldr	r3, [r3, #20]
 8005070:	4313      	orrs	r3, r2
 8005072:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	68db      	ldr	r3, [r3, #12]
 800507a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800507e:	f023 030c 	bic.w	r3, r3, #12
 8005082:	687a      	ldr	r2, [r7, #4]
 8005084:	6812      	ldr	r2, [r2, #0]
 8005086:	68b9      	ldr	r1, [r7, #8]
 8005088:	430b      	orrs	r3, r1
 800508a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	695b      	ldr	r3, [r3, #20]
 8005092:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	699a      	ldr	r2, [r3, #24]
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	430a      	orrs	r2, r1
 80050a0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	4a2c      	ldr	r2, [pc, #176]	; (8005158 <UART_SetConfig+0x114>)
 80050a8:	4293      	cmp	r3, r2
 80050aa:	d103      	bne.n	80050b4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80050ac:	f7fe fe7e 	bl	8003dac <HAL_RCC_GetPCLK2Freq>
 80050b0:	60f8      	str	r0, [r7, #12]
 80050b2:	e002      	b.n	80050ba <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80050b4:	f7fe fe66 	bl	8003d84 <HAL_RCC_GetPCLK1Freq>
 80050b8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80050ba:	68fa      	ldr	r2, [r7, #12]
 80050bc:	4613      	mov	r3, r2
 80050be:	009b      	lsls	r3, r3, #2
 80050c0:	4413      	add	r3, r2
 80050c2:	009a      	lsls	r2, r3, #2
 80050c4:	441a      	add	r2, r3
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	685b      	ldr	r3, [r3, #4]
 80050ca:	009b      	lsls	r3, r3, #2
 80050cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80050d0:	4a22      	ldr	r2, [pc, #136]	; (800515c <UART_SetConfig+0x118>)
 80050d2:	fba2 2303 	umull	r2, r3, r2, r3
 80050d6:	095b      	lsrs	r3, r3, #5
 80050d8:	0119      	lsls	r1, r3, #4
 80050da:	68fa      	ldr	r2, [r7, #12]
 80050dc:	4613      	mov	r3, r2
 80050de:	009b      	lsls	r3, r3, #2
 80050e0:	4413      	add	r3, r2
 80050e2:	009a      	lsls	r2, r3, #2
 80050e4:	441a      	add	r2, r3
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	685b      	ldr	r3, [r3, #4]
 80050ea:	009b      	lsls	r3, r3, #2
 80050ec:	fbb2 f2f3 	udiv	r2, r2, r3
 80050f0:	4b1a      	ldr	r3, [pc, #104]	; (800515c <UART_SetConfig+0x118>)
 80050f2:	fba3 0302 	umull	r0, r3, r3, r2
 80050f6:	095b      	lsrs	r3, r3, #5
 80050f8:	2064      	movs	r0, #100	; 0x64
 80050fa:	fb00 f303 	mul.w	r3, r0, r3
 80050fe:	1ad3      	subs	r3, r2, r3
 8005100:	011b      	lsls	r3, r3, #4
 8005102:	3332      	adds	r3, #50	; 0x32
 8005104:	4a15      	ldr	r2, [pc, #84]	; (800515c <UART_SetConfig+0x118>)
 8005106:	fba2 2303 	umull	r2, r3, r2, r3
 800510a:	095b      	lsrs	r3, r3, #5
 800510c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005110:	4419      	add	r1, r3
 8005112:	68fa      	ldr	r2, [r7, #12]
 8005114:	4613      	mov	r3, r2
 8005116:	009b      	lsls	r3, r3, #2
 8005118:	4413      	add	r3, r2
 800511a:	009a      	lsls	r2, r3, #2
 800511c:	441a      	add	r2, r3
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	685b      	ldr	r3, [r3, #4]
 8005122:	009b      	lsls	r3, r3, #2
 8005124:	fbb2 f2f3 	udiv	r2, r2, r3
 8005128:	4b0c      	ldr	r3, [pc, #48]	; (800515c <UART_SetConfig+0x118>)
 800512a:	fba3 0302 	umull	r0, r3, r3, r2
 800512e:	095b      	lsrs	r3, r3, #5
 8005130:	2064      	movs	r0, #100	; 0x64
 8005132:	fb00 f303 	mul.w	r3, r0, r3
 8005136:	1ad3      	subs	r3, r2, r3
 8005138:	011b      	lsls	r3, r3, #4
 800513a:	3332      	adds	r3, #50	; 0x32
 800513c:	4a07      	ldr	r2, [pc, #28]	; (800515c <UART_SetConfig+0x118>)
 800513e:	fba2 2303 	umull	r2, r3, r2, r3
 8005142:	095b      	lsrs	r3, r3, #5
 8005144:	f003 020f 	and.w	r2, r3, #15
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	440a      	add	r2, r1
 800514e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005150:	bf00      	nop
 8005152:	3710      	adds	r7, #16
 8005154:	46bd      	mov	sp, r7
 8005156:	bd80      	pop	{r7, pc}
 8005158:	40013800 	.word	0x40013800
 800515c:	51eb851f 	.word	0x51eb851f

08005160 <__errno>:
 8005160:	4b01      	ldr	r3, [pc, #4]	; (8005168 <__errno+0x8>)
 8005162:	6818      	ldr	r0, [r3, #0]
 8005164:	4770      	bx	lr
 8005166:	bf00      	nop
 8005168:	2000000c 	.word	0x2000000c

0800516c <__libc_init_array>:
 800516c:	b570      	push	{r4, r5, r6, lr}
 800516e:	2600      	movs	r6, #0
 8005170:	4d0c      	ldr	r5, [pc, #48]	; (80051a4 <__libc_init_array+0x38>)
 8005172:	4c0d      	ldr	r4, [pc, #52]	; (80051a8 <__libc_init_array+0x3c>)
 8005174:	1b64      	subs	r4, r4, r5
 8005176:	10a4      	asrs	r4, r4, #2
 8005178:	42a6      	cmp	r6, r4
 800517a:	d109      	bne.n	8005190 <__libc_init_array+0x24>
 800517c:	f005 f862 	bl	800a244 <_init>
 8005180:	2600      	movs	r6, #0
 8005182:	4d0a      	ldr	r5, [pc, #40]	; (80051ac <__libc_init_array+0x40>)
 8005184:	4c0a      	ldr	r4, [pc, #40]	; (80051b0 <__libc_init_array+0x44>)
 8005186:	1b64      	subs	r4, r4, r5
 8005188:	10a4      	asrs	r4, r4, #2
 800518a:	42a6      	cmp	r6, r4
 800518c:	d105      	bne.n	800519a <__libc_init_array+0x2e>
 800518e:	bd70      	pop	{r4, r5, r6, pc}
 8005190:	f855 3b04 	ldr.w	r3, [r5], #4
 8005194:	4798      	blx	r3
 8005196:	3601      	adds	r6, #1
 8005198:	e7ee      	b.n	8005178 <__libc_init_array+0xc>
 800519a:	f855 3b04 	ldr.w	r3, [r5], #4
 800519e:	4798      	blx	r3
 80051a0:	3601      	adds	r6, #1
 80051a2:	e7f2      	b.n	800518a <__libc_init_array+0x1e>
 80051a4:	0800a8e4 	.word	0x0800a8e4
 80051a8:	0800a8e4 	.word	0x0800a8e4
 80051ac:	0800a8e4 	.word	0x0800a8e4
 80051b0:	0800a8e8 	.word	0x0800a8e8

080051b4 <memset>:
 80051b4:	4603      	mov	r3, r0
 80051b6:	4402      	add	r2, r0
 80051b8:	4293      	cmp	r3, r2
 80051ba:	d100      	bne.n	80051be <memset+0xa>
 80051bc:	4770      	bx	lr
 80051be:	f803 1b01 	strb.w	r1, [r3], #1
 80051c2:	e7f9      	b.n	80051b8 <memset+0x4>

080051c4 <__cvt>:
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80051ca:	461f      	mov	r7, r3
 80051cc:	bfbb      	ittet	lt
 80051ce:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80051d2:	461f      	movlt	r7, r3
 80051d4:	2300      	movge	r3, #0
 80051d6:	232d      	movlt	r3, #45	; 0x2d
 80051d8:	b088      	sub	sp, #32
 80051da:	4614      	mov	r4, r2
 80051dc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80051de:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80051e0:	7013      	strb	r3, [r2, #0]
 80051e2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80051e4:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 80051e8:	f023 0820 	bic.w	r8, r3, #32
 80051ec:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80051f0:	d005      	beq.n	80051fe <__cvt+0x3a>
 80051f2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80051f6:	d100      	bne.n	80051fa <__cvt+0x36>
 80051f8:	3501      	adds	r5, #1
 80051fa:	2302      	movs	r3, #2
 80051fc:	e000      	b.n	8005200 <__cvt+0x3c>
 80051fe:	2303      	movs	r3, #3
 8005200:	aa07      	add	r2, sp, #28
 8005202:	9204      	str	r2, [sp, #16]
 8005204:	aa06      	add	r2, sp, #24
 8005206:	e9cd a202 	strd	sl, r2, [sp, #8]
 800520a:	e9cd 3500 	strd	r3, r5, [sp]
 800520e:	4622      	mov	r2, r4
 8005210:	463b      	mov	r3, r7
 8005212:	f001 fe31 	bl	8006e78 <_dtoa_r>
 8005216:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800521a:	4606      	mov	r6, r0
 800521c:	d102      	bne.n	8005224 <__cvt+0x60>
 800521e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005220:	07db      	lsls	r3, r3, #31
 8005222:	d522      	bpl.n	800526a <__cvt+0xa6>
 8005224:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005228:	eb06 0905 	add.w	r9, r6, r5
 800522c:	d110      	bne.n	8005250 <__cvt+0x8c>
 800522e:	7833      	ldrb	r3, [r6, #0]
 8005230:	2b30      	cmp	r3, #48	; 0x30
 8005232:	d10a      	bne.n	800524a <__cvt+0x86>
 8005234:	2200      	movs	r2, #0
 8005236:	2300      	movs	r3, #0
 8005238:	4620      	mov	r0, r4
 800523a:	4639      	mov	r1, r7
 800523c:	f7fb fc20 	bl	8000a80 <__aeabi_dcmpeq>
 8005240:	b918      	cbnz	r0, 800524a <__cvt+0x86>
 8005242:	f1c5 0501 	rsb	r5, r5, #1
 8005246:	f8ca 5000 	str.w	r5, [sl]
 800524a:	f8da 3000 	ldr.w	r3, [sl]
 800524e:	4499      	add	r9, r3
 8005250:	2200      	movs	r2, #0
 8005252:	2300      	movs	r3, #0
 8005254:	4620      	mov	r0, r4
 8005256:	4639      	mov	r1, r7
 8005258:	f7fb fc12 	bl	8000a80 <__aeabi_dcmpeq>
 800525c:	b108      	cbz	r0, 8005262 <__cvt+0x9e>
 800525e:	f8cd 901c 	str.w	r9, [sp, #28]
 8005262:	2230      	movs	r2, #48	; 0x30
 8005264:	9b07      	ldr	r3, [sp, #28]
 8005266:	454b      	cmp	r3, r9
 8005268:	d307      	bcc.n	800527a <__cvt+0xb6>
 800526a:	4630      	mov	r0, r6
 800526c:	9b07      	ldr	r3, [sp, #28]
 800526e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8005270:	1b9b      	subs	r3, r3, r6
 8005272:	6013      	str	r3, [r2, #0]
 8005274:	b008      	add	sp, #32
 8005276:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800527a:	1c59      	adds	r1, r3, #1
 800527c:	9107      	str	r1, [sp, #28]
 800527e:	701a      	strb	r2, [r3, #0]
 8005280:	e7f0      	b.n	8005264 <__cvt+0xa0>

08005282 <__exponent>:
 8005282:	4603      	mov	r3, r0
 8005284:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005286:	2900      	cmp	r1, #0
 8005288:	f803 2b02 	strb.w	r2, [r3], #2
 800528c:	bfb6      	itet	lt
 800528e:	222d      	movlt	r2, #45	; 0x2d
 8005290:	222b      	movge	r2, #43	; 0x2b
 8005292:	4249      	neglt	r1, r1
 8005294:	2909      	cmp	r1, #9
 8005296:	7042      	strb	r2, [r0, #1]
 8005298:	dd2b      	ble.n	80052f2 <__exponent+0x70>
 800529a:	f10d 0407 	add.w	r4, sp, #7
 800529e:	46a4      	mov	ip, r4
 80052a0:	270a      	movs	r7, #10
 80052a2:	fb91 f6f7 	sdiv	r6, r1, r7
 80052a6:	460a      	mov	r2, r1
 80052a8:	46a6      	mov	lr, r4
 80052aa:	fb07 1516 	mls	r5, r7, r6, r1
 80052ae:	2a63      	cmp	r2, #99	; 0x63
 80052b0:	f105 0530 	add.w	r5, r5, #48	; 0x30
 80052b4:	4631      	mov	r1, r6
 80052b6:	f104 34ff 	add.w	r4, r4, #4294967295
 80052ba:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80052be:	dcf0      	bgt.n	80052a2 <__exponent+0x20>
 80052c0:	3130      	adds	r1, #48	; 0x30
 80052c2:	f1ae 0502 	sub.w	r5, lr, #2
 80052c6:	f804 1c01 	strb.w	r1, [r4, #-1]
 80052ca:	4629      	mov	r1, r5
 80052cc:	1c44      	adds	r4, r0, #1
 80052ce:	4561      	cmp	r1, ip
 80052d0:	d30a      	bcc.n	80052e8 <__exponent+0x66>
 80052d2:	f10d 0209 	add.w	r2, sp, #9
 80052d6:	eba2 020e 	sub.w	r2, r2, lr
 80052da:	4565      	cmp	r5, ip
 80052dc:	bf88      	it	hi
 80052de:	2200      	movhi	r2, #0
 80052e0:	4413      	add	r3, r2
 80052e2:	1a18      	subs	r0, r3, r0
 80052e4:	b003      	add	sp, #12
 80052e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80052e8:	f811 2b01 	ldrb.w	r2, [r1], #1
 80052ec:	f804 2f01 	strb.w	r2, [r4, #1]!
 80052f0:	e7ed      	b.n	80052ce <__exponent+0x4c>
 80052f2:	2330      	movs	r3, #48	; 0x30
 80052f4:	3130      	adds	r1, #48	; 0x30
 80052f6:	7083      	strb	r3, [r0, #2]
 80052f8:	70c1      	strb	r1, [r0, #3]
 80052fa:	1d03      	adds	r3, r0, #4
 80052fc:	e7f1      	b.n	80052e2 <__exponent+0x60>
	...

08005300 <_printf_float>:
 8005300:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005304:	b091      	sub	sp, #68	; 0x44
 8005306:	460c      	mov	r4, r1
 8005308:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800530c:	4616      	mov	r6, r2
 800530e:	461f      	mov	r7, r3
 8005310:	4605      	mov	r5, r0
 8005312:	f002 ff05 	bl	8008120 <_localeconv_r>
 8005316:	6803      	ldr	r3, [r0, #0]
 8005318:	4618      	mov	r0, r3
 800531a:	9309      	str	r3, [sp, #36]	; 0x24
 800531c:	f7fa ff84 	bl	8000228 <strlen>
 8005320:	2300      	movs	r3, #0
 8005322:	930e      	str	r3, [sp, #56]	; 0x38
 8005324:	f8d8 3000 	ldr.w	r3, [r8]
 8005328:	900a      	str	r0, [sp, #40]	; 0x28
 800532a:	3307      	adds	r3, #7
 800532c:	f023 0307 	bic.w	r3, r3, #7
 8005330:	f103 0208 	add.w	r2, r3, #8
 8005334:	f894 9018 	ldrb.w	r9, [r4, #24]
 8005338:	f8d4 b000 	ldr.w	fp, [r4]
 800533c:	f8c8 2000 	str.w	r2, [r8]
 8005340:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005344:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005348:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 800534c:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8005350:	930b      	str	r3, [sp, #44]	; 0x2c
 8005352:	f04f 32ff 	mov.w	r2, #4294967295
 8005356:	4640      	mov	r0, r8
 8005358:	4b9c      	ldr	r3, [pc, #624]	; (80055cc <_printf_float+0x2cc>)
 800535a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800535c:	f7fb fbc2 	bl	8000ae4 <__aeabi_dcmpun>
 8005360:	bb70      	cbnz	r0, 80053c0 <_printf_float+0xc0>
 8005362:	f04f 32ff 	mov.w	r2, #4294967295
 8005366:	4640      	mov	r0, r8
 8005368:	4b98      	ldr	r3, [pc, #608]	; (80055cc <_printf_float+0x2cc>)
 800536a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800536c:	f7fb fb9c 	bl	8000aa8 <__aeabi_dcmple>
 8005370:	bb30      	cbnz	r0, 80053c0 <_printf_float+0xc0>
 8005372:	2200      	movs	r2, #0
 8005374:	2300      	movs	r3, #0
 8005376:	4640      	mov	r0, r8
 8005378:	4651      	mov	r1, sl
 800537a:	f7fb fb8b 	bl	8000a94 <__aeabi_dcmplt>
 800537e:	b110      	cbz	r0, 8005386 <_printf_float+0x86>
 8005380:	232d      	movs	r3, #45	; 0x2d
 8005382:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005386:	4b92      	ldr	r3, [pc, #584]	; (80055d0 <_printf_float+0x2d0>)
 8005388:	4892      	ldr	r0, [pc, #584]	; (80055d4 <_printf_float+0x2d4>)
 800538a:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800538e:	bf94      	ite	ls
 8005390:	4698      	movls	r8, r3
 8005392:	4680      	movhi	r8, r0
 8005394:	2303      	movs	r3, #3
 8005396:	f04f 0a00 	mov.w	sl, #0
 800539a:	6123      	str	r3, [r4, #16]
 800539c:	f02b 0304 	bic.w	r3, fp, #4
 80053a0:	6023      	str	r3, [r4, #0]
 80053a2:	4633      	mov	r3, r6
 80053a4:	4621      	mov	r1, r4
 80053a6:	4628      	mov	r0, r5
 80053a8:	9700      	str	r7, [sp, #0]
 80053aa:	aa0f      	add	r2, sp, #60	; 0x3c
 80053ac:	f000 f9d4 	bl	8005758 <_printf_common>
 80053b0:	3001      	adds	r0, #1
 80053b2:	f040 8090 	bne.w	80054d6 <_printf_float+0x1d6>
 80053b6:	f04f 30ff 	mov.w	r0, #4294967295
 80053ba:	b011      	add	sp, #68	; 0x44
 80053bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80053c0:	4642      	mov	r2, r8
 80053c2:	4653      	mov	r3, sl
 80053c4:	4640      	mov	r0, r8
 80053c6:	4651      	mov	r1, sl
 80053c8:	f7fb fb8c 	bl	8000ae4 <__aeabi_dcmpun>
 80053cc:	b148      	cbz	r0, 80053e2 <_printf_float+0xe2>
 80053ce:	f1ba 0f00 	cmp.w	sl, #0
 80053d2:	bfb8      	it	lt
 80053d4:	232d      	movlt	r3, #45	; 0x2d
 80053d6:	4880      	ldr	r0, [pc, #512]	; (80055d8 <_printf_float+0x2d8>)
 80053d8:	bfb8      	it	lt
 80053da:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80053de:	4b7f      	ldr	r3, [pc, #508]	; (80055dc <_printf_float+0x2dc>)
 80053e0:	e7d3      	b.n	800538a <_printf_float+0x8a>
 80053e2:	6863      	ldr	r3, [r4, #4]
 80053e4:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80053e8:	1c5a      	adds	r2, r3, #1
 80053ea:	d142      	bne.n	8005472 <_printf_float+0x172>
 80053ec:	2306      	movs	r3, #6
 80053ee:	6063      	str	r3, [r4, #4]
 80053f0:	2200      	movs	r2, #0
 80053f2:	9206      	str	r2, [sp, #24]
 80053f4:	aa0e      	add	r2, sp, #56	; 0x38
 80053f6:	e9cd 9204 	strd	r9, r2, [sp, #16]
 80053fa:	aa0d      	add	r2, sp, #52	; 0x34
 80053fc:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8005400:	9203      	str	r2, [sp, #12]
 8005402:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8005406:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800540a:	6023      	str	r3, [r4, #0]
 800540c:	6863      	ldr	r3, [r4, #4]
 800540e:	4642      	mov	r2, r8
 8005410:	9300      	str	r3, [sp, #0]
 8005412:	4628      	mov	r0, r5
 8005414:	4653      	mov	r3, sl
 8005416:	910b      	str	r1, [sp, #44]	; 0x2c
 8005418:	f7ff fed4 	bl	80051c4 <__cvt>
 800541c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800541e:	4680      	mov	r8, r0
 8005420:	2947      	cmp	r1, #71	; 0x47
 8005422:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005424:	d108      	bne.n	8005438 <_printf_float+0x138>
 8005426:	1cc8      	adds	r0, r1, #3
 8005428:	db02      	blt.n	8005430 <_printf_float+0x130>
 800542a:	6863      	ldr	r3, [r4, #4]
 800542c:	4299      	cmp	r1, r3
 800542e:	dd40      	ble.n	80054b2 <_printf_float+0x1b2>
 8005430:	f1a9 0902 	sub.w	r9, r9, #2
 8005434:	fa5f f989 	uxtb.w	r9, r9
 8005438:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800543c:	d81f      	bhi.n	800547e <_printf_float+0x17e>
 800543e:	464a      	mov	r2, r9
 8005440:	3901      	subs	r1, #1
 8005442:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005446:	910d      	str	r1, [sp, #52]	; 0x34
 8005448:	f7ff ff1b 	bl	8005282 <__exponent>
 800544c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800544e:	4682      	mov	sl, r0
 8005450:	1813      	adds	r3, r2, r0
 8005452:	2a01      	cmp	r2, #1
 8005454:	6123      	str	r3, [r4, #16]
 8005456:	dc02      	bgt.n	800545e <_printf_float+0x15e>
 8005458:	6822      	ldr	r2, [r4, #0]
 800545a:	07d2      	lsls	r2, r2, #31
 800545c:	d501      	bpl.n	8005462 <_printf_float+0x162>
 800545e:	3301      	adds	r3, #1
 8005460:	6123      	str	r3, [r4, #16]
 8005462:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8005466:	2b00      	cmp	r3, #0
 8005468:	d09b      	beq.n	80053a2 <_printf_float+0xa2>
 800546a:	232d      	movs	r3, #45	; 0x2d
 800546c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005470:	e797      	b.n	80053a2 <_printf_float+0xa2>
 8005472:	2947      	cmp	r1, #71	; 0x47
 8005474:	d1bc      	bne.n	80053f0 <_printf_float+0xf0>
 8005476:	2b00      	cmp	r3, #0
 8005478:	d1ba      	bne.n	80053f0 <_printf_float+0xf0>
 800547a:	2301      	movs	r3, #1
 800547c:	e7b7      	b.n	80053ee <_printf_float+0xee>
 800547e:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8005482:	d118      	bne.n	80054b6 <_printf_float+0x1b6>
 8005484:	2900      	cmp	r1, #0
 8005486:	6863      	ldr	r3, [r4, #4]
 8005488:	dd0b      	ble.n	80054a2 <_printf_float+0x1a2>
 800548a:	6121      	str	r1, [r4, #16]
 800548c:	b913      	cbnz	r3, 8005494 <_printf_float+0x194>
 800548e:	6822      	ldr	r2, [r4, #0]
 8005490:	07d0      	lsls	r0, r2, #31
 8005492:	d502      	bpl.n	800549a <_printf_float+0x19a>
 8005494:	3301      	adds	r3, #1
 8005496:	440b      	add	r3, r1
 8005498:	6123      	str	r3, [r4, #16]
 800549a:	f04f 0a00 	mov.w	sl, #0
 800549e:	65a1      	str	r1, [r4, #88]	; 0x58
 80054a0:	e7df      	b.n	8005462 <_printf_float+0x162>
 80054a2:	b913      	cbnz	r3, 80054aa <_printf_float+0x1aa>
 80054a4:	6822      	ldr	r2, [r4, #0]
 80054a6:	07d2      	lsls	r2, r2, #31
 80054a8:	d501      	bpl.n	80054ae <_printf_float+0x1ae>
 80054aa:	3302      	adds	r3, #2
 80054ac:	e7f4      	b.n	8005498 <_printf_float+0x198>
 80054ae:	2301      	movs	r3, #1
 80054b0:	e7f2      	b.n	8005498 <_printf_float+0x198>
 80054b2:	f04f 0967 	mov.w	r9, #103	; 0x67
 80054b6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80054b8:	4299      	cmp	r1, r3
 80054ba:	db05      	blt.n	80054c8 <_printf_float+0x1c8>
 80054bc:	6823      	ldr	r3, [r4, #0]
 80054be:	6121      	str	r1, [r4, #16]
 80054c0:	07d8      	lsls	r0, r3, #31
 80054c2:	d5ea      	bpl.n	800549a <_printf_float+0x19a>
 80054c4:	1c4b      	adds	r3, r1, #1
 80054c6:	e7e7      	b.n	8005498 <_printf_float+0x198>
 80054c8:	2900      	cmp	r1, #0
 80054ca:	bfcc      	ite	gt
 80054cc:	2201      	movgt	r2, #1
 80054ce:	f1c1 0202 	rsble	r2, r1, #2
 80054d2:	4413      	add	r3, r2
 80054d4:	e7e0      	b.n	8005498 <_printf_float+0x198>
 80054d6:	6823      	ldr	r3, [r4, #0]
 80054d8:	055a      	lsls	r2, r3, #21
 80054da:	d407      	bmi.n	80054ec <_printf_float+0x1ec>
 80054dc:	6923      	ldr	r3, [r4, #16]
 80054de:	4642      	mov	r2, r8
 80054e0:	4631      	mov	r1, r6
 80054e2:	4628      	mov	r0, r5
 80054e4:	47b8      	blx	r7
 80054e6:	3001      	adds	r0, #1
 80054e8:	d12b      	bne.n	8005542 <_printf_float+0x242>
 80054ea:	e764      	b.n	80053b6 <_printf_float+0xb6>
 80054ec:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80054f0:	f240 80dd 	bls.w	80056ae <_printf_float+0x3ae>
 80054f4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80054f8:	2200      	movs	r2, #0
 80054fa:	2300      	movs	r3, #0
 80054fc:	f7fb fac0 	bl	8000a80 <__aeabi_dcmpeq>
 8005500:	2800      	cmp	r0, #0
 8005502:	d033      	beq.n	800556c <_printf_float+0x26c>
 8005504:	2301      	movs	r3, #1
 8005506:	4631      	mov	r1, r6
 8005508:	4628      	mov	r0, r5
 800550a:	4a35      	ldr	r2, [pc, #212]	; (80055e0 <_printf_float+0x2e0>)
 800550c:	47b8      	blx	r7
 800550e:	3001      	adds	r0, #1
 8005510:	f43f af51 	beq.w	80053b6 <_printf_float+0xb6>
 8005514:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005518:	429a      	cmp	r2, r3
 800551a:	db02      	blt.n	8005522 <_printf_float+0x222>
 800551c:	6823      	ldr	r3, [r4, #0]
 800551e:	07d8      	lsls	r0, r3, #31
 8005520:	d50f      	bpl.n	8005542 <_printf_float+0x242>
 8005522:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005526:	4631      	mov	r1, r6
 8005528:	4628      	mov	r0, r5
 800552a:	47b8      	blx	r7
 800552c:	3001      	adds	r0, #1
 800552e:	f43f af42 	beq.w	80053b6 <_printf_float+0xb6>
 8005532:	f04f 0800 	mov.w	r8, #0
 8005536:	f104 091a 	add.w	r9, r4, #26
 800553a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800553c:	3b01      	subs	r3, #1
 800553e:	4543      	cmp	r3, r8
 8005540:	dc09      	bgt.n	8005556 <_printf_float+0x256>
 8005542:	6823      	ldr	r3, [r4, #0]
 8005544:	079b      	lsls	r3, r3, #30
 8005546:	f100 8102 	bmi.w	800574e <_printf_float+0x44e>
 800554a:	68e0      	ldr	r0, [r4, #12]
 800554c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800554e:	4298      	cmp	r0, r3
 8005550:	bfb8      	it	lt
 8005552:	4618      	movlt	r0, r3
 8005554:	e731      	b.n	80053ba <_printf_float+0xba>
 8005556:	2301      	movs	r3, #1
 8005558:	464a      	mov	r2, r9
 800555a:	4631      	mov	r1, r6
 800555c:	4628      	mov	r0, r5
 800555e:	47b8      	blx	r7
 8005560:	3001      	adds	r0, #1
 8005562:	f43f af28 	beq.w	80053b6 <_printf_float+0xb6>
 8005566:	f108 0801 	add.w	r8, r8, #1
 800556a:	e7e6      	b.n	800553a <_printf_float+0x23a>
 800556c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800556e:	2b00      	cmp	r3, #0
 8005570:	dc38      	bgt.n	80055e4 <_printf_float+0x2e4>
 8005572:	2301      	movs	r3, #1
 8005574:	4631      	mov	r1, r6
 8005576:	4628      	mov	r0, r5
 8005578:	4a19      	ldr	r2, [pc, #100]	; (80055e0 <_printf_float+0x2e0>)
 800557a:	47b8      	blx	r7
 800557c:	3001      	adds	r0, #1
 800557e:	f43f af1a 	beq.w	80053b6 <_printf_float+0xb6>
 8005582:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005586:	4313      	orrs	r3, r2
 8005588:	d102      	bne.n	8005590 <_printf_float+0x290>
 800558a:	6823      	ldr	r3, [r4, #0]
 800558c:	07d9      	lsls	r1, r3, #31
 800558e:	d5d8      	bpl.n	8005542 <_printf_float+0x242>
 8005590:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005594:	4631      	mov	r1, r6
 8005596:	4628      	mov	r0, r5
 8005598:	47b8      	blx	r7
 800559a:	3001      	adds	r0, #1
 800559c:	f43f af0b 	beq.w	80053b6 <_printf_float+0xb6>
 80055a0:	f04f 0900 	mov.w	r9, #0
 80055a4:	f104 0a1a 	add.w	sl, r4, #26
 80055a8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80055aa:	425b      	negs	r3, r3
 80055ac:	454b      	cmp	r3, r9
 80055ae:	dc01      	bgt.n	80055b4 <_printf_float+0x2b4>
 80055b0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80055b2:	e794      	b.n	80054de <_printf_float+0x1de>
 80055b4:	2301      	movs	r3, #1
 80055b6:	4652      	mov	r2, sl
 80055b8:	4631      	mov	r1, r6
 80055ba:	4628      	mov	r0, r5
 80055bc:	47b8      	blx	r7
 80055be:	3001      	adds	r0, #1
 80055c0:	f43f aef9 	beq.w	80053b6 <_printf_float+0xb6>
 80055c4:	f109 0901 	add.w	r9, r9, #1
 80055c8:	e7ee      	b.n	80055a8 <_printf_float+0x2a8>
 80055ca:	bf00      	nop
 80055cc:	7fefffff 	.word	0x7fefffff
 80055d0:	0800a418 	.word	0x0800a418
 80055d4:	0800a41c 	.word	0x0800a41c
 80055d8:	0800a424 	.word	0x0800a424
 80055dc:	0800a420 	.word	0x0800a420
 80055e0:	0800a829 	.word	0x0800a829
 80055e4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80055e6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80055e8:	429a      	cmp	r2, r3
 80055ea:	bfa8      	it	ge
 80055ec:	461a      	movge	r2, r3
 80055ee:	2a00      	cmp	r2, #0
 80055f0:	4691      	mov	r9, r2
 80055f2:	dc37      	bgt.n	8005664 <_printf_float+0x364>
 80055f4:	f04f 0b00 	mov.w	fp, #0
 80055f8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80055fc:	f104 021a 	add.w	r2, r4, #26
 8005600:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8005604:	ebaa 0309 	sub.w	r3, sl, r9
 8005608:	455b      	cmp	r3, fp
 800560a:	dc33      	bgt.n	8005674 <_printf_float+0x374>
 800560c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005610:	429a      	cmp	r2, r3
 8005612:	db3b      	blt.n	800568c <_printf_float+0x38c>
 8005614:	6823      	ldr	r3, [r4, #0]
 8005616:	07da      	lsls	r2, r3, #31
 8005618:	d438      	bmi.n	800568c <_printf_float+0x38c>
 800561a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800561c:	990d      	ldr	r1, [sp, #52]	; 0x34
 800561e:	eba2 030a 	sub.w	r3, r2, sl
 8005622:	eba2 0901 	sub.w	r9, r2, r1
 8005626:	4599      	cmp	r9, r3
 8005628:	bfa8      	it	ge
 800562a:	4699      	movge	r9, r3
 800562c:	f1b9 0f00 	cmp.w	r9, #0
 8005630:	dc34      	bgt.n	800569c <_printf_float+0x39c>
 8005632:	f04f 0800 	mov.w	r8, #0
 8005636:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800563a:	f104 0a1a 	add.w	sl, r4, #26
 800563e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005642:	1a9b      	subs	r3, r3, r2
 8005644:	eba3 0309 	sub.w	r3, r3, r9
 8005648:	4543      	cmp	r3, r8
 800564a:	f77f af7a 	ble.w	8005542 <_printf_float+0x242>
 800564e:	2301      	movs	r3, #1
 8005650:	4652      	mov	r2, sl
 8005652:	4631      	mov	r1, r6
 8005654:	4628      	mov	r0, r5
 8005656:	47b8      	blx	r7
 8005658:	3001      	adds	r0, #1
 800565a:	f43f aeac 	beq.w	80053b6 <_printf_float+0xb6>
 800565e:	f108 0801 	add.w	r8, r8, #1
 8005662:	e7ec      	b.n	800563e <_printf_float+0x33e>
 8005664:	4613      	mov	r3, r2
 8005666:	4631      	mov	r1, r6
 8005668:	4642      	mov	r2, r8
 800566a:	4628      	mov	r0, r5
 800566c:	47b8      	blx	r7
 800566e:	3001      	adds	r0, #1
 8005670:	d1c0      	bne.n	80055f4 <_printf_float+0x2f4>
 8005672:	e6a0      	b.n	80053b6 <_printf_float+0xb6>
 8005674:	2301      	movs	r3, #1
 8005676:	4631      	mov	r1, r6
 8005678:	4628      	mov	r0, r5
 800567a:	920b      	str	r2, [sp, #44]	; 0x2c
 800567c:	47b8      	blx	r7
 800567e:	3001      	adds	r0, #1
 8005680:	f43f ae99 	beq.w	80053b6 <_printf_float+0xb6>
 8005684:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005686:	f10b 0b01 	add.w	fp, fp, #1
 800568a:	e7b9      	b.n	8005600 <_printf_float+0x300>
 800568c:	4631      	mov	r1, r6
 800568e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005692:	4628      	mov	r0, r5
 8005694:	47b8      	blx	r7
 8005696:	3001      	adds	r0, #1
 8005698:	d1bf      	bne.n	800561a <_printf_float+0x31a>
 800569a:	e68c      	b.n	80053b6 <_printf_float+0xb6>
 800569c:	464b      	mov	r3, r9
 800569e:	4631      	mov	r1, r6
 80056a0:	4628      	mov	r0, r5
 80056a2:	eb08 020a 	add.w	r2, r8, sl
 80056a6:	47b8      	blx	r7
 80056a8:	3001      	adds	r0, #1
 80056aa:	d1c2      	bne.n	8005632 <_printf_float+0x332>
 80056ac:	e683      	b.n	80053b6 <_printf_float+0xb6>
 80056ae:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80056b0:	2a01      	cmp	r2, #1
 80056b2:	dc01      	bgt.n	80056b8 <_printf_float+0x3b8>
 80056b4:	07db      	lsls	r3, r3, #31
 80056b6:	d537      	bpl.n	8005728 <_printf_float+0x428>
 80056b8:	2301      	movs	r3, #1
 80056ba:	4642      	mov	r2, r8
 80056bc:	4631      	mov	r1, r6
 80056be:	4628      	mov	r0, r5
 80056c0:	47b8      	blx	r7
 80056c2:	3001      	adds	r0, #1
 80056c4:	f43f ae77 	beq.w	80053b6 <_printf_float+0xb6>
 80056c8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80056cc:	4631      	mov	r1, r6
 80056ce:	4628      	mov	r0, r5
 80056d0:	47b8      	blx	r7
 80056d2:	3001      	adds	r0, #1
 80056d4:	f43f ae6f 	beq.w	80053b6 <_printf_float+0xb6>
 80056d8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80056dc:	2200      	movs	r2, #0
 80056de:	2300      	movs	r3, #0
 80056e0:	f7fb f9ce 	bl	8000a80 <__aeabi_dcmpeq>
 80056e4:	b9d8      	cbnz	r0, 800571e <_printf_float+0x41e>
 80056e6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80056e8:	f108 0201 	add.w	r2, r8, #1
 80056ec:	3b01      	subs	r3, #1
 80056ee:	4631      	mov	r1, r6
 80056f0:	4628      	mov	r0, r5
 80056f2:	47b8      	blx	r7
 80056f4:	3001      	adds	r0, #1
 80056f6:	d10e      	bne.n	8005716 <_printf_float+0x416>
 80056f8:	e65d      	b.n	80053b6 <_printf_float+0xb6>
 80056fa:	2301      	movs	r3, #1
 80056fc:	464a      	mov	r2, r9
 80056fe:	4631      	mov	r1, r6
 8005700:	4628      	mov	r0, r5
 8005702:	47b8      	blx	r7
 8005704:	3001      	adds	r0, #1
 8005706:	f43f ae56 	beq.w	80053b6 <_printf_float+0xb6>
 800570a:	f108 0801 	add.w	r8, r8, #1
 800570e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005710:	3b01      	subs	r3, #1
 8005712:	4543      	cmp	r3, r8
 8005714:	dcf1      	bgt.n	80056fa <_printf_float+0x3fa>
 8005716:	4653      	mov	r3, sl
 8005718:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800571c:	e6e0      	b.n	80054e0 <_printf_float+0x1e0>
 800571e:	f04f 0800 	mov.w	r8, #0
 8005722:	f104 091a 	add.w	r9, r4, #26
 8005726:	e7f2      	b.n	800570e <_printf_float+0x40e>
 8005728:	2301      	movs	r3, #1
 800572a:	4642      	mov	r2, r8
 800572c:	e7df      	b.n	80056ee <_printf_float+0x3ee>
 800572e:	2301      	movs	r3, #1
 8005730:	464a      	mov	r2, r9
 8005732:	4631      	mov	r1, r6
 8005734:	4628      	mov	r0, r5
 8005736:	47b8      	blx	r7
 8005738:	3001      	adds	r0, #1
 800573a:	f43f ae3c 	beq.w	80053b6 <_printf_float+0xb6>
 800573e:	f108 0801 	add.w	r8, r8, #1
 8005742:	68e3      	ldr	r3, [r4, #12]
 8005744:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8005746:	1a5b      	subs	r3, r3, r1
 8005748:	4543      	cmp	r3, r8
 800574a:	dcf0      	bgt.n	800572e <_printf_float+0x42e>
 800574c:	e6fd      	b.n	800554a <_printf_float+0x24a>
 800574e:	f04f 0800 	mov.w	r8, #0
 8005752:	f104 0919 	add.w	r9, r4, #25
 8005756:	e7f4      	b.n	8005742 <_printf_float+0x442>

08005758 <_printf_common>:
 8005758:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800575c:	4616      	mov	r6, r2
 800575e:	4699      	mov	r9, r3
 8005760:	688a      	ldr	r2, [r1, #8]
 8005762:	690b      	ldr	r3, [r1, #16]
 8005764:	4607      	mov	r7, r0
 8005766:	4293      	cmp	r3, r2
 8005768:	bfb8      	it	lt
 800576a:	4613      	movlt	r3, r2
 800576c:	6033      	str	r3, [r6, #0]
 800576e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005772:	460c      	mov	r4, r1
 8005774:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005778:	b10a      	cbz	r2, 800577e <_printf_common+0x26>
 800577a:	3301      	adds	r3, #1
 800577c:	6033      	str	r3, [r6, #0]
 800577e:	6823      	ldr	r3, [r4, #0]
 8005780:	0699      	lsls	r1, r3, #26
 8005782:	bf42      	ittt	mi
 8005784:	6833      	ldrmi	r3, [r6, #0]
 8005786:	3302      	addmi	r3, #2
 8005788:	6033      	strmi	r3, [r6, #0]
 800578a:	6825      	ldr	r5, [r4, #0]
 800578c:	f015 0506 	ands.w	r5, r5, #6
 8005790:	d106      	bne.n	80057a0 <_printf_common+0x48>
 8005792:	f104 0a19 	add.w	sl, r4, #25
 8005796:	68e3      	ldr	r3, [r4, #12]
 8005798:	6832      	ldr	r2, [r6, #0]
 800579a:	1a9b      	subs	r3, r3, r2
 800579c:	42ab      	cmp	r3, r5
 800579e:	dc28      	bgt.n	80057f2 <_printf_common+0x9a>
 80057a0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80057a4:	1e13      	subs	r3, r2, #0
 80057a6:	6822      	ldr	r2, [r4, #0]
 80057a8:	bf18      	it	ne
 80057aa:	2301      	movne	r3, #1
 80057ac:	0692      	lsls	r2, r2, #26
 80057ae:	d42d      	bmi.n	800580c <_printf_common+0xb4>
 80057b0:	4649      	mov	r1, r9
 80057b2:	4638      	mov	r0, r7
 80057b4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80057b8:	47c0      	blx	r8
 80057ba:	3001      	adds	r0, #1
 80057bc:	d020      	beq.n	8005800 <_printf_common+0xa8>
 80057be:	6823      	ldr	r3, [r4, #0]
 80057c0:	68e5      	ldr	r5, [r4, #12]
 80057c2:	f003 0306 	and.w	r3, r3, #6
 80057c6:	2b04      	cmp	r3, #4
 80057c8:	bf18      	it	ne
 80057ca:	2500      	movne	r5, #0
 80057cc:	6832      	ldr	r2, [r6, #0]
 80057ce:	f04f 0600 	mov.w	r6, #0
 80057d2:	68a3      	ldr	r3, [r4, #8]
 80057d4:	bf08      	it	eq
 80057d6:	1aad      	subeq	r5, r5, r2
 80057d8:	6922      	ldr	r2, [r4, #16]
 80057da:	bf08      	it	eq
 80057dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80057e0:	4293      	cmp	r3, r2
 80057e2:	bfc4      	itt	gt
 80057e4:	1a9b      	subgt	r3, r3, r2
 80057e6:	18ed      	addgt	r5, r5, r3
 80057e8:	341a      	adds	r4, #26
 80057ea:	42b5      	cmp	r5, r6
 80057ec:	d11a      	bne.n	8005824 <_printf_common+0xcc>
 80057ee:	2000      	movs	r0, #0
 80057f0:	e008      	b.n	8005804 <_printf_common+0xac>
 80057f2:	2301      	movs	r3, #1
 80057f4:	4652      	mov	r2, sl
 80057f6:	4649      	mov	r1, r9
 80057f8:	4638      	mov	r0, r7
 80057fa:	47c0      	blx	r8
 80057fc:	3001      	adds	r0, #1
 80057fe:	d103      	bne.n	8005808 <_printf_common+0xb0>
 8005800:	f04f 30ff 	mov.w	r0, #4294967295
 8005804:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005808:	3501      	adds	r5, #1
 800580a:	e7c4      	b.n	8005796 <_printf_common+0x3e>
 800580c:	2030      	movs	r0, #48	; 0x30
 800580e:	18e1      	adds	r1, r4, r3
 8005810:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005814:	1c5a      	adds	r2, r3, #1
 8005816:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800581a:	4422      	add	r2, r4
 800581c:	3302      	adds	r3, #2
 800581e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005822:	e7c5      	b.n	80057b0 <_printf_common+0x58>
 8005824:	2301      	movs	r3, #1
 8005826:	4622      	mov	r2, r4
 8005828:	4649      	mov	r1, r9
 800582a:	4638      	mov	r0, r7
 800582c:	47c0      	blx	r8
 800582e:	3001      	adds	r0, #1
 8005830:	d0e6      	beq.n	8005800 <_printf_common+0xa8>
 8005832:	3601      	adds	r6, #1
 8005834:	e7d9      	b.n	80057ea <_printf_common+0x92>
	...

08005838 <_printf_i>:
 8005838:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800583c:	460c      	mov	r4, r1
 800583e:	7e27      	ldrb	r7, [r4, #24]
 8005840:	4691      	mov	r9, r2
 8005842:	2f78      	cmp	r7, #120	; 0x78
 8005844:	4680      	mov	r8, r0
 8005846:	469a      	mov	sl, r3
 8005848:	990c      	ldr	r1, [sp, #48]	; 0x30
 800584a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800584e:	d807      	bhi.n	8005860 <_printf_i+0x28>
 8005850:	2f62      	cmp	r7, #98	; 0x62
 8005852:	d80a      	bhi.n	800586a <_printf_i+0x32>
 8005854:	2f00      	cmp	r7, #0
 8005856:	f000 80d9 	beq.w	8005a0c <_printf_i+0x1d4>
 800585a:	2f58      	cmp	r7, #88	; 0x58
 800585c:	f000 80a4 	beq.w	80059a8 <_printf_i+0x170>
 8005860:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005864:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005868:	e03a      	b.n	80058e0 <_printf_i+0xa8>
 800586a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800586e:	2b15      	cmp	r3, #21
 8005870:	d8f6      	bhi.n	8005860 <_printf_i+0x28>
 8005872:	a001      	add	r0, pc, #4	; (adr r0, 8005878 <_printf_i+0x40>)
 8005874:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005878:	080058d1 	.word	0x080058d1
 800587c:	080058e5 	.word	0x080058e5
 8005880:	08005861 	.word	0x08005861
 8005884:	08005861 	.word	0x08005861
 8005888:	08005861 	.word	0x08005861
 800588c:	08005861 	.word	0x08005861
 8005890:	080058e5 	.word	0x080058e5
 8005894:	08005861 	.word	0x08005861
 8005898:	08005861 	.word	0x08005861
 800589c:	08005861 	.word	0x08005861
 80058a0:	08005861 	.word	0x08005861
 80058a4:	080059f3 	.word	0x080059f3
 80058a8:	08005915 	.word	0x08005915
 80058ac:	080059d5 	.word	0x080059d5
 80058b0:	08005861 	.word	0x08005861
 80058b4:	08005861 	.word	0x08005861
 80058b8:	08005a15 	.word	0x08005a15
 80058bc:	08005861 	.word	0x08005861
 80058c0:	08005915 	.word	0x08005915
 80058c4:	08005861 	.word	0x08005861
 80058c8:	08005861 	.word	0x08005861
 80058cc:	080059dd 	.word	0x080059dd
 80058d0:	680b      	ldr	r3, [r1, #0]
 80058d2:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80058d6:	1d1a      	adds	r2, r3, #4
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	600a      	str	r2, [r1, #0]
 80058dc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80058e0:	2301      	movs	r3, #1
 80058e2:	e0a4      	b.n	8005a2e <_printf_i+0x1f6>
 80058e4:	6825      	ldr	r5, [r4, #0]
 80058e6:	6808      	ldr	r0, [r1, #0]
 80058e8:	062e      	lsls	r6, r5, #24
 80058ea:	f100 0304 	add.w	r3, r0, #4
 80058ee:	d50a      	bpl.n	8005906 <_printf_i+0xce>
 80058f0:	6805      	ldr	r5, [r0, #0]
 80058f2:	600b      	str	r3, [r1, #0]
 80058f4:	2d00      	cmp	r5, #0
 80058f6:	da03      	bge.n	8005900 <_printf_i+0xc8>
 80058f8:	232d      	movs	r3, #45	; 0x2d
 80058fa:	426d      	negs	r5, r5
 80058fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005900:	230a      	movs	r3, #10
 8005902:	485e      	ldr	r0, [pc, #376]	; (8005a7c <_printf_i+0x244>)
 8005904:	e019      	b.n	800593a <_printf_i+0x102>
 8005906:	f015 0f40 	tst.w	r5, #64	; 0x40
 800590a:	6805      	ldr	r5, [r0, #0]
 800590c:	600b      	str	r3, [r1, #0]
 800590e:	bf18      	it	ne
 8005910:	b22d      	sxthne	r5, r5
 8005912:	e7ef      	b.n	80058f4 <_printf_i+0xbc>
 8005914:	680b      	ldr	r3, [r1, #0]
 8005916:	6825      	ldr	r5, [r4, #0]
 8005918:	1d18      	adds	r0, r3, #4
 800591a:	6008      	str	r0, [r1, #0]
 800591c:	0628      	lsls	r0, r5, #24
 800591e:	d501      	bpl.n	8005924 <_printf_i+0xec>
 8005920:	681d      	ldr	r5, [r3, #0]
 8005922:	e002      	b.n	800592a <_printf_i+0xf2>
 8005924:	0669      	lsls	r1, r5, #25
 8005926:	d5fb      	bpl.n	8005920 <_printf_i+0xe8>
 8005928:	881d      	ldrh	r5, [r3, #0]
 800592a:	2f6f      	cmp	r7, #111	; 0x6f
 800592c:	bf0c      	ite	eq
 800592e:	2308      	moveq	r3, #8
 8005930:	230a      	movne	r3, #10
 8005932:	4852      	ldr	r0, [pc, #328]	; (8005a7c <_printf_i+0x244>)
 8005934:	2100      	movs	r1, #0
 8005936:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800593a:	6866      	ldr	r6, [r4, #4]
 800593c:	2e00      	cmp	r6, #0
 800593e:	bfa8      	it	ge
 8005940:	6821      	ldrge	r1, [r4, #0]
 8005942:	60a6      	str	r6, [r4, #8]
 8005944:	bfa4      	itt	ge
 8005946:	f021 0104 	bicge.w	r1, r1, #4
 800594a:	6021      	strge	r1, [r4, #0]
 800594c:	b90d      	cbnz	r5, 8005952 <_printf_i+0x11a>
 800594e:	2e00      	cmp	r6, #0
 8005950:	d04d      	beq.n	80059ee <_printf_i+0x1b6>
 8005952:	4616      	mov	r6, r2
 8005954:	fbb5 f1f3 	udiv	r1, r5, r3
 8005958:	fb03 5711 	mls	r7, r3, r1, r5
 800595c:	5dc7      	ldrb	r7, [r0, r7]
 800595e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005962:	462f      	mov	r7, r5
 8005964:	42bb      	cmp	r3, r7
 8005966:	460d      	mov	r5, r1
 8005968:	d9f4      	bls.n	8005954 <_printf_i+0x11c>
 800596a:	2b08      	cmp	r3, #8
 800596c:	d10b      	bne.n	8005986 <_printf_i+0x14e>
 800596e:	6823      	ldr	r3, [r4, #0]
 8005970:	07df      	lsls	r7, r3, #31
 8005972:	d508      	bpl.n	8005986 <_printf_i+0x14e>
 8005974:	6923      	ldr	r3, [r4, #16]
 8005976:	6861      	ldr	r1, [r4, #4]
 8005978:	4299      	cmp	r1, r3
 800597a:	bfde      	ittt	le
 800597c:	2330      	movle	r3, #48	; 0x30
 800597e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005982:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005986:	1b92      	subs	r2, r2, r6
 8005988:	6122      	str	r2, [r4, #16]
 800598a:	464b      	mov	r3, r9
 800598c:	4621      	mov	r1, r4
 800598e:	4640      	mov	r0, r8
 8005990:	f8cd a000 	str.w	sl, [sp]
 8005994:	aa03      	add	r2, sp, #12
 8005996:	f7ff fedf 	bl	8005758 <_printf_common>
 800599a:	3001      	adds	r0, #1
 800599c:	d14c      	bne.n	8005a38 <_printf_i+0x200>
 800599e:	f04f 30ff 	mov.w	r0, #4294967295
 80059a2:	b004      	add	sp, #16
 80059a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80059a8:	4834      	ldr	r0, [pc, #208]	; (8005a7c <_printf_i+0x244>)
 80059aa:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80059ae:	680e      	ldr	r6, [r1, #0]
 80059b0:	6823      	ldr	r3, [r4, #0]
 80059b2:	f856 5b04 	ldr.w	r5, [r6], #4
 80059b6:	061f      	lsls	r7, r3, #24
 80059b8:	600e      	str	r6, [r1, #0]
 80059ba:	d514      	bpl.n	80059e6 <_printf_i+0x1ae>
 80059bc:	07d9      	lsls	r1, r3, #31
 80059be:	bf44      	itt	mi
 80059c0:	f043 0320 	orrmi.w	r3, r3, #32
 80059c4:	6023      	strmi	r3, [r4, #0]
 80059c6:	b91d      	cbnz	r5, 80059d0 <_printf_i+0x198>
 80059c8:	6823      	ldr	r3, [r4, #0]
 80059ca:	f023 0320 	bic.w	r3, r3, #32
 80059ce:	6023      	str	r3, [r4, #0]
 80059d0:	2310      	movs	r3, #16
 80059d2:	e7af      	b.n	8005934 <_printf_i+0xfc>
 80059d4:	6823      	ldr	r3, [r4, #0]
 80059d6:	f043 0320 	orr.w	r3, r3, #32
 80059da:	6023      	str	r3, [r4, #0]
 80059dc:	2378      	movs	r3, #120	; 0x78
 80059de:	4828      	ldr	r0, [pc, #160]	; (8005a80 <_printf_i+0x248>)
 80059e0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80059e4:	e7e3      	b.n	80059ae <_printf_i+0x176>
 80059e6:	065e      	lsls	r6, r3, #25
 80059e8:	bf48      	it	mi
 80059ea:	b2ad      	uxthmi	r5, r5
 80059ec:	e7e6      	b.n	80059bc <_printf_i+0x184>
 80059ee:	4616      	mov	r6, r2
 80059f0:	e7bb      	b.n	800596a <_printf_i+0x132>
 80059f2:	680b      	ldr	r3, [r1, #0]
 80059f4:	6826      	ldr	r6, [r4, #0]
 80059f6:	1d1d      	adds	r5, r3, #4
 80059f8:	6960      	ldr	r0, [r4, #20]
 80059fa:	600d      	str	r5, [r1, #0]
 80059fc:	0635      	lsls	r5, r6, #24
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	d501      	bpl.n	8005a06 <_printf_i+0x1ce>
 8005a02:	6018      	str	r0, [r3, #0]
 8005a04:	e002      	b.n	8005a0c <_printf_i+0x1d4>
 8005a06:	0671      	lsls	r1, r6, #25
 8005a08:	d5fb      	bpl.n	8005a02 <_printf_i+0x1ca>
 8005a0a:	8018      	strh	r0, [r3, #0]
 8005a0c:	2300      	movs	r3, #0
 8005a0e:	4616      	mov	r6, r2
 8005a10:	6123      	str	r3, [r4, #16]
 8005a12:	e7ba      	b.n	800598a <_printf_i+0x152>
 8005a14:	680b      	ldr	r3, [r1, #0]
 8005a16:	1d1a      	adds	r2, r3, #4
 8005a18:	600a      	str	r2, [r1, #0]
 8005a1a:	681e      	ldr	r6, [r3, #0]
 8005a1c:	2100      	movs	r1, #0
 8005a1e:	4630      	mov	r0, r6
 8005a20:	6862      	ldr	r2, [r4, #4]
 8005a22:	f002 fbad 	bl	8008180 <memchr>
 8005a26:	b108      	cbz	r0, 8005a2c <_printf_i+0x1f4>
 8005a28:	1b80      	subs	r0, r0, r6
 8005a2a:	6060      	str	r0, [r4, #4]
 8005a2c:	6863      	ldr	r3, [r4, #4]
 8005a2e:	6123      	str	r3, [r4, #16]
 8005a30:	2300      	movs	r3, #0
 8005a32:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005a36:	e7a8      	b.n	800598a <_printf_i+0x152>
 8005a38:	4632      	mov	r2, r6
 8005a3a:	4649      	mov	r1, r9
 8005a3c:	4640      	mov	r0, r8
 8005a3e:	6923      	ldr	r3, [r4, #16]
 8005a40:	47d0      	blx	sl
 8005a42:	3001      	adds	r0, #1
 8005a44:	d0ab      	beq.n	800599e <_printf_i+0x166>
 8005a46:	6823      	ldr	r3, [r4, #0]
 8005a48:	079b      	lsls	r3, r3, #30
 8005a4a:	d413      	bmi.n	8005a74 <_printf_i+0x23c>
 8005a4c:	68e0      	ldr	r0, [r4, #12]
 8005a4e:	9b03      	ldr	r3, [sp, #12]
 8005a50:	4298      	cmp	r0, r3
 8005a52:	bfb8      	it	lt
 8005a54:	4618      	movlt	r0, r3
 8005a56:	e7a4      	b.n	80059a2 <_printf_i+0x16a>
 8005a58:	2301      	movs	r3, #1
 8005a5a:	4632      	mov	r2, r6
 8005a5c:	4649      	mov	r1, r9
 8005a5e:	4640      	mov	r0, r8
 8005a60:	47d0      	blx	sl
 8005a62:	3001      	adds	r0, #1
 8005a64:	d09b      	beq.n	800599e <_printf_i+0x166>
 8005a66:	3501      	adds	r5, #1
 8005a68:	68e3      	ldr	r3, [r4, #12]
 8005a6a:	9903      	ldr	r1, [sp, #12]
 8005a6c:	1a5b      	subs	r3, r3, r1
 8005a6e:	42ab      	cmp	r3, r5
 8005a70:	dcf2      	bgt.n	8005a58 <_printf_i+0x220>
 8005a72:	e7eb      	b.n	8005a4c <_printf_i+0x214>
 8005a74:	2500      	movs	r5, #0
 8005a76:	f104 0619 	add.w	r6, r4, #25
 8005a7a:	e7f5      	b.n	8005a68 <_printf_i+0x230>
 8005a7c:	0800a428 	.word	0x0800a428
 8005a80:	0800a439 	.word	0x0800a439

08005a84 <_scanf_float>:
 8005a84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a88:	b087      	sub	sp, #28
 8005a8a:	9303      	str	r3, [sp, #12]
 8005a8c:	688b      	ldr	r3, [r1, #8]
 8005a8e:	4617      	mov	r7, r2
 8005a90:	1e5a      	subs	r2, r3, #1
 8005a92:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8005a96:	bf85      	ittet	hi
 8005a98:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8005a9c:	195b      	addhi	r3, r3, r5
 8005a9e:	2300      	movls	r3, #0
 8005aa0:	9302      	strhi	r3, [sp, #8]
 8005aa2:	bf88      	it	hi
 8005aa4:	f240 135d 	movwhi	r3, #349	; 0x15d
 8005aa8:	468b      	mov	fp, r1
 8005aaa:	f04f 0500 	mov.w	r5, #0
 8005aae:	bf8c      	ite	hi
 8005ab0:	608b      	strhi	r3, [r1, #8]
 8005ab2:	9302      	strls	r3, [sp, #8]
 8005ab4:	680b      	ldr	r3, [r1, #0]
 8005ab6:	4680      	mov	r8, r0
 8005ab8:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8005abc:	f84b 3b1c 	str.w	r3, [fp], #28
 8005ac0:	460c      	mov	r4, r1
 8005ac2:	465e      	mov	r6, fp
 8005ac4:	46aa      	mov	sl, r5
 8005ac6:	46a9      	mov	r9, r5
 8005ac8:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8005acc:	9501      	str	r5, [sp, #4]
 8005ace:	68a2      	ldr	r2, [r4, #8]
 8005ad0:	b152      	cbz	r2, 8005ae8 <_scanf_float+0x64>
 8005ad2:	683b      	ldr	r3, [r7, #0]
 8005ad4:	781b      	ldrb	r3, [r3, #0]
 8005ad6:	2b4e      	cmp	r3, #78	; 0x4e
 8005ad8:	d864      	bhi.n	8005ba4 <_scanf_float+0x120>
 8005ada:	2b40      	cmp	r3, #64	; 0x40
 8005adc:	d83c      	bhi.n	8005b58 <_scanf_float+0xd4>
 8005ade:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8005ae2:	b2c8      	uxtb	r0, r1
 8005ae4:	280e      	cmp	r0, #14
 8005ae6:	d93a      	bls.n	8005b5e <_scanf_float+0xda>
 8005ae8:	f1b9 0f00 	cmp.w	r9, #0
 8005aec:	d003      	beq.n	8005af6 <_scanf_float+0x72>
 8005aee:	6823      	ldr	r3, [r4, #0]
 8005af0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005af4:	6023      	str	r3, [r4, #0]
 8005af6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005afa:	f1ba 0f01 	cmp.w	sl, #1
 8005afe:	f200 8113 	bhi.w	8005d28 <_scanf_float+0x2a4>
 8005b02:	455e      	cmp	r6, fp
 8005b04:	f200 8105 	bhi.w	8005d12 <_scanf_float+0x28e>
 8005b08:	2501      	movs	r5, #1
 8005b0a:	4628      	mov	r0, r5
 8005b0c:	b007      	add	sp, #28
 8005b0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b12:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8005b16:	2a0d      	cmp	r2, #13
 8005b18:	d8e6      	bhi.n	8005ae8 <_scanf_float+0x64>
 8005b1a:	a101      	add	r1, pc, #4	; (adr r1, 8005b20 <_scanf_float+0x9c>)
 8005b1c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8005b20:	08005c5f 	.word	0x08005c5f
 8005b24:	08005ae9 	.word	0x08005ae9
 8005b28:	08005ae9 	.word	0x08005ae9
 8005b2c:	08005ae9 	.word	0x08005ae9
 8005b30:	08005cbf 	.word	0x08005cbf
 8005b34:	08005c97 	.word	0x08005c97
 8005b38:	08005ae9 	.word	0x08005ae9
 8005b3c:	08005ae9 	.word	0x08005ae9
 8005b40:	08005c6d 	.word	0x08005c6d
 8005b44:	08005ae9 	.word	0x08005ae9
 8005b48:	08005ae9 	.word	0x08005ae9
 8005b4c:	08005ae9 	.word	0x08005ae9
 8005b50:	08005ae9 	.word	0x08005ae9
 8005b54:	08005c25 	.word	0x08005c25
 8005b58:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8005b5c:	e7db      	b.n	8005b16 <_scanf_float+0x92>
 8005b5e:	290e      	cmp	r1, #14
 8005b60:	d8c2      	bhi.n	8005ae8 <_scanf_float+0x64>
 8005b62:	a001      	add	r0, pc, #4	; (adr r0, 8005b68 <_scanf_float+0xe4>)
 8005b64:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8005b68:	08005c17 	.word	0x08005c17
 8005b6c:	08005ae9 	.word	0x08005ae9
 8005b70:	08005c17 	.word	0x08005c17
 8005b74:	08005cab 	.word	0x08005cab
 8005b78:	08005ae9 	.word	0x08005ae9
 8005b7c:	08005bc5 	.word	0x08005bc5
 8005b80:	08005c01 	.word	0x08005c01
 8005b84:	08005c01 	.word	0x08005c01
 8005b88:	08005c01 	.word	0x08005c01
 8005b8c:	08005c01 	.word	0x08005c01
 8005b90:	08005c01 	.word	0x08005c01
 8005b94:	08005c01 	.word	0x08005c01
 8005b98:	08005c01 	.word	0x08005c01
 8005b9c:	08005c01 	.word	0x08005c01
 8005ba0:	08005c01 	.word	0x08005c01
 8005ba4:	2b6e      	cmp	r3, #110	; 0x6e
 8005ba6:	d809      	bhi.n	8005bbc <_scanf_float+0x138>
 8005ba8:	2b60      	cmp	r3, #96	; 0x60
 8005baa:	d8b2      	bhi.n	8005b12 <_scanf_float+0x8e>
 8005bac:	2b54      	cmp	r3, #84	; 0x54
 8005bae:	d077      	beq.n	8005ca0 <_scanf_float+0x21c>
 8005bb0:	2b59      	cmp	r3, #89	; 0x59
 8005bb2:	d199      	bne.n	8005ae8 <_scanf_float+0x64>
 8005bb4:	2d07      	cmp	r5, #7
 8005bb6:	d197      	bne.n	8005ae8 <_scanf_float+0x64>
 8005bb8:	2508      	movs	r5, #8
 8005bba:	e029      	b.n	8005c10 <_scanf_float+0x18c>
 8005bbc:	2b74      	cmp	r3, #116	; 0x74
 8005bbe:	d06f      	beq.n	8005ca0 <_scanf_float+0x21c>
 8005bc0:	2b79      	cmp	r3, #121	; 0x79
 8005bc2:	e7f6      	b.n	8005bb2 <_scanf_float+0x12e>
 8005bc4:	6821      	ldr	r1, [r4, #0]
 8005bc6:	05c8      	lsls	r0, r1, #23
 8005bc8:	d51a      	bpl.n	8005c00 <_scanf_float+0x17c>
 8005bca:	9b02      	ldr	r3, [sp, #8]
 8005bcc:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8005bd0:	6021      	str	r1, [r4, #0]
 8005bd2:	f109 0901 	add.w	r9, r9, #1
 8005bd6:	b11b      	cbz	r3, 8005be0 <_scanf_float+0x15c>
 8005bd8:	3b01      	subs	r3, #1
 8005bda:	3201      	adds	r2, #1
 8005bdc:	9302      	str	r3, [sp, #8]
 8005bde:	60a2      	str	r2, [r4, #8]
 8005be0:	68a3      	ldr	r3, [r4, #8]
 8005be2:	3b01      	subs	r3, #1
 8005be4:	60a3      	str	r3, [r4, #8]
 8005be6:	6923      	ldr	r3, [r4, #16]
 8005be8:	3301      	adds	r3, #1
 8005bea:	6123      	str	r3, [r4, #16]
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	3b01      	subs	r3, #1
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	607b      	str	r3, [r7, #4]
 8005bf4:	f340 8084 	ble.w	8005d00 <_scanf_float+0x27c>
 8005bf8:	683b      	ldr	r3, [r7, #0]
 8005bfa:	3301      	adds	r3, #1
 8005bfc:	603b      	str	r3, [r7, #0]
 8005bfe:	e766      	b.n	8005ace <_scanf_float+0x4a>
 8005c00:	eb1a 0f05 	cmn.w	sl, r5
 8005c04:	f47f af70 	bne.w	8005ae8 <_scanf_float+0x64>
 8005c08:	6822      	ldr	r2, [r4, #0]
 8005c0a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8005c0e:	6022      	str	r2, [r4, #0]
 8005c10:	f806 3b01 	strb.w	r3, [r6], #1
 8005c14:	e7e4      	b.n	8005be0 <_scanf_float+0x15c>
 8005c16:	6822      	ldr	r2, [r4, #0]
 8005c18:	0610      	lsls	r0, r2, #24
 8005c1a:	f57f af65 	bpl.w	8005ae8 <_scanf_float+0x64>
 8005c1e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005c22:	e7f4      	b.n	8005c0e <_scanf_float+0x18a>
 8005c24:	f1ba 0f00 	cmp.w	sl, #0
 8005c28:	d10e      	bne.n	8005c48 <_scanf_float+0x1c4>
 8005c2a:	f1b9 0f00 	cmp.w	r9, #0
 8005c2e:	d10e      	bne.n	8005c4e <_scanf_float+0x1ca>
 8005c30:	6822      	ldr	r2, [r4, #0]
 8005c32:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8005c36:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8005c3a:	d108      	bne.n	8005c4e <_scanf_float+0x1ca>
 8005c3c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005c40:	f04f 0a01 	mov.w	sl, #1
 8005c44:	6022      	str	r2, [r4, #0]
 8005c46:	e7e3      	b.n	8005c10 <_scanf_float+0x18c>
 8005c48:	f1ba 0f02 	cmp.w	sl, #2
 8005c4c:	d055      	beq.n	8005cfa <_scanf_float+0x276>
 8005c4e:	2d01      	cmp	r5, #1
 8005c50:	d002      	beq.n	8005c58 <_scanf_float+0x1d4>
 8005c52:	2d04      	cmp	r5, #4
 8005c54:	f47f af48 	bne.w	8005ae8 <_scanf_float+0x64>
 8005c58:	3501      	adds	r5, #1
 8005c5a:	b2ed      	uxtb	r5, r5
 8005c5c:	e7d8      	b.n	8005c10 <_scanf_float+0x18c>
 8005c5e:	f1ba 0f01 	cmp.w	sl, #1
 8005c62:	f47f af41 	bne.w	8005ae8 <_scanf_float+0x64>
 8005c66:	f04f 0a02 	mov.w	sl, #2
 8005c6a:	e7d1      	b.n	8005c10 <_scanf_float+0x18c>
 8005c6c:	b97d      	cbnz	r5, 8005c8e <_scanf_float+0x20a>
 8005c6e:	f1b9 0f00 	cmp.w	r9, #0
 8005c72:	f47f af3c 	bne.w	8005aee <_scanf_float+0x6a>
 8005c76:	6822      	ldr	r2, [r4, #0]
 8005c78:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8005c7c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8005c80:	f47f af39 	bne.w	8005af6 <_scanf_float+0x72>
 8005c84:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005c88:	2501      	movs	r5, #1
 8005c8a:	6022      	str	r2, [r4, #0]
 8005c8c:	e7c0      	b.n	8005c10 <_scanf_float+0x18c>
 8005c8e:	2d03      	cmp	r5, #3
 8005c90:	d0e2      	beq.n	8005c58 <_scanf_float+0x1d4>
 8005c92:	2d05      	cmp	r5, #5
 8005c94:	e7de      	b.n	8005c54 <_scanf_float+0x1d0>
 8005c96:	2d02      	cmp	r5, #2
 8005c98:	f47f af26 	bne.w	8005ae8 <_scanf_float+0x64>
 8005c9c:	2503      	movs	r5, #3
 8005c9e:	e7b7      	b.n	8005c10 <_scanf_float+0x18c>
 8005ca0:	2d06      	cmp	r5, #6
 8005ca2:	f47f af21 	bne.w	8005ae8 <_scanf_float+0x64>
 8005ca6:	2507      	movs	r5, #7
 8005ca8:	e7b2      	b.n	8005c10 <_scanf_float+0x18c>
 8005caa:	6822      	ldr	r2, [r4, #0]
 8005cac:	0591      	lsls	r1, r2, #22
 8005cae:	f57f af1b 	bpl.w	8005ae8 <_scanf_float+0x64>
 8005cb2:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8005cb6:	6022      	str	r2, [r4, #0]
 8005cb8:	f8cd 9004 	str.w	r9, [sp, #4]
 8005cbc:	e7a8      	b.n	8005c10 <_scanf_float+0x18c>
 8005cbe:	6822      	ldr	r2, [r4, #0]
 8005cc0:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8005cc4:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8005cc8:	d006      	beq.n	8005cd8 <_scanf_float+0x254>
 8005cca:	0550      	lsls	r0, r2, #21
 8005ccc:	f57f af0c 	bpl.w	8005ae8 <_scanf_float+0x64>
 8005cd0:	f1b9 0f00 	cmp.w	r9, #0
 8005cd4:	f43f af0f 	beq.w	8005af6 <_scanf_float+0x72>
 8005cd8:	0591      	lsls	r1, r2, #22
 8005cda:	bf58      	it	pl
 8005cdc:	9901      	ldrpl	r1, [sp, #4]
 8005cde:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005ce2:	bf58      	it	pl
 8005ce4:	eba9 0101 	subpl.w	r1, r9, r1
 8005ce8:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8005cec:	f04f 0900 	mov.w	r9, #0
 8005cf0:	bf58      	it	pl
 8005cf2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8005cf6:	6022      	str	r2, [r4, #0]
 8005cf8:	e78a      	b.n	8005c10 <_scanf_float+0x18c>
 8005cfa:	f04f 0a03 	mov.w	sl, #3
 8005cfe:	e787      	b.n	8005c10 <_scanf_float+0x18c>
 8005d00:	4639      	mov	r1, r7
 8005d02:	4640      	mov	r0, r8
 8005d04:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8005d08:	4798      	blx	r3
 8005d0a:	2800      	cmp	r0, #0
 8005d0c:	f43f aedf 	beq.w	8005ace <_scanf_float+0x4a>
 8005d10:	e6ea      	b.n	8005ae8 <_scanf_float+0x64>
 8005d12:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005d16:	463a      	mov	r2, r7
 8005d18:	4640      	mov	r0, r8
 8005d1a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005d1e:	4798      	blx	r3
 8005d20:	6923      	ldr	r3, [r4, #16]
 8005d22:	3b01      	subs	r3, #1
 8005d24:	6123      	str	r3, [r4, #16]
 8005d26:	e6ec      	b.n	8005b02 <_scanf_float+0x7e>
 8005d28:	1e6b      	subs	r3, r5, #1
 8005d2a:	2b06      	cmp	r3, #6
 8005d2c:	d825      	bhi.n	8005d7a <_scanf_float+0x2f6>
 8005d2e:	2d02      	cmp	r5, #2
 8005d30:	d836      	bhi.n	8005da0 <_scanf_float+0x31c>
 8005d32:	455e      	cmp	r6, fp
 8005d34:	f67f aee8 	bls.w	8005b08 <_scanf_float+0x84>
 8005d38:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005d3c:	463a      	mov	r2, r7
 8005d3e:	4640      	mov	r0, r8
 8005d40:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005d44:	4798      	blx	r3
 8005d46:	6923      	ldr	r3, [r4, #16]
 8005d48:	3b01      	subs	r3, #1
 8005d4a:	6123      	str	r3, [r4, #16]
 8005d4c:	e7f1      	b.n	8005d32 <_scanf_float+0x2ae>
 8005d4e:	9802      	ldr	r0, [sp, #8]
 8005d50:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005d54:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8005d58:	463a      	mov	r2, r7
 8005d5a:	9002      	str	r0, [sp, #8]
 8005d5c:	4640      	mov	r0, r8
 8005d5e:	4798      	blx	r3
 8005d60:	6923      	ldr	r3, [r4, #16]
 8005d62:	3b01      	subs	r3, #1
 8005d64:	6123      	str	r3, [r4, #16]
 8005d66:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005d6a:	fa5f fa8a 	uxtb.w	sl, sl
 8005d6e:	f1ba 0f02 	cmp.w	sl, #2
 8005d72:	d1ec      	bne.n	8005d4e <_scanf_float+0x2ca>
 8005d74:	3d03      	subs	r5, #3
 8005d76:	b2ed      	uxtb	r5, r5
 8005d78:	1b76      	subs	r6, r6, r5
 8005d7a:	6823      	ldr	r3, [r4, #0]
 8005d7c:	05da      	lsls	r2, r3, #23
 8005d7e:	d52f      	bpl.n	8005de0 <_scanf_float+0x35c>
 8005d80:	055b      	lsls	r3, r3, #21
 8005d82:	d510      	bpl.n	8005da6 <_scanf_float+0x322>
 8005d84:	455e      	cmp	r6, fp
 8005d86:	f67f aebf 	bls.w	8005b08 <_scanf_float+0x84>
 8005d8a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005d8e:	463a      	mov	r2, r7
 8005d90:	4640      	mov	r0, r8
 8005d92:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005d96:	4798      	blx	r3
 8005d98:	6923      	ldr	r3, [r4, #16]
 8005d9a:	3b01      	subs	r3, #1
 8005d9c:	6123      	str	r3, [r4, #16]
 8005d9e:	e7f1      	b.n	8005d84 <_scanf_float+0x300>
 8005da0:	46aa      	mov	sl, r5
 8005da2:	9602      	str	r6, [sp, #8]
 8005da4:	e7df      	b.n	8005d66 <_scanf_float+0x2e2>
 8005da6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8005daa:	6923      	ldr	r3, [r4, #16]
 8005dac:	2965      	cmp	r1, #101	; 0x65
 8005dae:	f103 33ff 	add.w	r3, r3, #4294967295
 8005db2:	f106 35ff 	add.w	r5, r6, #4294967295
 8005db6:	6123      	str	r3, [r4, #16]
 8005db8:	d00c      	beq.n	8005dd4 <_scanf_float+0x350>
 8005dba:	2945      	cmp	r1, #69	; 0x45
 8005dbc:	d00a      	beq.n	8005dd4 <_scanf_float+0x350>
 8005dbe:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005dc2:	463a      	mov	r2, r7
 8005dc4:	4640      	mov	r0, r8
 8005dc6:	4798      	blx	r3
 8005dc8:	6923      	ldr	r3, [r4, #16]
 8005dca:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8005dce:	3b01      	subs	r3, #1
 8005dd0:	1eb5      	subs	r5, r6, #2
 8005dd2:	6123      	str	r3, [r4, #16]
 8005dd4:	463a      	mov	r2, r7
 8005dd6:	4640      	mov	r0, r8
 8005dd8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005ddc:	4798      	blx	r3
 8005dde:	462e      	mov	r6, r5
 8005de0:	6825      	ldr	r5, [r4, #0]
 8005de2:	f015 0510 	ands.w	r5, r5, #16
 8005de6:	d159      	bne.n	8005e9c <_scanf_float+0x418>
 8005de8:	7035      	strb	r5, [r6, #0]
 8005dea:	6823      	ldr	r3, [r4, #0]
 8005dec:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005df0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005df4:	d11c      	bne.n	8005e30 <_scanf_float+0x3ac>
 8005df6:	9b01      	ldr	r3, [sp, #4]
 8005df8:	454b      	cmp	r3, r9
 8005dfa:	eba3 0209 	sub.w	r2, r3, r9
 8005dfe:	d124      	bne.n	8005e4a <_scanf_float+0x3c6>
 8005e00:	2200      	movs	r2, #0
 8005e02:	4659      	mov	r1, fp
 8005e04:	4640      	mov	r0, r8
 8005e06:	f000 fef7 	bl	8006bf8 <_strtod_r>
 8005e0a:	f8d4 c000 	ldr.w	ip, [r4]
 8005e0e:	9b03      	ldr	r3, [sp, #12]
 8005e10:	f01c 0f02 	tst.w	ip, #2
 8005e14:	4606      	mov	r6, r0
 8005e16:	460f      	mov	r7, r1
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	d021      	beq.n	8005e60 <_scanf_float+0x3dc>
 8005e1c:	9903      	ldr	r1, [sp, #12]
 8005e1e:	1d1a      	adds	r2, r3, #4
 8005e20:	600a      	str	r2, [r1, #0]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	e9c3 6700 	strd	r6, r7, [r3]
 8005e28:	68e3      	ldr	r3, [r4, #12]
 8005e2a:	3301      	adds	r3, #1
 8005e2c:	60e3      	str	r3, [r4, #12]
 8005e2e:	e66c      	b.n	8005b0a <_scanf_float+0x86>
 8005e30:	9b04      	ldr	r3, [sp, #16]
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d0e4      	beq.n	8005e00 <_scanf_float+0x37c>
 8005e36:	9905      	ldr	r1, [sp, #20]
 8005e38:	230a      	movs	r3, #10
 8005e3a:	462a      	mov	r2, r5
 8005e3c:	4640      	mov	r0, r8
 8005e3e:	3101      	adds	r1, #1
 8005e40:	f000 ff66 	bl	8006d10 <_strtol_r>
 8005e44:	9b04      	ldr	r3, [sp, #16]
 8005e46:	9e05      	ldr	r6, [sp, #20]
 8005e48:	1ac2      	subs	r2, r0, r3
 8005e4a:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8005e4e:	429e      	cmp	r6, r3
 8005e50:	bf28      	it	cs
 8005e52:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8005e56:	4630      	mov	r0, r6
 8005e58:	4911      	ldr	r1, [pc, #68]	; (8005ea0 <_scanf_float+0x41c>)
 8005e5a:	f000 f829 	bl	8005eb0 <siprintf>
 8005e5e:	e7cf      	b.n	8005e00 <_scanf_float+0x37c>
 8005e60:	f01c 0f04 	tst.w	ip, #4
 8005e64:	f103 0e04 	add.w	lr, r3, #4
 8005e68:	d003      	beq.n	8005e72 <_scanf_float+0x3ee>
 8005e6a:	9903      	ldr	r1, [sp, #12]
 8005e6c:	f8c1 e000 	str.w	lr, [r1]
 8005e70:	e7d7      	b.n	8005e22 <_scanf_float+0x39e>
 8005e72:	9a03      	ldr	r2, [sp, #12]
 8005e74:	f8c2 e000 	str.w	lr, [r2]
 8005e78:	f8d3 8000 	ldr.w	r8, [r3]
 8005e7c:	4602      	mov	r2, r0
 8005e7e:	460b      	mov	r3, r1
 8005e80:	f7fa fe30 	bl	8000ae4 <__aeabi_dcmpun>
 8005e84:	b128      	cbz	r0, 8005e92 <_scanf_float+0x40e>
 8005e86:	4807      	ldr	r0, [pc, #28]	; (8005ea4 <_scanf_float+0x420>)
 8005e88:	f000 f80e 	bl	8005ea8 <nanf>
 8005e8c:	f8c8 0000 	str.w	r0, [r8]
 8005e90:	e7ca      	b.n	8005e28 <_scanf_float+0x3a4>
 8005e92:	4630      	mov	r0, r6
 8005e94:	4639      	mov	r1, r7
 8005e96:	f7fa fe83 	bl	8000ba0 <__aeabi_d2f>
 8005e9a:	e7f7      	b.n	8005e8c <_scanf_float+0x408>
 8005e9c:	2500      	movs	r5, #0
 8005e9e:	e634      	b.n	8005b0a <_scanf_float+0x86>
 8005ea0:	0800a44a 	.word	0x0800a44a
 8005ea4:	0800a87b 	.word	0x0800a87b

08005ea8 <nanf>:
 8005ea8:	4800      	ldr	r0, [pc, #0]	; (8005eac <nanf+0x4>)
 8005eaa:	4770      	bx	lr
 8005eac:	7fc00000 	.word	0x7fc00000

08005eb0 <siprintf>:
 8005eb0:	b40e      	push	{r1, r2, r3}
 8005eb2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005eb6:	b500      	push	{lr}
 8005eb8:	b09c      	sub	sp, #112	; 0x70
 8005eba:	ab1d      	add	r3, sp, #116	; 0x74
 8005ebc:	9002      	str	r0, [sp, #8]
 8005ebe:	9006      	str	r0, [sp, #24]
 8005ec0:	9107      	str	r1, [sp, #28]
 8005ec2:	9104      	str	r1, [sp, #16]
 8005ec4:	4808      	ldr	r0, [pc, #32]	; (8005ee8 <siprintf+0x38>)
 8005ec6:	4909      	ldr	r1, [pc, #36]	; (8005eec <siprintf+0x3c>)
 8005ec8:	f853 2b04 	ldr.w	r2, [r3], #4
 8005ecc:	9105      	str	r1, [sp, #20]
 8005ece:	6800      	ldr	r0, [r0, #0]
 8005ed0:	a902      	add	r1, sp, #8
 8005ed2:	9301      	str	r3, [sp, #4]
 8005ed4:	f002 ff38 	bl	8008d48 <_svfiprintf_r>
 8005ed8:	2200      	movs	r2, #0
 8005eda:	9b02      	ldr	r3, [sp, #8]
 8005edc:	701a      	strb	r2, [r3, #0]
 8005ede:	b01c      	add	sp, #112	; 0x70
 8005ee0:	f85d eb04 	ldr.w	lr, [sp], #4
 8005ee4:	b003      	add	sp, #12
 8005ee6:	4770      	bx	lr
 8005ee8:	2000000c 	.word	0x2000000c
 8005eec:	ffff0208 	.word	0xffff0208

08005ef0 <siscanf>:
 8005ef0:	b40e      	push	{r1, r2, r3}
 8005ef2:	f44f 7201 	mov.w	r2, #516	; 0x204
 8005ef6:	b530      	push	{r4, r5, lr}
 8005ef8:	b09c      	sub	sp, #112	; 0x70
 8005efa:	ac1f      	add	r4, sp, #124	; 0x7c
 8005efc:	f854 5b04 	ldr.w	r5, [r4], #4
 8005f00:	f8ad 2014 	strh.w	r2, [sp, #20]
 8005f04:	9002      	str	r0, [sp, #8]
 8005f06:	9006      	str	r0, [sp, #24]
 8005f08:	f7fa f98e 	bl	8000228 <strlen>
 8005f0c:	4b0b      	ldr	r3, [pc, #44]	; (8005f3c <siscanf+0x4c>)
 8005f0e:	9003      	str	r0, [sp, #12]
 8005f10:	930b      	str	r3, [sp, #44]	; 0x2c
 8005f12:	2300      	movs	r3, #0
 8005f14:	930f      	str	r3, [sp, #60]	; 0x3c
 8005f16:	9314      	str	r3, [sp, #80]	; 0x50
 8005f18:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005f1c:	9007      	str	r0, [sp, #28]
 8005f1e:	4808      	ldr	r0, [pc, #32]	; (8005f40 <siscanf+0x50>)
 8005f20:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005f24:	462a      	mov	r2, r5
 8005f26:	4623      	mov	r3, r4
 8005f28:	a902      	add	r1, sp, #8
 8005f2a:	6800      	ldr	r0, [r0, #0]
 8005f2c:	9401      	str	r4, [sp, #4]
 8005f2e:	f003 f865 	bl	8008ffc <__ssvfiscanf_r>
 8005f32:	b01c      	add	sp, #112	; 0x70
 8005f34:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005f38:	b003      	add	sp, #12
 8005f3a:	4770      	bx	lr
 8005f3c:	08005f67 	.word	0x08005f67
 8005f40:	2000000c 	.word	0x2000000c

08005f44 <__sread>:
 8005f44:	b510      	push	{r4, lr}
 8005f46:	460c      	mov	r4, r1
 8005f48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f4c:	f003 fb1a 	bl	8009584 <_read_r>
 8005f50:	2800      	cmp	r0, #0
 8005f52:	bfab      	itete	ge
 8005f54:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005f56:	89a3      	ldrhlt	r3, [r4, #12]
 8005f58:	181b      	addge	r3, r3, r0
 8005f5a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005f5e:	bfac      	ite	ge
 8005f60:	6563      	strge	r3, [r4, #84]	; 0x54
 8005f62:	81a3      	strhlt	r3, [r4, #12]
 8005f64:	bd10      	pop	{r4, pc}

08005f66 <__seofread>:
 8005f66:	2000      	movs	r0, #0
 8005f68:	4770      	bx	lr

08005f6a <__swrite>:
 8005f6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f6e:	461f      	mov	r7, r3
 8005f70:	898b      	ldrh	r3, [r1, #12]
 8005f72:	4605      	mov	r5, r0
 8005f74:	05db      	lsls	r3, r3, #23
 8005f76:	460c      	mov	r4, r1
 8005f78:	4616      	mov	r6, r2
 8005f7a:	d505      	bpl.n	8005f88 <__swrite+0x1e>
 8005f7c:	2302      	movs	r3, #2
 8005f7e:	2200      	movs	r2, #0
 8005f80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f84:	f002 f8d0 	bl	8008128 <_lseek_r>
 8005f88:	89a3      	ldrh	r3, [r4, #12]
 8005f8a:	4632      	mov	r2, r6
 8005f8c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005f90:	81a3      	strh	r3, [r4, #12]
 8005f92:	4628      	mov	r0, r5
 8005f94:	463b      	mov	r3, r7
 8005f96:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005f9a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005f9e:	f000 beb9 	b.w	8006d14 <_write_r>

08005fa2 <__sseek>:
 8005fa2:	b510      	push	{r4, lr}
 8005fa4:	460c      	mov	r4, r1
 8005fa6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005faa:	f002 f8bd 	bl	8008128 <_lseek_r>
 8005fae:	1c43      	adds	r3, r0, #1
 8005fb0:	89a3      	ldrh	r3, [r4, #12]
 8005fb2:	bf15      	itete	ne
 8005fb4:	6560      	strne	r0, [r4, #84]	; 0x54
 8005fb6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005fba:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005fbe:	81a3      	strheq	r3, [r4, #12]
 8005fc0:	bf18      	it	ne
 8005fc2:	81a3      	strhne	r3, [r4, #12]
 8005fc4:	bd10      	pop	{r4, pc}

08005fc6 <__sclose>:
 8005fc6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005fca:	f000 beb5 	b.w	8006d38 <_close_r>

08005fce <sulp>:
 8005fce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005fd2:	460f      	mov	r7, r1
 8005fd4:	4690      	mov	r8, r2
 8005fd6:	f002 fc5f 	bl	8008898 <__ulp>
 8005fda:	4604      	mov	r4, r0
 8005fdc:	460d      	mov	r5, r1
 8005fde:	f1b8 0f00 	cmp.w	r8, #0
 8005fe2:	d011      	beq.n	8006008 <sulp+0x3a>
 8005fe4:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8005fe8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	dd0b      	ble.n	8006008 <sulp+0x3a>
 8005ff0:	2400      	movs	r4, #0
 8005ff2:	051b      	lsls	r3, r3, #20
 8005ff4:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8005ff8:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8005ffc:	4622      	mov	r2, r4
 8005ffe:	462b      	mov	r3, r5
 8006000:	f7fa fad6 	bl	80005b0 <__aeabi_dmul>
 8006004:	4604      	mov	r4, r0
 8006006:	460d      	mov	r5, r1
 8006008:	4620      	mov	r0, r4
 800600a:	4629      	mov	r1, r5
 800600c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08006010 <_strtod_l>:
 8006010:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006014:	469b      	mov	fp, r3
 8006016:	2300      	movs	r3, #0
 8006018:	b0a1      	sub	sp, #132	; 0x84
 800601a:	931c      	str	r3, [sp, #112]	; 0x70
 800601c:	4ba1      	ldr	r3, [pc, #644]	; (80062a4 <_strtod_l+0x294>)
 800601e:	4682      	mov	sl, r0
 8006020:	681f      	ldr	r7, [r3, #0]
 8006022:	460e      	mov	r6, r1
 8006024:	4638      	mov	r0, r7
 8006026:	9217      	str	r2, [sp, #92]	; 0x5c
 8006028:	f7fa f8fe 	bl	8000228 <strlen>
 800602c:	f04f 0800 	mov.w	r8, #0
 8006030:	4604      	mov	r4, r0
 8006032:	f04f 0900 	mov.w	r9, #0
 8006036:	961b      	str	r6, [sp, #108]	; 0x6c
 8006038:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800603a:	781a      	ldrb	r2, [r3, #0]
 800603c:	2a2b      	cmp	r2, #43	; 0x2b
 800603e:	d04c      	beq.n	80060da <_strtod_l+0xca>
 8006040:	d83a      	bhi.n	80060b8 <_strtod_l+0xa8>
 8006042:	2a0d      	cmp	r2, #13
 8006044:	d833      	bhi.n	80060ae <_strtod_l+0x9e>
 8006046:	2a08      	cmp	r2, #8
 8006048:	d833      	bhi.n	80060b2 <_strtod_l+0xa2>
 800604a:	2a00      	cmp	r2, #0
 800604c:	d03d      	beq.n	80060ca <_strtod_l+0xba>
 800604e:	2300      	movs	r3, #0
 8006050:	930c      	str	r3, [sp, #48]	; 0x30
 8006052:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8006054:	782b      	ldrb	r3, [r5, #0]
 8006056:	2b30      	cmp	r3, #48	; 0x30
 8006058:	f040 80af 	bne.w	80061ba <_strtod_l+0x1aa>
 800605c:	786b      	ldrb	r3, [r5, #1]
 800605e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8006062:	2b58      	cmp	r3, #88	; 0x58
 8006064:	d16c      	bne.n	8006140 <_strtod_l+0x130>
 8006066:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006068:	4650      	mov	r0, sl
 800606a:	9301      	str	r3, [sp, #4]
 800606c:	ab1c      	add	r3, sp, #112	; 0x70
 800606e:	9300      	str	r3, [sp, #0]
 8006070:	4a8d      	ldr	r2, [pc, #564]	; (80062a8 <_strtod_l+0x298>)
 8006072:	f8cd b008 	str.w	fp, [sp, #8]
 8006076:	ab1d      	add	r3, sp, #116	; 0x74
 8006078:	a91b      	add	r1, sp, #108	; 0x6c
 800607a:	f001 fd53 	bl	8007b24 <__gethex>
 800607e:	f010 0607 	ands.w	r6, r0, #7
 8006082:	4604      	mov	r4, r0
 8006084:	d005      	beq.n	8006092 <_strtod_l+0x82>
 8006086:	2e06      	cmp	r6, #6
 8006088:	d129      	bne.n	80060de <_strtod_l+0xce>
 800608a:	2300      	movs	r3, #0
 800608c:	3501      	adds	r5, #1
 800608e:	951b      	str	r5, [sp, #108]	; 0x6c
 8006090:	930c      	str	r3, [sp, #48]	; 0x30
 8006092:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006094:	2b00      	cmp	r3, #0
 8006096:	f040 8596 	bne.w	8006bc6 <_strtod_l+0xbb6>
 800609a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800609c:	b1d3      	cbz	r3, 80060d4 <_strtod_l+0xc4>
 800609e:	4642      	mov	r2, r8
 80060a0:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80060a4:	4610      	mov	r0, r2
 80060a6:	4619      	mov	r1, r3
 80060a8:	b021      	add	sp, #132	; 0x84
 80060aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060ae:	2a20      	cmp	r2, #32
 80060b0:	d1cd      	bne.n	800604e <_strtod_l+0x3e>
 80060b2:	3301      	adds	r3, #1
 80060b4:	931b      	str	r3, [sp, #108]	; 0x6c
 80060b6:	e7bf      	b.n	8006038 <_strtod_l+0x28>
 80060b8:	2a2d      	cmp	r2, #45	; 0x2d
 80060ba:	d1c8      	bne.n	800604e <_strtod_l+0x3e>
 80060bc:	2201      	movs	r2, #1
 80060be:	920c      	str	r2, [sp, #48]	; 0x30
 80060c0:	1c5a      	adds	r2, r3, #1
 80060c2:	921b      	str	r2, [sp, #108]	; 0x6c
 80060c4:	785b      	ldrb	r3, [r3, #1]
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d1c3      	bne.n	8006052 <_strtod_l+0x42>
 80060ca:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80060cc:	961b      	str	r6, [sp, #108]	; 0x6c
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	f040 8577 	bne.w	8006bc2 <_strtod_l+0xbb2>
 80060d4:	4642      	mov	r2, r8
 80060d6:	464b      	mov	r3, r9
 80060d8:	e7e4      	b.n	80060a4 <_strtod_l+0x94>
 80060da:	2200      	movs	r2, #0
 80060dc:	e7ef      	b.n	80060be <_strtod_l+0xae>
 80060de:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80060e0:	b13a      	cbz	r2, 80060f2 <_strtod_l+0xe2>
 80060e2:	2135      	movs	r1, #53	; 0x35
 80060e4:	a81e      	add	r0, sp, #120	; 0x78
 80060e6:	f002 fcdb 	bl	8008aa0 <__copybits>
 80060ea:	4650      	mov	r0, sl
 80060ec:	991c      	ldr	r1, [sp, #112]	; 0x70
 80060ee:	f002 f8a3 	bl	8008238 <_Bfree>
 80060f2:	3e01      	subs	r6, #1
 80060f4:	2e05      	cmp	r6, #5
 80060f6:	d807      	bhi.n	8006108 <_strtod_l+0xf8>
 80060f8:	e8df f006 	tbb	[pc, r6]
 80060fc:	1d180b0e 	.word	0x1d180b0e
 8006100:	030e      	.short	0x030e
 8006102:	f04f 0900 	mov.w	r9, #0
 8006106:	46c8      	mov	r8, r9
 8006108:	0721      	lsls	r1, r4, #28
 800610a:	d5c2      	bpl.n	8006092 <_strtod_l+0x82>
 800610c:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8006110:	e7bf      	b.n	8006092 <_strtod_l+0x82>
 8006112:	e9dd 891e 	ldrd	r8, r9, [sp, #120]	; 0x78
 8006116:	e7f7      	b.n	8006108 <_strtod_l+0xf8>
 8006118:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800611a:	e9dd 831e 	ldrd	r8, r3, [sp, #120]	; 0x78
 800611e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8006122:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8006126:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800612a:	e7ed      	b.n	8006108 <_strtod_l+0xf8>
 800612c:	f04f 0800 	mov.w	r8, #0
 8006130:	f8df 9178 	ldr.w	r9, [pc, #376]	; 80062ac <_strtod_l+0x29c>
 8006134:	e7e8      	b.n	8006108 <_strtod_l+0xf8>
 8006136:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800613a:	f04f 38ff 	mov.w	r8, #4294967295
 800613e:	e7e3      	b.n	8006108 <_strtod_l+0xf8>
 8006140:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006142:	1c5a      	adds	r2, r3, #1
 8006144:	921b      	str	r2, [sp, #108]	; 0x6c
 8006146:	785b      	ldrb	r3, [r3, #1]
 8006148:	2b30      	cmp	r3, #48	; 0x30
 800614a:	d0f9      	beq.n	8006140 <_strtod_l+0x130>
 800614c:	2b00      	cmp	r3, #0
 800614e:	d0a0      	beq.n	8006092 <_strtod_l+0x82>
 8006150:	2301      	movs	r3, #1
 8006152:	9307      	str	r3, [sp, #28]
 8006154:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006156:	220a      	movs	r2, #10
 8006158:	9308      	str	r3, [sp, #32]
 800615a:	2300      	movs	r3, #0
 800615c:	469b      	mov	fp, r3
 800615e:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8006162:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8006164:	7805      	ldrb	r5, [r0, #0]
 8006166:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 800616a:	b2d9      	uxtb	r1, r3
 800616c:	2909      	cmp	r1, #9
 800616e:	d926      	bls.n	80061be <_strtod_l+0x1ae>
 8006170:	4622      	mov	r2, r4
 8006172:	4639      	mov	r1, r7
 8006174:	f003 fa68 	bl	8009648 <strncmp>
 8006178:	2800      	cmp	r0, #0
 800617a:	d032      	beq.n	80061e2 <_strtod_l+0x1d2>
 800617c:	2000      	movs	r0, #0
 800617e:	462b      	mov	r3, r5
 8006180:	465c      	mov	r4, fp
 8006182:	4602      	mov	r2, r0
 8006184:	9004      	str	r0, [sp, #16]
 8006186:	2b65      	cmp	r3, #101	; 0x65
 8006188:	d001      	beq.n	800618e <_strtod_l+0x17e>
 800618a:	2b45      	cmp	r3, #69	; 0x45
 800618c:	d113      	bne.n	80061b6 <_strtod_l+0x1a6>
 800618e:	b91c      	cbnz	r4, 8006198 <_strtod_l+0x188>
 8006190:	9b07      	ldr	r3, [sp, #28]
 8006192:	4303      	orrs	r3, r0
 8006194:	d099      	beq.n	80060ca <_strtod_l+0xba>
 8006196:	2400      	movs	r4, #0
 8006198:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 800619a:	1c73      	adds	r3, r6, #1
 800619c:	931b      	str	r3, [sp, #108]	; 0x6c
 800619e:	7873      	ldrb	r3, [r6, #1]
 80061a0:	2b2b      	cmp	r3, #43	; 0x2b
 80061a2:	d078      	beq.n	8006296 <_strtod_l+0x286>
 80061a4:	2b2d      	cmp	r3, #45	; 0x2d
 80061a6:	d07b      	beq.n	80062a0 <_strtod_l+0x290>
 80061a8:	2700      	movs	r7, #0
 80061aa:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80061ae:	2909      	cmp	r1, #9
 80061b0:	f240 8082 	bls.w	80062b8 <_strtod_l+0x2a8>
 80061b4:	961b      	str	r6, [sp, #108]	; 0x6c
 80061b6:	2500      	movs	r5, #0
 80061b8:	e09e      	b.n	80062f8 <_strtod_l+0x2e8>
 80061ba:	2300      	movs	r3, #0
 80061bc:	e7c9      	b.n	8006152 <_strtod_l+0x142>
 80061be:	f1bb 0f08 	cmp.w	fp, #8
 80061c2:	bfd5      	itete	le
 80061c4:	9906      	ldrle	r1, [sp, #24]
 80061c6:	9905      	ldrgt	r1, [sp, #20]
 80061c8:	fb02 3301 	mlale	r3, r2, r1, r3
 80061cc:	fb02 3301 	mlagt	r3, r2, r1, r3
 80061d0:	f100 0001 	add.w	r0, r0, #1
 80061d4:	bfd4      	ite	le
 80061d6:	9306      	strle	r3, [sp, #24]
 80061d8:	9305      	strgt	r3, [sp, #20]
 80061da:	f10b 0b01 	add.w	fp, fp, #1
 80061de:	901b      	str	r0, [sp, #108]	; 0x6c
 80061e0:	e7bf      	b.n	8006162 <_strtod_l+0x152>
 80061e2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80061e4:	191a      	adds	r2, r3, r4
 80061e6:	921b      	str	r2, [sp, #108]	; 0x6c
 80061e8:	5d1b      	ldrb	r3, [r3, r4]
 80061ea:	f1bb 0f00 	cmp.w	fp, #0
 80061ee:	d036      	beq.n	800625e <_strtod_l+0x24e>
 80061f0:	465c      	mov	r4, fp
 80061f2:	9004      	str	r0, [sp, #16]
 80061f4:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80061f8:	2a09      	cmp	r2, #9
 80061fa:	d912      	bls.n	8006222 <_strtod_l+0x212>
 80061fc:	2201      	movs	r2, #1
 80061fe:	e7c2      	b.n	8006186 <_strtod_l+0x176>
 8006200:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006202:	3001      	adds	r0, #1
 8006204:	1c5a      	adds	r2, r3, #1
 8006206:	921b      	str	r2, [sp, #108]	; 0x6c
 8006208:	785b      	ldrb	r3, [r3, #1]
 800620a:	2b30      	cmp	r3, #48	; 0x30
 800620c:	d0f8      	beq.n	8006200 <_strtod_l+0x1f0>
 800620e:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8006212:	2a08      	cmp	r2, #8
 8006214:	f200 84dc 	bhi.w	8006bd0 <_strtod_l+0xbc0>
 8006218:	9004      	str	r0, [sp, #16]
 800621a:	2000      	movs	r0, #0
 800621c:	4604      	mov	r4, r0
 800621e:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8006220:	9208      	str	r2, [sp, #32]
 8006222:	3b30      	subs	r3, #48	; 0x30
 8006224:	f100 0201 	add.w	r2, r0, #1
 8006228:	d013      	beq.n	8006252 <_strtod_l+0x242>
 800622a:	9904      	ldr	r1, [sp, #16]
 800622c:	1905      	adds	r5, r0, r4
 800622e:	4411      	add	r1, r2
 8006230:	9104      	str	r1, [sp, #16]
 8006232:	4622      	mov	r2, r4
 8006234:	210a      	movs	r1, #10
 8006236:	42aa      	cmp	r2, r5
 8006238:	d113      	bne.n	8006262 <_strtod_l+0x252>
 800623a:	1822      	adds	r2, r4, r0
 800623c:	2a08      	cmp	r2, #8
 800623e:	f104 0401 	add.w	r4, r4, #1
 8006242:	4404      	add	r4, r0
 8006244:	dc1b      	bgt.n	800627e <_strtod_l+0x26e>
 8006246:	220a      	movs	r2, #10
 8006248:	9906      	ldr	r1, [sp, #24]
 800624a:	fb02 3301 	mla	r3, r2, r1, r3
 800624e:	9306      	str	r3, [sp, #24]
 8006250:	2200      	movs	r2, #0
 8006252:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006254:	4610      	mov	r0, r2
 8006256:	1c59      	adds	r1, r3, #1
 8006258:	911b      	str	r1, [sp, #108]	; 0x6c
 800625a:	785b      	ldrb	r3, [r3, #1]
 800625c:	e7ca      	b.n	80061f4 <_strtod_l+0x1e4>
 800625e:	4658      	mov	r0, fp
 8006260:	e7d3      	b.n	800620a <_strtod_l+0x1fa>
 8006262:	2a08      	cmp	r2, #8
 8006264:	dc04      	bgt.n	8006270 <_strtod_l+0x260>
 8006266:	9f06      	ldr	r7, [sp, #24]
 8006268:	434f      	muls	r7, r1
 800626a:	9706      	str	r7, [sp, #24]
 800626c:	3201      	adds	r2, #1
 800626e:	e7e2      	b.n	8006236 <_strtod_l+0x226>
 8006270:	1c57      	adds	r7, r2, #1
 8006272:	2f10      	cmp	r7, #16
 8006274:	bfde      	ittt	le
 8006276:	9f05      	ldrle	r7, [sp, #20]
 8006278:	434f      	mulle	r7, r1
 800627a:	9705      	strle	r7, [sp, #20]
 800627c:	e7f6      	b.n	800626c <_strtod_l+0x25c>
 800627e:	2c10      	cmp	r4, #16
 8006280:	bfdf      	itttt	le
 8006282:	220a      	movle	r2, #10
 8006284:	9905      	ldrle	r1, [sp, #20]
 8006286:	fb02 3301 	mlale	r3, r2, r1, r3
 800628a:	9305      	strle	r3, [sp, #20]
 800628c:	e7e0      	b.n	8006250 <_strtod_l+0x240>
 800628e:	2300      	movs	r3, #0
 8006290:	2201      	movs	r2, #1
 8006292:	9304      	str	r3, [sp, #16]
 8006294:	e77c      	b.n	8006190 <_strtod_l+0x180>
 8006296:	2700      	movs	r7, #0
 8006298:	1cb3      	adds	r3, r6, #2
 800629a:	931b      	str	r3, [sp, #108]	; 0x6c
 800629c:	78b3      	ldrb	r3, [r6, #2]
 800629e:	e784      	b.n	80061aa <_strtod_l+0x19a>
 80062a0:	2701      	movs	r7, #1
 80062a2:	e7f9      	b.n	8006298 <_strtod_l+0x288>
 80062a4:	0800a6a0 	.word	0x0800a6a0
 80062a8:	0800a450 	.word	0x0800a450
 80062ac:	7ff00000 	.word	0x7ff00000
 80062b0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80062b2:	1c59      	adds	r1, r3, #1
 80062b4:	911b      	str	r1, [sp, #108]	; 0x6c
 80062b6:	785b      	ldrb	r3, [r3, #1]
 80062b8:	2b30      	cmp	r3, #48	; 0x30
 80062ba:	d0f9      	beq.n	80062b0 <_strtod_l+0x2a0>
 80062bc:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 80062c0:	2908      	cmp	r1, #8
 80062c2:	f63f af78 	bhi.w	80061b6 <_strtod_l+0x1a6>
 80062c6:	f04f 0e0a 	mov.w	lr, #10
 80062ca:	f1a3 0c30 	sub.w	ip, r3, #48	; 0x30
 80062ce:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80062d0:	9309      	str	r3, [sp, #36]	; 0x24
 80062d2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80062d4:	1c59      	adds	r1, r3, #1
 80062d6:	911b      	str	r1, [sp, #108]	; 0x6c
 80062d8:	785b      	ldrb	r3, [r3, #1]
 80062da:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
 80062de:	2d09      	cmp	r5, #9
 80062e0:	d935      	bls.n	800634e <_strtod_l+0x33e>
 80062e2:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80062e4:	1b49      	subs	r1, r1, r5
 80062e6:	2908      	cmp	r1, #8
 80062e8:	f644 651f 	movw	r5, #19999	; 0x4e1f
 80062ec:	dc02      	bgt.n	80062f4 <_strtod_l+0x2e4>
 80062ee:	4565      	cmp	r5, ip
 80062f0:	bfa8      	it	ge
 80062f2:	4665      	movge	r5, ip
 80062f4:	b107      	cbz	r7, 80062f8 <_strtod_l+0x2e8>
 80062f6:	426d      	negs	r5, r5
 80062f8:	2c00      	cmp	r4, #0
 80062fa:	d14c      	bne.n	8006396 <_strtod_l+0x386>
 80062fc:	9907      	ldr	r1, [sp, #28]
 80062fe:	4301      	orrs	r1, r0
 8006300:	f47f aec7 	bne.w	8006092 <_strtod_l+0x82>
 8006304:	2a00      	cmp	r2, #0
 8006306:	f47f aee0 	bne.w	80060ca <_strtod_l+0xba>
 800630a:	2b69      	cmp	r3, #105	; 0x69
 800630c:	d026      	beq.n	800635c <_strtod_l+0x34c>
 800630e:	dc23      	bgt.n	8006358 <_strtod_l+0x348>
 8006310:	2b49      	cmp	r3, #73	; 0x49
 8006312:	d023      	beq.n	800635c <_strtod_l+0x34c>
 8006314:	2b4e      	cmp	r3, #78	; 0x4e
 8006316:	f47f aed8 	bne.w	80060ca <_strtod_l+0xba>
 800631a:	499c      	ldr	r1, [pc, #624]	; (800658c <_strtod_l+0x57c>)
 800631c:	a81b      	add	r0, sp, #108	; 0x6c
 800631e:	f001 fe4f 	bl	8007fc0 <__match>
 8006322:	2800      	cmp	r0, #0
 8006324:	f43f aed1 	beq.w	80060ca <_strtod_l+0xba>
 8006328:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800632a:	781b      	ldrb	r3, [r3, #0]
 800632c:	2b28      	cmp	r3, #40	; 0x28
 800632e:	d12c      	bne.n	800638a <_strtod_l+0x37a>
 8006330:	4997      	ldr	r1, [pc, #604]	; (8006590 <_strtod_l+0x580>)
 8006332:	aa1e      	add	r2, sp, #120	; 0x78
 8006334:	a81b      	add	r0, sp, #108	; 0x6c
 8006336:	f001 fe57 	bl	8007fe8 <__hexnan>
 800633a:	2805      	cmp	r0, #5
 800633c:	d125      	bne.n	800638a <_strtod_l+0x37a>
 800633e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006340:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 8006344:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8006348:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800634c:	e6a1      	b.n	8006092 <_strtod_l+0x82>
 800634e:	fb0e 3c0c 	mla	ip, lr, ip, r3
 8006352:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 8006356:	e7bc      	b.n	80062d2 <_strtod_l+0x2c2>
 8006358:	2b6e      	cmp	r3, #110	; 0x6e
 800635a:	e7dc      	b.n	8006316 <_strtod_l+0x306>
 800635c:	498d      	ldr	r1, [pc, #564]	; (8006594 <_strtod_l+0x584>)
 800635e:	a81b      	add	r0, sp, #108	; 0x6c
 8006360:	f001 fe2e 	bl	8007fc0 <__match>
 8006364:	2800      	cmp	r0, #0
 8006366:	f43f aeb0 	beq.w	80060ca <_strtod_l+0xba>
 800636a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800636c:	498a      	ldr	r1, [pc, #552]	; (8006598 <_strtod_l+0x588>)
 800636e:	3b01      	subs	r3, #1
 8006370:	a81b      	add	r0, sp, #108	; 0x6c
 8006372:	931b      	str	r3, [sp, #108]	; 0x6c
 8006374:	f001 fe24 	bl	8007fc0 <__match>
 8006378:	b910      	cbnz	r0, 8006380 <_strtod_l+0x370>
 800637a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800637c:	3301      	adds	r3, #1
 800637e:	931b      	str	r3, [sp, #108]	; 0x6c
 8006380:	f04f 0800 	mov.w	r8, #0
 8006384:	f8df 9220 	ldr.w	r9, [pc, #544]	; 80065a8 <_strtod_l+0x598>
 8006388:	e683      	b.n	8006092 <_strtod_l+0x82>
 800638a:	4884      	ldr	r0, [pc, #528]	; (800659c <_strtod_l+0x58c>)
 800638c:	f003 f90c 	bl	80095a8 <nan>
 8006390:	4680      	mov	r8, r0
 8006392:	4689      	mov	r9, r1
 8006394:	e67d      	b.n	8006092 <_strtod_l+0x82>
 8006396:	9b04      	ldr	r3, [sp, #16]
 8006398:	f1bb 0f00 	cmp.w	fp, #0
 800639c:	bf08      	it	eq
 800639e:	46a3      	moveq	fp, r4
 80063a0:	1aeb      	subs	r3, r5, r3
 80063a2:	2c10      	cmp	r4, #16
 80063a4:	9806      	ldr	r0, [sp, #24]
 80063a6:	4626      	mov	r6, r4
 80063a8:	9307      	str	r3, [sp, #28]
 80063aa:	bfa8      	it	ge
 80063ac:	2610      	movge	r6, #16
 80063ae:	f7fa f885 	bl	80004bc <__aeabi_ui2d>
 80063b2:	2c09      	cmp	r4, #9
 80063b4:	4680      	mov	r8, r0
 80063b6:	4689      	mov	r9, r1
 80063b8:	dd13      	ble.n	80063e2 <_strtod_l+0x3d2>
 80063ba:	4b79      	ldr	r3, [pc, #484]	; (80065a0 <_strtod_l+0x590>)
 80063bc:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80063c0:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80063c4:	f7fa f8f4 	bl	80005b0 <__aeabi_dmul>
 80063c8:	4680      	mov	r8, r0
 80063ca:	9805      	ldr	r0, [sp, #20]
 80063cc:	4689      	mov	r9, r1
 80063ce:	f7fa f875 	bl	80004bc <__aeabi_ui2d>
 80063d2:	4602      	mov	r2, r0
 80063d4:	460b      	mov	r3, r1
 80063d6:	4640      	mov	r0, r8
 80063d8:	4649      	mov	r1, r9
 80063da:	f7f9 ff33 	bl	8000244 <__adddf3>
 80063de:	4680      	mov	r8, r0
 80063e0:	4689      	mov	r9, r1
 80063e2:	2c0f      	cmp	r4, #15
 80063e4:	dc36      	bgt.n	8006454 <_strtod_l+0x444>
 80063e6:	9b07      	ldr	r3, [sp, #28]
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	f43f ae52 	beq.w	8006092 <_strtod_l+0x82>
 80063ee:	dd22      	ble.n	8006436 <_strtod_l+0x426>
 80063f0:	2b16      	cmp	r3, #22
 80063f2:	dc09      	bgt.n	8006408 <_strtod_l+0x3f8>
 80063f4:	4c6a      	ldr	r4, [pc, #424]	; (80065a0 <_strtod_l+0x590>)
 80063f6:	4642      	mov	r2, r8
 80063f8:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
 80063fc:	464b      	mov	r3, r9
 80063fe:	e9d4 0100 	ldrd	r0, r1, [r4]
 8006402:	f7fa f8d5 	bl	80005b0 <__aeabi_dmul>
 8006406:	e7c3      	b.n	8006390 <_strtod_l+0x380>
 8006408:	9a07      	ldr	r2, [sp, #28]
 800640a:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800640e:	4293      	cmp	r3, r2
 8006410:	db20      	blt.n	8006454 <_strtod_l+0x444>
 8006412:	4d63      	ldr	r5, [pc, #396]	; (80065a0 <_strtod_l+0x590>)
 8006414:	f1c4 040f 	rsb	r4, r4, #15
 8006418:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 800641c:	4642      	mov	r2, r8
 800641e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006422:	464b      	mov	r3, r9
 8006424:	f7fa f8c4 	bl	80005b0 <__aeabi_dmul>
 8006428:	9b07      	ldr	r3, [sp, #28]
 800642a:	1b1c      	subs	r4, r3, r4
 800642c:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8006430:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006434:	e7e5      	b.n	8006402 <_strtod_l+0x3f2>
 8006436:	9b07      	ldr	r3, [sp, #28]
 8006438:	3316      	adds	r3, #22
 800643a:	db0b      	blt.n	8006454 <_strtod_l+0x444>
 800643c:	9b04      	ldr	r3, [sp, #16]
 800643e:	4a58      	ldr	r2, [pc, #352]	; (80065a0 <_strtod_l+0x590>)
 8006440:	1b5d      	subs	r5, r3, r5
 8006442:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 8006446:	4640      	mov	r0, r8
 8006448:	e9d5 2300 	ldrd	r2, r3, [r5]
 800644c:	4649      	mov	r1, r9
 800644e:	f7fa f9d9 	bl	8000804 <__aeabi_ddiv>
 8006452:	e79d      	b.n	8006390 <_strtod_l+0x380>
 8006454:	9b07      	ldr	r3, [sp, #28]
 8006456:	1ba6      	subs	r6, r4, r6
 8006458:	441e      	add	r6, r3
 800645a:	2e00      	cmp	r6, #0
 800645c:	dd71      	ble.n	8006542 <_strtod_l+0x532>
 800645e:	f016 030f 	ands.w	r3, r6, #15
 8006462:	d00a      	beq.n	800647a <_strtod_l+0x46a>
 8006464:	494e      	ldr	r1, [pc, #312]	; (80065a0 <_strtod_l+0x590>)
 8006466:	4642      	mov	r2, r8
 8006468:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800646c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006470:	464b      	mov	r3, r9
 8006472:	f7fa f89d 	bl	80005b0 <__aeabi_dmul>
 8006476:	4680      	mov	r8, r0
 8006478:	4689      	mov	r9, r1
 800647a:	f036 060f 	bics.w	r6, r6, #15
 800647e:	d050      	beq.n	8006522 <_strtod_l+0x512>
 8006480:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 8006484:	dd27      	ble.n	80064d6 <_strtod_l+0x4c6>
 8006486:	f04f 0b00 	mov.w	fp, #0
 800648a:	f8cd b010 	str.w	fp, [sp, #16]
 800648e:	f8cd b020 	str.w	fp, [sp, #32]
 8006492:	f8cd b018 	str.w	fp, [sp, #24]
 8006496:	2322      	movs	r3, #34	; 0x22
 8006498:	f04f 0800 	mov.w	r8, #0
 800649c:	f8df 9108 	ldr.w	r9, [pc, #264]	; 80065a8 <_strtod_l+0x598>
 80064a0:	f8ca 3000 	str.w	r3, [sl]
 80064a4:	9b08      	ldr	r3, [sp, #32]
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	f43f adf3 	beq.w	8006092 <_strtod_l+0x82>
 80064ac:	4650      	mov	r0, sl
 80064ae:	991c      	ldr	r1, [sp, #112]	; 0x70
 80064b0:	f001 fec2 	bl	8008238 <_Bfree>
 80064b4:	4650      	mov	r0, sl
 80064b6:	9906      	ldr	r1, [sp, #24]
 80064b8:	f001 febe 	bl	8008238 <_Bfree>
 80064bc:	4650      	mov	r0, sl
 80064be:	9904      	ldr	r1, [sp, #16]
 80064c0:	f001 feba 	bl	8008238 <_Bfree>
 80064c4:	4650      	mov	r0, sl
 80064c6:	9908      	ldr	r1, [sp, #32]
 80064c8:	f001 feb6 	bl	8008238 <_Bfree>
 80064cc:	4659      	mov	r1, fp
 80064ce:	4650      	mov	r0, sl
 80064d0:	f001 feb2 	bl	8008238 <_Bfree>
 80064d4:	e5dd      	b.n	8006092 <_strtod_l+0x82>
 80064d6:	2300      	movs	r3, #0
 80064d8:	4640      	mov	r0, r8
 80064da:	4649      	mov	r1, r9
 80064dc:	461f      	mov	r7, r3
 80064de:	1136      	asrs	r6, r6, #4
 80064e0:	2e01      	cmp	r6, #1
 80064e2:	dc21      	bgt.n	8006528 <_strtod_l+0x518>
 80064e4:	b10b      	cbz	r3, 80064ea <_strtod_l+0x4da>
 80064e6:	4680      	mov	r8, r0
 80064e8:	4689      	mov	r9, r1
 80064ea:	4b2e      	ldr	r3, [pc, #184]	; (80065a4 <_strtod_l+0x594>)
 80064ec:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 80064f0:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 80064f4:	4642      	mov	r2, r8
 80064f6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80064fa:	464b      	mov	r3, r9
 80064fc:	f7fa f858 	bl	80005b0 <__aeabi_dmul>
 8006500:	4b29      	ldr	r3, [pc, #164]	; (80065a8 <_strtod_l+0x598>)
 8006502:	460a      	mov	r2, r1
 8006504:	400b      	ands	r3, r1
 8006506:	4929      	ldr	r1, [pc, #164]	; (80065ac <_strtod_l+0x59c>)
 8006508:	4680      	mov	r8, r0
 800650a:	428b      	cmp	r3, r1
 800650c:	d8bb      	bhi.n	8006486 <_strtod_l+0x476>
 800650e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8006512:	428b      	cmp	r3, r1
 8006514:	bf86      	itte	hi
 8006516:	f04f 38ff 	movhi.w	r8, #4294967295
 800651a:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 80065b0 <_strtod_l+0x5a0>
 800651e:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8006522:	2300      	movs	r3, #0
 8006524:	9305      	str	r3, [sp, #20]
 8006526:	e07e      	b.n	8006626 <_strtod_l+0x616>
 8006528:	07f2      	lsls	r2, r6, #31
 800652a:	d507      	bpl.n	800653c <_strtod_l+0x52c>
 800652c:	4b1d      	ldr	r3, [pc, #116]	; (80065a4 <_strtod_l+0x594>)
 800652e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006532:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006536:	f7fa f83b 	bl	80005b0 <__aeabi_dmul>
 800653a:	2301      	movs	r3, #1
 800653c:	3701      	adds	r7, #1
 800653e:	1076      	asrs	r6, r6, #1
 8006540:	e7ce      	b.n	80064e0 <_strtod_l+0x4d0>
 8006542:	d0ee      	beq.n	8006522 <_strtod_l+0x512>
 8006544:	4276      	negs	r6, r6
 8006546:	f016 020f 	ands.w	r2, r6, #15
 800654a:	d00a      	beq.n	8006562 <_strtod_l+0x552>
 800654c:	4b14      	ldr	r3, [pc, #80]	; (80065a0 <_strtod_l+0x590>)
 800654e:	4640      	mov	r0, r8
 8006550:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006554:	4649      	mov	r1, r9
 8006556:	e9d3 2300 	ldrd	r2, r3, [r3]
 800655a:	f7fa f953 	bl	8000804 <__aeabi_ddiv>
 800655e:	4680      	mov	r8, r0
 8006560:	4689      	mov	r9, r1
 8006562:	1136      	asrs	r6, r6, #4
 8006564:	d0dd      	beq.n	8006522 <_strtod_l+0x512>
 8006566:	2e1f      	cmp	r6, #31
 8006568:	dd24      	ble.n	80065b4 <_strtod_l+0x5a4>
 800656a:	f04f 0b00 	mov.w	fp, #0
 800656e:	f8cd b010 	str.w	fp, [sp, #16]
 8006572:	f8cd b020 	str.w	fp, [sp, #32]
 8006576:	f8cd b018 	str.w	fp, [sp, #24]
 800657a:	2322      	movs	r3, #34	; 0x22
 800657c:	f04f 0800 	mov.w	r8, #0
 8006580:	f04f 0900 	mov.w	r9, #0
 8006584:	f8ca 3000 	str.w	r3, [sl]
 8006588:	e78c      	b.n	80064a4 <_strtod_l+0x494>
 800658a:	bf00      	nop
 800658c:	0800a425 	.word	0x0800a425
 8006590:	0800a464 	.word	0x0800a464
 8006594:	0800a41d 	.word	0x0800a41d
 8006598:	0800a5a4 	.word	0x0800a5a4
 800659c:	0800a87b 	.word	0x0800a87b
 80065a0:	0800a740 	.word	0x0800a740
 80065a4:	0800a718 	.word	0x0800a718
 80065a8:	7ff00000 	.word	0x7ff00000
 80065ac:	7ca00000 	.word	0x7ca00000
 80065b0:	7fefffff 	.word	0x7fefffff
 80065b4:	f016 0310 	ands.w	r3, r6, #16
 80065b8:	bf18      	it	ne
 80065ba:	236a      	movne	r3, #106	; 0x6a
 80065bc:	4640      	mov	r0, r8
 80065be:	9305      	str	r3, [sp, #20]
 80065c0:	4649      	mov	r1, r9
 80065c2:	2300      	movs	r3, #0
 80065c4:	4fb2      	ldr	r7, [pc, #712]	; (8006890 <_strtod_l+0x880>)
 80065c6:	07f2      	lsls	r2, r6, #31
 80065c8:	d504      	bpl.n	80065d4 <_strtod_l+0x5c4>
 80065ca:	e9d7 2300 	ldrd	r2, r3, [r7]
 80065ce:	f7f9 ffef 	bl	80005b0 <__aeabi_dmul>
 80065d2:	2301      	movs	r3, #1
 80065d4:	1076      	asrs	r6, r6, #1
 80065d6:	f107 0708 	add.w	r7, r7, #8
 80065da:	d1f4      	bne.n	80065c6 <_strtod_l+0x5b6>
 80065dc:	b10b      	cbz	r3, 80065e2 <_strtod_l+0x5d2>
 80065de:	4680      	mov	r8, r0
 80065e0:	4689      	mov	r9, r1
 80065e2:	9b05      	ldr	r3, [sp, #20]
 80065e4:	b1bb      	cbz	r3, 8006616 <_strtod_l+0x606>
 80065e6:	f3c9 530a 	ubfx	r3, r9, #20, #11
 80065ea:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	4649      	mov	r1, r9
 80065f2:	dd10      	ble.n	8006616 <_strtod_l+0x606>
 80065f4:	2b1f      	cmp	r3, #31
 80065f6:	f340 812b 	ble.w	8006850 <_strtod_l+0x840>
 80065fa:	2b34      	cmp	r3, #52	; 0x34
 80065fc:	bfd8      	it	le
 80065fe:	f04f 32ff 	movle.w	r2, #4294967295
 8006602:	f04f 0800 	mov.w	r8, #0
 8006606:	bfcf      	iteee	gt
 8006608:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800660c:	3b20      	suble	r3, #32
 800660e:	fa02 f303 	lslle.w	r3, r2, r3
 8006612:	ea03 0901 	andle.w	r9, r3, r1
 8006616:	2200      	movs	r2, #0
 8006618:	2300      	movs	r3, #0
 800661a:	4640      	mov	r0, r8
 800661c:	4649      	mov	r1, r9
 800661e:	f7fa fa2f 	bl	8000a80 <__aeabi_dcmpeq>
 8006622:	2800      	cmp	r0, #0
 8006624:	d1a1      	bne.n	800656a <_strtod_l+0x55a>
 8006626:	9b06      	ldr	r3, [sp, #24]
 8006628:	465a      	mov	r2, fp
 800662a:	9300      	str	r3, [sp, #0]
 800662c:	4650      	mov	r0, sl
 800662e:	4623      	mov	r3, r4
 8006630:	9908      	ldr	r1, [sp, #32]
 8006632:	f001 fe6d 	bl	8008310 <__s2b>
 8006636:	9008      	str	r0, [sp, #32]
 8006638:	2800      	cmp	r0, #0
 800663a:	f43f af24 	beq.w	8006486 <_strtod_l+0x476>
 800663e:	9b04      	ldr	r3, [sp, #16]
 8006640:	f04f 0b00 	mov.w	fp, #0
 8006644:	1b5d      	subs	r5, r3, r5
 8006646:	9b07      	ldr	r3, [sp, #28]
 8006648:	f8cd b010 	str.w	fp, [sp, #16]
 800664c:	2b00      	cmp	r3, #0
 800664e:	bfb4      	ite	lt
 8006650:	462b      	movlt	r3, r5
 8006652:	2300      	movge	r3, #0
 8006654:	930e      	str	r3, [sp, #56]	; 0x38
 8006656:	9b07      	ldr	r3, [sp, #28]
 8006658:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800665c:	9316      	str	r3, [sp, #88]	; 0x58
 800665e:	9b08      	ldr	r3, [sp, #32]
 8006660:	4650      	mov	r0, sl
 8006662:	6859      	ldr	r1, [r3, #4]
 8006664:	f001 fda8 	bl	80081b8 <_Balloc>
 8006668:	9006      	str	r0, [sp, #24]
 800666a:	2800      	cmp	r0, #0
 800666c:	f43f af13 	beq.w	8006496 <_strtod_l+0x486>
 8006670:	9b08      	ldr	r3, [sp, #32]
 8006672:	300c      	adds	r0, #12
 8006674:	691a      	ldr	r2, [r3, #16]
 8006676:	f103 010c 	add.w	r1, r3, #12
 800667a:	3202      	adds	r2, #2
 800667c:	0092      	lsls	r2, r2, #2
 800667e:	f001 fd8d 	bl	800819c <memcpy>
 8006682:	ab1e      	add	r3, sp, #120	; 0x78
 8006684:	9301      	str	r3, [sp, #4]
 8006686:	ab1d      	add	r3, sp, #116	; 0x74
 8006688:	9300      	str	r3, [sp, #0]
 800668a:	4642      	mov	r2, r8
 800668c:	464b      	mov	r3, r9
 800668e:	4650      	mov	r0, sl
 8006690:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
 8006694:	f002 f97a 	bl	800898c <__d2b>
 8006698:	901c      	str	r0, [sp, #112]	; 0x70
 800669a:	2800      	cmp	r0, #0
 800669c:	f43f aefb 	beq.w	8006496 <_strtod_l+0x486>
 80066a0:	2101      	movs	r1, #1
 80066a2:	4650      	mov	r0, sl
 80066a4:	f001 fecc 	bl	8008440 <__i2b>
 80066a8:	4603      	mov	r3, r0
 80066aa:	9004      	str	r0, [sp, #16]
 80066ac:	2800      	cmp	r0, #0
 80066ae:	f43f aef2 	beq.w	8006496 <_strtod_l+0x486>
 80066b2:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 80066b4:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80066b6:	2d00      	cmp	r5, #0
 80066b8:	bfab      	itete	ge
 80066ba:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 80066bc:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 80066be:	18ee      	addge	r6, r5, r3
 80066c0:	1b5c      	sublt	r4, r3, r5
 80066c2:	9b05      	ldr	r3, [sp, #20]
 80066c4:	bfa8      	it	ge
 80066c6:	9c16      	ldrge	r4, [sp, #88]	; 0x58
 80066c8:	eba5 0503 	sub.w	r5, r5, r3
 80066cc:	4415      	add	r5, r2
 80066ce:	4b71      	ldr	r3, [pc, #452]	; (8006894 <_strtod_l+0x884>)
 80066d0:	f105 35ff 	add.w	r5, r5, #4294967295
 80066d4:	bfb8      	it	lt
 80066d6:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 80066d8:	429d      	cmp	r5, r3
 80066da:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80066de:	f280 80c9 	bge.w	8006874 <_strtod_l+0x864>
 80066e2:	1b5b      	subs	r3, r3, r5
 80066e4:	2b1f      	cmp	r3, #31
 80066e6:	f04f 0701 	mov.w	r7, #1
 80066ea:	eba2 0203 	sub.w	r2, r2, r3
 80066ee:	f300 80b6 	bgt.w	800685e <_strtod_l+0x84e>
 80066f2:	2500      	movs	r5, #0
 80066f4:	fa07 f303 	lsl.w	r3, r7, r3
 80066f8:	930f      	str	r3, [sp, #60]	; 0x3c
 80066fa:	18b7      	adds	r7, r6, r2
 80066fc:	9b05      	ldr	r3, [sp, #20]
 80066fe:	42be      	cmp	r6, r7
 8006700:	4414      	add	r4, r2
 8006702:	441c      	add	r4, r3
 8006704:	4633      	mov	r3, r6
 8006706:	bfa8      	it	ge
 8006708:	463b      	movge	r3, r7
 800670a:	42a3      	cmp	r3, r4
 800670c:	bfa8      	it	ge
 800670e:	4623      	movge	r3, r4
 8006710:	2b00      	cmp	r3, #0
 8006712:	bfc2      	ittt	gt
 8006714:	1aff      	subgt	r7, r7, r3
 8006716:	1ae4      	subgt	r4, r4, r3
 8006718:	1af6      	subgt	r6, r6, r3
 800671a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800671c:	2b00      	cmp	r3, #0
 800671e:	dd17      	ble.n	8006750 <_strtod_l+0x740>
 8006720:	461a      	mov	r2, r3
 8006722:	4650      	mov	r0, sl
 8006724:	9904      	ldr	r1, [sp, #16]
 8006726:	f001 ff45 	bl	80085b4 <__pow5mult>
 800672a:	9004      	str	r0, [sp, #16]
 800672c:	2800      	cmp	r0, #0
 800672e:	f43f aeb2 	beq.w	8006496 <_strtod_l+0x486>
 8006732:	4601      	mov	r1, r0
 8006734:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8006736:	4650      	mov	r0, sl
 8006738:	f001 fe98 	bl	800846c <__multiply>
 800673c:	9009      	str	r0, [sp, #36]	; 0x24
 800673e:	2800      	cmp	r0, #0
 8006740:	f43f aea9 	beq.w	8006496 <_strtod_l+0x486>
 8006744:	4650      	mov	r0, sl
 8006746:	991c      	ldr	r1, [sp, #112]	; 0x70
 8006748:	f001 fd76 	bl	8008238 <_Bfree>
 800674c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800674e:	931c      	str	r3, [sp, #112]	; 0x70
 8006750:	2f00      	cmp	r7, #0
 8006752:	f300 8093 	bgt.w	800687c <_strtod_l+0x86c>
 8006756:	9b07      	ldr	r3, [sp, #28]
 8006758:	2b00      	cmp	r3, #0
 800675a:	dd08      	ble.n	800676e <_strtod_l+0x75e>
 800675c:	4650      	mov	r0, sl
 800675e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8006760:	9906      	ldr	r1, [sp, #24]
 8006762:	f001 ff27 	bl	80085b4 <__pow5mult>
 8006766:	9006      	str	r0, [sp, #24]
 8006768:	2800      	cmp	r0, #0
 800676a:	f43f ae94 	beq.w	8006496 <_strtod_l+0x486>
 800676e:	2c00      	cmp	r4, #0
 8006770:	dd08      	ble.n	8006784 <_strtod_l+0x774>
 8006772:	4622      	mov	r2, r4
 8006774:	4650      	mov	r0, sl
 8006776:	9906      	ldr	r1, [sp, #24]
 8006778:	f001 ff76 	bl	8008668 <__lshift>
 800677c:	9006      	str	r0, [sp, #24]
 800677e:	2800      	cmp	r0, #0
 8006780:	f43f ae89 	beq.w	8006496 <_strtod_l+0x486>
 8006784:	2e00      	cmp	r6, #0
 8006786:	dd08      	ble.n	800679a <_strtod_l+0x78a>
 8006788:	4632      	mov	r2, r6
 800678a:	4650      	mov	r0, sl
 800678c:	9904      	ldr	r1, [sp, #16]
 800678e:	f001 ff6b 	bl	8008668 <__lshift>
 8006792:	9004      	str	r0, [sp, #16]
 8006794:	2800      	cmp	r0, #0
 8006796:	f43f ae7e 	beq.w	8006496 <_strtod_l+0x486>
 800679a:	4650      	mov	r0, sl
 800679c:	9a06      	ldr	r2, [sp, #24]
 800679e:	991c      	ldr	r1, [sp, #112]	; 0x70
 80067a0:	f001 ffea 	bl	8008778 <__mdiff>
 80067a4:	4683      	mov	fp, r0
 80067a6:	2800      	cmp	r0, #0
 80067a8:	f43f ae75 	beq.w	8006496 <_strtod_l+0x486>
 80067ac:	2400      	movs	r4, #0
 80067ae:	68c3      	ldr	r3, [r0, #12]
 80067b0:	9904      	ldr	r1, [sp, #16]
 80067b2:	60c4      	str	r4, [r0, #12]
 80067b4:	930d      	str	r3, [sp, #52]	; 0x34
 80067b6:	f001 ffc3 	bl	8008740 <__mcmp>
 80067ba:	42a0      	cmp	r0, r4
 80067bc:	da70      	bge.n	80068a0 <_strtod_l+0x890>
 80067be:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80067c0:	ea53 0308 	orrs.w	r3, r3, r8
 80067c4:	f040 8096 	bne.w	80068f4 <_strtod_l+0x8e4>
 80067c8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	f040 8091 	bne.w	80068f4 <_strtod_l+0x8e4>
 80067d2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80067d6:	0d1b      	lsrs	r3, r3, #20
 80067d8:	051b      	lsls	r3, r3, #20
 80067da:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80067de:	f240 8089 	bls.w	80068f4 <_strtod_l+0x8e4>
 80067e2:	f8db 3014 	ldr.w	r3, [fp, #20]
 80067e6:	b923      	cbnz	r3, 80067f2 <_strtod_l+0x7e2>
 80067e8:	f8db 3010 	ldr.w	r3, [fp, #16]
 80067ec:	2b01      	cmp	r3, #1
 80067ee:	f340 8081 	ble.w	80068f4 <_strtod_l+0x8e4>
 80067f2:	4659      	mov	r1, fp
 80067f4:	2201      	movs	r2, #1
 80067f6:	4650      	mov	r0, sl
 80067f8:	f001 ff36 	bl	8008668 <__lshift>
 80067fc:	9904      	ldr	r1, [sp, #16]
 80067fe:	4683      	mov	fp, r0
 8006800:	f001 ff9e 	bl	8008740 <__mcmp>
 8006804:	2800      	cmp	r0, #0
 8006806:	dd75      	ble.n	80068f4 <_strtod_l+0x8e4>
 8006808:	9905      	ldr	r1, [sp, #20]
 800680a:	464b      	mov	r3, r9
 800680c:	4a22      	ldr	r2, [pc, #136]	; (8006898 <_strtod_l+0x888>)
 800680e:	2900      	cmp	r1, #0
 8006810:	f000 8091 	beq.w	8006936 <_strtod_l+0x926>
 8006814:	ea02 0109 	and.w	r1, r2, r9
 8006818:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800681c:	f300 808b 	bgt.w	8006936 <_strtod_l+0x926>
 8006820:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8006824:	f77f aea9 	ble.w	800657a <_strtod_l+0x56a>
 8006828:	2300      	movs	r3, #0
 800682a:	4a1c      	ldr	r2, [pc, #112]	; (800689c <_strtod_l+0x88c>)
 800682c:	4640      	mov	r0, r8
 800682e:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8006832:	4649      	mov	r1, r9
 8006834:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8006838:	f7f9 feba 	bl	80005b0 <__aeabi_dmul>
 800683c:	460b      	mov	r3, r1
 800683e:	4303      	orrs	r3, r0
 8006840:	bf08      	it	eq
 8006842:	2322      	moveq	r3, #34	; 0x22
 8006844:	4680      	mov	r8, r0
 8006846:	4689      	mov	r9, r1
 8006848:	bf08      	it	eq
 800684a:	f8ca 3000 	streq.w	r3, [sl]
 800684e:	e62d      	b.n	80064ac <_strtod_l+0x49c>
 8006850:	f04f 32ff 	mov.w	r2, #4294967295
 8006854:	fa02 f303 	lsl.w	r3, r2, r3
 8006858:	ea03 0808 	and.w	r8, r3, r8
 800685c:	e6db      	b.n	8006616 <_strtod_l+0x606>
 800685e:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 8006862:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 8006866:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 800686a:	35e2      	adds	r5, #226	; 0xe2
 800686c:	fa07 f505 	lsl.w	r5, r7, r5
 8006870:	970f      	str	r7, [sp, #60]	; 0x3c
 8006872:	e742      	b.n	80066fa <_strtod_l+0x6ea>
 8006874:	2301      	movs	r3, #1
 8006876:	2500      	movs	r5, #0
 8006878:	930f      	str	r3, [sp, #60]	; 0x3c
 800687a:	e73e      	b.n	80066fa <_strtod_l+0x6ea>
 800687c:	463a      	mov	r2, r7
 800687e:	4650      	mov	r0, sl
 8006880:	991c      	ldr	r1, [sp, #112]	; 0x70
 8006882:	f001 fef1 	bl	8008668 <__lshift>
 8006886:	901c      	str	r0, [sp, #112]	; 0x70
 8006888:	2800      	cmp	r0, #0
 800688a:	f47f af64 	bne.w	8006756 <_strtod_l+0x746>
 800688e:	e602      	b.n	8006496 <_strtod_l+0x486>
 8006890:	0800a478 	.word	0x0800a478
 8006894:	fffffc02 	.word	0xfffffc02
 8006898:	7ff00000 	.word	0x7ff00000
 800689c:	39500000 	.word	0x39500000
 80068a0:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80068a4:	d166      	bne.n	8006974 <_strtod_l+0x964>
 80068a6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80068a8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80068ac:	b35a      	cbz	r2, 8006906 <_strtod_l+0x8f6>
 80068ae:	4a9c      	ldr	r2, [pc, #624]	; (8006b20 <_strtod_l+0xb10>)
 80068b0:	4293      	cmp	r3, r2
 80068b2:	d12c      	bne.n	800690e <_strtod_l+0x8fe>
 80068b4:	9b05      	ldr	r3, [sp, #20]
 80068b6:	4640      	mov	r0, r8
 80068b8:	b303      	cbz	r3, 80068fc <_strtod_l+0x8ec>
 80068ba:	464b      	mov	r3, r9
 80068bc:	4a99      	ldr	r2, [pc, #612]	; (8006b24 <_strtod_l+0xb14>)
 80068be:	f04f 31ff 	mov.w	r1, #4294967295
 80068c2:	401a      	ands	r2, r3
 80068c4:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 80068c8:	d81b      	bhi.n	8006902 <_strtod_l+0x8f2>
 80068ca:	0d12      	lsrs	r2, r2, #20
 80068cc:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80068d0:	fa01 f303 	lsl.w	r3, r1, r3
 80068d4:	4298      	cmp	r0, r3
 80068d6:	d11a      	bne.n	800690e <_strtod_l+0x8fe>
 80068d8:	4b93      	ldr	r3, [pc, #588]	; (8006b28 <_strtod_l+0xb18>)
 80068da:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80068dc:	429a      	cmp	r2, r3
 80068de:	d102      	bne.n	80068e6 <_strtod_l+0x8d6>
 80068e0:	3001      	adds	r0, #1
 80068e2:	f43f add8 	beq.w	8006496 <_strtod_l+0x486>
 80068e6:	f04f 0800 	mov.w	r8, #0
 80068ea:	4b8e      	ldr	r3, [pc, #568]	; (8006b24 <_strtod_l+0xb14>)
 80068ec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80068ee:	401a      	ands	r2, r3
 80068f0:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 80068f4:	9b05      	ldr	r3, [sp, #20]
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d196      	bne.n	8006828 <_strtod_l+0x818>
 80068fa:	e5d7      	b.n	80064ac <_strtod_l+0x49c>
 80068fc:	f04f 33ff 	mov.w	r3, #4294967295
 8006900:	e7e8      	b.n	80068d4 <_strtod_l+0x8c4>
 8006902:	460b      	mov	r3, r1
 8006904:	e7e6      	b.n	80068d4 <_strtod_l+0x8c4>
 8006906:	ea53 0308 	orrs.w	r3, r3, r8
 800690a:	f43f af7d 	beq.w	8006808 <_strtod_l+0x7f8>
 800690e:	b1e5      	cbz	r5, 800694a <_strtod_l+0x93a>
 8006910:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006912:	421d      	tst	r5, r3
 8006914:	d0ee      	beq.n	80068f4 <_strtod_l+0x8e4>
 8006916:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006918:	4640      	mov	r0, r8
 800691a:	4649      	mov	r1, r9
 800691c:	9a05      	ldr	r2, [sp, #20]
 800691e:	b1c3      	cbz	r3, 8006952 <_strtod_l+0x942>
 8006920:	f7ff fb55 	bl	8005fce <sulp>
 8006924:	4602      	mov	r2, r0
 8006926:	460b      	mov	r3, r1
 8006928:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800692c:	f7f9 fc8a 	bl	8000244 <__adddf3>
 8006930:	4680      	mov	r8, r0
 8006932:	4689      	mov	r9, r1
 8006934:	e7de      	b.n	80068f4 <_strtod_l+0x8e4>
 8006936:	4013      	ands	r3, r2
 8006938:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800693c:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8006940:	f04f 38ff 	mov.w	r8, #4294967295
 8006944:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8006948:	e7d4      	b.n	80068f4 <_strtod_l+0x8e4>
 800694a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800694c:	ea13 0f08 	tst.w	r3, r8
 8006950:	e7e0      	b.n	8006914 <_strtod_l+0x904>
 8006952:	f7ff fb3c 	bl	8005fce <sulp>
 8006956:	4602      	mov	r2, r0
 8006958:	460b      	mov	r3, r1
 800695a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800695e:	f7f9 fc6f 	bl	8000240 <__aeabi_dsub>
 8006962:	2200      	movs	r2, #0
 8006964:	2300      	movs	r3, #0
 8006966:	4680      	mov	r8, r0
 8006968:	4689      	mov	r9, r1
 800696a:	f7fa f889 	bl	8000a80 <__aeabi_dcmpeq>
 800696e:	2800      	cmp	r0, #0
 8006970:	d0c0      	beq.n	80068f4 <_strtod_l+0x8e4>
 8006972:	e602      	b.n	800657a <_strtod_l+0x56a>
 8006974:	4658      	mov	r0, fp
 8006976:	9904      	ldr	r1, [sp, #16]
 8006978:	f002 f864 	bl	8008a44 <__ratio>
 800697c:	2200      	movs	r2, #0
 800697e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006982:	4606      	mov	r6, r0
 8006984:	460f      	mov	r7, r1
 8006986:	f7fa f88f 	bl	8000aa8 <__aeabi_dcmple>
 800698a:	2800      	cmp	r0, #0
 800698c:	d075      	beq.n	8006a7a <_strtod_l+0xa6a>
 800698e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006990:	2b00      	cmp	r3, #0
 8006992:	d047      	beq.n	8006a24 <_strtod_l+0xa14>
 8006994:	2600      	movs	r6, #0
 8006996:	4f65      	ldr	r7, [pc, #404]	; (8006b2c <_strtod_l+0xb1c>)
 8006998:	4d64      	ldr	r5, [pc, #400]	; (8006b2c <_strtod_l+0xb1c>)
 800699a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800699c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80069a0:	0d1b      	lsrs	r3, r3, #20
 80069a2:	051b      	lsls	r3, r3, #20
 80069a4:	930f      	str	r3, [sp, #60]	; 0x3c
 80069a6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80069a8:	4b61      	ldr	r3, [pc, #388]	; (8006b30 <_strtod_l+0xb20>)
 80069aa:	429a      	cmp	r2, r3
 80069ac:	f040 80c8 	bne.w	8006b40 <_strtod_l+0xb30>
 80069b0:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80069b4:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 80069b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80069ba:	4640      	mov	r0, r8
 80069bc:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 80069c0:	4649      	mov	r1, r9
 80069c2:	f001 ff69 	bl	8008898 <__ulp>
 80069c6:	4602      	mov	r2, r0
 80069c8:	460b      	mov	r3, r1
 80069ca:	4630      	mov	r0, r6
 80069cc:	4639      	mov	r1, r7
 80069ce:	f7f9 fdef 	bl	80005b0 <__aeabi_dmul>
 80069d2:	4642      	mov	r2, r8
 80069d4:	464b      	mov	r3, r9
 80069d6:	f7f9 fc35 	bl	8000244 <__adddf3>
 80069da:	460b      	mov	r3, r1
 80069dc:	4951      	ldr	r1, [pc, #324]	; (8006b24 <_strtod_l+0xb14>)
 80069de:	4a55      	ldr	r2, [pc, #340]	; (8006b34 <_strtod_l+0xb24>)
 80069e0:	4019      	ands	r1, r3
 80069e2:	4291      	cmp	r1, r2
 80069e4:	4680      	mov	r8, r0
 80069e6:	d95e      	bls.n	8006aa6 <_strtod_l+0xa96>
 80069e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80069ea:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80069ee:	4293      	cmp	r3, r2
 80069f0:	d103      	bne.n	80069fa <_strtod_l+0x9ea>
 80069f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80069f4:	3301      	adds	r3, #1
 80069f6:	f43f ad4e 	beq.w	8006496 <_strtod_l+0x486>
 80069fa:	f04f 38ff 	mov.w	r8, #4294967295
 80069fe:	f8df 9128 	ldr.w	r9, [pc, #296]	; 8006b28 <_strtod_l+0xb18>
 8006a02:	4650      	mov	r0, sl
 8006a04:	991c      	ldr	r1, [sp, #112]	; 0x70
 8006a06:	f001 fc17 	bl	8008238 <_Bfree>
 8006a0a:	4650      	mov	r0, sl
 8006a0c:	9906      	ldr	r1, [sp, #24]
 8006a0e:	f001 fc13 	bl	8008238 <_Bfree>
 8006a12:	4650      	mov	r0, sl
 8006a14:	9904      	ldr	r1, [sp, #16]
 8006a16:	f001 fc0f 	bl	8008238 <_Bfree>
 8006a1a:	4659      	mov	r1, fp
 8006a1c:	4650      	mov	r0, sl
 8006a1e:	f001 fc0b 	bl	8008238 <_Bfree>
 8006a22:	e61c      	b.n	800665e <_strtod_l+0x64e>
 8006a24:	f1b8 0f00 	cmp.w	r8, #0
 8006a28:	d119      	bne.n	8006a5e <_strtod_l+0xa4e>
 8006a2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a2c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006a30:	b9e3      	cbnz	r3, 8006a6c <_strtod_l+0xa5c>
 8006a32:	2200      	movs	r2, #0
 8006a34:	4630      	mov	r0, r6
 8006a36:	4639      	mov	r1, r7
 8006a38:	4b3c      	ldr	r3, [pc, #240]	; (8006b2c <_strtod_l+0xb1c>)
 8006a3a:	f7fa f82b 	bl	8000a94 <__aeabi_dcmplt>
 8006a3e:	b9c8      	cbnz	r0, 8006a74 <_strtod_l+0xa64>
 8006a40:	2200      	movs	r2, #0
 8006a42:	4630      	mov	r0, r6
 8006a44:	4639      	mov	r1, r7
 8006a46:	4b3c      	ldr	r3, [pc, #240]	; (8006b38 <_strtod_l+0xb28>)
 8006a48:	f7f9 fdb2 	bl	80005b0 <__aeabi_dmul>
 8006a4c:	4604      	mov	r4, r0
 8006a4e:	460d      	mov	r5, r1
 8006a50:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8006a54:	9418      	str	r4, [sp, #96]	; 0x60
 8006a56:	9319      	str	r3, [sp, #100]	; 0x64
 8006a58:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
 8006a5c:	e79d      	b.n	800699a <_strtod_l+0x98a>
 8006a5e:	f1b8 0f01 	cmp.w	r8, #1
 8006a62:	d103      	bne.n	8006a6c <_strtod_l+0xa5c>
 8006a64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	f43f ad87 	beq.w	800657a <_strtod_l+0x56a>
 8006a6c:	2600      	movs	r6, #0
 8006a6e:	2400      	movs	r4, #0
 8006a70:	4f32      	ldr	r7, [pc, #200]	; (8006b3c <_strtod_l+0xb2c>)
 8006a72:	e791      	b.n	8006998 <_strtod_l+0x988>
 8006a74:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8006a76:	4d30      	ldr	r5, [pc, #192]	; (8006b38 <_strtod_l+0xb28>)
 8006a78:	e7ea      	b.n	8006a50 <_strtod_l+0xa40>
 8006a7a:	4b2f      	ldr	r3, [pc, #188]	; (8006b38 <_strtod_l+0xb28>)
 8006a7c:	2200      	movs	r2, #0
 8006a7e:	4630      	mov	r0, r6
 8006a80:	4639      	mov	r1, r7
 8006a82:	f7f9 fd95 	bl	80005b0 <__aeabi_dmul>
 8006a86:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006a88:	4604      	mov	r4, r0
 8006a8a:	460d      	mov	r5, r1
 8006a8c:	b933      	cbnz	r3, 8006a9c <_strtod_l+0xa8c>
 8006a8e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006a92:	9010      	str	r0, [sp, #64]	; 0x40
 8006a94:	9311      	str	r3, [sp, #68]	; 0x44
 8006a96:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8006a9a:	e77e      	b.n	800699a <_strtod_l+0x98a>
 8006a9c:	4602      	mov	r2, r0
 8006a9e:	460b      	mov	r3, r1
 8006aa0:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8006aa4:	e7f7      	b.n	8006a96 <_strtod_l+0xa86>
 8006aa6:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8006aaa:	9b05      	ldr	r3, [sp, #20]
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d1a8      	bne.n	8006a02 <_strtod_l+0x9f2>
 8006ab0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006ab4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006ab6:	0d1b      	lsrs	r3, r3, #20
 8006ab8:	051b      	lsls	r3, r3, #20
 8006aba:	429a      	cmp	r2, r3
 8006abc:	d1a1      	bne.n	8006a02 <_strtod_l+0x9f2>
 8006abe:	4620      	mov	r0, r4
 8006ac0:	4629      	mov	r1, r5
 8006ac2:	f7fa f8d5 	bl	8000c70 <__aeabi_d2lz>
 8006ac6:	f7f9 fd45 	bl	8000554 <__aeabi_l2d>
 8006aca:	4602      	mov	r2, r0
 8006acc:	460b      	mov	r3, r1
 8006ace:	4620      	mov	r0, r4
 8006ad0:	4629      	mov	r1, r5
 8006ad2:	f7f9 fbb5 	bl	8000240 <__aeabi_dsub>
 8006ad6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006ad8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006adc:	ea43 0308 	orr.w	r3, r3, r8
 8006ae0:	4313      	orrs	r3, r2
 8006ae2:	4604      	mov	r4, r0
 8006ae4:	460d      	mov	r5, r1
 8006ae6:	d066      	beq.n	8006bb6 <_strtod_l+0xba6>
 8006ae8:	a309      	add	r3, pc, #36	; (adr r3, 8006b10 <_strtod_l+0xb00>)
 8006aea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006aee:	f7f9 ffd1 	bl	8000a94 <__aeabi_dcmplt>
 8006af2:	2800      	cmp	r0, #0
 8006af4:	f47f acda 	bne.w	80064ac <_strtod_l+0x49c>
 8006af8:	a307      	add	r3, pc, #28	; (adr r3, 8006b18 <_strtod_l+0xb08>)
 8006afa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006afe:	4620      	mov	r0, r4
 8006b00:	4629      	mov	r1, r5
 8006b02:	f7f9 ffe5 	bl	8000ad0 <__aeabi_dcmpgt>
 8006b06:	2800      	cmp	r0, #0
 8006b08:	f43f af7b 	beq.w	8006a02 <_strtod_l+0x9f2>
 8006b0c:	e4ce      	b.n	80064ac <_strtod_l+0x49c>
 8006b0e:	bf00      	nop
 8006b10:	94a03595 	.word	0x94a03595
 8006b14:	3fdfffff 	.word	0x3fdfffff
 8006b18:	35afe535 	.word	0x35afe535
 8006b1c:	3fe00000 	.word	0x3fe00000
 8006b20:	000fffff 	.word	0x000fffff
 8006b24:	7ff00000 	.word	0x7ff00000
 8006b28:	7fefffff 	.word	0x7fefffff
 8006b2c:	3ff00000 	.word	0x3ff00000
 8006b30:	7fe00000 	.word	0x7fe00000
 8006b34:	7c9fffff 	.word	0x7c9fffff
 8006b38:	3fe00000 	.word	0x3fe00000
 8006b3c:	bff00000 	.word	0xbff00000
 8006b40:	9b05      	ldr	r3, [sp, #20]
 8006b42:	b313      	cbz	r3, 8006b8a <_strtod_l+0xb7a>
 8006b44:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006b46:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8006b4a:	d81e      	bhi.n	8006b8a <_strtod_l+0xb7a>
 8006b4c:	a326      	add	r3, pc, #152	; (adr r3, 8006be8 <_strtod_l+0xbd8>)
 8006b4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b52:	4620      	mov	r0, r4
 8006b54:	4629      	mov	r1, r5
 8006b56:	f7f9 ffa7 	bl	8000aa8 <__aeabi_dcmple>
 8006b5a:	b190      	cbz	r0, 8006b82 <_strtod_l+0xb72>
 8006b5c:	4629      	mov	r1, r5
 8006b5e:	4620      	mov	r0, r4
 8006b60:	f7f9 fffe 	bl	8000b60 <__aeabi_d2uiz>
 8006b64:	2801      	cmp	r0, #1
 8006b66:	bf38      	it	cc
 8006b68:	2001      	movcc	r0, #1
 8006b6a:	f7f9 fca7 	bl	80004bc <__aeabi_ui2d>
 8006b6e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006b70:	4604      	mov	r4, r0
 8006b72:	460d      	mov	r5, r1
 8006b74:	b9d3      	cbnz	r3, 8006bac <_strtod_l+0xb9c>
 8006b76:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006b7a:	9012      	str	r0, [sp, #72]	; 0x48
 8006b7c:	9313      	str	r3, [sp, #76]	; 0x4c
 8006b7e:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 8006b82:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006b84:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8006b88:	1a9f      	subs	r7, r3, r2
 8006b8a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006b8e:	f001 fe83 	bl	8008898 <__ulp>
 8006b92:	4602      	mov	r2, r0
 8006b94:	460b      	mov	r3, r1
 8006b96:	4630      	mov	r0, r6
 8006b98:	4639      	mov	r1, r7
 8006b9a:	f7f9 fd09 	bl	80005b0 <__aeabi_dmul>
 8006b9e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006ba2:	f7f9 fb4f 	bl	8000244 <__adddf3>
 8006ba6:	4680      	mov	r8, r0
 8006ba8:	4689      	mov	r9, r1
 8006baa:	e77e      	b.n	8006aaa <_strtod_l+0xa9a>
 8006bac:	4602      	mov	r2, r0
 8006bae:	460b      	mov	r3, r1
 8006bb0:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8006bb4:	e7e3      	b.n	8006b7e <_strtod_l+0xb6e>
 8006bb6:	a30e      	add	r3, pc, #56	; (adr r3, 8006bf0 <_strtod_l+0xbe0>)
 8006bb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bbc:	f7f9 ff6a 	bl	8000a94 <__aeabi_dcmplt>
 8006bc0:	e7a1      	b.n	8006b06 <_strtod_l+0xaf6>
 8006bc2:	2300      	movs	r3, #0
 8006bc4:	930c      	str	r3, [sp, #48]	; 0x30
 8006bc6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006bc8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006bca:	6013      	str	r3, [r2, #0]
 8006bcc:	f7ff ba65 	b.w	800609a <_strtod_l+0x8a>
 8006bd0:	2b65      	cmp	r3, #101	; 0x65
 8006bd2:	f43f ab5c 	beq.w	800628e <_strtod_l+0x27e>
 8006bd6:	2b45      	cmp	r3, #69	; 0x45
 8006bd8:	f43f ab59 	beq.w	800628e <_strtod_l+0x27e>
 8006bdc:	2201      	movs	r2, #1
 8006bde:	f7ff bb8d 	b.w	80062fc <_strtod_l+0x2ec>
 8006be2:	bf00      	nop
 8006be4:	f3af 8000 	nop.w
 8006be8:	ffc00000 	.word	0xffc00000
 8006bec:	41dfffff 	.word	0x41dfffff
 8006bf0:	94a03595 	.word	0x94a03595
 8006bf4:	3fcfffff 	.word	0x3fcfffff

08006bf8 <_strtod_r>:
 8006bf8:	4b01      	ldr	r3, [pc, #4]	; (8006c00 <_strtod_r+0x8>)
 8006bfa:	f7ff ba09 	b.w	8006010 <_strtod_l>
 8006bfe:	bf00      	nop
 8006c00:	20000074 	.word	0x20000074

08006c04 <_strtol_l.isra.0>:
 8006c04:	2b01      	cmp	r3, #1
 8006c06:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006c0a:	4686      	mov	lr, r0
 8006c0c:	d001      	beq.n	8006c12 <_strtol_l.isra.0+0xe>
 8006c0e:	2b24      	cmp	r3, #36	; 0x24
 8006c10:	d906      	bls.n	8006c20 <_strtol_l.isra.0+0x1c>
 8006c12:	f7fe faa5 	bl	8005160 <__errno>
 8006c16:	2316      	movs	r3, #22
 8006c18:	6003      	str	r3, [r0, #0]
 8006c1a:	2000      	movs	r0, #0
 8006c1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c20:	468c      	mov	ip, r1
 8006c22:	4e3a      	ldr	r6, [pc, #232]	; (8006d0c <_strtol_l.isra.0+0x108>)
 8006c24:	4660      	mov	r0, ip
 8006c26:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8006c2a:	5da5      	ldrb	r5, [r4, r6]
 8006c2c:	f015 0508 	ands.w	r5, r5, #8
 8006c30:	d1f8      	bne.n	8006c24 <_strtol_l.isra.0+0x20>
 8006c32:	2c2d      	cmp	r4, #45	; 0x2d
 8006c34:	d133      	bne.n	8006c9e <_strtol_l.isra.0+0x9a>
 8006c36:	f04f 0801 	mov.w	r8, #1
 8006c3a:	f89c 4000 	ldrb.w	r4, [ip]
 8006c3e:	f100 0c02 	add.w	ip, r0, #2
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d05d      	beq.n	8006d02 <_strtol_l.isra.0+0xfe>
 8006c46:	2b10      	cmp	r3, #16
 8006c48:	d10c      	bne.n	8006c64 <_strtol_l.isra.0+0x60>
 8006c4a:	2c30      	cmp	r4, #48	; 0x30
 8006c4c:	d10a      	bne.n	8006c64 <_strtol_l.isra.0+0x60>
 8006c4e:	f89c 0000 	ldrb.w	r0, [ip]
 8006c52:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8006c56:	2858      	cmp	r0, #88	; 0x58
 8006c58:	d14e      	bne.n	8006cf8 <_strtol_l.isra.0+0xf4>
 8006c5a:	2310      	movs	r3, #16
 8006c5c:	f89c 4001 	ldrb.w	r4, [ip, #1]
 8006c60:	f10c 0c02 	add.w	ip, ip, #2
 8006c64:	2500      	movs	r5, #0
 8006c66:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
 8006c6a:	3f01      	subs	r7, #1
 8006c6c:	fbb7 f9f3 	udiv	r9, r7, r3
 8006c70:	4628      	mov	r0, r5
 8006c72:	fb03 7a19 	mls	sl, r3, r9, r7
 8006c76:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 8006c7a:	2e09      	cmp	r6, #9
 8006c7c:	d818      	bhi.n	8006cb0 <_strtol_l.isra.0+0xac>
 8006c7e:	4634      	mov	r4, r6
 8006c80:	42a3      	cmp	r3, r4
 8006c82:	dd24      	ble.n	8006cce <_strtol_l.isra.0+0xca>
 8006c84:	2d00      	cmp	r5, #0
 8006c86:	db1f      	blt.n	8006cc8 <_strtol_l.isra.0+0xc4>
 8006c88:	4581      	cmp	r9, r0
 8006c8a:	d31d      	bcc.n	8006cc8 <_strtol_l.isra.0+0xc4>
 8006c8c:	d101      	bne.n	8006c92 <_strtol_l.isra.0+0x8e>
 8006c8e:	45a2      	cmp	sl, r4
 8006c90:	db1a      	blt.n	8006cc8 <_strtol_l.isra.0+0xc4>
 8006c92:	2501      	movs	r5, #1
 8006c94:	fb00 4003 	mla	r0, r0, r3, r4
 8006c98:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8006c9c:	e7eb      	b.n	8006c76 <_strtol_l.isra.0+0x72>
 8006c9e:	2c2b      	cmp	r4, #43	; 0x2b
 8006ca0:	bf08      	it	eq
 8006ca2:	f89c 4000 	ldrbeq.w	r4, [ip]
 8006ca6:	46a8      	mov	r8, r5
 8006ca8:	bf08      	it	eq
 8006caa:	f100 0c02 	addeq.w	ip, r0, #2
 8006cae:	e7c8      	b.n	8006c42 <_strtol_l.isra.0+0x3e>
 8006cb0:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 8006cb4:	2e19      	cmp	r6, #25
 8006cb6:	d801      	bhi.n	8006cbc <_strtol_l.isra.0+0xb8>
 8006cb8:	3c37      	subs	r4, #55	; 0x37
 8006cba:	e7e1      	b.n	8006c80 <_strtol_l.isra.0+0x7c>
 8006cbc:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 8006cc0:	2e19      	cmp	r6, #25
 8006cc2:	d804      	bhi.n	8006cce <_strtol_l.isra.0+0xca>
 8006cc4:	3c57      	subs	r4, #87	; 0x57
 8006cc6:	e7db      	b.n	8006c80 <_strtol_l.isra.0+0x7c>
 8006cc8:	f04f 35ff 	mov.w	r5, #4294967295
 8006ccc:	e7e4      	b.n	8006c98 <_strtol_l.isra.0+0x94>
 8006cce:	2d00      	cmp	r5, #0
 8006cd0:	da08      	bge.n	8006ce4 <_strtol_l.isra.0+0xe0>
 8006cd2:	2322      	movs	r3, #34	; 0x22
 8006cd4:	4638      	mov	r0, r7
 8006cd6:	f8ce 3000 	str.w	r3, [lr]
 8006cda:	2a00      	cmp	r2, #0
 8006cdc:	d09e      	beq.n	8006c1c <_strtol_l.isra.0+0x18>
 8006cde:	f10c 31ff 	add.w	r1, ip, #4294967295
 8006ce2:	e007      	b.n	8006cf4 <_strtol_l.isra.0+0xf0>
 8006ce4:	f1b8 0f00 	cmp.w	r8, #0
 8006ce8:	d000      	beq.n	8006cec <_strtol_l.isra.0+0xe8>
 8006cea:	4240      	negs	r0, r0
 8006cec:	2a00      	cmp	r2, #0
 8006cee:	d095      	beq.n	8006c1c <_strtol_l.isra.0+0x18>
 8006cf0:	2d00      	cmp	r5, #0
 8006cf2:	d1f4      	bne.n	8006cde <_strtol_l.isra.0+0xda>
 8006cf4:	6011      	str	r1, [r2, #0]
 8006cf6:	e791      	b.n	8006c1c <_strtol_l.isra.0+0x18>
 8006cf8:	2430      	movs	r4, #48	; 0x30
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d1b2      	bne.n	8006c64 <_strtol_l.isra.0+0x60>
 8006cfe:	2308      	movs	r3, #8
 8006d00:	e7b0      	b.n	8006c64 <_strtol_l.isra.0+0x60>
 8006d02:	2c30      	cmp	r4, #48	; 0x30
 8006d04:	d0a3      	beq.n	8006c4e <_strtol_l.isra.0+0x4a>
 8006d06:	230a      	movs	r3, #10
 8006d08:	e7ac      	b.n	8006c64 <_strtol_l.isra.0+0x60>
 8006d0a:	bf00      	nop
 8006d0c:	0800a4a1 	.word	0x0800a4a1

08006d10 <_strtol_r>:
 8006d10:	f7ff bf78 	b.w	8006c04 <_strtol_l.isra.0>

08006d14 <_write_r>:
 8006d14:	b538      	push	{r3, r4, r5, lr}
 8006d16:	4604      	mov	r4, r0
 8006d18:	4608      	mov	r0, r1
 8006d1a:	4611      	mov	r1, r2
 8006d1c:	2200      	movs	r2, #0
 8006d1e:	4d05      	ldr	r5, [pc, #20]	; (8006d34 <_write_r+0x20>)
 8006d20:	602a      	str	r2, [r5, #0]
 8006d22:	461a      	mov	r2, r3
 8006d24:	f7fb f884 	bl	8001e30 <_write>
 8006d28:	1c43      	adds	r3, r0, #1
 8006d2a:	d102      	bne.n	8006d32 <_write_r+0x1e>
 8006d2c:	682b      	ldr	r3, [r5, #0]
 8006d2e:	b103      	cbz	r3, 8006d32 <_write_r+0x1e>
 8006d30:	6023      	str	r3, [r4, #0]
 8006d32:	bd38      	pop	{r3, r4, r5, pc}
 8006d34:	2000040c 	.word	0x2000040c

08006d38 <_close_r>:
 8006d38:	b538      	push	{r3, r4, r5, lr}
 8006d3a:	2300      	movs	r3, #0
 8006d3c:	4d05      	ldr	r5, [pc, #20]	; (8006d54 <_close_r+0x1c>)
 8006d3e:	4604      	mov	r4, r0
 8006d40:	4608      	mov	r0, r1
 8006d42:	602b      	str	r3, [r5, #0]
 8006d44:	f7fb f890 	bl	8001e68 <_close>
 8006d48:	1c43      	adds	r3, r0, #1
 8006d4a:	d102      	bne.n	8006d52 <_close_r+0x1a>
 8006d4c:	682b      	ldr	r3, [r5, #0]
 8006d4e:	b103      	cbz	r3, 8006d52 <_close_r+0x1a>
 8006d50:	6023      	str	r3, [r4, #0]
 8006d52:	bd38      	pop	{r3, r4, r5, pc}
 8006d54:	2000040c 	.word	0x2000040c

08006d58 <quorem>:
 8006d58:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d5c:	6903      	ldr	r3, [r0, #16]
 8006d5e:	690c      	ldr	r4, [r1, #16]
 8006d60:	4607      	mov	r7, r0
 8006d62:	42a3      	cmp	r3, r4
 8006d64:	f2c0 8083 	blt.w	8006e6e <quorem+0x116>
 8006d68:	3c01      	subs	r4, #1
 8006d6a:	f100 0514 	add.w	r5, r0, #20
 8006d6e:	f101 0814 	add.w	r8, r1, #20
 8006d72:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006d76:	9301      	str	r3, [sp, #4]
 8006d78:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006d7c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006d80:	3301      	adds	r3, #1
 8006d82:	429a      	cmp	r2, r3
 8006d84:	fbb2 f6f3 	udiv	r6, r2, r3
 8006d88:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006d8c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006d90:	d332      	bcc.n	8006df8 <quorem+0xa0>
 8006d92:	f04f 0e00 	mov.w	lr, #0
 8006d96:	4640      	mov	r0, r8
 8006d98:	46ac      	mov	ip, r5
 8006d9a:	46f2      	mov	sl, lr
 8006d9c:	f850 2b04 	ldr.w	r2, [r0], #4
 8006da0:	b293      	uxth	r3, r2
 8006da2:	fb06 e303 	mla	r3, r6, r3, lr
 8006da6:	0c12      	lsrs	r2, r2, #16
 8006da8:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8006dac:	fb06 e202 	mla	r2, r6, r2, lr
 8006db0:	b29b      	uxth	r3, r3
 8006db2:	ebaa 0303 	sub.w	r3, sl, r3
 8006db6:	f8dc a000 	ldr.w	sl, [ip]
 8006dba:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006dbe:	fa1f fa8a 	uxth.w	sl, sl
 8006dc2:	4453      	add	r3, sl
 8006dc4:	fa1f fa82 	uxth.w	sl, r2
 8006dc8:	f8dc 2000 	ldr.w	r2, [ip]
 8006dcc:	4581      	cmp	r9, r0
 8006dce:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8006dd2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006dd6:	b29b      	uxth	r3, r3
 8006dd8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006ddc:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006de0:	f84c 3b04 	str.w	r3, [ip], #4
 8006de4:	d2da      	bcs.n	8006d9c <quorem+0x44>
 8006de6:	f855 300b 	ldr.w	r3, [r5, fp]
 8006dea:	b92b      	cbnz	r3, 8006df8 <quorem+0xa0>
 8006dec:	9b01      	ldr	r3, [sp, #4]
 8006dee:	3b04      	subs	r3, #4
 8006df0:	429d      	cmp	r5, r3
 8006df2:	461a      	mov	r2, r3
 8006df4:	d32f      	bcc.n	8006e56 <quorem+0xfe>
 8006df6:	613c      	str	r4, [r7, #16]
 8006df8:	4638      	mov	r0, r7
 8006dfa:	f001 fca1 	bl	8008740 <__mcmp>
 8006dfe:	2800      	cmp	r0, #0
 8006e00:	db25      	blt.n	8006e4e <quorem+0xf6>
 8006e02:	4628      	mov	r0, r5
 8006e04:	f04f 0c00 	mov.w	ip, #0
 8006e08:	3601      	adds	r6, #1
 8006e0a:	f858 1b04 	ldr.w	r1, [r8], #4
 8006e0e:	f8d0 e000 	ldr.w	lr, [r0]
 8006e12:	b28b      	uxth	r3, r1
 8006e14:	ebac 0303 	sub.w	r3, ip, r3
 8006e18:	fa1f f28e 	uxth.w	r2, lr
 8006e1c:	4413      	add	r3, r2
 8006e1e:	0c0a      	lsrs	r2, r1, #16
 8006e20:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006e24:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006e28:	b29b      	uxth	r3, r3
 8006e2a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006e2e:	45c1      	cmp	r9, r8
 8006e30:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006e34:	f840 3b04 	str.w	r3, [r0], #4
 8006e38:	d2e7      	bcs.n	8006e0a <quorem+0xb2>
 8006e3a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006e3e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006e42:	b922      	cbnz	r2, 8006e4e <quorem+0xf6>
 8006e44:	3b04      	subs	r3, #4
 8006e46:	429d      	cmp	r5, r3
 8006e48:	461a      	mov	r2, r3
 8006e4a:	d30a      	bcc.n	8006e62 <quorem+0x10a>
 8006e4c:	613c      	str	r4, [r7, #16]
 8006e4e:	4630      	mov	r0, r6
 8006e50:	b003      	add	sp, #12
 8006e52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e56:	6812      	ldr	r2, [r2, #0]
 8006e58:	3b04      	subs	r3, #4
 8006e5a:	2a00      	cmp	r2, #0
 8006e5c:	d1cb      	bne.n	8006df6 <quorem+0x9e>
 8006e5e:	3c01      	subs	r4, #1
 8006e60:	e7c6      	b.n	8006df0 <quorem+0x98>
 8006e62:	6812      	ldr	r2, [r2, #0]
 8006e64:	3b04      	subs	r3, #4
 8006e66:	2a00      	cmp	r2, #0
 8006e68:	d1f0      	bne.n	8006e4c <quorem+0xf4>
 8006e6a:	3c01      	subs	r4, #1
 8006e6c:	e7eb      	b.n	8006e46 <quorem+0xee>
 8006e6e:	2000      	movs	r0, #0
 8006e70:	e7ee      	b.n	8006e50 <quorem+0xf8>
 8006e72:	0000      	movs	r0, r0
 8006e74:	0000      	movs	r0, r0
	...

08006e78 <_dtoa_r>:
 8006e78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e7c:	4616      	mov	r6, r2
 8006e7e:	461f      	mov	r7, r3
 8006e80:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8006e82:	b099      	sub	sp, #100	; 0x64
 8006e84:	4605      	mov	r5, r0
 8006e86:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8006e8a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8006e8e:	b974      	cbnz	r4, 8006eae <_dtoa_r+0x36>
 8006e90:	2010      	movs	r0, #16
 8006e92:	f001 f95b 	bl	800814c <malloc>
 8006e96:	4602      	mov	r2, r0
 8006e98:	6268      	str	r0, [r5, #36]	; 0x24
 8006e9a:	b920      	cbnz	r0, 8006ea6 <_dtoa_r+0x2e>
 8006e9c:	21ea      	movs	r1, #234	; 0xea
 8006e9e:	4bae      	ldr	r3, [pc, #696]	; (8007158 <_dtoa_r+0x2e0>)
 8006ea0:	48ae      	ldr	r0, [pc, #696]	; (800715c <_dtoa_r+0x2e4>)
 8006ea2:	f002 fca7 	bl	80097f4 <__assert_func>
 8006ea6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006eaa:	6004      	str	r4, [r0, #0]
 8006eac:	60c4      	str	r4, [r0, #12]
 8006eae:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006eb0:	6819      	ldr	r1, [r3, #0]
 8006eb2:	b151      	cbz	r1, 8006eca <_dtoa_r+0x52>
 8006eb4:	685a      	ldr	r2, [r3, #4]
 8006eb6:	2301      	movs	r3, #1
 8006eb8:	4093      	lsls	r3, r2
 8006eba:	604a      	str	r2, [r1, #4]
 8006ebc:	608b      	str	r3, [r1, #8]
 8006ebe:	4628      	mov	r0, r5
 8006ec0:	f001 f9ba 	bl	8008238 <_Bfree>
 8006ec4:	2200      	movs	r2, #0
 8006ec6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006ec8:	601a      	str	r2, [r3, #0]
 8006eca:	1e3b      	subs	r3, r7, #0
 8006ecc:	bfaf      	iteee	ge
 8006ece:	2300      	movge	r3, #0
 8006ed0:	2201      	movlt	r2, #1
 8006ed2:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006ed6:	9305      	strlt	r3, [sp, #20]
 8006ed8:	bfa8      	it	ge
 8006eda:	f8c8 3000 	strge.w	r3, [r8]
 8006ede:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8006ee2:	4b9f      	ldr	r3, [pc, #636]	; (8007160 <_dtoa_r+0x2e8>)
 8006ee4:	bfb8      	it	lt
 8006ee6:	f8c8 2000 	strlt.w	r2, [r8]
 8006eea:	ea33 0309 	bics.w	r3, r3, r9
 8006eee:	d119      	bne.n	8006f24 <_dtoa_r+0xac>
 8006ef0:	f242 730f 	movw	r3, #9999	; 0x270f
 8006ef4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006ef6:	6013      	str	r3, [r2, #0]
 8006ef8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006efc:	4333      	orrs	r3, r6
 8006efe:	f000 8580 	beq.w	8007a02 <_dtoa_r+0xb8a>
 8006f02:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006f04:	b953      	cbnz	r3, 8006f1c <_dtoa_r+0xa4>
 8006f06:	4b97      	ldr	r3, [pc, #604]	; (8007164 <_dtoa_r+0x2ec>)
 8006f08:	e022      	b.n	8006f50 <_dtoa_r+0xd8>
 8006f0a:	4b97      	ldr	r3, [pc, #604]	; (8007168 <_dtoa_r+0x2f0>)
 8006f0c:	9308      	str	r3, [sp, #32]
 8006f0e:	3308      	adds	r3, #8
 8006f10:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8006f12:	6013      	str	r3, [r2, #0]
 8006f14:	9808      	ldr	r0, [sp, #32]
 8006f16:	b019      	add	sp, #100	; 0x64
 8006f18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f1c:	4b91      	ldr	r3, [pc, #580]	; (8007164 <_dtoa_r+0x2ec>)
 8006f1e:	9308      	str	r3, [sp, #32]
 8006f20:	3303      	adds	r3, #3
 8006f22:	e7f5      	b.n	8006f10 <_dtoa_r+0x98>
 8006f24:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8006f28:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8006f2c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006f30:	2200      	movs	r2, #0
 8006f32:	2300      	movs	r3, #0
 8006f34:	f7f9 fda4 	bl	8000a80 <__aeabi_dcmpeq>
 8006f38:	4680      	mov	r8, r0
 8006f3a:	b158      	cbz	r0, 8006f54 <_dtoa_r+0xdc>
 8006f3c:	2301      	movs	r3, #1
 8006f3e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006f40:	6013      	str	r3, [r2, #0]
 8006f42:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	f000 8559 	beq.w	80079fc <_dtoa_r+0xb84>
 8006f4a:	4888      	ldr	r0, [pc, #544]	; (800716c <_dtoa_r+0x2f4>)
 8006f4c:	6018      	str	r0, [r3, #0]
 8006f4e:	1e43      	subs	r3, r0, #1
 8006f50:	9308      	str	r3, [sp, #32]
 8006f52:	e7df      	b.n	8006f14 <_dtoa_r+0x9c>
 8006f54:	ab16      	add	r3, sp, #88	; 0x58
 8006f56:	9301      	str	r3, [sp, #4]
 8006f58:	ab17      	add	r3, sp, #92	; 0x5c
 8006f5a:	9300      	str	r3, [sp, #0]
 8006f5c:	4628      	mov	r0, r5
 8006f5e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8006f62:	f001 fd13 	bl	800898c <__d2b>
 8006f66:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8006f6a:	4682      	mov	sl, r0
 8006f6c:	2c00      	cmp	r4, #0
 8006f6e:	d07e      	beq.n	800706e <_dtoa_r+0x1f6>
 8006f70:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006f74:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006f76:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8006f7a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006f7e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8006f82:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8006f86:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8006f8a:	2200      	movs	r2, #0
 8006f8c:	4b78      	ldr	r3, [pc, #480]	; (8007170 <_dtoa_r+0x2f8>)
 8006f8e:	f7f9 f957 	bl	8000240 <__aeabi_dsub>
 8006f92:	a36b      	add	r3, pc, #428	; (adr r3, 8007140 <_dtoa_r+0x2c8>)
 8006f94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f98:	f7f9 fb0a 	bl	80005b0 <__aeabi_dmul>
 8006f9c:	a36a      	add	r3, pc, #424	; (adr r3, 8007148 <_dtoa_r+0x2d0>)
 8006f9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fa2:	f7f9 f94f 	bl	8000244 <__adddf3>
 8006fa6:	4606      	mov	r6, r0
 8006fa8:	4620      	mov	r0, r4
 8006faa:	460f      	mov	r7, r1
 8006fac:	f7f9 fa96 	bl	80004dc <__aeabi_i2d>
 8006fb0:	a367      	add	r3, pc, #412	; (adr r3, 8007150 <_dtoa_r+0x2d8>)
 8006fb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fb6:	f7f9 fafb 	bl	80005b0 <__aeabi_dmul>
 8006fba:	4602      	mov	r2, r0
 8006fbc:	460b      	mov	r3, r1
 8006fbe:	4630      	mov	r0, r6
 8006fc0:	4639      	mov	r1, r7
 8006fc2:	f7f9 f93f 	bl	8000244 <__adddf3>
 8006fc6:	4606      	mov	r6, r0
 8006fc8:	460f      	mov	r7, r1
 8006fca:	f7f9 fda1 	bl	8000b10 <__aeabi_d2iz>
 8006fce:	2200      	movs	r2, #0
 8006fd0:	4681      	mov	r9, r0
 8006fd2:	2300      	movs	r3, #0
 8006fd4:	4630      	mov	r0, r6
 8006fd6:	4639      	mov	r1, r7
 8006fd8:	f7f9 fd5c 	bl	8000a94 <__aeabi_dcmplt>
 8006fdc:	b148      	cbz	r0, 8006ff2 <_dtoa_r+0x17a>
 8006fde:	4648      	mov	r0, r9
 8006fe0:	f7f9 fa7c 	bl	80004dc <__aeabi_i2d>
 8006fe4:	4632      	mov	r2, r6
 8006fe6:	463b      	mov	r3, r7
 8006fe8:	f7f9 fd4a 	bl	8000a80 <__aeabi_dcmpeq>
 8006fec:	b908      	cbnz	r0, 8006ff2 <_dtoa_r+0x17a>
 8006fee:	f109 39ff 	add.w	r9, r9, #4294967295
 8006ff2:	f1b9 0f16 	cmp.w	r9, #22
 8006ff6:	d857      	bhi.n	80070a8 <_dtoa_r+0x230>
 8006ff8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006ffc:	4b5d      	ldr	r3, [pc, #372]	; (8007174 <_dtoa_r+0x2fc>)
 8006ffe:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8007002:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007006:	f7f9 fd45 	bl	8000a94 <__aeabi_dcmplt>
 800700a:	2800      	cmp	r0, #0
 800700c:	d04e      	beq.n	80070ac <_dtoa_r+0x234>
 800700e:	2300      	movs	r3, #0
 8007010:	f109 39ff 	add.w	r9, r9, #4294967295
 8007014:	930f      	str	r3, [sp, #60]	; 0x3c
 8007016:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8007018:	1b1c      	subs	r4, r3, r4
 800701a:	1e63      	subs	r3, r4, #1
 800701c:	9309      	str	r3, [sp, #36]	; 0x24
 800701e:	bf49      	itett	mi
 8007020:	f1c4 0301 	rsbmi	r3, r4, #1
 8007024:	2300      	movpl	r3, #0
 8007026:	9306      	strmi	r3, [sp, #24]
 8007028:	2300      	movmi	r3, #0
 800702a:	bf54      	ite	pl
 800702c:	9306      	strpl	r3, [sp, #24]
 800702e:	9309      	strmi	r3, [sp, #36]	; 0x24
 8007030:	f1b9 0f00 	cmp.w	r9, #0
 8007034:	db3c      	blt.n	80070b0 <_dtoa_r+0x238>
 8007036:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007038:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800703c:	444b      	add	r3, r9
 800703e:	9309      	str	r3, [sp, #36]	; 0x24
 8007040:	2300      	movs	r3, #0
 8007042:	930a      	str	r3, [sp, #40]	; 0x28
 8007044:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007046:	2b09      	cmp	r3, #9
 8007048:	d86c      	bhi.n	8007124 <_dtoa_r+0x2ac>
 800704a:	2b05      	cmp	r3, #5
 800704c:	bfc4      	itt	gt
 800704e:	3b04      	subgt	r3, #4
 8007050:	9322      	strgt	r3, [sp, #136]	; 0x88
 8007052:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007054:	bfc8      	it	gt
 8007056:	2400      	movgt	r4, #0
 8007058:	f1a3 0302 	sub.w	r3, r3, #2
 800705c:	bfd8      	it	le
 800705e:	2401      	movle	r4, #1
 8007060:	2b03      	cmp	r3, #3
 8007062:	f200 808b 	bhi.w	800717c <_dtoa_r+0x304>
 8007066:	e8df f003 	tbb	[pc, r3]
 800706a:	4f2d      	.short	0x4f2d
 800706c:	5b4d      	.short	0x5b4d
 800706e:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8007072:	441c      	add	r4, r3
 8007074:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8007078:	2b20      	cmp	r3, #32
 800707a:	bfc3      	ittte	gt
 800707c:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007080:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8007084:	fa09 f303 	lslgt.w	r3, r9, r3
 8007088:	f1c3 0320 	rsble	r3, r3, #32
 800708c:	bfc6      	itte	gt
 800708e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8007092:	4318      	orrgt	r0, r3
 8007094:	fa06 f003 	lslle.w	r0, r6, r3
 8007098:	f7f9 fa10 	bl	80004bc <__aeabi_ui2d>
 800709c:	2301      	movs	r3, #1
 800709e:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 80070a2:	3c01      	subs	r4, #1
 80070a4:	9313      	str	r3, [sp, #76]	; 0x4c
 80070a6:	e770      	b.n	8006f8a <_dtoa_r+0x112>
 80070a8:	2301      	movs	r3, #1
 80070aa:	e7b3      	b.n	8007014 <_dtoa_r+0x19c>
 80070ac:	900f      	str	r0, [sp, #60]	; 0x3c
 80070ae:	e7b2      	b.n	8007016 <_dtoa_r+0x19e>
 80070b0:	9b06      	ldr	r3, [sp, #24]
 80070b2:	eba3 0309 	sub.w	r3, r3, r9
 80070b6:	9306      	str	r3, [sp, #24]
 80070b8:	f1c9 0300 	rsb	r3, r9, #0
 80070bc:	930a      	str	r3, [sp, #40]	; 0x28
 80070be:	2300      	movs	r3, #0
 80070c0:	930e      	str	r3, [sp, #56]	; 0x38
 80070c2:	e7bf      	b.n	8007044 <_dtoa_r+0x1cc>
 80070c4:	2300      	movs	r3, #0
 80070c6:	930b      	str	r3, [sp, #44]	; 0x2c
 80070c8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	dc59      	bgt.n	8007182 <_dtoa_r+0x30a>
 80070ce:	f04f 0b01 	mov.w	fp, #1
 80070d2:	465b      	mov	r3, fp
 80070d4:	f8cd b008 	str.w	fp, [sp, #8]
 80070d8:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 80070dc:	2200      	movs	r2, #0
 80070de:	6a68      	ldr	r0, [r5, #36]	; 0x24
 80070e0:	6042      	str	r2, [r0, #4]
 80070e2:	2204      	movs	r2, #4
 80070e4:	f102 0614 	add.w	r6, r2, #20
 80070e8:	429e      	cmp	r6, r3
 80070ea:	6841      	ldr	r1, [r0, #4]
 80070ec:	d94f      	bls.n	800718e <_dtoa_r+0x316>
 80070ee:	4628      	mov	r0, r5
 80070f0:	f001 f862 	bl	80081b8 <_Balloc>
 80070f4:	9008      	str	r0, [sp, #32]
 80070f6:	2800      	cmp	r0, #0
 80070f8:	d14d      	bne.n	8007196 <_dtoa_r+0x31e>
 80070fa:	4602      	mov	r2, r0
 80070fc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007100:	4b1d      	ldr	r3, [pc, #116]	; (8007178 <_dtoa_r+0x300>)
 8007102:	e6cd      	b.n	8006ea0 <_dtoa_r+0x28>
 8007104:	2301      	movs	r3, #1
 8007106:	e7de      	b.n	80070c6 <_dtoa_r+0x24e>
 8007108:	2300      	movs	r3, #0
 800710a:	930b      	str	r3, [sp, #44]	; 0x2c
 800710c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800710e:	eb09 0b03 	add.w	fp, r9, r3
 8007112:	f10b 0301 	add.w	r3, fp, #1
 8007116:	2b01      	cmp	r3, #1
 8007118:	9302      	str	r3, [sp, #8]
 800711a:	bfb8      	it	lt
 800711c:	2301      	movlt	r3, #1
 800711e:	e7dd      	b.n	80070dc <_dtoa_r+0x264>
 8007120:	2301      	movs	r3, #1
 8007122:	e7f2      	b.n	800710a <_dtoa_r+0x292>
 8007124:	2401      	movs	r4, #1
 8007126:	2300      	movs	r3, #0
 8007128:	940b      	str	r4, [sp, #44]	; 0x2c
 800712a:	9322      	str	r3, [sp, #136]	; 0x88
 800712c:	f04f 3bff 	mov.w	fp, #4294967295
 8007130:	2200      	movs	r2, #0
 8007132:	2312      	movs	r3, #18
 8007134:	f8cd b008 	str.w	fp, [sp, #8]
 8007138:	9223      	str	r2, [sp, #140]	; 0x8c
 800713a:	e7cf      	b.n	80070dc <_dtoa_r+0x264>
 800713c:	f3af 8000 	nop.w
 8007140:	636f4361 	.word	0x636f4361
 8007144:	3fd287a7 	.word	0x3fd287a7
 8007148:	8b60c8b3 	.word	0x8b60c8b3
 800714c:	3fc68a28 	.word	0x3fc68a28
 8007150:	509f79fb 	.word	0x509f79fb
 8007154:	3fd34413 	.word	0x3fd34413
 8007158:	0800a5ae 	.word	0x0800a5ae
 800715c:	0800a5c5 	.word	0x0800a5c5
 8007160:	7ff00000 	.word	0x7ff00000
 8007164:	0800a5aa 	.word	0x0800a5aa
 8007168:	0800a5a1 	.word	0x0800a5a1
 800716c:	0800a82a 	.word	0x0800a82a
 8007170:	3ff80000 	.word	0x3ff80000
 8007174:	0800a740 	.word	0x0800a740
 8007178:	0800a624 	.word	0x0800a624
 800717c:	2301      	movs	r3, #1
 800717e:	930b      	str	r3, [sp, #44]	; 0x2c
 8007180:	e7d4      	b.n	800712c <_dtoa_r+0x2b4>
 8007182:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 8007186:	465b      	mov	r3, fp
 8007188:	f8cd b008 	str.w	fp, [sp, #8]
 800718c:	e7a6      	b.n	80070dc <_dtoa_r+0x264>
 800718e:	3101      	adds	r1, #1
 8007190:	6041      	str	r1, [r0, #4]
 8007192:	0052      	lsls	r2, r2, #1
 8007194:	e7a6      	b.n	80070e4 <_dtoa_r+0x26c>
 8007196:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007198:	9a08      	ldr	r2, [sp, #32]
 800719a:	601a      	str	r2, [r3, #0]
 800719c:	9b02      	ldr	r3, [sp, #8]
 800719e:	2b0e      	cmp	r3, #14
 80071a0:	f200 80a8 	bhi.w	80072f4 <_dtoa_r+0x47c>
 80071a4:	2c00      	cmp	r4, #0
 80071a6:	f000 80a5 	beq.w	80072f4 <_dtoa_r+0x47c>
 80071aa:	f1b9 0f00 	cmp.w	r9, #0
 80071ae:	dd34      	ble.n	800721a <_dtoa_r+0x3a2>
 80071b0:	4a9a      	ldr	r2, [pc, #616]	; (800741c <_dtoa_r+0x5a4>)
 80071b2:	f009 030f 	and.w	r3, r9, #15
 80071b6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80071ba:	f419 7f80 	tst.w	r9, #256	; 0x100
 80071be:	e9d3 3400 	ldrd	r3, r4, [r3]
 80071c2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80071c6:	ea4f 1429 	mov.w	r4, r9, asr #4
 80071ca:	d016      	beq.n	80071fa <_dtoa_r+0x382>
 80071cc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80071d0:	4b93      	ldr	r3, [pc, #588]	; (8007420 <_dtoa_r+0x5a8>)
 80071d2:	2703      	movs	r7, #3
 80071d4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80071d8:	f7f9 fb14 	bl	8000804 <__aeabi_ddiv>
 80071dc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80071e0:	f004 040f 	and.w	r4, r4, #15
 80071e4:	4e8e      	ldr	r6, [pc, #568]	; (8007420 <_dtoa_r+0x5a8>)
 80071e6:	b954      	cbnz	r4, 80071fe <_dtoa_r+0x386>
 80071e8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80071ec:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80071f0:	f7f9 fb08 	bl	8000804 <__aeabi_ddiv>
 80071f4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80071f8:	e029      	b.n	800724e <_dtoa_r+0x3d6>
 80071fa:	2702      	movs	r7, #2
 80071fc:	e7f2      	b.n	80071e4 <_dtoa_r+0x36c>
 80071fe:	07e1      	lsls	r1, r4, #31
 8007200:	d508      	bpl.n	8007214 <_dtoa_r+0x39c>
 8007202:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007206:	e9d6 2300 	ldrd	r2, r3, [r6]
 800720a:	f7f9 f9d1 	bl	80005b0 <__aeabi_dmul>
 800720e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007212:	3701      	adds	r7, #1
 8007214:	1064      	asrs	r4, r4, #1
 8007216:	3608      	adds	r6, #8
 8007218:	e7e5      	b.n	80071e6 <_dtoa_r+0x36e>
 800721a:	f000 80a5 	beq.w	8007368 <_dtoa_r+0x4f0>
 800721e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007222:	f1c9 0400 	rsb	r4, r9, #0
 8007226:	4b7d      	ldr	r3, [pc, #500]	; (800741c <_dtoa_r+0x5a4>)
 8007228:	f004 020f 	and.w	r2, r4, #15
 800722c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007230:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007234:	f7f9 f9bc 	bl	80005b0 <__aeabi_dmul>
 8007238:	2702      	movs	r7, #2
 800723a:	2300      	movs	r3, #0
 800723c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007240:	4e77      	ldr	r6, [pc, #476]	; (8007420 <_dtoa_r+0x5a8>)
 8007242:	1124      	asrs	r4, r4, #4
 8007244:	2c00      	cmp	r4, #0
 8007246:	f040 8084 	bne.w	8007352 <_dtoa_r+0x4da>
 800724a:	2b00      	cmp	r3, #0
 800724c:	d1d2      	bne.n	80071f4 <_dtoa_r+0x37c>
 800724e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007250:	2b00      	cmp	r3, #0
 8007252:	f000 808b 	beq.w	800736c <_dtoa_r+0x4f4>
 8007256:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800725a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800725e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007262:	2200      	movs	r2, #0
 8007264:	4b6f      	ldr	r3, [pc, #444]	; (8007424 <_dtoa_r+0x5ac>)
 8007266:	f7f9 fc15 	bl	8000a94 <__aeabi_dcmplt>
 800726a:	2800      	cmp	r0, #0
 800726c:	d07e      	beq.n	800736c <_dtoa_r+0x4f4>
 800726e:	9b02      	ldr	r3, [sp, #8]
 8007270:	2b00      	cmp	r3, #0
 8007272:	d07b      	beq.n	800736c <_dtoa_r+0x4f4>
 8007274:	f1bb 0f00 	cmp.w	fp, #0
 8007278:	dd38      	ble.n	80072ec <_dtoa_r+0x474>
 800727a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800727e:	2200      	movs	r2, #0
 8007280:	4b69      	ldr	r3, [pc, #420]	; (8007428 <_dtoa_r+0x5b0>)
 8007282:	f7f9 f995 	bl	80005b0 <__aeabi_dmul>
 8007286:	465c      	mov	r4, fp
 8007288:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800728c:	f109 38ff 	add.w	r8, r9, #4294967295
 8007290:	3701      	adds	r7, #1
 8007292:	4638      	mov	r0, r7
 8007294:	f7f9 f922 	bl	80004dc <__aeabi_i2d>
 8007298:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800729c:	f7f9 f988 	bl	80005b0 <__aeabi_dmul>
 80072a0:	2200      	movs	r2, #0
 80072a2:	4b62      	ldr	r3, [pc, #392]	; (800742c <_dtoa_r+0x5b4>)
 80072a4:	f7f8 ffce 	bl	8000244 <__adddf3>
 80072a8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80072ac:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80072b0:	9611      	str	r6, [sp, #68]	; 0x44
 80072b2:	2c00      	cmp	r4, #0
 80072b4:	d15d      	bne.n	8007372 <_dtoa_r+0x4fa>
 80072b6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80072ba:	2200      	movs	r2, #0
 80072bc:	4b5c      	ldr	r3, [pc, #368]	; (8007430 <_dtoa_r+0x5b8>)
 80072be:	f7f8 ffbf 	bl	8000240 <__aeabi_dsub>
 80072c2:	4602      	mov	r2, r0
 80072c4:	460b      	mov	r3, r1
 80072c6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80072ca:	4633      	mov	r3, r6
 80072cc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80072ce:	f7f9 fbff 	bl	8000ad0 <__aeabi_dcmpgt>
 80072d2:	2800      	cmp	r0, #0
 80072d4:	f040 829e 	bne.w	8007814 <_dtoa_r+0x99c>
 80072d8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80072dc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80072de:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80072e2:	f7f9 fbd7 	bl	8000a94 <__aeabi_dcmplt>
 80072e6:	2800      	cmp	r0, #0
 80072e8:	f040 8292 	bne.w	8007810 <_dtoa_r+0x998>
 80072ec:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 80072f0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80072f4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	f2c0 8153 	blt.w	80075a2 <_dtoa_r+0x72a>
 80072fc:	f1b9 0f0e 	cmp.w	r9, #14
 8007300:	f300 814f 	bgt.w	80075a2 <_dtoa_r+0x72a>
 8007304:	4b45      	ldr	r3, [pc, #276]	; (800741c <_dtoa_r+0x5a4>)
 8007306:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800730a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800730e:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8007312:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007314:	2b00      	cmp	r3, #0
 8007316:	f280 80db 	bge.w	80074d0 <_dtoa_r+0x658>
 800731a:	9b02      	ldr	r3, [sp, #8]
 800731c:	2b00      	cmp	r3, #0
 800731e:	f300 80d7 	bgt.w	80074d0 <_dtoa_r+0x658>
 8007322:	f040 8274 	bne.w	800780e <_dtoa_r+0x996>
 8007326:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800732a:	2200      	movs	r2, #0
 800732c:	4b40      	ldr	r3, [pc, #256]	; (8007430 <_dtoa_r+0x5b8>)
 800732e:	f7f9 f93f 	bl	80005b0 <__aeabi_dmul>
 8007332:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007336:	f7f9 fbc1 	bl	8000abc <__aeabi_dcmpge>
 800733a:	9c02      	ldr	r4, [sp, #8]
 800733c:	4626      	mov	r6, r4
 800733e:	2800      	cmp	r0, #0
 8007340:	f040 824a 	bne.w	80077d8 <_dtoa_r+0x960>
 8007344:	2331      	movs	r3, #49	; 0x31
 8007346:	9f08      	ldr	r7, [sp, #32]
 8007348:	f109 0901 	add.w	r9, r9, #1
 800734c:	f807 3b01 	strb.w	r3, [r7], #1
 8007350:	e246      	b.n	80077e0 <_dtoa_r+0x968>
 8007352:	07e2      	lsls	r2, r4, #31
 8007354:	d505      	bpl.n	8007362 <_dtoa_r+0x4ea>
 8007356:	e9d6 2300 	ldrd	r2, r3, [r6]
 800735a:	f7f9 f929 	bl	80005b0 <__aeabi_dmul>
 800735e:	2301      	movs	r3, #1
 8007360:	3701      	adds	r7, #1
 8007362:	1064      	asrs	r4, r4, #1
 8007364:	3608      	adds	r6, #8
 8007366:	e76d      	b.n	8007244 <_dtoa_r+0x3cc>
 8007368:	2702      	movs	r7, #2
 800736a:	e770      	b.n	800724e <_dtoa_r+0x3d6>
 800736c:	46c8      	mov	r8, r9
 800736e:	9c02      	ldr	r4, [sp, #8]
 8007370:	e78f      	b.n	8007292 <_dtoa_r+0x41a>
 8007372:	9908      	ldr	r1, [sp, #32]
 8007374:	4b29      	ldr	r3, [pc, #164]	; (800741c <_dtoa_r+0x5a4>)
 8007376:	4421      	add	r1, r4
 8007378:	9112      	str	r1, [sp, #72]	; 0x48
 800737a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800737c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007380:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8007384:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007388:	2900      	cmp	r1, #0
 800738a:	d055      	beq.n	8007438 <_dtoa_r+0x5c0>
 800738c:	2000      	movs	r0, #0
 800738e:	4929      	ldr	r1, [pc, #164]	; (8007434 <_dtoa_r+0x5bc>)
 8007390:	f7f9 fa38 	bl	8000804 <__aeabi_ddiv>
 8007394:	463b      	mov	r3, r7
 8007396:	4632      	mov	r2, r6
 8007398:	f7f8 ff52 	bl	8000240 <__aeabi_dsub>
 800739c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80073a0:	9f08      	ldr	r7, [sp, #32]
 80073a2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80073a6:	f7f9 fbb3 	bl	8000b10 <__aeabi_d2iz>
 80073aa:	4604      	mov	r4, r0
 80073ac:	f7f9 f896 	bl	80004dc <__aeabi_i2d>
 80073b0:	4602      	mov	r2, r0
 80073b2:	460b      	mov	r3, r1
 80073b4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80073b8:	f7f8 ff42 	bl	8000240 <__aeabi_dsub>
 80073bc:	4602      	mov	r2, r0
 80073be:	460b      	mov	r3, r1
 80073c0:	3430      	adds	r4, #48	; 0x30
 80073c2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80073c6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80073ca:	f807 4b01 	strb.w	r4, [r7], #1
 80073ce:	f7f9 fb61 	bl	8000a94 <__aeabi_dcmplt>
 80073d2:	2800      	cmp	r0, #0
 80073d4:	d174      	bne.n	80074c0 <_dtoa_r+0x648>
 80073d6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80073da:	2000      	movs	r0, #0
 80073dc:	4911      	ldr	r1, [pc, #68]	; (8007424 <_dtoa_r+0x5ac>)
 80073de:	f7f8 ff2f 	bl	8000240 <__aeabi_dsub>
 80073e2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80073e6:	f7f9 fb55 	bl	8000a94 <__aeabi_dcmplt>
 80073ea:	2800      	cmp	r0, #0
 80073ec:	f040 80b6 	bne.w	800755c <_dtoa_r+0x6e4>
 80073f0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80073f2:	429f      	cmp	r7, r3
 80073f4:	f43f af7a 	beq.w	80072ec <_dtoa_r+0x474>
 80073f8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80073fc:	2200      	movs	r2, #0
 80073fe:	4b0a      	ldr	r3, [pc, #40]	; (8007428 <_dtoa_r+0x5b0>)
 8007400:	f7f9 f8d6 	bl	80005b0 <__aeabi_dmul>
 8007404:	2200      	movs	r2, #0
 8007406:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800740a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800740e:	4b06      	ldr	r3, [pc, #24]	; (8007428 <_dtoa_r+0x5b0>)
 8007410:	f7f9 f8ce 	bl	80005b0 <__aeabi_dmul>
 8007414:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007418:	e7c3      	b.n	80073a2 <_dtoa_r+0x52a>
 800741a:	bf00      	nop
 800741c:	0800a740 	.word	0x0800a740
 8007420:	0800a718 	.word	0x0800a718
 8007424:	3ff00000 	.word	0x3ff00000
 8007428:	40240000 	.word	0x40240000
 800742c:	401c0000 	.word	0x401c0000
 8007430:	40140000 	.word	0x40140000
 8007434:	3fe00000 	.word	0x3fe00000
 8007438:	4630      	mov	r0, r6
 800743a:	4639      	mov	r1, r7
 800743c:	f7f9 f8b8 	bl	80005b0 <__aeabi_dmul>
 8007440:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007442:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007446:	9c08      	ldr	r4, [sp, #32]
 8007448:	9314      	str	r3, [sp, #80]	; 0x50
 800744a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800744e:	f7f9 fb5f 	bl	8000b10 <__aeabi_d2iz>
 8007452:	9015      	str	r0, [sp, #84]	; 0x54
 8007454:	f7f9 f842 	bl	80004dc <__aeabi_i2d>
 8007458:	4602      	mov	r2, r0
 800745a:	460b      	mov	r3, r1
 800745c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007460:	f7f8 feee 	bl	8000240 <__aeabi_dsub>
 8007464:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007466:	4606      	mov	r6, r0
 8007468:	3330      	adds	r3, #48	; 0x30
 800746a:	f804 3b01 	strb.w	r3, [r4], #1
 800746e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007470:	460f      	mov	r7, r1
 8007472:	429c      	cmp	r4, r3
 8007474:	f04f 0200 	mov.w	r2, #0
 8007478:	d124      	bne.n	80074c4 <_dtoa_r+0x64c>
 800747a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800747e:	4bb3      	ldr	r3, [pc, #716]	; (800774c <_dtoa_r+0x8d4>)
 8007480:	f7f8 fee0 	bl	8000244 <__adddf3>
 8007484:	4602      	mov	r2, r0
 8007486:	460b      	mov	r3, r1
 8007488:	4630      	mov	r0, r6
 800748a:	4639      	mov	r1, r7
 800748c:	f7f9 fb20 	bl	8000ad0 <__aeabi_dcmpgt>
 8007490:	2800      	cmp	r0, #0
 8007492:	d162      	bne.n	800755a <_dtoa_r+0x6e2>
 8007494:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007498:	2000      	movs	r0, #0
 800749a:	49ac      	ldr	r1, [pc, #688]	; (800774c <_dtoa_r+0x8d4>)
 800749c:	f7f8 fed0 	bl	8000240 <__aeabi_dsub>
 80074a0:	4602      	mov	r2, r0
 80074a2:	460b      	mov	r3, r1
 80074a4:	4630      	mov	r0, r6
 80074a6:	4639      	mov	r1, r7
 80074a8:	f7f9 faf4 	bl	8000a94 <__aeabi_dcmplt>
 80074ac:	2800      	cmp	r0, #0
 80074ae:	f43f af1d 	beq.w	80072ec <_dtoa_r+0x474>
 80074b2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80074b4:	1e7b      	subs	r3, r7, #1
 80074b6:	9314      	str	r3, [sp, #80]	; 0x50
 80074b8:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 80074bc:	2b30      	cmp	r3, #48	; 0x30
 80074be:	d0f8      	beq.n	80074b2 <_dtoa_r+0x63a>
 80074c0:	46c1      	mov	r9, r8
 80074c2:	e03a      	b.n	800753a <_dtoa_r+0x6c2>
 80074c4:	4ba2      	ldr	r3, [pc, #648]	; (8007750 <_dtoa_r+0x8d8>)
 80074c6:	f7f9 f873 	bl	80005b0 <__aeabi_dmul>
 80074ca:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80074ce:	e7bc      	b.n	800744a <_dtoa_r+0x5d2>
 80074d0:	9f08      	ldr	r7, [sp, #32]
 80074d2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80074d6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80074da:	f7f9 f993 	bl	8000804 <__aeabi_ddiv>
 80074de:	f7f9 fb17 	bl	8000b10 <__aeabi_d2iz>
 80074e2:	4604      	mov	r4, r0
 80074e4:	f7f8 fffa 	bl	80004dc <__aeabi_i2d>
 80074e8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80074ec:	f7f9 f860 	bl	80005b0 <__aeabi_dmul>
 80074f0:	f104 0630 	add.w	r6, r4, #48	; 0x30
 80074f4:	460b      	mov	r3, r1
 80074f6:	4602      	mov	r2, r0
 80074f8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80074fc:	f7f8 fea0 	bl	8000240 <__aeabi_dsub>
 8007500:	f807 6b01 	strb.w	r6, [r7], #1
 8007504:	9e08      	ldr	r6, [sp, #32]
 8007506:	9b02      	ldr	r3, [sp, #8]
 8007508:	1bbe      	subs	r6, r7, r6
 800750a:	42b3      	cmp	r3, r6
 800750c:	d13a      	bne.n	8007584 <_dtoa_r+0x70c>
 800750e:	4602      	mov	r2, r0
 8007510:	460b      	mov	r3, r1
 8007512:	f7f8 fe97 	bl	8000244 <__adddf3>
 8007516:	4602      	mov	r2, r0
 8007518:	460b      	mov	r3, r1
 800751a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800751e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007522:	f7f9 fad5 	bl	8000ad0 <__aeabi_dcmpgt>
 8007526:	bb58      	cbnz	r0, 8007580 <_dtoa_r+0x708>
 8007528:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800752c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007530:	f7f9 faa6 	bl	8000a80 <__aeabi_dcmpeq>
 8007534:	b108      	cbz	r0, 800753a <_dtoa_r+0x6c2>
 8007536:	07e1      	lsls	r1, r4, #31
 8007538:	d422      	bmi.n	8007580 <_dtoa_r+0x708>
 800753a:	4628      	mov	r0, r5
 800753c:	4651      	mov	r1, sl
 800753e:	f000 fe7b 	bl	8008238 <_Bfree>
 8007542:	2300      	movs	r3, #0
 8007544:	703b      	strb	r3, [r7, #0]
 8007546:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8007548:	f109 0001 	add.w	r0, r9, #1
 800754c:	6018      	str	r0, [r3, #0]
 800754e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007550:	2b00      	cmp	r3, #0
 8007552:	f43f acdf 	beq.w	8006f14 <_dtoa_r+0x9c>
 8007556:	601f      	str	r7, [r3, #0]
 8007558:	e4dc      	b.n	8006f14 <_dtoa_r+0x9c>
 800755a:	4627      	mov	r7, r4
 800755c:	463b      	mov	r3, r7
 800755e:	461f      	mov	r7, r3
 8007560:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007564:	2a39      	cmp	r2, #57	; 0x39
 8007566:	d107      	bne.n	8007578 <_dtoa_r+0x700>
 8007568:	9a08      	ldr	r2, [sp, #32]
 800756a:	429a      	cmp	r2, r3
 800756c:	d1f7      	bne.n	800755e <_dtoa_r+0x6e6>
 800756e:	2230      	movs	r2, #48	; 0x30
 8007570:	9908      	ldr	r1, [sp, #32]
 8007572:	f108 0801 	add.w	r8, r8, #1
 8007576:	700a      	strb	r2, [r1, #0]
 8007578:	781a      	ldrb	r2, [r3, #0]
 800757a:	3201      	adds	r2, #1
 800757c:	701a      	strb	r2, [r3, #0]
 800757e:	e79f      	b.n	80074c0 <_dtoa_r+0x648>
 8007580:	46c8      	mov	r8, r9
 8007582:	e7eb      	b.n	800755c <_dtoa_r+0x6e4>
 8007584:	2200      	movs	r2, #0
 8007586:	4b72      	ldr	r3, [pc, #456]	; (8007750 <_dtoa_r+0x8d8>)
 8007588:	f7f9 f812 	bl	80005b0 <__aeabi_dmul>
 800758c:	4602      	mov	r2, r0
 800758e:	460b      	mov	r3, r1
 8007590:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007594:	2200      	movs	r2, #0
 8007596:	2300      	movs	r3, #0
 8007598:	f7f9 fa72 	bl	8000a80 <__aeabi_dcmpeq>
 800759c:	2800      	cmp	r0, #0
 800759e:	d098      	beq.n	80074d2 <_dtoa_r+0x65a>
 80075a0:	e7cb      	b.n	800753a <_dtoa_r+0x6c2>
 80075a2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80075a4:	2a00      	cmp	r2, #0
 80075a6:	f000 80cd 	beq.w	8007744 <_dtoa_r+0x8cc>
 80075aa:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80075ac:	2a01      	cmp	r2, #1
 80075ae:	f300 80af 	bgt.w	8007710 <_dtoa_r+0x898>
 80075b2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80075b4:	2a00      	cmp	r2, #0
 80075b6:	f000 80a7 	beq.w	8007708 <_dtoa_r+0x890>
 80075ba:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80075be:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80075c0:	9f06      	ldr	r7, [sp, #24]
 80075c2:	9a06      	ldr	r2, [sp, #24]
 80075c4:	2101      	movs	r1, #1
 80075c6:	441a      	add	r2, r3
 80075c8:	9206      	str	r2, [sp, #24]
 80075ca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80075cc:	4628      	mov	r0, r5
 80075ce:	441a      	add	r2, r3
 80075d0:	9209      	str	r2, [sp, #36]	; 0x24
 80075d2:	f000 ff35 	bl	8008440 <__i2b>
 80075d6:	4606      	mov	r6, r0
 80075d8:	2f00      	cmp	r7, #0
 80075da:	dd0c      	ble.n	80075f6 <_dtoa_r+0x77e>
 80075dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80075de:	2b00      	cmp	r3, #0
 80075e0:	dd09      	ble.n	80075f6 <_dtoa_r+0x77e>
 80075e2:	42bb      	cmp	r3, r7
 80075e4:	bfa8      	it	ge
 80075e6:	463b      	movge	r3, r7
 80075e8:	9a06      	ldr	r2, [sp, #24]
 80075ea:	1aff      	subs	r7, r7, r3
 80075ec:	1ad2      	subs	r2, r2, r3
 80075ee:	9206      	str	r2, [sp, #24]
 80075f0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80075f2:	1ad3      	subs	r3, r2, r3
 80075f4:	9309      	str	r3, [sp, #36]	; 0x24
 80075f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80075f8:	b1f3      	cbz	r3, 8007638 <_dtoa_r+0x7c0>
 80075fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	f000 80a9 	beq.w	8007754 <_dtoa_r+0x8dc>
 8007602:	2c00      	cmp	r4, #0
 8007604:	dd10      	ble.n	8007628 <_dtoa_r+0x7b0>
 8007606:	4631      	mov	r1, r6
 8007608:	4622      	mov	r2, r4
 800760a:	4628      	mov	r0, r5
 800760c:	f000 ffd2 	bl	80085b4 <__pow5mult>
 8007610:	4652      	mov	r2, sl
 8007612:	4601      	mov	r1, r0
 8007614:	4606      	mov	r6, r0
 8007616:	4628      	mov	r0, r5
 8007618:	f000 ff28 	bl	800846c <__multiply>
 800761c:	4680      	mov	r8, r0
 800761e:	4651      	mov	r1, sl
 8007620:	4628      	mov	r0, r5
 8007622:	f000 fe09 	bl	8008238 <_Bfree>
 8007626:	46c2      	mov	sl, r8
 8007628:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800762a:	1b1a      	subs	r2, r3, r4
 800762c:	d004      	beq.n	8007638 <_dtoa_r+0x7c0>
 800762e:	4651      	mov	r1, sl
 8007630:	4628      	mov	r0, r5
 8007632:	f000 ffbf 	bl	80085b4 <__pow5mult>
 8007636:	4682      	mov	sl, r0
 8007638:	2101      	movs	r1, #1
 800763a:	4628      	mov	r0, r5
 800763c:	f000 ff00 	bl	8008440 <__i2b>
 8007640:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007642:	4604      	mov	r4, r0
 8007644:	2b00      	cmp	r3, #0
 8007646:	f340 8087 	ble.w	8007758 <_dtoa_r+0x8e0>
 800764a:	461a      	mov	r2, r3
 800764c:	4601      	mov	r1, r0
 800764e:	4628      	mov	r0, r5
 8007650:	f000 ffb0 	bl	80085b4 <__pow5mult>
 8007654:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007656:	4604      	mov	r4, r0
 8007658:	2b01      	cmp	r3, #1
 800765a:	f340 8080 	ble.w	800775e <_dtoa_r+0x8e6>
 800765e:	f04f 0800 	mov.w	r8, #0
 8007662:	6923      	ldr	r3, [r4, #16]
 8007664:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007668:	6918      	ldr	r0, [r3, #16]
 800766a:	f000 fe9b 	bl	80083a4 <__hi0bits>
 800766e:	f1c0 0020 	rsb	r0, r0, #32
 8007672:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007674:	4418      	add	r0, r3
 8007676:	f010 001f 	ands.w	r0, r0, #31
 800767a:	f000 8092 	beq.w	80077a2 <_dtoa_r+0x92a>
 800767e:	f1c0 0320 	rsb	r3, r0, #32
 8007682:	2b04      	cmp	r3, #4
 8007684:	f340 808a 	ble.w	800779c <_dtoa_r+0x924>
 8007688:	f1c0 001c 	rsb	r0, r0, #28
 800768c:	9b06      	ldr	r3, [sp, #24]
 800768e:	4407      	add	r7, r0
 8007690:	4403      	add	r3, r0
 8007692:	9306      	str	r3, [sp, #24]
 8007694:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007696:	4403      	add	r3, r0
 8007698:	9309      	str	r3, [sp, #36]	; 0x24
 800769a:	9b06      	ldr	r3, [sp, #24]
 800769c:	2b00      	cmp	r3, #0
 800769e:	dd05      	ble.n	80076ac <_dtoa_r+0x834>
 80076a0:	4651      	mov	r1, sl
 80076a2:	461a      	mov	r2, r3
 80076a4:	4628      	mov	r0, r5
 80076a6:	f000 ffdf 	bl	8008668 <__lshift>
 80076aa:	4682      	mov	sl, r0
 80076ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	dd05      	ble.n	80076be <_dtoa_r+0x846>
 80076b2:	4621      	mov	r1, r4
 80076b4:	461a      	mov	r2, r3
 80076b6:	4628      	mov	r0, r5
 80076b8:	f000 ffd6 	bl	8008668 <__lshift>
 80076bc:	4604      	mov	r4, r0
 80076be:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d070      	beq.n	80077a6 <_dtoa_r+0x92e>
 80076c4:	4621      	mov	r1, r4
 80076c6:	4650      	mov	r0, sl
 80076c8:	f001 f83a 	bl	8008740 <__mcmp>
 80076cc:	2800      	cmp	r0, #0
 80076ce:	da6a      	bge.n	80077a6 <_dtoa_r+0x92e>
 80076d0:	2300      	movs	r3, #0
 80076d2:	4651      	mov	r1, sl
 80076d4:	220a      	movs	r2, #10
 80076d6:	4628      	mov	r0, r5
 80076d8:	f000 fdd0 	bl	800827c <__multadd>
 80076dc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80076de:	4682      	mov	sl, r0
 80076e0:	f109 39ff 	add.w	r9, r9, #4294967295
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	f000 8193 	beq.w	8007a10 <_dtoa_r+0xb98>
 80076ea:	4631      	mov	r1, r6
 80076ec:	2300      	movs	r3, #0
 80076ee:	220a      	movs	r2, #10
 80076f0:	4628      	mov	r0, r5
 80076f2:	f000 fdc3 	bl	800827c <__multadd>
 80076f6:	f1bb 0f00 	cmp.w	fp, #0
 80076fa:	4606      	mov	r6, r0
 80076fc:	f300 8093 	bgt.w	8007826 <_dtoa_r+0x9ae>
 8007700:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007702:	2b02      	cmp	r3, #2
 8007704:	dc57      	bgt.n	80077b6 <_dtoa_r+0x93e>
 8007706:	e08e      	b.n	8007826 <_dtoa_r+0x9ae>
 8007708:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800770a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800770e:	e756      	b.n	80075be <_dtoa_r+0x746>
 8007710:	9b02      	ldr	r3, [sp, #8]
 8007712:	1e5c      	subs	r4, r3, #1
 8007714:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007716:	42a3      	cmp	r3, r4
 8007718:	bfb7      	itett	lt
 800771a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800771c:	1b1c      	subge	r4, r3, r4
 800771e:	1ae2      	sublt	r2, r4, r3
 8007720:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8007722:	bfbe      	ittt	lt
 8007724:	940a      	strlt	r4, [sp, #40]	; 0x28
 8007726:	189b      	addlt	r3, r3, r2
 8007728:	930e      	strlt	r3, [sp, #56]	; 0x38
 800772a:	9b02      	ldr	r3, [sp, #8]
 800772c:	bfb8      	it	lt
 800772e:	2400      	movlt	r4, #0
 8007730:	2b00      	cmp	r3, #0
 8007732:	bfbb      	ittet	lt
 8007734:	9b06      	ldrlt	r3, [sp, #24]
 8007736:	9a02      	ldrlt	r2, [sp, #8]
 8007738:	9f06      	ldrge	r7, [sp, #24]
 800773a:	1a9f      	sublt	r7, r3, r2
 800773c:	bfac      	ite	ge
 800773e:	9b02      	ldrge	r3, [sp, #8]
 8007740:	2300      	movlt	r3, #0
 8007742:	e73e      	b.n	80075c2 <_dtoa_r+0x74a>
 8007744:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007746:	9f06      	ldr	r7, [sp, #24]
 8007748:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800774a:	e745      	b.n	80075d8 <_dtoa_r+0x760>
 800774c:	3fe00000 	.word	0x3fe00000
 8007750:	40240000 	.word	0x40240000
 8007754:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007756:	e76a      	b.n	800762e <_dtoa_r+0x7b6>
 8007758:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800775a:	2b01      	cmp	r3, #1
 800775c:	dc19      	bgt.n	8007792 <_dtoa_r+0x91a>
 800775e:	9b04      	ldr	r3, [sp, #16]
 8007760:	b9bb      	cbnz	r3, 8007792 <_dtoa_r+0x91a>
 8007762:	9b05      	ldr	r3, [sp, #20]
 8007764:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007768:	b99b      	cbnz	r3, 8007792 <_dtoa_r+0x91a>
 800776a:	9b05      	ldr	r3, [sp, #20]
 800776c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007770:	0d1b      	lsrs	r3, r3, #20
 8007772:	051b      	lsls	r3, r3, #20
 8007774:	b183      	cbz	r3, 8007798 <_dtoa_r+0x920>
 8007776:	f04f 0801 	mov.w	r8, #1
 800777a:	9b06      	ldr	r3, [sp, #24]
 800777c:	3301      	adds	r3, #1
 800777e:	9306      	str	r3, [sp, #24]
 8007780:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007782:	3301      	adds	r3, #1
 8007784:	9309      	str	r3, [sp, #36]	; 0x24
 8007786:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007788:	2b00      	cmp	r3, #0
 800778a:	f47f af6a 	bne.w	8007662 <_dtoa_r+0x7ea>
 800778e:	2001      	movs	r0, #1
 8007790:	e76f      	b.n	8007672 <_dtoa_r+0x7fa>
 8007792:	f04f 0800 	mov.w	r8, #0
 8007796:	e7f6      	b.n	8007786 <_dtoa_r+0x90e>
 8007798:	4698      	mov	r8, r3
 800779a:	e7f4      	b.n	8007786 <_dtoa_r+0x90e>
 800779c:	f43f af7d 	beq.w	800769a <_dtoa_r+0x822>
 80077a0:	4618      	mov	r0, r3
 80077a2:	301c      	adds	r0, #28
 80077a4:	e772      	b.n	800768c <_dtoa_r+0x814>
 80077a6:	9b02      	ldr	r3, [sp, #8]
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	dc36      	bgt.n	800781a <_dtoa_r+0x9a2>
 80077ac:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80077ae:	2b02      	cmp	r3, #2
 80077b0:	dd33      	ble.n	800781a <_dtoa_r+0x9a2>
 80077b2:	f8dd b008 	ldr.w	fp, [sp, #8]
 80077b6:	f1bb 0f00 	cmp.w	fp, #0
 80077ba:	d10d      	bne.n	80077d8 <_dtoa_r+0x960>
 80077bc:	4621      	mov	r1, r4
 80077be:	465b      	mov	r3, fp
 80077c0:	2205      	movs	r2, #5
 80077c2:	4628      	mov	r0, r5
 80077c4:	f000 fd5a 	bl	800827c <__multadd>
 80077c8:	4601      	mov	r1, r0
 80077ca:	4604      	mov	r4, r0
 80077cc:	4650      	mov	r0, sl
 80077ce:	f000 ffb7 	bl	8008740 <__mcmp>
 80077d2:	2800      	cmp	r0, #0
 80077d4:	f73f adb6 	bgt.w	8007344 <_dtoa_r+0x4cc>
 80077d8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80077da:	9f08      	ldr	r7, [sp, #32]
 80077dc:	ea6f 0903 	mvn.w	r9, r3
 80077e0:	f04f 0800 	mov.w	r8, #0
 80077e4:	4621      	mov	r1, r4
 80077e6:	4628      	mov	r0, r5
 80077e8:	f000 fd26 	bl	8008238 <_Bfree>
 80077ec:	2e00      	cmp	r6, #0
 80077ee:	f43f aea4 	beq.w	800753a <_dtoa_r+0x6c2>
 80077f2:	f1b8 0f00 	cmp.w	r8, #0
 80077f6:	d005      	beq.n	8007804 <_dtoa_r+0x98c>
 80077f8:	45b0      	cmp	r8, r6
 80077fa:	d003      	beq.n	8007804 <_dtoa_r+0x98c>
 80077fc:	4641      	mov	r1, r8
 80077fe:	4628      	mov	r0, r5
 8007800:	f000 fd1a 	bl	8008238 <_Bfree>
 8007804:	4631      	mov	r1, r6
 8007806:	4628      	mov	r0, r5
 8007808:	f000 fd16 	bl	8008238 <_Bfree>
 800780c:	e695      	b.n	800753a <_dtoa_r+0x6c2>
 800780e:	2400      	movs	r4, #0
 8007810:	4626      	mov	r6, r4
 8007812:	e7e1      	b.n	80077d8 <_dtoa_r+0x960>
 8007814:	46c1      	mov	r9, r8
 8007816:	4626      	mov	r6, r4
 8007818:	e594      	b.n	8007344 <_dtoa_r+0x4cc>
 800781a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800781c:	f8dd b008 	ldr.w	fp, [sp, #8]
 8007820:	2b00      	cmp	r3, #0
 8007822:	f000 80fc 	beq.w	8007a1e <_dtoa_r+0xba6>
 8007826:	2f00      	cmp	r7, #0
 8007828:	dd05      	ble.n	8007836 <_dtoa_r+0x9be>
 800782a:	4631      	mov	r1, r6
 800782c:	463a      	mov	r2, r7
 800782e:	4628      	mov	r0, r5
 8007830:	f000 ff1a 	bl	8008668 <__lshift>
 8007834:	4606      	mov	r6, r0
 8007836:	f1b8 0f00 	cmp.w	r8, #0
 800783a:	d05c      	beq.n	80078f6 <_dtoa_r+0xa7e>
 800783c:	4628      	mov	r0, r5
 800783e:	6871      	ldr	r1, [r6, #4]
 8007840:	f000 fcba 	bl	80081b8 <_Balloc>
 8007844:	4607      	mov	r7, r0
 8007846:	b928      	cbnz	r0, 8007854 <_dtoa_r+0x9dc>
 8007848:	4602      	mov	r2, r0
 800784a:	f240 21ea 	movw	r1, #746	; 0x2ea
 800784e:	4b7e      	ldr	r3, [pc, #504]	; (8007a48 <_dtoa_r+0xbd0>)
 8007850:	f7ff bb26 	b.w	8006ea0 <_dtoa_r+0x28>
 8007854:	6932      	ldr	r2, [r6, #16]
 8007856:	f106 010c 	add.w	r1, r6, #12
 800785a:	3202      	adds	r2, #2
 800785c:	0092      	lsls	r2, r2, #2
 800785e:	300c      	adds	r0, #12
 8007860:	f000 fc9c 	bl	800819c <memcpy>
 8007864:	2201      	movs	r2, #1
 8007866:	4639      	mov	r1, r7
 8007868:	4628      	mov	r0, r5
 800786a:	f000 fefd 	bl	8008668 <__lshift>
 800786e:	46b0      	mov	r8, r6
 8007870:	4606      	mov	r6, r0
 8007872:	9b08      	ldr	r3, [sp, #32]
 8007874:	3301      	adds	r3, #1
 8007876:	9302      	str	r3, [sp, #8]
 8007878:	9b08      	ldr	r3, [sp, #32]
 800787a:	445b      	add	r3, fp
 800787c:	930a      	str	r3, [sp, #40]	; 0x28
 800787e:	9b04      	ldr	r3, [sp, #16]
 8007880:	f003 0301 	and.w	r3, r3, #1
 8007884:	9309      	str	r3, [sp, #36]	; 0x24
 8007886:	9b02      	ldr	r3, [sp, #8]
 8007888:	4621      	mov	r1, r4
 800788a:	4650      	mov	r0, sl
 800788c:	f103 3bff 	add.w	fp, r3, #4294967295
 8007890:	f7ff fa62 	bl	8006d58 <quorem>
 8007894:	4603      	mov	r3, r0
 8007896:	4641      	mov	r1, r8
 8007898:	3330      	adds	r3, #48	; 0x30
 800789a:	9004      	str	r0, [sp, #16]
 800789c:	4650      	mov	r0, sl
 800789e:	930b      	str	r3, [sp, #44]	; 0x2c
 80078a0:	f000 ff4e 	bl	8008740 <__mcmp>
 80078a4:	4632      	mov	r2, r6
 80078a6:	9006      	str	r0, [sp, #24]
 80078a8:	4621      	mov	r1, r4
 80078aa:	4628      	mov	r0, r5
 80078ac:	f000 ff64 	bl	8008778 <__mdiff>
 80078b0:	68c2      	ldr	r2, [r0, #12]
 80078b2:	4607      	mov	r7, r0
 80078b4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80078b6:	bb02      	cbnz	r2, 80078fa <_dtoa_r+0xa82>
 80078b8:	4601      	mov	r1, r0
 80078ba:	4650      	mov	r0, sl
 80078bc:	f000 ff40 	bl	8008740 <__mcmp>
 80078c0:	4602      	mov	r2, r0
 80078c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80078c4:	4639      	mov	r1, r7
 80078c6:	4628      	mov	r0, r5
 80078c8:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 80078cc:	f000 fcb4 	bl	8008238 <_Bfree>
 80078d0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80078d2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80078d4:	9f02      	ldr	r7, [sp, #8]
 80078d6:	ea43 0102 	orr.w	r1, r3, r2
 80078da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80078dc:	430b      	orrs	r3, r1
 80078de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80078e0:	d10d      	bne.n	80078fe <_dtoa_r+0xa86>
 80078e2:	2b39      	cmp	r3, #57	; 0x39
 80078e4:	d027      	beq.n	8007936 <_dtoa_r+0xabe>
 80078e6:	9a06      	ldr	r2, [sp, #24]
 80078e8:	2a00      	cmp	r2, #0
 80078ea:	dd01      	ble.n	80078f0 <_dtoa_r+0xa78>
 80078ec:	9b04      	ldr	r3, [sp, #16]
 80078ee:	3331      	adds	r3, #49	; 0x31
 80078f0:	f88b 3000 	strb.w	r3, [fp]
 80078f4:	e776      	b.n	80077e4 <_dtoa_r+0x96c>
 80078f6:	4630      	mov	r0, r6
 80078f8:	e7b9      	b.n	800786e <_dtoa_r+0x9f6>
 80078fa:	2201      	movs	r2, #1
 80078fc:	e7e2      	b.n	80078c4 <_dtoa_r+0xa4c>
 80078fe:	9906      	ldr	r1, [sp, #24]
 8007900:	2900      	cmp	r1, #0
 8007902:	db04      	blt.n	800790e <_dtoa_r+0xa96>
 8007904:	9822      	ldr	r0, [sp, #136]	; 0x88
 8007906:	4301      	orrs	r1, r0
 8007908:	9809      	ldr	r0, [sp, #36]	; 0x24
 800790a:	4301      	orrs	r1, r0
 800790c:	d120      	bne.n	8007950 <_dtoa_r+0xad8>
 800790e:	2a00      	cmp	r2, #0
 8007910:	ddee      	ble.n	80078f0 <_dtoa_r+0xa78>
 8007912:	4651      	mov	r1, sl
 8007914:	2201      	movs	r2, #1
 8007916:	4628      	mov	r0, r5
 8007918:	9302      	str	r3, [sp, #8]
 800791a:	f000 fea5 	bl	8008668 <__lshift>
 800791e:	4621      	mov	r1, r4
 8007920:	4682      	mov	sl, r0
 8007922:	f000 ff0d 	bl	8008740 <__mcmp>
 8007926:	2800      	cmp	r0, #0
 8007928:	9b02      	ldr	r3, [sp, #8]
 800792a:	dc02      	bgt.n	8007932 <_dtoa_r+0xaba>
 800792c:	d1e0      	bne.n	80078f0 <_dtoa_r+0xa78>
 800792e:	07da      	lsls	r2, r3, #31
 8007930:	d5de      	bpl.n	80078f0 <_dtoa_r+0xa78>
 8007932:	2b39      	cmp	r3, #57	; 0x39
 8007934:	d1da      	bne.n	80078ec <_dtoa_r+0xa74>
 8007936:	2339      	movs	r3, #57	; 0x39
 8007938:	f88b 3000 	strb.w	r3, [fp]
 800793c:	463b      	mov	r3, r7
 800793e:	461f      	mov	r7, r3
 8007940:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8007944:	3b01      	subs	r3, #1
 8007946:	2a39      	cmp	r2, #57	; 0x39
 8007948:	d050      	beq.n	80079ec <_dtoa_r+0xb74>
 800794a:	3201      	adds	r2, #1
 800794c:	701a      	strb	r2, [r3, #0]
 800794e:	e749      	b.n	80077e4 <_dtoa_r+0x96c>
 8007950:	2a00      	cmp	r2, #0
 8007952:	dd03      	ble.n	800795c <_dtoa_r+0xae4>
 8007954:	2b39      	cmp	r3, #57	; 0x39
 8007956:	d0ee      	beq.n	8007936 <_dtoa_r+0xabe>
 8007958:	3301      	adds	r3, #1
 800795a:	e7c9      	b.n	80078f0 <_dtoa_r+0xa78>
 800795c:	9a02      	ldr	r2, [sp, #8]
 800795e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007960:	f802 3c01 	strb.w	r3, [r2, #-1]
 8007964:	428a      	cmp	r2, r1
 8007966:	d02a      	beq.n	80079be <_dtoa_r+0xb46>
 8007968:	4651      	mov	r1, sl
 800796a:	2300      	movs	r3, #0
 800796c:	220a      	movs	r2, #10
 800796e:	4628      	mov	r0, r5
 8007970:	f000 fc84 	bl	800827c <__multadd>
 8007974:	45b0      	cmp	r8, r6
 8007976:	4682      	mov	sl, r0
 8007978:	f04f 0300 	mov.w	r3, #0
 800797c:	f04f 020a 	mov.w	r2, #10
 8007980:	4641      	mov	r1, r8
 8007982:	4628      	mov	r0, r5
 8007984:	d107      	bne.n	8007996 <_dtoa_r+0xb1e>
 8007986:	f000 fc79 	bl	800827c <__multadd>
 800798a:	4680      	mov	r8, r0
 800798c:	4606      	mov	r6, r0
 800798e:	9b02      	ldr	r3, [sp, #8]
 8007990:	3301      	adds	r3, #1
 8007992:	9302      	str	r3, [sp, #8]
 8007994:	e777      	b.n	8007886 <_dtoa_r+0xa0e>
 8007996:	f000 fc71 	bl	800827c <__multadd>
 800799a:	4631      	mov	r1, r6
 800799c:	4680      	mov	r8, r0
 800799e:	2300      	movs	r3, #0
 80079a0:	220a      	movs	r2, #10
 80079a2:	4628      	mov	r0, r5
 80079a4:	f000 fc6a 	bl	800827c <__multadd>
 80079a8:	4606      	mov	r6, r0
 80079aa:	e7f0      	b.n	800798e <_dtoa_r+0xb16>
 80079ac:	f1bb 0f00 	cmp.w	fp, #0
 80079b0:	bfcc      	ite	gt
 80079b2:	465f      	movgt	r7, fp
 80079b4:	2701      	movle	r7, #1
 80079b6:	f04f 0800 	mov.w	r8, #0
 80079ba:	9a08      	ldr	r2, [sp, #32]
 80079bc:	4417      	add	r7, r2
 80079be:	4651      	mov	r1, sl
 80079c0:	2201      	movs	r2, #1
 80079c2:	4628      	mov	r0, r5
 80079c4:	9302      	str	r3, [sp, #8]
 80079c6:	f000 fe4f 	bl	8008668 <__lshift>
 80079ca:	4621      	mov	r1, r4
 80079cc:	4682      	mov	sl, r0
 80079ce:	f000 feb7 	bl	8008740 <__mcmp>
 80079d2:	2800      	cmp	r0, #0
 80079d4:	dcb2      	bgt.n	800793c <_dtoa_r+0xac4>
 80079d6:	d102      	bne.n	80079de <_dtoa_r+0xb66>
 80079d8:	9b02      	ldr	r3, [sp, #8]
 80079da:	07db      	lsls	r3, r3, #31
 80079dc:	d4ae      	bmi.n	800793c <_dtoa_r+0xac4>
 80079de:	463b      	mov	r3, r7
 80079e0:	461f      	mov	r7, r3
 80079e2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80079e6:	2a30      	cmp	r2, #48	; 0x30
 80079e8:	d0fa      	beq.n	80079e0 <_dtoa_r+0xb68>
 80079ea:	e6fb      	b.n	80077e4 <_dtoa_r+0x96c>
 80079ec:	9a08      	ldr	r2, [sp, #32]
 80079ee:	429a      	cmp	r2, r3
 80079f0:	d1a5      	bne.n	800793e <_dtoa_r+0xac6>
 80079f2:	2331      	movs	r3, #49	; 0x31
 80079f4:	f109 0901 	add.w	r9, r9, #1
 80079f8:	7013      	strb	r3, [r2, #0]
 80079fa:	e6f3      	b.n	80077e4 <_dtoa_r+0x96c>
 80079fc:	4b13      	ldr	r3, [pc, #76]	; (8007a4c <_dtoa_r+0xbd4>)
 80079fe:	f7ff baa7 	b.w	8006f50 <_dtoa_r+0xd8>
 8007a02:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	f47f aa80 	bne.w	8006f0a <_dtoa_r+0x92>
 8007a0a:	4b11      	ldr	r3, [pc, #68]	; (8007a50 <_dtoa_r+0xbd8>)
 8007a0c:	f7ff baa0 	b.w	8006f50 <_dtoa_r+0xd8>
 8007a10:	f1bb 0f00 	cmp.w	fp, #0
 8007a14:	dc03      	bgt.n	8007a1e <_dtoa_r+0xba6>
 8007a16:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007a18:	2b02      	cmp	r3, #2
 8007a1a:	f73f aecc 	bgt.w	80077b6 <_dtoa_r+0x93e>
 8007a1e:	9f08      	ldr	r7, [sp, #32]
 8007a20:	4621      	mov	r1, r4
 8007a22:	4650      	mov	r0, sl
 8007a24:	f7ff f998 	bl	8006d58 <quorem>
 8007a28:	9a08      	ldr	r2, [sp, #32]
 8007a2a:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8007a2e:	f807 3b01 	strb.w	r3, [r7], #1
 8007a32:	1aba      	subs	r2, r7, r2
 8007a34:	4593      	cmp	fp, r2
 8007a36:	ddb9      	ble.n	80079ac <_dtoa_r+0xb34>
 8007a38:	4651      	mov	r1, sl
 8007a3a:	2300      	movs	r3, #0
 8007a3c:	220a      	movs	r2, #10
 8007a3e:	4628      	mov	r0, r5
 8007a40:	f000 fc1c 	bl	800827c <__multadd>
 8007a44:	4682      	mov	sl, r0
 8007a46:	e7eb      	b.n	8007a20 <_dtoa_r+0xba8>
 8007a48:	0800a624 	.word	0x0800a624
 8007a4c:	0800a829 	.word	0x0800a829
 8007a50:	0800a5a1 	.word	0x0800a5a1

08007a54 <rshift>:
 8007a54:	6903      	ldr	r3, [r0, #16]
 8007a56:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007a5a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8007a5e:	f100 0414 	add.w	r4, r0, #20
 8007a62:	ea4f 1261 	mov.w	r2, r1, asr #5
 8007a66:	dd46      	ble.n	8007af6 <rshift+0xa2>
 8007a68:	f011 011f 	ands.w	r1, r1, #31
 8007a6c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8007a70:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8007a74:	d10c      	bne.n	8007a90 <rshift+0x3c>
 8007a76:	4629      	mov	r1, r5
 8007a78:	f100 0710 	add.w	r7, r0, #16
 8007a7c:	42b1      	cmp	r1, r6
 8007a7e:	d335      	bcc.n	8007aec <rshift+0x98>
 8007a80:	1a9b      	subs	r3, r3, r2
 8007a82:	009b      	lsls	r3, r3, #2
 8007a84:	1eea      	subs	r2, r5, #3
 8007a86:	4296      	cmp	r6, r2
 8007a88:	bf38      	it	cc
 8007a8a:	2300      	movcc	r3, #0
 8007a8c:	4423      	add	r3, r4
 8007a8e:	e015      	b.n	8007abc <rshift+0x68>
 8007a90:	46a1      	mov	r9, r4
 8007a92:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8007a96:	f1c1 0820 	rsb	r8, r1, #32
 8007a9a:	40cf      	lsrs	r7, r1
 8007a9c:	f105 0e04 	add.w	lr, r5, #4
 8007aa0:	4576      	cmp	r6, lr
 8007aa2:	46f4      	mov	ip, lr
 8007aa4:	d816      	bhi.n	8007ad4 <rshift+0x80>
 8007aa6:	1a9b      	subs	r3, r3, r2
 8007aa8:	009a      	lsls	r2, r3, #2
 8007aaa:	3a04      	subs	r2, #4
 8007aac:	3501      	adds	r5, #1
 8007aae:	42ae      	cmp	r6, r5
 8007ab0:	bf38      	it	cc
 8007ab2:	2200      	movcc	r2, #0
 8007ab4:	18a3      	adds	r3, r4, r2
 8007ab6:	50a7      	str	r7, [r4, r2]
 8007ab8:	b107      	cbz	r7, 8007abc <rshift+0x68>
 8007aba:	3304      	adds	r3, #4
 8007abc:	42a3      	cmp	r3, r4
 8007abe:	eba3 0204 	sub.w	r2, r3, r4
 8007ac2:	bf08      	it	eq
 8007ac4:	2300      	moveq	r3, #0
 8007ac6:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8007aca:	6102      	str	r2, [r0, #16]
 8007acc:	bf08      	it	eq
 8007ace:	6143      	streq	r3, [r0, #20]
 8007ad0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007ad4:	f8dc c000 	ldr.w	ip, [ip]
 8007ad8:	fa0c fc08 	lsl.w	ip, ip, r8
 8007adc:	ea4c 0707 	orr.w	r7, ip, r7
 8007ae0:	f849 7b04 	str.w	r7, [r9], #4
 8007ae4:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007ae8:	40cf      	lsrs	r7, r1
 8007aea:	e7d9      	b.n	8007aa0 <rshift+0x4c>
 8007aec:	f851 cb04 	ldr.w	ip, [r1], #4
 8007af0:	f847 cf04 	str.w	ip, [r7, #4]!
 8007af4:	e7c2      	b.n	8007a7c <rshift+0x28>
 8007af6:	4623      	mov	r3, r4
 8007af8:	e7e0      	b.n	8007abc <rshift+0x68>

08007afa <__hexdig_fun>:
 8007afa:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8007afe:	2b09      	cmp	r3, #9
 8007b00:	d802      	bhi.n	8007b08 <__hexdig_fun+0xe>
 8007b02:	3820      	subs	r0, #32
 8007b04:	b2c0      	uxtb	r0, r0
 8007b06:	4770      	bx	lr
 8007b08:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8007b0c:	2b05      	cmp	r3, #5
 8007b0e:	d801      	bhi.n	8007b14 <__hexdig_fun+0x1a>
 8007b10:	3847      	subs	r0, #71	; 0x47
 8007b12:	e7f7      	b.n	8007b04 <__hexdig_fun+0xa>
 8007b14:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8007b18:	2b05      	cmp	r3, #5
 8007b1a:	d801      	bhi.n	8007b20 <__hexdig_fun+0x26>
 8007b1c:	3827      	subs	r0, #39	; 0x27
 8007b1e:	e7f1      	b.n	8007b04 <__hexdig_fun+0xa>
 8007b20:	2000      	movs	r0, #0
 8007b22:	4770      	bx	lr

08007b24 <__gethex>:
 8007b24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b28:	b08b      	sub	sp, #44	; 0x2c
 8007b2a:	9306      	str	r3, [sp, #24]
 8007b2c:	4bb9      	ldr	r3, [pc, #740]	; (8007e14 <__gethex+0x2f0>)
 8007b2e:	9002      	str	r0, [sp, #8]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	468b      	mov	fp, r1
 8007b34:	4618      	mov	r0, r3
 8007b36:	4690      	mov	r8, r2
 8007b38:	9303      	str	r3, [sp, #12]
 8007b3a:	f7f8 fb75 	bl	8000228 <strlen>
 8007b3e:	4682      	mov	sl, r0
 8007b40:	9b03      	ldr	r3, [sp, #12]
 8007b42:	f8db 2000 	ldr.w	r2, [fp]
 8007b46:	4403      	add	r3, r0
 8007b48:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8007b4c:	9307      	str	r3, [sp, #28]
 8007b4e:	1c93      	adds	r3, r2, #2
 8007b50:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8007b54:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8007b58:	32fe      	adds	r2, #254	; 0xfe
 8007b5a:	18d1      	adds	r1, r2, r3
 8007b5c:	461f      	mov	r7, r3
 8007b5e:	f813 0b01 	ldrb.w	r0, [r3], #1
 8007b62:	9101      	str	r1, [sp, #4]
 8007b64:	2830      	cmp	r0, #48	; 0x30
 8007b66:	d0f8      	beq.n	8007b5a <__gethex+0x36>
 8007b68:	f7ff ffc7 	bl	8007afa <__hexdig_fun>
 8007b6c:	4604      	mov	r4, r0
 8007b6e:	2800      	cmp	r0, #0
 8007b70:	d13a      	bne.n	8007be8 <__gethex+0xc4>
 8007b72:	4652      	mov	r2, sl
 8007b74:	4638      	mov	r0, r7
 8007b76:	9903      	ldr	r1, [sp, #12]
 8007b78:	f001 fd66 	bl	8009648 <strncmp>
 8007b7c:	4605      	mov	r5, r0
 8007b7e:	2800      	cmp	r0, #0
 8007b80:	d166      	bne.n	8007c50 <__gethex+0x12c>
 8007b82:	f817 000a 	ldrb.w	r0, [r7, sl]
 8007b86:	eb07 060a 	add.w	r6, r7, sl
 8007b8a:	f7ff ffb6 	bl	8007afa <__hexdig_fun>
 8007b8e:	2800      	cmp	r0, #0
 8007b90:	d060      	beq.n	8007c54 <__gethex+0x130>
 8007b92:	4633      	mov	r3, r6
 8007b94:	7818      	ldrb	r0, [r3, #0]
 8007b96:	461f      	mov	r7, r3
 8007b98:	2830      	cmp	r0, #48	; 0x30
 8007b9a:	f103 0301 	add.w	r3, r3, #1
 8007b9e:	d0f9      	beq.n	8007b94 <__gethex+0x70>
 8007ba0:	f7ff ffab 	bl	8007afa <__hexdig_fun>
 8007ba4:	2301      	movs	r3, #1
 8007ba6:	fab0 f480 	clz	r4, r0
 8007baa:	4635      	mov	r5, r6
 8007bac:	0964      	lsrs	r4, r4, #5
 8007bae:	9301      	str	r3, [sp, #4]
 8007bb0:	463a      	mov	r2, r7
 8007bb2:	4616      	mov	r6, r2
 8007bb4:	7830      	ldrb	r0, [r6, #0]
 8007bb6:	3201      	adds	r2, #1
 8007bb8:	f7ff ff9f 	bl	8007afa <__hexdig_fun>
 8007bbc:	2800      	cmp	r0, #0
 8007bbe:	d1f8      	bne.n	8007bb2 <__gethex+0x8e>
 8007bc0:	4652      	mov	r2, sl
 8007bc2:	4630      	mov	r0, r6
 8007bc4:	9903      	ldr	r1, [sp, #12]
 8007bc6:	f001 fd3f 	bl	8009648 <strncmp>
 8007bca:	b980      	cbnz	r0, 8007bee <__gethex+0xca>
 8007bcc:	b94d      	cbnz	r5, 8007be2 <__gethex+0xbe>
 8007bce:	eb06 050a 	add.w	r5, r6, sl
 8007bd2:	462a      	mov	r2, r5
 8007bd4:	4616      	mov	r6, r2
 8007bd6:	7830      	ldrb	r0, [r6, #0]
 8007bd8:	3201      	adds	r2, #1
 8007bda:	f7ff ff8e 	bl	8007afa <__hexdig_fun>
 8007bde:	2800      	cmp	r0, #0
 8007be0:	d1f8      	bne.n	8007bd4 <__gethex+0xb0>
 8007be2:	1bad      	subs	r5, r5, r6
 8007be4:	00ad      	lsls	r5, r5, #2
 8007be6:	e004      	b.n	8007bf2 <__gethex+0xce>
 8007be8:	2400      	movs	r4, #0
 8007bea:	4625      	mov	r5, r4
 8007bec:	e7e0      	b.n	8007bb0 <__gethex+0x8c>
 8007bee:	2d00      	cmp	r5, #0
 8007bf0:	d1f7      	bne.n	8007be2 <__gethex+0xbe>
 8007bf2:	7833      	ldrb	r3, [r6, #0]
 8007bf4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8007bf8:	2b50      	cmp	r3, #80	; 0x50
 8007bfa:	d139      	bne.n	8007c70 <__gethex+0x14c>
 8007bfc:	7873      	ldrb	r3, [r6, #1]
 8007bfe:	2b2b      	cmp	r3, #43	; 0x2b
 8007c00:	d02a      	beq.n	8007c58 <__gethex+0x134>
 8007c02:	2b2d      	cmp	r3, #45	; 0x2d
 8007c04:	d02c      	beq.n	8007c60 <__gethex+0x13c>
 8007c06:	f04f 0900 	mov.w	r9, #0
 8007c0a:	1c71      	adds	r1, r6, #1
 8007c0c:	7808      	ldrb	r0, [r1, #0]
 8007c0e:	f7ff ff74 	bl	8007afa <__hexdig_fun>
 8007c12:	1e43      	subs	r3, r0, #1
 8007c14:	b2db      	uxtb	r3, r3
 8007c16:	2b18      	cmp	r3, #24
 8007c18:	d82a      	bhi.n	8007c70 <__gethex+0x14c>
 8007c1a:	f1a0 0210 	sub.w	r2, r0, #16
 8007c1e:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8007c22:	f7ff ff6a 	bl	8007afa <__hexdig_fun>
 8007c26:	1e43      	subs	r3, r0, #1
 8007c28:	b2db      	uxtb	r3, r3
 8007c2a:	2b18      	cmp	r3, #24
 8007c2c:	d91b      	bls.n	8007c66 <__gethex+0x142>
 8007c2e:	f1b9 0f00 	cmp.w	r9, #0
 8007c32:	d000      	beq.n	8007c36 <__gethex+0x112>
 8007c34:	4252      	negs	r2, r2
 8007c36:	4415      	add	r5, r2
 8007c38:	f8cb 1000 	str.w	r1, [fp]
 8007c3c:	b1d4      	cbz	r4, 8007c74 <__gethex+0x150>
 8007c3e:	9b01      	ldr	r3, [sp, #4]
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	bf14      	ite	ne
 8007c44:	2700      	movne	r7, #0
 8007c46:	2706      	moveq	r7, #6
 8007c48:	4638      	mov	r0, r7
 8007c4a:	b00b      	add	sp, #44	; 0x2c
 8007c4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c50:	463e      	mov	r6, r7
 8007c52:	4625      	mov	r5, r4
 8007c54:	2401      	movs	r4, #1
 8007c56:	e7cc      	b.n	8007bf2 <__gethex+0xce>
 8007c58:	f04f 0900 	mov.w	r9, #0
 8007c5c:	1cb1      	adds	r1, r6, #2
 8007c5e:	e7d5      	b.n	8007c0c <__gethex+0xe8>
 8007c60:	f04f 0901 	mov.w	r9, #1
 8007c64:	e7fa      	b.n	8007c5c <__gethex+0x138>
 8007c66:	230a      	movs	r3, #10
 8007c68:	fb03 0202 	mla	r2, r3, r2, r0
 8007c6c:	3a10      	subs	r2, #16
 8007c6e:	e7d6      	b.n	8007c1e <__gethex+0xfa>
 8007c70:	4631      	mov	r1, r6
 8007c72:	e7e1      	b.n	8007c38 <__gethex+0x114>
 8007c74:	4621      	mov	r1, r4
 8007c76:	1bf3      	subs	r3, r6, r7
 8007c78:	3b01      	subs	r3, #1
 8007c7a:	2b07      	cmp	r3, #7
 8007c7c:	dc0a      	bgt.n	8007c94 <__gethex+0x170>
 8007c7e:	9802      	ldr	r0, [sp, #8]
 8007c80:	f000 fa9a 	bl	80081b8 <_Balloc>
 8007c84:	4604      	mov	r4, r0
 8007c86:	b940      	cbnz	r0, 8007c9a <__gethex+0x176>
 8007c88:	4602      	mov	r2, r0
 8007c8a:	21de      	movs	r1, #222	; 0xde
 8007c8c:	4b62      	ldr	r3, [pc, #392]	; (8007e18 <__gethex+0x2f4>)
 8007c8e:	4863      	ldr	r0, [pc, #396]	; (8007e1c <__gethex+0x2f8>)
 8007c90:	f001 fdb0 	bl	80097f4 <__assert_func>
 8007c94:	3101      	adds	r1, #1
 8007c96:	105b      	asrs	r3, r3, #1
 8007c98:	e7ef      	b.n	8007c7a <__gethex+0x156>
 8007c9a:	f04f 0b00 	mov.w	fp, #0
 8007c9e:	f100 0914 	add.w	r9, r0, #20
 8007ca2:	f1ca 0301 	rsb	r3, sl, #1
 8007ca6:	f8cd 9010 	str.w	r9, [sp, #16]
 8007caa:	f8cd b004 	str.w	fp, [sp, #4]
 8007cae:	9308      	str	r3, [sp, #32]
 8007cb0:	42b7      	cmp	r7, r6
 8007cb2:	d33f      	bcc.n	8007d34 <__gethex+0x210>
 8007cb4:	9f04      	ldr	r7, [sp, #16]
 8007cb6:	9b01      	ldr	r3, [sp, #4]
 8007cb8:	f847 3b04 	str.w	r3, [r7], #4
 8007cbc:	eba7 0709 	sub.w	r7, r7, r9
 8007cc0:	10bf      	asrs	r7, r7, #2
 8007cc2:	6127      	str	r7, [r4, #16]
 8007cc4:	4618      	mov	r0, r3
 8007cc6:	f000 fb6d 	bl	80083a4 <__hi0bits>
 8007cca:	017f      	lsls	r7, r7, #5
 8007ccc:	f8d8 6000 	ldr.w	r6, [r8]
 8007cd0:	1a3f      	subs	r7, r7, r0
 8007cd2:	42b7      	cmp	r7, r6
 8007cd4:	dd62      	ble.n	8007d9c <__gethex+0x278>
 8007cd6:	1bbf      	subs	r7, r7, r6
 8007cd8:	4639      	mov	r1, r7
 8007cda:	4620      	mov	r0, r4
 8007cdc:	f000 ff03 	bl	8008ae6 <__any_on>
 8007ce0:	4682      	mov	sl, r0
 8007ce2:	b1a8      	cbz	r0, 8007d10 <__gethex+0x1ec>
 8007ce4:	f04f 0a01 	mov.w	sl, #1
 8007ce8:	1e7b      	subs	r3, r7, #1
 8007cea:	1159      	asrs	r1, r3, #5
 8007cec:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8007cf0:	f003 021f 	and.w	r2, r3, #31
 8007cf4:	fa0a f202 	lsl.w	r2, sl, r2
 8007cf8:	420a      	tst	r2, r1
 8007cfa:	d009      	beq.n	8007d10 <__gethex+0x1ec>
 8007cfc:	4553      	cmp	r3, sl
 8007cfe:	dd05      	ble.n	8007d0c <__gethex+0x1e8>
 8007d00:	4620      	mov	r0, r4
 8007d02:	1eb9      	subs	r1, r7, #2
 8007d04:	f000 feef 	bl	8008ae6 <__any_on>
 8007d08:	2800      	cmp	r0, #0
 8007d0a:	d144      	bne.n	8007d96 <__gethex+0x272>
 8007d0c:	f04f 0a02 	mov.w	sl, #2
 8007d10:	4639      	mov	r1, r7
 8007d12:	4620      	mov	r0, r4
 8007d14:	f7ff fe9e 	bl	8007a54 <rshift>
 8007d18:	443d      	add	r5, r7
 8007d1a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007d1e:	42ab      	cmp	r3, r5
 8007d20:	da4a      	bge.n	8007db8 <__gethex+0x294>
 8007d22:	4621      	mov	r1, r4
 8007d24:	9802      	ldr	r0, [sp, #8]
 8007d26:	f000 fa87 	bl	8008238 <_Bfree>
 8007d2a:	2300      	movs	r3, #0
 8007d2c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007d2e:	27a3      	movs	r7, #163	; 0xa3
 8007d30:	6013      	str	r3, [r2, #0]
 8007d32:	e789      	b.n	8007c48 <__gethex+0x124>
 8007d34:	1e73      	subs	r3, r6, #1
 8007d36:	9a07      	ldr	r2, [sp, #28]
 8007d38:	9305      	str	r3, [sp, #20]
 8007d3a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007d3e:	4293      	cmp	r3, r2
 8007d40:	d019      	beq.n	8007d76 <__gethex+0x252>
 8007d42:	f1bb 0f20 	cmp.w	fp, #32
 8007d46:	d107      	bne.n	8007d58 <__gethex+0x234>
 8007d48:	9b04      	ldr	r3, [sp, #16]
 8007d4a:	9a01      	ldr	r2, [sp, #4]
 8007d4c:	f843 2b04 	str.w	r2, [r3], #4
 8007d50:	9304      	str	r3, [sp, #16]
 8007d52:	2300      	movs	r3, #0
 8007d54:	469b      	mov	fp, r3
 8007d56:	9301      	str	r3, [sp, #4]
 8007d58:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8007d5c:	f7ff fecd 	bl	8007afa <__hexdig_fun>
 8007d60:	9b01      	ldr	r3, [sp, #4]
 8007d62:	f000 000f 	and.w	r0, r0, #15
 8007d66:	fa00 f00b 	lsl.w	r0, r0, fp
 8007d6a:	4303      	orrs	r3, r0
 8007d6c:	9301      	str	r3, [sp, #4]
 8007d6e:	f10b 0b04 	add.w	fp, fp, #4
 8007d72:	9b05      	ldr	r3, [sp, #20]
 8007d74:	e00d      	b.n	8007d92 <__gethex+0x26e>
 8007d76:	9b05      	ldr	r3, [sp, #20]
 8007d78:	9a08      	ldr	r2, [sp, #32]
 8007d7a:	4413      	add	r3, r2
 8007d7c:	42bb      	cmp	r3, r7
 8007d7e:	d3e0      	bcc.n	8007d42 <__gethex+0x21e>
 8007d80:	4618      	mov	r0, r3
 8007d82:	4652      	mov	r2, sl
 8007d84:	9903      	ldr	r1, [sp, #12]
 8007d86:	9309      	str	r3, [sp, #36]	; 0x24
 8007d88:	f001 fc5e 	bl	8009648 <strncmp>
 8007d8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d8e:	2800      	cmp	r0, #0
 8007d90:	d1d7      	bne.n	8007d42 <__gethex+0x21e>
 8007d92:	461e      	mov	r6, r3
 8007d94:	e78c      	b.n	8007cb0 <__gethex+0x18c>
 8007d96:	f04f 0a03 	mov.w	sl, #3
 8007d9a:	e7b9      	b.n	8007d10 <__gethex+0x1ec>
 8007d9c:	da09      	bge.n	8007db2 <__gethex+0x28e>
 8007d9e:	1bf7      	subs	r7, r6, r7
 8007da0:	4621      	mov	r1, r4
 8007da2:	463a      	mov	r2, r7
 8007da4:	9802      	ldr	r0, [sp, #8]
 8007da6:	f000 fc5f 	bl	8008668 <__lshift>
 8007daa:	4604      	mov	r4, r0
 8007dac:	1bed      	subs	r5, r5, r7
 8007dae:	f100 0914 	add.w	r9, r0, #20
 8007db2:	f04f 0a00 	mov.w	sl, #0
 8007db6:	e7b0      	b.n	8007d1a <__gethex+0x1f6>
 8007db8:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8007dbc:	42a8      	cmp	r0, r5
 8007dbe:	dd71      	ble.n	8007ea4 <__gethex+0x380>
 8007dc0:	1b45      	subs	r5, r0, r5
 8007dc2:	42ae      	cmp	r6, r5
 8007dc4:	dc34      	bgt.n	8007e30 <__gethex+0x30c>
 8007dc6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007dca:	2b02      	cmp	r3, #2
 8007dcc:	d028      	beq.n	8007e20 <__gethex+0x2fc>
 8007dce:	2b03      	cmp	r3, #3
 8007dd0:	d02a      	beq.n	8007e28 <__gethex+0x304>
 8007dd2:	2b01      	cmp	r3, #1
 8007dd4:	d115      	bne.n	8007e02 <__gethex+0x2de>
 8007dd6:	42ae      	cmp	r6, r5
 8007dd8:	d113      	bne.n	8007e02 <__gethex+0x2de>
 8007dda:	2e01      	cmp	r6, #1
 8007ddc:	d10b      	bne.n	8007df6 <__gethex+0x2d2>
 8007dde:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8007de2:	9a06      	ldr	r2, [sp, #24]
 8007de4:	2762      	movs	r7, #98	; 0x62
 8007de6:	6013      	str	r3, [r2, #0]
 8007de8:	2301      	movs	r3, #1
 8007dea:	6123      	str	r3, [r4, #16]
 8007dec:	f8c9 3000 	str.w	r3, [r9]
 8007df0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007df2:	601c      	str	r4, [r3, #0]
 8007df4:	e728      	b.n	8007c48 <__gethex+0x124>
 8007df6:	4620      	mov	r0, r4
 8007df8:	1e71      	subs	r1, r6, #1
 8007dfa:	f000 fe74 	bl	8008ae6 <__any_on>
 8007dfe:	2800      	cmp	r0, #0
 8007e00:	d1ed      	bne.n	8007dde <__gethex+0x2ba>
 8007e02:	4621      	mov	r1, r4
 8007e04:	9802      	ldr	r0, [sp, #8]
 8007e06:	f000 fa17 	bl	8008238 <_Bfree>
 8007e0a:	2300      	movs	r3, #0
 8007e0c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007e0e:	2750      	movs	r7, #80	; 0x50
 8007e10:	6013      	str	r3, [r2, #0]
 8007e12:	e719      	b.n	8007c48 <__gethex+0x124>
 8007e14:	0800a6a0 	.word	0x0800a6a0
 8007e18:	0800a624 	.word	0x0800a624
 8007e1c:	0800a635 	.word	0x0800a635
 8007e20:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d1ed      	bne.n	8007e02 <__gethex+0x2de>
 8007e26:	e7da      	b.n	8007dde <__gethex+0x2ba>
 8007e28:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d1d7      	bne.n	8007dde <__gethex+0x2ba>
 8007e2e:	e7e8      	b.n	8007e02 <__gethex+0x2de>
 8007e30:	1e6f      	subs	r7, r5, #1
 8007e32:	f1ba 0f00 	cmp.w	sl, #0
 8007e36:	d132      	bne.n	8007e9e <__gethex+0x37a>
 8007e38:	b127      	cbz	r7, 8007e44 <__gethex+0x320>
 8007e3a:	4639      	mov	r1, r7
 8007e3c:	4620      	mov	r0, r4
 8007e3e:	f000 fe52 	bl	8008ae6 <__any_on>
 8007e42:	4682      	mov	sl, r0
 8007e44:	2101      	movs	r1, #1
 8007e46:	117b      	asrs	r3, r7, #5
 8007e48:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8007e4c:	f007 071f 	and.w	r7, r7, #31
 8007e50:	fa01 f707 	lsl.w	r7, r1, r7
 8007e54:	421f      	tst	r7, r3
 8007e56:	f04f 0702 	mov.w	r7, #2
 8007e5a:	4629      	mov	r1, r5
 8007e5c:	4620      	mov	r0, r4
 8007e5e:	bf18      	it	ne
 8007e60:	f04a 0a02 	orrne.w	sl, sl, #2
 8007e64:	1b76      	subs	r6, r6, r5
 8007e66:	f7ff fdf5 	bl	8007a54 <rshift>
 8007e6a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8007e6e:	f1ba 0f00 	cmp.w	sl, #0
 8007e72:	d048      	beq.n	8007f06 <__gethex+0x3e2>
 8007e74:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007e78:	2b02      	cmp	r3, #2
 8007e7a:	d015      	beq.n	8007ea8 <__gethex+0x384>
 8007e7c:	2b03      	cmp	r3, #3
 8007e7e:	d017      	beq.n	8007eb0 <__gethex+0x38c>
 8007e80:	2b01      	cmp	r3, #1
 8007e82:	d109      	bne.n	8007e98 <__gethex+0x374>
 8007e84:	f01a 0f02 	tst.w	sl, #2
 8007e88:	d006      	beq.n	8007e98 <__gethex+0x374>
 8007e8a:	f8d9 0000 	ldr.w	r0, [r9]
 8007e8e:	ea4a 0a00 	orr.w	sl, sl, r0
 8007e92:	f01a 0f01 	tst.w	sl, #1
 8007e96:	d10e      	bne.n	8007eb6 <__gethex+0x392>
 8007e98:	f047 0710 	orr.w	r7, r7, #16
 8007e9c:	e033      	b.n	8007f06 <__gethex+0x3e2>
 8007e9e:	f04f 0a01 	mov.w	sl, #1
 8007ea2:	e7cf      	b.n	8007e44 <__gethex+0x320>
 8007ea4:	2701      	movs	r7, #1
 8007ea6:	e7e2      	b.n	8007e6e <__gethex+0x34a>
 8007ea8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007eaa:	f1c3 0301 	rsb	r3, r3, #1
 8007eae:	9315      	str	r3, [sp, #84]	; 0x54
 8007eb0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d0f0      	beq.n	8007e98 <__gethex+0x374>
 8007eb6:	f04f 0c00 	mov.w	ip, #0
 8007eba:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8007ebe:	f104 0314 	add.w	r3, r4, #20
 8007ec2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8007ec6:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8007eca:	4618      	mov	r0, r3
 8007ecc:	f853 2b04 	ldr.w	r2, [r3], #4
 8007ed0:	f1b2 3fff 	cmp.w	r2, #4294967295
 8007ed4:	d01c      	beq.n	8007f10 <__gethex+0x3ec>
 8007ed6:	3201      	adds	r2, #1
 8007ed8:	6002      	str	r2, [r0, #0]
 8007eda:	2f02      	cmp	r7, #2
 8007edc:	f104 0314 	add.w	r3, r4, #20
 8007ee0:	d13d      	bne.n	8007f5e <__gethex+0x43a>
 8007ee2:	f8d8 2000 	ldr.w	r2, [r8]
 8007ee6:	3a01      	subs	r2, #1
 8007ee8:	42b2      	cmp	r2, r6
 8007eea:	d10a      	bne.n	8007f02 <__gethex+0x3de>
 8007eec:	2201      	movs	r2, #1
 8007eee:	1171      	asrs	r1, r6, #5
 8007ef0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007ef4:	f006 061f 	and.w	r6, r6, #31
 8007ef8:	fa02 f606 	lsl.w	r6, r2, r6
 8007efc:	421e      	tst	r6, r3
 8007efe:	bf18      	it	ne
 8007f00:	4617      	movne	r7, r2
 8007f02:	f047 0720 	orr.w	r7, r7, #32
 8007f06:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007f08:	601c      	str	r4, [r3, #0]
 8007f0a:	9b06      	ldr	r3, [sp, #24]
 8007f0c:	601d      	str	r5, [r3, #0]
 8007f0e:	e69b      	b.n	8007c48 <__gethex+0x124>
 8007f10:	4299      	cmp	r1, r3
 8007f12:	f843 cc04 	str.w	ip, [r3, #-4]
 8007f16:	d8d8      	bhi.n	8007eca <__gethex+0x3a6>
 8007f18:	68a3      	ldr	r3, [r4, #8]
 8007f1a:	459b      	cmp	fp, r3
 8007f1c:	db17      	blt.n	8007f4e <__gethex+0x42a>
 8007f1e:	6861      	ldr	r1, [r4, #4]
 8007f20:	9802      	ldr	r0, [sp, #8]
 8007f22:	3101      	adds	r1, #1
 8007f24:	f000 f948 	bl	80081b8 <_Balloc>
 8007f28:	4681      	mov	r9, r0
 8007f2a:	b918      	cbnz	r0, 8007f34 <__gethex+0x410>
 8007f2c:	4602      	mov	r2, r0
 8007f2e:	2184      	movs	r1, #132	; 0x84
 8007f30:	4b19      	ldr	r3, [pc, #100]	; (8007f98 <__gethex+0x474>)
 8007f32:	e6ac      	b.n	8007c8e <__gethex+0x16a>
 8007f34:	6922      	ldr	r2, [r4, #16]
 8007f36:	f104 010c 	add.w	r1, r4, #12
 8007f3a:	3202      	adds	r2, #2
 8007f3c:	0092      	lsls	r2, r2, #2
 8007f3e:	300c      	adds	r0, #12
 8007f40:	f000 f92c 	bl	800819c <memcpy>
 8007f44:	4621      	mov	r1, r4
 8007f46:	9802      	ldr	r0, [sp, #8]
 8007f48:	f000 f976 	bl	8008238 <_Bfree>
 8007f4c:	464c      	mov	r4, r9
 8007f4e:	6923      	ldr	r3, [r4, #16]
 8007f50:	1c5a      	adds	r2, r3, #1
 8007f52:	6122      	str	r2, [r4, #16]
 8007f54:	2201      	movs	r2, #1
 8007f56:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007f5a:	615a      	str	r2, [r3, #20]
 8007f5c:	e7bd      	b.n	8007eda <__gethex+0x3b6>
 8007f5e:	6922      	ldr	r2, [r4, #16]
 8007f60:	455a      	cmp	r2, fp
 8007f62:	dd0b      	ble.n	8007f7c <__gethex+0x458>
 8007f64:	2101      	movs	r1, #1
 8007f66:	4620      	mov	r0, r4
 8007f68:	f7ff fd74 	bl	8007a54 <rshift>
 8007f6c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007f70:	3501      	adds	r5, #1
 8007f72:	42ab      	cmp	r3, r5
 8007f74:	f6ff aed5 	blt.w	8007d22 <__gethex+0x1fe>
 8007f78:	2701      	movs	r7, #1
 8007f7a:	e7c2      	b.n	8007f02 <__gethex+0x3de>
 8007f7c:	f016 061f 	ands.w	r6, r6, #31
 8007f80:	d0fa      	beq.n	8007f78 <__gethex+0x454>
 8007f82:	449a      	add	sl, r3
 8007f84:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8007f88:	f000 fa0c 	bl	80083a4 <__hi0bits>
 8007f8c:	f1c6 0620 	rsb	r6, r6, #32
 8007f90:	42b0      	cmp	r0, r6
 8007f92:	dbe7      	blt.n	8007f64 <__gethex+0x440>
 8007f94:	e7f0      	b.n	8007f78 <__gethex+0x454>
 8007f96:	bf00      	nop
 8007f98:	0800a624 	.word	0x0800a624

08007f9c <L_shift>:
 8007f9c:	f1c2 0208 	rsb	r2, r2, #8
 8007fa0:	0092      	lsls	r2, r2, #2
 8007fa2:	b570      	push	{r4, r5, r6, lr}
 8007fa4:	f1c2 0620 	rsb	r6, r2, #32
 8007fa8:	6843      	ldr	r3, [r0, #4]
 8007faa:	6804      	ldr	r4, [r0, #0]
 8007fac:	fa03 f506 	lsl.w	r5, r3, r6
 8007fb0:	432c      	orrs	r4, r5
 8007fb2:	40d3      	lsrs	r3, r2
 8007fb4:	6004      	str	r4, [r0, #0]
 8007fb6:	f840 3f04 	str.w	r3, [r0, #4]!
 8007fba:	4288      	cmp	r0, r1
 8007fbc:	d3f4      	bcc.n	8007fa8 <L_shift+0xc>
 8007fbe:	bd70      	pop	{r4, r5, r6, pc}

08007fc0 <__match>:
 8007fc0:	b530      	push	{r4, r5, lr}
 8007fc2:	6803      	ldr	r3, [r0, #0]
 8007fc4:	3301      	adds	r3, #1
 8007fc6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007fca:	b914      	cbnz	r4, 8007fd2 <__match+0x12>
 8007fcc:	6003      	str	r3, [r0, #0]
 8007fce:	2001      	movs	r0, #1
 8007fd0:	bd30      	pop	{r4, r5, pc}
 8007fd2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007fd6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8007fda:	2d19      	cmp	r5, #25
 8007fdc:	bf98      	it	ls
 8007fde:	3220      	addls	r2, #32
 8007fe0:	42a2      	cmp	r2, r4
 8007fe2:	d0f0      	beq.n	8007fc6 <__match+0x6>
 8007fe4:	2000      	movs	r0, #0
 8007fe6:	e7f3      	b.n	8007fd0 <__match+0x10>

08007fe8 <__hexnan>:
 8007fe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fec:	2500      	movs	r5, #0
 8007fee:	680b      	ldr	r3, [r1, #0]
 8007ff0:	4682      	mov	sl, r0
 8007ff2:	115e      	asrs	r6, r3, #5
 8007ff4:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8007ff8:	f013 031f 	ands.w	r3, r3, #31
 8007ffc:	bf18      	it	ne
 8007ffe:	3604      	addne	r6, #4
 8008000:	1f37      	subs	r7, r6, #4
 8008002:	4690      	mov	r8, r2
 8008004:	46b9      	mov	r9, r7
 8008006:	463c      	mov	r4, r7
 8008008:	46ab      	mov	fp, r5
 800800a:	b087      	sub	sp, #28
 800800c:	6801      	ldr	r1, [r0, #0]
 800800e:	9301      	str	r3, [sp, #4]
 8008010:	f846 5c04 	str.w	r5, [r6, #-4]
 8008014:	9502      	str	r5, [sp, #8]
 8008016:	784a      	ldrb	r2, [r1, #1]
 8008018:	1c4b      	adds	r3, r1, #1
 800801a:	9303      	str	r3, [sp, #12]
 800801c:	b342      	cbz	r2, 8008070 <__hexnan+0x88>
 800801e:	4610      	mov	r0, r2
 8008020:	9105      	str	r1, [sp, #20]
 8008022:	9204      	str	r2, [sp, #16]
 8008024:	f7ff fd69 	bl	8007afa <__hexdig_fun>
 8008028:	2800      	cmp	r0, #0
 800802a:	d14f      	bne.n	80080cc <__hexnan+0xe4>
 800802c:	9a04      	ldr	r2, [sp, #16]
 800802e:	9905      	ldr	r1, [sp, #20]
 8008030:	2a20      	cmp	r2, #32
 8008032:	d818      	bhi.n	8008066 <__hexnan+0x7e>
 8008034:	9b02      	ldr	r3, [sp, #8]
 8008036:	459b      	cmp	fp, r3
 8008038:	dd13      	ble.n	8008062 <__hexnan+0x7a>
 800803a:	454c      	cmp	r4, r9
 800803c:	d206      	bcs.n	800804c <__hexnan+0x64>
 800803e:	2d07      	cmp	r5, #7
 8008040:	dc04      	bgt.n	800804c <__hexnan+0x64>
 8008042:	462a      	mov	r2, r5
 8008044:	4649      	mov	r1, r9
 8008046:	4620      	mov	r0, r4
 8008048:	f7ff ffa8 	bl	8007f9c <L_shift>
 800804c:	4544      	cmp	r4, r8
 800804e:	d950      	bls.n	80080f2 <__hexnan+0x10a>
 8008050:	2300      	movs	r3, #0
 8008052:	f1a4 0904 	sub.w	r9, r4, #4
 8008056:	f844 3c04 	str.w	r3, [r4, #-4]
 800805a:	461d      	mov	r5, r3
 800805c:	464c      	mov	r4, r9
 800805e:	f8cd b008 	str.w	fp, [sp, #8]
 8008062:	9903      	ldr	r1, [sp, #12]
 8008064:	e7d7      	b.n	8008016 <__hexnan+0x2e>
 8008066:	2a29      	cmp	r2, #41	; 0x29
 8008068:	d156      	bne.n	8008118 <__hexnan+0x130>
 800806a:	3102      	adds	r1, #2
 800806c:	f8ca 1000 	str.w	r1, [sl]
 8008070:	f1bb 0f00 	cmp.w	fp, #0
 8008074:	d050      	beq.n	8008118 <__hexnan+0x130>
 8008076:	454c      	cmp	r4, r9
 8008078:	d206      	bcs.n	8008088 <__hexnan+0xa0>
 800807a:	2d07      	cmp	r5, #7
 800807c:	dc04      	bgt.n	8008088 <__hexnan+0xa0>
 800807e:	462a      	mov	r2, r5
 8008080:	4649      	mov	r1, r9
 8008082:	4620      	mov	r0, r4
 8008084:	f7ff ff8a 	bl	8007f9c <L_shift>
 8008088:	4544      	cmp	r4, r8
 800808a:	d934      	bls.n	80080f6 <__hexnan+0x10e>
 800808c:	4623      	mov	r3, r4
 800808e:	f1a8 0204 	sub.w	r2, r8, #4
 8008092:	f853 1b04 	ldr.w	r1, [r3], #4
 8008096:	429f      	cmp	r7, r3
 8008098:	f842 1f04 	str.w	r1, [r2, #4]!
 800809c:	d2f9      	bcs.n	8008092 <__hexnan+0xaa>
 800809e:	1b3b      	subs	r3, r7, r4
 80080a0:	f023 0303 	bic.w	r3, r3, #3
 80080a4:	3304      	adds	r3, #4
 80080a6:	3401      	adds	r4, #1
 80080a8:	3e03      	subs	r6, #3
 80080aa:	42b4      	cmp	r4, r6
 80080ac:	bf88      	it	hi
 80080ae:	2304      	movhi	r3, #4
 80080b0:	2200      	movs	r2, #0
 80080b2:	4443      	add	r3, r8
 80080b4:	f843 2b04 	str.w	r2, [r3], #4
 80080b8:	429f      	cmp	r7, r3
 80080ba:	d2fb      	bcs.n	80080b4 <__hexnan+0xcc>
 80080bc:	683b      	ldr	r3, [r7, #0]
 80080be:	b91b      	cbnz	r3, 80080c8 <__hexnan+0xe0>
 80080c0:	4547      	cmp	r7, r8
 80080c2:	d127      	bne.n	8008114 <__hexnan+0x12c>
 80080c4:	2301      	movs	r3, #1
 80080c6:	603b      	str	r3, [r7, #0]
 80080c8:	2005      	movs	r0, #5
 80080ca:	e026      	b.n	800811a <__hexnan+0x132>
 80080cc:	3501      	adds	r5, #1
 80080ce:	2d08      	cmp	r5, #8
 80080d0:	f10b 0b01 	add.w	fp, fp, #1
 80080d4:	dd06      	ble.n	80080e4 <__hexnan+0xfc>
 80080d6:	4544      	cmp	r4, r8
 80080d8:	d9c3      	bls.n	8008062 <__hexnan+0x7a>
 80080da:	2300      	movs	r3, #0
 80080dc:	2501      	movs	r5, #1
 80080de:	f844 3c04 	str.w	r3, [r4, #-4]
 80080e2:	3c04      	subs	r4, #4
 80080e4:	6822      	ldr	r2, [r4, #0]
 80080e6:	f000 000f 	and.w	r0, r0, #15
 80080ea:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 80080ee:	6022      	str	r2, [r4, #0]
 80080f0:	e7b7      	b.n	8008062 <__hexnan+0x7a>
 80080f2:	2508      	movs	r5, #8
 80080f4:	e7b5      	b.n	8008062 <__hexnan+0x7a>
 80080f6:	9b01      	ldr	r3, [sp, #4]
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d0df      	beq.n	80080bc <__hexnan+0xd4>
 80080fc:	f04f 32ff 	mov.w	r2, #4294967295
 8008100:	f1c3 0320 	rsb	r3, r3, #32
 8008104:	fa22 f303 	lsr.w	r3, r2, r3
 8008108:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800810c:	401a      	ands	r2, r3
 800810e:	f846 2c04 	str.w	r2, [r6, #-4]
 8008112:	e7d3      	b.n	80080bc <__hexnan+0xd4>
 8008114:	3f04      	subs	r7, #4
 8008116:	e7d1      	b.n	80080bc <__hexnan+0xd4>
 8008118:	2004      	movs	r0, #4
 800811a:	b007      	add	sp, #28
 800811c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008120 <_localeconv_r>:
 8008120:	4800      	ldr	r0, [pc, #0]	; (8008124 <_localeconv_r+0x4>)
 8008122:	4770      	bx	lr
 8008124:	20000164 	.word	0x20000164

08008128 <_lseek_r>:
 8008128:	b538      	push	{r3, r4, r5, lr}
 800812a:	4604      	mov	r4, r0
 800812c:	4608      	mov	r0, r1
 800812e:	4611      	mov	r1, r2
 8008130:	2200      	movs	r2, #0
 8008132:	4d05      	ldr	r5, [pc, #20]	; (8008148 <_lseek_r+0x20>)
 8008134:	602a      	str	r2, [r5, #0]
 8008136:	461a      	mov	r2, r3
 8008138:	f7f9 feba 	bl	8001eb0 <_lseek>
 800813c:	1c43      	adds	r3, r0, #1
 800813e:	d102      	bne.n	8008146 <_lseek_r+0x1e>
 8008140:	682b      	ldr	r3, [r5, #0]
 8008142:	b103      	cbz	r3, 8008146 <_lseek_r+0x1e>
 8008144:	6023      	str	r3, [r4, #0]
 8008146:	bd38      	pop	{r3, r4, r5, pc}
 8008148:	2000040c 	.word	0x2000040c

0800814c <malloc>:
 800814c:	4b02      	ldr	r3, [pc, #8]	; (8008158 <malloc+0xc>)
 800814e:	4601      	mov	r1, r0
 8008150:	6818      	ldr	r0, [r3, #0]
 8008152:	f000 bd43 	b.w	8008bdc <_malloc_r>
 8008156:	bf00      	nop
 8008158:	2000000c 	.word	0x2000000c

0800815c <__ascii_mbtowc>:
 800815c:	b082      	sub	sp, #8
 800815e:	b901      	cbnz	r1, 8008162 <__ascii_mbtowc+0x6>
 8008160:	a901      	add	r1, sp, #4
 8008162:	b142      	cbz	r2, 8008176 <__ascii_mbtowc+0x1a>
 8008164:	b14b      	cbz	r3, 800817a <__ascii_mbtowc+0x1e>
 8008166:	7813      	ldrb	r3, [r2, #0]
 8008168:	600b      	str	r3, [r1, #0]
 800816a:	7812      	ldrb	r2, [r2, #0]
 800816c:	1e10      	subs	r0, r2, #0
 800816e:	bf18      	it	ne
 8008170:	2001      	movne	r0, #1
 8008172:	b002      	add	sp, #8
 8008174:	4770      	bx	lr
 8008176:	4610      	mov	r0, r2
 8008178:	e7fb      	b.n	8008172 <__ascii_mbtowc+0x16>
 800817a:	f06f 0001 	mvn.w	r0, #1
 800817e:	e7f8      	b.n	8008172 <__ascii_mbtowc+0x16>

08008180 <memchr>:
 8008180:	4603      	mov	r3, r0
 8008182:	b510      	push	{r4, lr}
 8008184:	b2c9      	uxtb	r1, r1
 8008186:	4402      	add	r2, r0
 8008188:	4293      	cmp	r3, r2
 800818a:	4618      	mov	r0, r3
 800818c:	d101      	bne.n	8008192 <memchr+0x12>
 800818e:	2000      	movs	r0, #0
 8008190:	e003      	b.n	800819a <memchr+0x1a>
 8008192:	7804      	ldrb	r4, [r0, #0]
 8008194:	3301      	adds	r3, #1
 8008196:	428c      	cmp	r4, r1
 8008198:	d1f6      	bne.n	8008188 <memchr+0x8>
 800819a:	bd10      	pop	{r4, pc}

0800819c <memcpy>:
 800819c:	440a      	add	r2, r1
 800819e:	4291      	cmp	r1, r2
 80081a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80081a4:	d100      	bne.n	80081a8 <memcpy+0xc>
 80081a6:	4770      	bx	lr
 80081a8:	b510      	push	{r4, lr}
 80081aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80081ae:	4291      	cmp	r1, r2
 80081b0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80081b4:	d1f9      	bne.n	80081aa <memcpy+0xe>
 80081b6:	bd10      	pop	{r4, pc}

080081b8 <_Balloc>:
 80081b8:	b570      	push	{r4, r5, r6, lr}
 80081ba:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80081bc:	4604      	mov	r4, r0
 80081be:	460d      	mov	r5, r1
 80081c0:	b976      	cbnz	r6, 80081e0 <_Balloc+0x28>
 80081c2:	2010      	movs	r0, #16
 80081c4:	f7ff ffc2 	bl	800814c <malloc>
 80081c8:	4602      	mov	r2, r0
 80081ca:	6260      	str	r0, [r4, #36]	; 0x24
 80081cc:	b920      	cbnz	r0, 80081d8 <_Balloc+0x20>
 80081ce:	2166      	movs	r1, #102	; 0x66
 80081d0:	4b17      	ldr	r3, [pc, #92]	; (8008230 <_Balloc+0x78>)
 80081d2:	4818      	ldr	r0, [pc, #96]	; (8008234 <_Balloc+0x7c>)
 80081d4:	f001 fb0e 	bl	80097f4 <__assert_func>
 80081d8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80081dc:	6006      	str	r6, [r0, #0]
 80081de:	60c6      	str	r6, [r0, #12]
 80081e0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80081e2:	68f3      	ldr	r3, [r6, #12]
 80081e4:	b183      	cbz	r3, 8008208 <_Balloc+0x50>
 80081e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80081e8:	68db      	ldr	r3, [r3, #12]
 80081ea:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80081ee:	b9b8      	cbnz	r0, 8008220 <_Balloc+0x68>
 80081f0:	2101      	movs	r1, #1
 80081f2:	fa01 f605 	lsl.w	r6, r1, r5
 80081f6:	1d72      	adds	r2, r6, #5
 80081f8:	4620      	mov	r0, r4
 80081fa:	0092      	lsls	r2, r2, #2
 80081fc:	f000 fc94 	bl	8008b28 <_calloc_r>
 8008200:	b160      	cbz	r0, 800821c <_Balloc+0x64>
 8008202:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008206:	e00e      	b.n	8008226 <_Balloc+0x6e>
 8008208:	2221      	movs	r2, #33	; 0x21
 800820a:	2104      	movs	r1, #4
 800820c:	4620      	mov	r0, r4
 800820e:	f000 fc8b 	bl	8008b28 <_calloc_r>
 8008212:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008214:	60f0      	str	r0, [r6, #12]
 8008216:	68db      	ldr	r3, [r3, #12]
 8008218:	2b00      	cmp	r3, #0
 800821a:	d1e4      	bne.n	80081e6 <_Balloc+0x2e>
 800821c:	2000      	movs	r0, #0
 800821e:	bd70      	pop	{r4, r5, r6, pc}
 8008220:	6802      	ldr	r2, [r0, #0]
 8008222:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008226:	2300      	movs	r3, #0
 8008228:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800822c:	e7f7      	b.n	800821e <_Balloc+0x66>
 800822e:	bf00      	nop
 8008230:	0800a5ae 	.word	0x0800a5ae
 8008234:	0800a6b4 	.word	0x0800a6b4

08008238 <_Bfree>:
 8008238:	b570      	push	{r4, r5, r6, lr}
 800823a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800823c:	4605      	mov	r5, r0
 800823e:	460c      	mov	r4, r1
 8008240:	b976      	cbnz	r6, 8008260 <_Bfree+0x28>
 8008242:	2010      	movs	r0, #16
 8008244:	f7ff ff82 	bl	800814c <malloc>
 8008248:	4602      	mov	r2, r0
 800824a:	6268      	str	r0, [r5, #36]	; 0x24
 800824c:	b920      	cbnz	r0, 8008258 <_Bfree+0x20>
 800824e:	218a      	movs	r1, #138	; 0x8a
 8008250:	4b08      	ldr	r3, [pc, #32]	; (8008274 <_Bfree+0x3c>)
 8008252:	4809      	ldr	r0, [pc, #36]	; (8008278 <_Bfree+0x40>)
 8008254:	f001 face 	bl	80097f4 <__assert_func>
 8008258:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800825c:	6006      	str	r6, [r0, #0]
 800825e:	60c6      	str	r6, [r0, #12]
 8008260:	b13c      	cbz	r4, 8008272 <_Bfree+0x3a>
 8008262:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008264:	6862      	ldr	r2, [r4, #4]
 8008266:	68db      	ldr	r3, [r3, #12]
 8008268:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800826c:	6021      	str	r1, [r4, #0]
 800826e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008272:	bd70      	pop	{r4, r5, r6, pc}
 8008274:	0800a5ae 	.word	0x0800a5ae
 8008278:	0800a6b4 	.word	0x0800a6b4

0800827c <__multadd>:
 800827c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008280:	4698      	mov	r8, r3
 8008282:	460c      	mov	r4, r1
 8008284:	2300      	movs	r3, #0
 8008286:	690e      	ldr	r6, [r1, #16]
 8008288:	4607      	mov	r7, r0
 800828a:	f101 0014 	add.w	r0, r1, #20
 800828e:	6805      	ldr	r5, [r0, #0]
 8008290:	3301      	adds	r3, #1
 8008292:	b2a9      	uxth	r1, r5
 8008294:	fb02 8101 	mla	r1, r2, r1, r8
 8008298:	0c2d      	lsrs	r5, r5, #16
 800829a:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800829e:	fb02 c505 	mla	r5, r2, r5, ip
 80082a2:	b289      	uxth	r1, r1
 80082a4:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80082a8:	429e      	cmp	r6, r3
 80082aa:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80082ae:	f840 1b04 	str.w	r1, [r0], #4
 80082b2:	dcec      	bgt.n	800828e <__multadd+0x12>
 80082b4:	f1b8 0f00 	cmp.w	r8, #0
 80082b8:	d022      	beq.n	8008300 <__multadd+0x84>
 80082ba:	68a3      	ldr	r3, [r4, #8]
 80082bc:	42b3      	cmp	r3, r6
 80082be:	dc19      	bgt.n	80082f4 <__multadd+0x78>
 80082c0:	6861      	ldr	r1, [r4, #4]
 80082c2:	4638      	mov	r0, r7
 80082c4:	3101      	adds	r1, #1
 80082c6:	f7ff ff77 	bl	80081b8 <_Balloc>
 80082ca:	4605      	mov	r5, r0
 80082cc:	b928      	cbnz	r0, 80082da <__multadd+0x5e>
 80082ce:	4602      	mov	r2, r0
 80082d0:	21b5      	movs	r1, #181	; 0xb5
 80082d2:	4b0d      	ldr	r3, [pc, #52]	; (8008308 <__multadd+0x8c>)
 80082d4:	480d      	ldr	r0, [pc, #52]	; (800830c <__multadd+0x90>)
 80082d6:	f001 fa8d 	bl	80097f4 <__assert_func>
 80082da:	6922      	ldr	r2, [r4, #16]
 80082dc:	f104 010c 	add.w	r1, r4, #12
 80082e0:	3202      	adds	r2, #2
 80082e2:	0092      	lsls	r2, r2, #2
 80082e4:	300c      	adds	r0, #12
 80082e6:	f7ff ff59 	bl	800819c <memcpy>
 80082ea:	4621      	mov	r1, r4
 80082ec:	4638      	mov	r0, r7
 80082ee:	f7ff ffa3 	bl	8008238 <_Bfree>
 80082f2:	462c      	mov	r4, r5
 80082f4:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80082f8:	3601      	adds	r6, #1
 80082fa:	f8c3 8014 	str.w	r8, [r3, #20]
 80082fe:	6126      	str	r6, [r4, #16]
 8008300:	4620      	mov	r0, r4
 8008302:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008306:	bf00      	nop
 8008308:	0800a624 	.word	0x0800a624
 800830c:	0800a6b4 	.word	0x0800a6b4

08008310 <__s2b>:
 8008310:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008314:	4615      	mov	r5, r2
 8008316:	2209      	movs	r2, #9
 8008318:	461f      	mov	r7, r3
 800831a:	3308      	adds	r3, #8
 800831c:	460c      	mov	r4, r1
 800831e:	fb93 f3f2 	sdiv	r3, r3, r2
 8008322:	4606      	mov	r6, r0
 8008324:	2201      	movs	r2, #1
 8008326:	2100      	movs	r1, #0
 8008328:	429a      	cmp	r2, r3
 800832a:	db09      	blt.n	8008340 <__s2b+0x30>
 800832c:	4630      	mov	r0, r6
 800832e:	f7ff ff43 	bl	80081b8 <_Balloc>
 8008332:	b940      	cbnz	r0, 8008346 <__s2b+0x36>
 8008334:	4602      	mov	r2, r0
 8008336:	21ce      	movs	r1, #206	; 0xce
 8008338:	4b18      	ldr	r3, [pc, #96]	; (800839c <__s2b+0x8c>)
 800833a:	4819      	ldr	r0, [pc, #100]	; (80083a0 <__s2b+0x90>)
 800833c:	f001 fa5a 	bl	80097f4 <__assert_func>
 8008340:	0052      	lsls	r2, r2, #1
 8008342:	3101      	adds	r1, #1
 8008344:	e7f0      	b.n	8008328 <__s2b+0x18>
 8008346:	9b08      	ldr	r3, [sp, #32]
 8008348:	2d09      	cmp	r5, #9
 800834a:	6143      	str	r3, [r0, #20]
 800834c:	f04f 0301 	mov.w	r3, #1
 8008350:	6103      	str	r3, [r0, #16]
 8008352:	dd16      	ble.n	8008382 <__s2b+0x72>
 8008354:	f104 0909 	add.w	r9, r4, #9
 8008358:	46c8      	mov	r8, r9
 800835a:	442c      	add	r4, r5
 800835c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8008360:	4601      	mov	r1, r0
 8008362:	220a      	movs	r2, #10
 8008364:	4630      	mov	r0, r6
 8008366:	3b30      	subs	r3, #48	; 0x30
 8008368:	f7ff ff88 	bl	800827c <__multadd>
 800836c:	45a0      	cmp	r8, r4
 800836e:	d1f5      	bne.n	800835c <__s2b+0x4c>
 8008370:	f1a5 0408 	sub.w	r4, r5, #8
 8008374:	444c      	add	r4, r9
 8008376:	1b2d      	subs	r5, r5, r4
 8008378:	1963      	adds	r3, r4, r5
 800837a:	42bb      	cmp	r3, r7
 800837c:	db04      	blt.n	8008388 <__s2b+0x78>
 800837e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008382:	2509      	movs	r5, #9
 8008384:	340a      	adds	r4, #10
 8008386:	e7f6      	b.n	8008376 <__s2b+0x66>
 8008388:	f814 3b01 	ldrb.w	r3, [r4], #1
 800838c:	4601      	mov	r1, r0
 800838e:	220a      	movs	r2, #10
 8008390:	4630      	mov	r0, r6
 8008392:	3b30      	subs	r3, #48	; 0x30
 8008394:	f7ff ff72 	bl	800827c <__multadd>
 8008398:	e7ee      	b.n	8008378 <__s2b+0x68>
 800839a:	bf00      	nop
 800839c:	0800a624 	.word	0x0800a624
 80083a0:	0800a6b4 	.word	0x0800a6b4

080083a4 <__hi0bits>:
 80083a4:	0c02      	lsrs	r2, r0, #16
 80083a6:	0412      	lsls	r2, r2, #16
 80083a8:	4603      	mov	r3, r0
 80083aa:	b9ca      	cbnz	r2, 80083e0 <__hi0bits+0x3c>
 80083ac:	0403      	lsls	r3, r0, #16
 80083ae:	2010      	movs	r0, #16
 80083b0:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80083b4:	bf04      	itt	eq
 80083b6:	021b      	lsleq	r3, r3, #8
 80083b8:	3008      	addeq	r0, #8
 80083ba:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80083be:	bf04      	itt	eq
 80083c0:	011b      	lsleq	r3, r3, #4
 80083c2:	3004      	addeq	r0, #4
 80083c4:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80083c8:	bf04      	itt	eq
 80083ca:	009b      	lsleq	r3, r3, #2
 80083cc:	3002      	addeq	r0, #2
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	db05      	blt.n	80083de <__hi0bits+0x3a>
 80083d2:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 80083d6:	f100 0001 	add.w	r0, r0, #1
 80083da:	bf08      	it	eq
 80083dc:	2020      	moveq	r0, #32
 80083de:	4770      	bx	lr
 80083e0:	2000      	movs	r0, #0
 80083e2:	e7e5      	b.n	80083b0 <__hi0bits+0xc>

080083e4 <__lo0bits>:
 80083e4:	6803      	ldr	r3, [r0, #0]
 80083e6:	4602      	mov	r2, r0
 80083e8:	f013 0007 	ands.w	r0, r3, #7
 80083ec:	d00b      	beq.n	8008406 <__lo0bits+0x22>
 80083ee:	07d9      	lsls	r1, r3, #31
 80083f0:	d422      	bmi.n	8008438 <__lo0bits+0x54>
 80083f2:	0798      	lsls	r0, r3, #30
 80083f4:	bf49      	itett	mi
 80083f6:	085b      	lsrmi	r3, r3, #1
 80083f8:	089b      	lsrpl	r3, r3, #2
 80083fa:	2001      	movmi	r0, #1
 80083fc:	6013      	strmi	r3, [r2, #0]
 80083fe:	bf5c      	itt	pl
 8008400:	2002      	movpl	r0, #2
 8008402:	6013      	strpl	r3, [r2, #0]
 8008404:	4770      	bx	lr
 8008406:	b299      	uxth	r1, r3
 8008408:	b909      	cbnz	r1, 800840e <__lo0bits+0x2a>
 800840a:	2010      	movs	r0, #16
 800840c:	0c1b      	lsrs	r3, r3, #16
 800840e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8008412:	bf04      	itt	eq
 8008414:	0a1b      	lsreq	r3, r3, #8
 8008416:	3008      	addeq	r0, #8
 8008418:	0719      	lsls	r1, r3, #28
 800841a:	bf04      	itt	eq
 800841c:	091b      	lsreq	r3, r3, #4
 800841e:	3004      	addeq	r0, #4
 8008420:	0799      	lsls	r1, r3, #30
 8008422:	bf04      	itt	eq
 8008424:	089b      	lsreq	r3, r3, #2
 8008426:	3002      	addeq	r0, #2
 8008428:	07d9      	lsls	r1, r3, #31
 800842a:	d403      	bmi.n	8008434 <__lo0bits+0x50>
 800842c:	085b      	lsrs	r3, r3, #1
 800842e:	f100 0001 	add.w	r0, r0, #1
 8008432:	d003      	beq.n	800843c <__lo0bits+0x58>
 8008434:	6013      	str	r3, [r2, #0]
 8008436:	4770      	bx	lr
 8008438:	2000      	movs	r0, #0
 800843a:	4770      	bx	lr
 800843c:	2020      	movs	r0, #32
 800843e:	4770      	bx	lr

08008440 <__i2b>:
 8008440:	b510      	push	{r4, lr}
 8008442:	460c      	mov	r4, r1
 8008444:	2101      	movs	r1, #1
 8008446:	f7ff feb7 	bl	80081b8 <_Balloc>
 800844a:	4602      	mov	r2, r0
 800844c:	b928      	cbnz	r0, 800845a <__i2b+0x1a>
 800844e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8008452:	4b04      	ldr	r3, [pc, #16]	; (8008464 <__i2b+0x24>)
 8008454:	4804      	ldr	r0, [pc, #16]	; (8008468 <__i2b+0x28>)
 8008456:	f001 f9cd 	bl	80097f4 <__assert_func>
 800845a:	2301      	movs	r3, #1
 800845c:	6144      	str	r4, [r0, #20]
 800845e:	6103      	str	r3, [r0, #16]
 8008460:	bd10      	pop	{r4, pc}
 8008462:	bf00      	nop
 8008464:	0800a624 	.word	0x0800a624
 8008468:	0800a6b4 	.word	0x0800a6b4

0800846c <__multiply>:
 800846c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008470:	4614      	mov	r4, r2
 8008472:	690a      	ldr	r2, [r1, #16]
 8008474:	6923      	ldr	r3, [r4, #16]
 8008476:	460d      	mov	r5, r1
 8008478:	429a      	cmp	r2, r3
 800847a:	bfbe      	ittt	lt
 800847c:	460b      	movlt	r3, r1
 800847e:	4625      	movlt	r5, r4
 8008480:	461c      	movlt	r4, r3
 8008482:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8008486:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800848a:	68ab      	ldr	r3, [r5, #8]
 800848c:	6869      	ldr	r1, [r5, #4]
 800848e:	eb0a 0709 	add.w	r7, sl, r9
 8008492:	42bb      	cmp	r3, r7
 8008494:	b085      	sub	sp, #20
 8008496:	bfb8      	it	lt
 8008498:	3101      	addlt	r1, #1
 800849a:	f7ff fe8d 	bl	80081b8 <_Balloc>
 800849e:	b930      	cbnz	r0, 80084ae <__multiply+0x42>
 80084a0:	4602      	mov	r2, r0
 80084a2:	f240 115d 	movw	r1, #349	; 0x15d
 80084a6:	4b41      	ldr	r3, [pc, #260]	; (80085ac <__multiply+0x140>)
 80084a8:	4841      	ldr	r0, [pc, #260]	; (80085b0 <__multiply+0x144>)
 80084aa:	f001 f9a3 	bl	80097f4 <__assert_func>
 80084ae:	f100 0614 	add.w	r6, r0, #20
 80084b2:	4633      	mov	r3, r6
 80084b4:	2200      	movs	r2, #0
 80084b6:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 80084ba:	4543      	cmp	r3, r8
 80084bc:	d31e      	bcc.n	80084fc <__multiply+0x90>
 80084be:	f105 0c14 	add.w	ip, r5, #20
 80084c2:	f104 0314 	add.w	r3, r4, #20
 80084c6:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 80084ca:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 80084ce:	9202      	str	r2, [sp, #8]
 80084d0:	ebac 0205 	sub.w	r2, ip, r5
 80084d4:	3a15      	subs	r2, #21
 80084d6:	f022 0203 	bic.w	r2, r2, #3
 80084da:	3204      	adds	r2, #4
 80084dc:	f105 0115 	add.w	r1, r5, #21
 80084e0:	458c      	cmp	ip, r1
 80084e2:	bf38      	it	cc
 80084e4:	2204      	movcc	r2, #4
 80084e6:	9201      	str	r2, [sp, #4]
 80084e8:	9a02      	ldr	r2, [sp, #8]
 80084ea:	9303      	str	r3, [sp, #12]
 80084ec:	429a      	cmp	r2, r3
 80084ee:	d808      	bhi.n	8008502 <__multiply+0x96>
 80084f0:	2f00      	cmp	r7, #0
 80084f2:	dc55      	bgt.n	80085a0 <__multiply+0x134>
 80084f4:	6107      	str	r7, [r0, #16]
 80084f6:	b005      	add	sp, #20
 80084f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084fc:	f843 2b04 	str.w	r2, [r3], #4
 8008500:	e7db      	b.n	80084ba <__multiply+0x4e>
 8008502:	f8b3 a000 	ldrh.w	sl, [r3]
 8008506:	f1ba 0f00 	cmp.w	sl, #0
 800850a:	d020      	beq.n	800854e <__multiply+0xe2>
 800850c:	46b1      	mov	r9, r6
 800850e:	2200      	movs	r2, #0
 8008510:	f105 0e14 	add.w	lr, r5, #20
 8008514:	f85e 4b04 	ldr.w	r4, [lr], #4
 8008518:	f8d9 b000 	ldr.w	fp, [r9]
 800851c:	b2a1      	uxth	r1, r4
 800851e:	fa1f fb8b 	uxth.w	fp, fp
 8008522:	fb0a b101 	mla	r1, sl, r1, fp
 8008526:	4411      	add	r1, r2
 8008528:	f8d9 2000 	ldr.w	r2, [r9]
 800852c:	0c24      	lsrs	r4, r4, #16
 800852e:	0c12      	lsrs	r2, r2, #16
 8008530:	fb0a 2404 	mla	r4, sl, r4, r2
 8008534:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8008538:	b289      	uxth	r1, r1
 800853a:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800853e:	45f4      	cmp	ip, lr
 8008540:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8008544:	f849 1b04 	str.w	r1, [r9], #4
 8008548:	d8e4      	bhi.n	8008514 <__multiply+0xa8>
 800854a:	9901      	ldr	r1, [sp, #4]
 800854c:	5072      	str	r2, [r6, r1]
 800854e:	9a03      	ldr	r2, [sp, #12]
 8008550:	3304      	adds	r3, #4
 8008552:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008556:	f1b9 0f00 	cmp.w	r9, #0
 800855a:	d01f      	beq.n	800859c <__multiply+0x130>
 800855c:	46b6      	mov	lr, r6
 800855e:	f04f 0a00 	mov.w	sl, #0
 8008562:	6834      	ldr	r4, [r6, #0]
 8008564:	f105 0114 	add.w	r1, r5, #20
 8008568:	880a      	ldrh	r2, [r1, #0]
 800856a:	f8be b002 	ldrh.w	fp, [lr, #2]
 800856e:	b2a4      	uxth	r4, r4
 8008570:	fb09 b202 	mla	r2, r9, r2, fp
 8008574:	4492      	add	sl, r2
 8008576:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800857a:	f84e 4b04 	str.w	r4, [lr], #4
 800857e:	f851 4b04 	ldr.w	r4, [r1], #4
 8008582:	f8be 2000 	ldrh.w	r2, [lr]
 8008586:	0c24      	lsrs	r4, r4, #16
 8008588:	fb09 2404 	mla	r4, r9, r4, r2
 800858c:	458c      	cmp	ip, r1
 800858e:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8008592:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8008596:	d8e7      	bhi.n	8008568 <__multiply+0xfc>
 8008598:	9a01      	ldr	r2, [sp, #4]
 800859a:	50b4      	str	r4, [r6, r2]
 800859c:	3604      	adds	r6, #4
 800859e:	e7a3      	b.n	80084e8 <__multiply+0x7c>
 80085a0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d1a5      	bne.n	80084f4 <__multiply+0x88>
 80085a8:	3f01      	subs	r7, #1
 80085aa:	e7a1      	b.n	80084f0 <__multiply+0x84>
 80085ac:	0800a624 	.word	0x0800a624
 80085b0:	0800a6b4 	.word	0x0800a6b4

080085b4 <__pow5mult>:
 80085b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80085b8:	4615      	mov	r5, r2
 80085ba:	f012 0203 	ands.w	r2, r2, #3
 80085be:	4606      	mov	r6, r0
 80085c0:	460f      	mov	r7, r1
 80085c2:	d007      	beq.n	80085d4 <__pow5mult+0x20>
 80085c4:	4c25      	ldr	r4, [pc, #148]	; (800865c <__pow5mult+0xa8>)
 80085c6:	3a01      	subs	r2, #1
 80085c8:	2300      	movs	r3, #0
 80085ca:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80085ce:	f7ff fe55 	bl	800827c <__multadd>
 80085d2:	4607      	mov	r7, r0
 80085d4:	10ad      	asrs	r5, r5, #2
 80085d6:	d03d      	beq.n	8008654 <__pow5mult+0xa0>
 80085d8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80085da:	b97c      	cbnz	r4, 80085fc <__pow5mult+0x48>
 80085dc:	2010      	movs	r0, #16
 80085de:	f7ff fdb5 	bl	800814c <malloc>
 80085e2:	4602      	mov	r2, r0
 80085e4:	6270      	str	r0, [r6, #36]	; 0x24
 80085e6:	b928      	cbnz	r0, 80085f4 <__pow5mult+0x40>
 80085e8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80085ec:	4b1c      	ldr	r3, [pc, #112]	; (8008660 <__pow5mult+0xac>)
 80085ee:	481d      	ldr	r0, [pc, #116]	; (8008664 <__pow5mult+0xb0>)
 80085f0:	f001 f900 	bl	80097f4 <__assert_func>
 80085f4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80085f8:	6004      	str	r4, [r0, #0]
 80085fa:	60c4      	str	r4, [r0, #12]
 80085fc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008600:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008604:	b94c      	cbnz	r4, 800861a <__pow5mult+0x66>
 8008606:	f240 2171 	movw	r1, #625	; 0x271
 800860a:	4630      	mov	r0, r6
 800860c:	f7ff ff18 	bl	8008440 <__i2b>
 8008610:	2300      	movs	r3, #0
 8008612:	4604      	mov	r4, r0
 8008614:	f8c8 0008 	str.w	r0, [r8, #8]
 8008618:	6003      	str	r3, [r0, #0]
 800861a:	f04f 0900 	mov.w	r9, #0
 800861e:	07eb      	lsls	r3, r5, #31
 8008620:	d50a      	bpl.n	8008638 <__pow5mult+0x84>
 8008622:	4639      	mov	r1, r7
 8008624:	4622      	mov	r2, r4
 8008626:	4630      	mov	r0, r6
 8008628:	f7ff ff20 	bl	800846c <__multiply>
 800862c:	4680      	mov	r8, r0
 800862e:	4639      	mov	r1, r7
 8008630:	4630      	mov	r0, r6
 8008632:	f7ff fe01 	bl	8008238 <_Bfree>
 8008636:	4647      	mov	r7, r8
 8008638:	106d      	asrs	r5, r5, #1
 800863a:	d00b      	beq.n	8008654 <__pow5mult+0xa0>
 800863c:	6820      	ldr	r0, [r4, #0]
 800863e:	b938      	cbnz	r0, 8008650 <__pow5mult+0x9c>
 8008640:	4622      	mov	r2, r4
 8008642:	4621      	mov	r1, r4
 8008644:	4630      	mov	r0, r6
 8008646:	f7ff ff11 	bl	800846c <__multiply>
 800864a:	6020      	str	r0, [r4, #0]
 800864c:	f8c0 9000 	str.w	r9, [r0]
 8008650:	4604      	mov	r4, r0
 8008652:	e7e4      	b.n	800861e <__pow5mult+0x6a>
 8008654:	4638      	mov	r0, r7
 8008656:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800865a:	bf00      	nop
 800865c:	0800a808 	.word	0x0800a808
 8008660:	0800a5ae 	.word	0x0800a5ae
 8008664:	0800a6b4 	.word	0x0800a6b4

08008668 <__lshift>:
 8008668:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800866c:	460c      	mov	r4, r1
 800866e:	4607      	mov	r7, r0
 8008670:	4691      	mov	r9, r2
 8008672:	6923      	ldr	r3, [r4, #16]
 8008674:	6849      	ldr	r1, [r1, #4]
 8008676:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800867a:	68a3      	ldr	r3, [r4, #8]
 800867c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008680:	f108 0601 	add.w	r6, r8, #1
 8008684:	42b3      	cmp	r3, r6
 8008686:	db0b      	blt.n	80086a0 <__lshift+0x38>
 8008688:	4638      	mov	r0, r7
 800868a:	f7ff fd95 	bl	80081b8 <_Balloc>
 800868e:	4605      	mov	r5, r0
 8008690:	b948      	cbnz	r0, 80086a6 <__lshift+0x3e>
 8008692:	4602      	mov	r2, r0
 8008694:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008698:	4b27      	ldr	r3, [pc, #156]	; (8008738 <__lshift+0xd0>)
 800869a:	4828      	ldr	r0, [pc, #160]	; (800873c <__lshift+0xd4>)
 800869c:	f001 f8aa 	bl	80097f4 <__assert_func>
 80086a0:	3101      	adds	r1, #1
 80086a2:	005b      	lsls	r3, r3, #1
 80086a4:	e7ee      	b.n	8008684 <__lshift+0x1c>
 80086a6:	2300      	movs	r3, #0
 80086a8:	f100 0114 	add.w	r1, r0, #20
 80086ac:	f100 0210 	add.w	r2, r0, #16
 80086b0:	4618      	mov	r0, r3
 80086b2:	4553      	cmp	r3, sl
 80086b4:	db33      	blt.n	800871e <__lshift+0xb6>
 80086b6:	6920      	ldr	r0, [r4, #16]
 80086b8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80086bc:	f104 0314 	add.w	r3, r4, #20
 80086c0:	f019 091f 	ands.w	r9, r9, #31
 80086c4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80086c8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80086cc:	d02b      	beq.n	8008726 <__lshift+0xbe>
 80086ce:	468a      	mov	sl, r1
 80086d0:	2200      	movs	r2, #0
 80086d2:	f1c9 0e20 	rsb	lr, r9, #32
 80086d6:	6818      	ldr	r0, [r3, #0]
 80086d8:	fa00 f009 	lsl.w	r0, r0, r9
 80086dc:	4302      	orrs	r2, r0
 80086de:	f84a 2b04 	str.w	r2, [sl], #4
 80086e2:	f853 2b04 	ldr.w	r2, [r3], #4
 80086e6:	459c      	cmp	ip, r3
 80086e8:	fa22 f20e 	lsr.w	r2, r2, lr
 80086ec:	d8f3      	bhi.n	80086d6 <__lshift+0x6e>
 80086ee:	ebac 0304 	sub.w	r3, ip, r4
 80086f2:	3b15      	subs	r3, #21
 80086f4:	f023 0303 	bic.w	r3, r3, #3
 80086f8:	3304      	adds	r3, #4
 80086fa:	f104 0015 	add.w	r0, r4, #21
 80086fe:	4584      	cmp	ip, r0
 8008700:	bf38      	it	cc
 8008702:	2304      	movcc	r3, #4
 8008704:	50ca      	str	r2, [r1, r3]
 8008706:	b10a      	cbz	r2, 800870c <__lshift+0xa4>
 8008708:	f108 0602 	add.w	r6, r8, #2
 800870c:	3e01      	subs	r6, #1
 800870e:	4638      	mov	r0, r7
 8008710:	4621      	mov	r1, r4
 8008712:	612e      	str	r6, [r5, #16]
 8008714:	f7ff fd90 	bl	8008238 <_Bfree>
 8008718:	4628      	mov	r0, r5
 800871a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800871e:	f842 0f04 	str.w	r0, [r2, #4]!
 8008722:	3301      	adds	r3, #1
 8008724:	e7c5      	b.n	80086b2 <__lshift+0x4a>
 8008726:	3904      	subs	r1, #4
 8008728:	f853 2b04 	ldr.w	r2, [r3], #4
 800872c:	459c      	cmp	ip, r3
 800872e:	f841 2f04 	str.w	r2, [r1, #4]!
 8008732:	d8f9      	bhi.n	8008728 <__lshift+0xc0>
 8008734:	e7ea      	b.n	800870c <__lshift+0xa4>
 8008736:	bf00      	nop
 8008738:	0800a624 	.word	0x0800a624
 800873c:	0800a6b4 	.word	0x0800a6b4

08008740 <__mcmp>:
 8008740:	4603      	mov	r3, r0
 8008742:	690a      	ldr	r2, [r1, #16]
 8008744:	6900      	ldr	r0, [r0, #16]
 8008746:	b530      	push	{r4, r5, lr}
 8008748:	1a80      	subs	r0, r0, r2
 800874a:	d10d      	bne.n	8008768 <__mcmp+0x28>
 800874c:	3314      	adds	r3, #20
 800874e:	3114      	adds	r1, #20
 8008750:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008754:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008758:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800875c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008760:	4295      	cmp	r5, r2
 8008762:	d002      	beq.n	800876a <__mcmp+0x2a>
 8008764:	d304      	bcc.n	8008770 <__mcmp+0x30>
 8008766:	2001      	movs	r0, #1
 8008768:	bd30      	pop	{r4, r5, pc}
 800876a:	42a3      	cmp	r3, r4
 800876c:	d3f4      	bcc.n	8008758 <__mcmp+0x18>
 800876e:	e7fb      	b.n	8008768 <__mcmp+0x28>
 8008770:	f04f 30ff 	mov.w	r0, #4294967295
 8008774:	e7f8      	b.n	8008768 <__mcmp+0x28>
	...

08008778 <__mdiff>:
 8008778:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800877c:	460c      	mov	r4, r1
 800877e:	4606      	mov	r6, r0
 8008780:	4611      	mov	r1, r2
 8008782:	4620      	mov	r0, r4
 8008784:	4692      	mov	sl, r2
 8008786:	f7ff ffdb 	bl	8008740 <__mcmp>
 800878a:	1e05      	subs	r5, r0, #0
 800878c:	d111      	bne.n	80087b2 <__mdiff+0x3a>
 800878e:	4629      	mov	r1, r5
 8008790:	4630      	mov	r0, r6
 8008792:	f7ff fd11 	bl	80081b8 <_Balloc>
 8008796:	4602      	mov	r2, r0
 8008798:	b928      	cbnz	r0, 80087a6 <__mdiff+0x2e>
 800879a:	f240 2132 	movw	r1, #562	; 0x232
 800879e:	4b3c      	ldr	r3, [pc, #240]	; (8008890 <__mdiff+0x118>)
 80087a0:	483c      	ldr	r0, [pc, #240]	; (8008894 <__mdiff+0x11c>)
 80087a2:	f001 f827 	bl	80097f4 <__assert_func>
 80087a6:	2301      	movs	r3, #1
 80087a8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80087ac:	4610      	mov	r0, r2
 80087ae:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087b2:	bfa4      	itt	ge
 80087b4:	4653      	movge	r3, sl
 80087b6:	46a2      	movge	sl, r4
 80087b8:	4630      	mov	r0, r6
 80087ba:	f8da 1004 	ldr.w	r1, [sl, #4]
 80087be:	bfa6      	itte	ge
 80087c0:	461c      	movge	r4, r3
 80087c2:	2500      	movge	r5, #0
 80087c4:	2501      	movlt	r5, #1
 80087c6:	f7ff fcf7 	bl	80081b8 <_Balloc>
 80087ca:	4602      	mov	r2, r0
 80087cc:	b918      	cbnz	r0, 80087d6 <__mdiff+0x5e>
 80087ce:	f44f 7110 	mov.w	r1, #576	; 0x240
 80087d2:	4b2f      	ldr	r3, [pc, #188]	; (8008890 <__mdiff+0x118>)
 80087d4:	e7e4      	b.n	80087a0 <__mdiff+0x28>
 80087d6:	f100 0814 	add.w	r8, r0, #20
 80087da:	f8da 7010 	ldr.w	r7, [sl, #16]
 80087de:	60c5      	str	r5, [r0, #12]
 80087e0:	f04f 0c00 	mov.w	ip, #0
 80087e4:	f10a 0514 	add.w	r5, sl, #20
 80087e8:	f10a 0010 	add.w	r0, sl, #16
 80087ec:	46c2      	mov	sl, r8
 80087ee:	6926      	ldr	r6, [r4, #16]
 80087f0:	f104 0914 	add.w	r9, r4, #20
 80087f4:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 80087f8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80087fc:	f850 bf04 	ldr.w	fp, [r0, #4]!
 8008800:	f859 3b04 	ldr.w	r3, [r9], #4
 8008804:	fa1f f18b 	uxth.w	r1, fp
 8008808:	4461      	add	r1, ip
 800880a:	fa1f fc83 	uxth.w	ip, r3
 800880e:	0c1b      	lsrs	r3, r3, #16
 8008810:	eba1 010c 	sub.w	r1, r1, ip
 8008814:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008818:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800881c:	b289      	uxth	r1, r1
 800881e:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8008822:	454e      	cmp	r6, r9
 8008824:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8008828:	f84a 3b04 	str.w	r3, [sl], #4
 800882c:	d8e6      	bhi.n	80087fc <__mdiff+0x84>
 800882e:	1b33      	subs	r3, r6, r4
 8008830:	3b15      	subs	r3, #21
 8008832:	f023 0303 	bic.w	r3, r3, #3
 8008836:	3415      	adds	r4, #21
 8008838:	3304      	adds	r3, #4
 800883a:	42a6      	cmp	r6, r4
 800883c:	bf38      	it	cc
 800883e:	2304      	movcc	r3, #4
 8008840:	441d      	add	r5, r3
 8008842:	4443      	add	r3, r8
 8008844:	461e      	mov	r6, r3
 8008846:	462c      	mov	r4, r5
 8008848:	4574      	cmp	r4, lr
 800884a:	d30e      	bcc.n	800886a <__mdiff+0xf2>
 800884c:	f10e 0103 	add.w	r1, lr, #3
 8008850:	1b49      	subs	r1, r1, r5
 8008852:	f021 0103 	bic.w	r1, r1, #3
 8008856:	3d03      	subs	r5, #3
 8008858:	45ae      	cmp	lr, r5
 800885a:	bf38      	it	cc
 800885c:	2100      	movcc	r1, #0
 800885e:	4419      	add	r1, r3
 8008860:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8008864:	b18b      	cbz	r3, 800888a <__mdiff+0x112>
 8008866:	6117      	str	r7, [r2, #16]
 8008868:	e7a0      	b.n	80087ac <__mdiff+0x34>
 800886a:	f854 8b04 	ldr.w	r8, [r4], #4
 800886e:	fa1f f188 	uxth.w	r1, r8
 8008872:	4461      	add	r1, ip
 8008874:	1408      	asrs	r0, r1, #16
 8008876:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 800887a:	b289      	uxth	r1, r1
 800887c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008880:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008884:	f846 1b04 	str.w	r1, [r6], #4
 8008888:	e7de      	b.n	8008848 <__mdiff+0xd0>
 800888a:	3f01      	subs	r7, #1
 800888c:	e7e8      	b.n	8008860 <__mdiff+0xe8>
 800888e:	bf00      	nop
 8008890:	0800a624 	.word	0x0800a624
 8008894:	0800a6b4 	.word	0x0800a6b4

08008898 <__ulp>:
 8008898:	4b11      	ldr	r3, [pc, #68]	; (80088e0 <__ulp+0x48>)
 800889a:	400b      	ands	r3, r1
 800889c:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	dd02      	ble.n	80088aa <__ulp+0x12>
 80088a4:	2000      	movs	r0, #0
 80088a6:	4619      	mov	r1, r3
 80088a8:	4770      	bx	lr
 80088aa:	425b      	negs	r3, r3
 80088ac:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 80088b0:	f04f 0000 	mov.w	r0, #0
 80088b4:	f04f 0100 	mov.w	r1, #0
 80088b8:	ea4f 5223 	mov.w	r2, r3, asr #20
 80088bc:	da04      	bge.n	80088c8 <__ulp+0x30>
 80088be:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80088c2:	fa43 f102 	asr.w	r1, r3, r2
 80088c6:	4770      	bx	lr
 80088c8:	f1a2 0314 	sub.w	r3, r2, #20
 80088cc:	2b1e      	cmp	r3, #30
 80088ce:	bfd6      	itet	le
 80088d0:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 80088d4:	2301      	movgt	r3, #1
 80088d6:	fa22 f303 	lsrle.w	r3, r2, r3
 80088da:	4618      	mov	r0, r3
 80088dc:	4770      	bx	lr
 80088de:	bf00      	nop
 80088e0:	7ff00000 	.word	0x7ff00000

080088e4 <__b2d>:
 80088e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80088e8:	6907      	ldr	r7, [r0, #16]
 80088ea:	f100 0914 	add.w	r9, r0, #20
 80088ee:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 80088f2:	f857 6c04 	ldr.w	r6, [r7, #-4]
 80088f6:	f1a7 0804 	sub.w	r8, r7, #4
 80088fa:	4630      	mov	r0, r6
 80088fc:	f7ff fd52 	bl	80083a4 <__hi0bits>
 8008900:	f1c0 0320 	rsb	r3, r0, #32
 8008904:	280a      	cmp	r0, #10
 8008906:	600b      	str	r3, [r1, #0]
 8008908:	491f      	ldr	r1, [pc, #124]	; (8008988 <__b2d+0xa4>)
 800890a:	dc17      	bgt.n	800893c <__b2d+0x58>
 800890c:	45c1      	cmp	r9, r8
 800890e:	bf28      	it	cs
 8008910:	2200      	movcs	r2, #0
 8008912:	f1c0 0c0b 	rsb	ip, r0, #11
 8008916:	fa26 f30c 	lsr.w	r3, r6, ip
 800891a:	bf38      	it	cc
 800891c:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8008920:	ea43 0501 	orr.w	r5, r3, r1
 8008924:	f100 0315 	add.w	r3, r0, #21
 8008928:	fa06 f303 	lsl.w	r3, r6, r3
 800892c:	fa22 f20c 	lsr.w	r2, r2, ip
 8008930:	ea43 0402 	orr.w	r4, r3, r2
 8008934:	4620      	mov	r0, r4
 8008936:	4629      	mov	r1, r5
 8008938:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800893c:	45c1      	cmp	r9, r8
 800893e:	bf2e      	itee	cs
 8008940:	2200      	movcs	r2, #0
 8008942:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8008946:	f1a7 0808 	subcc.w	r8, r7, #8
 800894a:	f1b0 030b 	subs.w	r3, r0, #11
 800894e:	d016      	beq.n	800897e <__b2d+0x9a>
 8008950:	f1c3 0720 	rsb	r7, r3, #32
 8008954:	fa22 f107 	lsr.w	r1, r2, r7
 8008958:	45c8      	cmp	r8, r9
 800895a:	fa06 f603 	lsl.w	r6, r6, r3
 800895e:	ea46 0601 	orr.w	r6, r6, r1
 8008962:	bf94      	ite	ls
 8008964:	2100      	movls	r1, #0
 8008966:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 800896a:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 800896e:	fa02 f003 	lsl.w	r0, r2, r3
 8008972:	40f9      	lsrs	r1, r7
 8008974:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8008978:	ea40 0401 	orr.w	r4, r0, r1
 800897c:	e7da      	b.n	8008934 <__b2d+0x50>
 800897e:	4614      	mov	r4, r2
 8008980:	ea46 0501 	orr.w	r5, r6, r1
 8008984:	e7d6      	b.n	8008934 <__b2d+0x50>
 8008986:	bf00      	nop
 8008988:	3ff00000 	.word	0x3ff00000

0800898c <__d2b>:
 800898c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8008990:	2101      	movs	r1, #1
 8008992:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8008996:	4690      	mov	r8, r2
 8008998:	461d      	mov	r5, r3
 800899a:	f7ff fc0d 	bl	80081b8 <_Balloc>
 800899e:	4604      	mov	r4, r0
 80089a0:	b930      	cbnz	r0, 80089b0 <__d2b+0x24>
 80089a2:	4602      	mov	r2, r0
 80089a4:	f240 310a 	movw	r1, #778	; 0x30a
 80089a8:	4b24      	ldr	r3, [pc, #144]	; (8008a3c <__d2b+0xb0>)
 80089aa:	4825      	ldr	r0, [pc, #148]	; (8008a40 <__d2b+0xb4>)
 80089ac:	f000 ff22 	bl	80097f4 <__assert_func>
 80089b0:	f3c5 0313 	ubfx	r3, r5, #0, #20
 80089b4:	f3c5 550a 	ubfx	r5, r5, #20, #11
 80089b8:	bb2d      	cbnz	r5, 8008a06 <__d2b+0x7a>
 80089ba:	9301      	str	r3, [sp, #4]
 80089bc:	f1b8 0300 	subs.w	r3, r8, #0
 80089c0:	d026      	beq.n	8008a10 <__d2b+0x84>
 80089c2:	4668      	mov	r0, sp
 80089c4:	9300      	str	r3, [sp, #0]
 80089c6:	f7ff fd0d 	bl	80083e4 <__lo0bits>
 80089ca:	9900      	ldr	r1, [sp, #0]
 80089cc:	b1f0      	cbz	r0, 8008a0c <__d2b+0x80>
 80089ce:	9a01      	ldr	r2, [sp, #4]
 80089d0:	f1c0 0320 	rsb	r3, r0, #32
 80089d4:	fa02 f303 	lsl.w	r3, r2, r3
 80089d8:	430b      	orrs	r3, r1
 80089da:	40c2      	lsrs	r2, r0
 80089dc:	6163      	str	r3, [r4, #20]
 80089de:	9201      	str	r2, [sp, #4]
 80089e0:	9b01      	ldr	r3, [sp, #4]
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	bf14      	ite	ne
 80089e6:	2102      	movne	r1, #2
 80089e8:	2101      	moveq	r1, #1
 80089ea:	61a3      	str	r3, [r4, #24]
 80089ec:	6121      	str	r1, [r4, #16]
 80089ee:	b1c5      	cbz	r5, 8008a22 <__d2b+0x96>
 80089f0:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80089f4:	4405      	add	r5, r0
 80089f6:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80089fa:	603d      	str	r5, [r7, #0]
 80089fc:	6030      	str	r0, [r6, #0]
 80089fe:	4620      	mov	r0, r4
 8008a00:	b002      	add	sp, #8
 8008a02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008a06:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008a0a:	e7d6      	b.n	80089ba <__d2b+0x2e>
 8008a0c:	6161      	str	r1, [r4, #20]
 8008a0e:	e7e7      	b.n	80089e0 <__d2b+0x54>
 8008a10:	a801      	add	r0, sp, #4
 8008a12:	f7ff fce7 	bl	80083e4 <__lo0bits>
 8008a16:	2101      	movs	r1, #1
 8008a18:	9b01      	ldr	r3, [sp, #4]
 8008a1a:	6121      	str	r1, [r4, #16]
 8008a1c:	6163      	str	r3, [r4, #20]
 8008a1e:	3020      	adds	r0, #32
 8008a20:	e7e5      	b.n	80089ee <__d2b+0x62>
 8008a22:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8008a26:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008a2a:	6038      	str	r0, [r7, #0]
 8008a2c:	6918      	ldr	r0, [r3, #16]
 8008a2e:	f7ff fcb9 	bl	80083a4 <__hi0bits>
 8008a32:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8008a36:	6031      	str	r1, [r6, #0]
 8008a38:	e7e1      	b.n	80089fe <__d2b+0x72>
 8008a3a:	bf00      	nop
 8008a3c:	0800a624 	.word	0x0800a624
 8008a40:	0800a6b4 	.word	0x0800a6b4

08008a44 <__ratio>:
 8008a44:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a48:	4688      	mov	r8, r1
 8008a4a:	4669      	mov	r1, sp
 8008a4c:	4681      	mov	r9, r0
 8008a4e:	f7ff ff49 	bl	80088e4 <__b2d>
 8008a52:	460f      	mov	r7, r1
 8008a54:	4604      	mov	r4, r0
 8008a56:	460d      	mov	r5, r1
 8008a58:	4640      	mov	r0, r8
 8008a5a:	a901      	add	r1, sp, #4
 8008a5c:	f7ff ff42 	bl	80088e4 <__b2d>
 8008a60:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008a64:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8008a68:	468b      	mov	fp, r1
 8008a6a:	eba3 0c02 	sub.w	ip, r3, r2
 8008a6e:	e9dd 3200 	ldrd	r3, r2, [sp]
 8008a72:	1a9b      	subs	r3, r3, r2
 8008a74:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	bfd5      	itete	le
 8008a7c:	460a      	movle	r2, r1
 8008a7e:	462a      	movgt	r2, r5
 8008a80:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8008a84:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8008a88:	bfd8      	it	le
 8008a8a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8008a8e:	465b      	mov	r3, fp
 8008a90:	4602      	mov	r2, r0
 8008a92:	4639      	mov	r1, r7
 8008a94:	4620      	mov	r0, r4
 8008a96:	f7f7 feb5 	bl	8000804 <__aeabi_ddiv>
 8008a9a:	b003      	add	sp, #12
 8008a9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008aa0 <__copybits>:
 8008aa0:	3901      	subs	r1, #1
 8008aa2:	b570      	push	{r4, r5, r6, lr}
 8008aa4:	1149      	asrs	r1, r1, #5
 8008aa6:	6914      	ldr	r4, [r2, #16]
 8008aa8:	3101      	adds	r1, #1
 8008aaa:	f102 0314 	add.w	r3, r2, #20
 8008aae:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008ab2:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008ab6:	1f05      	subs	r5, r0, #4
 8008ab8:	42a3      	cmp	r3, r4
 8008aba:	d30c      	bcc.n	8008ad6 <__copybits+0x36>
 8008abc:	1aa3      	subs	r3, r4, r2
 8008abe:	3b11      	subs	r3, #17
 8008ac0:	f023 0303 	bic.w	r3, r3, #3
 8008ac4:	3211      	adds	r2, #17
 8008ac6:	42a2      	cmp	r2, r4
 8008ac8:	bf88      	it	hi
 8008aca:	2300      	movhi	r3, #0
 8008acc:	4418      	add	r0, r3
 8008ace:	2300      	movs	r3, #0
 8008ad0:	4288      	cmp	r0, r1
 8008ad2:	d305      	bcc.n	8008ae0 <__copybits+0x40>
 8008ad4:	bd70      	pop	{r4, r5, r6, pc}
 8008ad6:	f853 6b04 	ldr.w	r6, [r3], #4
 8008ada:	f845 6f04 	str.w	r6, [r5, #4]!
 8008ade:	e7eb      	b.n	8008ab8 <__copybits+0x18>
 8008ae0:	f840 3b04 	str.w	r3, [r0], #4
 8008ae4:	e7f4      	b.n	8008ad0 <__copybits+0x30>

08008ae6 <__any_on>:
 8008ae6:	f100 0214 	add.w	r2, r0, #20
 8008aea:	6900      	ldr	r0, [r0, #16]
 8008aec:	114b      	asrs	r3, r1, #5
 8008aee:	4298      	cmp	r0, r3
 8008af0:	b510      	push	{r4, lr}
 8008af2:	db11      	blt.n	8008b18 <__any_on+0x32>
 8008af4:	dd0a      	ble.n	8008b0c <__any_on+0x26>
 8008af6:	f011 011f 	ands.w	r1, r1, #31
 8008afa:	d007      	beq.n	8008b0c <__any_on+0x26>
 8008afc:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8008b00:	fa24 f001 	lsr.w	r0, r4, r1
 8008b04:	fa00 f101 	lsl.w	r1, r0, r1
 8008b08:	428c      	cmp	r4, r1
 8008b0a:	d10b      	bne.n	8008b24 <__any_on+0x3e>
 8008b0c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008b10:	4293      	cmp	r3, r2
 8008b12:	d803      	bhi.n	8008b1c <__any_on+0x36>
 8008b14:	2000      	movs	r0, #0
 8008b16:	bd10      	pop	{r4, pc}
 8008b18:	4603      	mov	r3, r0
 8008b1a:	e7f7      	b.n	8008b0c <__any_on+0x26>
 8008b1c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008b20:	2900      	cmp	r1, #0
 8008b22:	d0f5      	beq.n	8008b10 <__any_on+0x2a>
 8008b24:	2001      	movs	r0, #1
 8008b26:	e7f6      	b.n	8008b16 <__any_on+0x30>

08008b28 <_calloc_r>:
 8008b28:	b538      	push	{r3, r4, r5, lr}
 8008b2a:	fb02 f501 	mul.w	r5, r2, r1
 8008b2e:	4629      	mov	r1, r5
 8008b30:	f000 f854 	bl	8008bdc <_malloc_r>
 8008b34:	4604      	mov	r4, r0
 8008b36:	b118      	cbz	r0, 8008b40 <_calloc_r+0x18>
 8008b38:	462a      	mov	r2, r5
 8008b3a:	2100      	movs	r1, #0
 8008b3c:	f7fc fb3a 	bl	80051b4 <memset>
 8008b40:	4620      	mov	r0, r4
 8008b42:	bd38      	pop	{r3, r4, r5, pc}

08008b44 <_free_r>:
 8008b44:	b538      	push	{r3, r4, r5, lr}
 8008b46:	4605      	mov	r5, r0
 8008b48:	2900      	cmp	r1, #0
 8008b4a:	d043      	beq.n	8008bd4 <_free_r+0x90>
 8008b4c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008b50:	1f0c      	subs	r4, r1, #4
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	bfb8      	it	lt
 8008b56:	18e4      	addlt	r4, r4, r3
 8008b58:	f001 f850 	bl	8009bfc <__malloc_lock>
 8008b5c:	4a1e      	ldr	r2, [pc, #120]	; (8008bd8 <_free_r+0x94>)
 8008b5e:	6813      	ldr	r3, [r2, #0]
 8008b60:	4610      	mov	r0, r2
 8008b62:	b933      	cbnz	r3, 8008b72 <_free_r+0x2e>
 8008b64:	6063      	str	r3, [r4, #4]
 8008b66:	6014      	str	r4, [r2, #0]
 8008b68:	4628      	mov	r0, r5
 8008b6a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008b6e:	f001 b84b 	b.w	8009c08 <__malloc_unlock>
 8008b72:	42a3      	cmp	r3, r4
 8008b74:	d90a      	bls.n	8008b8c <_free_r+0x48>
 8008b76:	6821      	ldr	r1, [r4, #0]
 8008b78:	1862      	adds	r2, r4, r1
 8008b7a:	4293      	cmp	r3, r2
 8008b7c:	bf01      	itttt	eq
 8008b7e:	681a      	ldreq	r2, [r3, #0]
 8008b80:	685b      	ldreq	r3, [r3, #4]
 8008b82:	1852      	addeq	r2, r2, r1
 8008b84:	6022      	streq	r2, [r4, #0]
 8008b86:	6063      	str	r3, [r4, #4]
 8008b88:	6004      	str	r4, [r0, #0]
 8008b8a:	e7ed      	b.n	8008b68 <_free_r+0x24>
 8008b8c:	461a      	mov	r2, r3
 8008b8e:	685b      	ldr	r3, [r3, #4]
 8008b90:	b10b      	cbz	r3, 8008b96 <_free_r+0x52>
 8008b92:	42a3      	cmp	r3, r4
 8008b94:	d9fa      	bls.n	8008b8c <_free_r+0x48>
 8008b96:	6811      	ldr	r1, [r2, #0]
 8008b98:	1850      	adds	r0, r2, r1
 8008b9a:	42a0      	cmp	r0, r4
 8008b9c:	d10b      	bne.n	8008bb6 <_free_r+0x72>
 8008b9e:	6820      	ldr	r0, [r4, #0]
 8008ba0:	4401      	add	r1, r0
 8008ba2:	1850      	adds	r0, r2, r1
 8008ba4:	4283      	cmp	r3, r0
 8008ba6:	6011      	str	r1, [r2, #0]
 8008ba8:	d1de      	bne.n	8008b68 <_free_r+0x24>
 8008baa:	6818      	ldr	r0, [r3, #0]
 8008bac:	685b      	ldr	r3, [r3, #4]
 8008bae:	4401      	add	r1, r0
 8008bb0:	6011      	str	r1, [r2, #0]
 8008bb2:	6053      	str	r3, [r2, #4]
 8008bb4:	e7d8      	b.n	8008b68 <_free_r+0x24>
 8008bb6:	d902      	bls.n	8008bbe <_free_r+0x7a>
 8008bb8:	230c      	movs	r3, #12
 8008bba:	602b      	str	r3, [r5, #0]
 8008bbc:	e7d4      	b.n	8008b68 <_free_r+0x24>
 8008bbe:	6820      	ldr	r0, [r4, #0]
 8008bc0:	1821      	adds	r1, r4, r0
 8008bc2:	428b      	cmp	r3, r1
 8008bc4:	bf01      	itttt	eq
 8008bc6:	6819      	ldreq	r1, [r3, #0]
 8008bc8:	685b      	ldreq	r3, [r3, #4]
 8008bca:	1809      	addeq	r1, r1, r0
 8008bcc:	6021      	streq	r1, [r4, #0]
 8008bce:	6063      	str	r3, [r4, #4]
 8008bd0:	6054      	str	r4, [r2, #4]
 8008bd2:	e7c9      	b.n	8008b68 <_free_r+0x24>
 8008bd4:	bd38      	pop	{r3, r4, r5, pc}
 8008bd6:	bf00      	nop
 8008bd8:	20000200 	.word	0x20000200

08008bdc <_malloc_r>:
 8008bdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bde:	1ccd      	adds	r5, r1, #3
 8008be0:	f025 0503 	bic.w	r5, r5, #3
 8008be4:	3508      	adds	r5, #8
 8008be6:	2d0c      	cmp	r5, #12
 8008be8:	bf38      	it	cc
 8008bea:	250c      	movcc	r5, #12
 8008bec:	2d00      	cmp	r5, #0
 8008bee:	4606      	mov	r6, r0
 8008bf0:	db01      	blt.n	8008bf6 <_malloc_r+0x1a>
 8008bf2:	42a9      	cmp	r1, r5
 8008bf4:	d903      	bls.n	8008bfe <_malloc_r+0x22>
 8008bf6:	230c      	movs	r3, #12
 8008bf8:	6033      	str	r3, [r6, #0]
 8008bfa:	2000      	movs	r0, #0
 8008bfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008bfe:	f000 fffd 	bl	8009bfc <__malloc_lock>
 8008c02:	4921      	ldr	r1, [pc, #132]	; (8008c88 <_malloc_r+0xac>)
 8008c04:	680a      	ldr	r2, [r1, #0]
 8008c06:	4614      	mov	r4, r2
 8008c08:	b99c      	cbnz	r4, 8008c32 <_malloc_r+0x56>
 8008c0a:	4f20      	ldr	r7, [pc, #128]	; (8008c8c <_malloc_r+0xb0>)
 8008c0c:	683b      	ldr	r3, [r7, #0]
 8008c0e:	b923      	cbnz	r3, 8008c1a <_malloc_r+0x3e>
 8008c10:	4621      	mov	r1, r4
 8008c12:	4630      	mov	r0, r6
 8008c14:	f000 fcce 	bl	80095b4 <_sbrk_r>
 8008c18:	6038      	str	r0, [r7, #0]
 8008c1a:	4629      	mov	r1, r5
 8008c1c:	4630      	mov	r0, r6
 8008c1e:	f000 fcc9 	bl	80095b4 <_sbrk_r>
 8008c22:	1c43      	adds	r3, r0, #1
 8008c24:	d123      	bne.n	8008c6e <_malloc_r+0x92>
 8008c26:	230c      	movs	r3, #12
 8008c28:	4630      	mov	r0, r6
 8008c2a:	6033      	str	r3, [r6, #0]
 8008c2c:	f000 ffec 	bl	8009c08 <__malloc_unlock>
 8008c30:	e7e3      	b.n	8008bfa <_malloc_r+0x1e>
 8008c32:	6823      	ldr	r3, [r4, #0]
 8008c34:	1b5b      	subs	r3, r3, r5
 8008c36:	d417      	bmi.n	8008c68 <_malloc_r+0x8c>
 8008c38:	2b0b      	cmp	r3, #11
 8008c3a:	d903      	bls.n	8008c44 <_malloc_r+0x68>
 8008c3c:	6023      	str	r3, [r4, #0]
 8008c3e:	441c      	add	r4, r3
 8008c40:	6025      	str	r5, [r4, #0]
 8008c42:	e004      	b.n	8008c4e <_malloc_r+0x72>
 8008c44:	6863      	ldr	r3, [r4, #4]
 8008c46:	42a2      	cmp	r2, r4
 8008c48:	bf0c      	ite	eq
 8008c4a:	600b      	streq	r3, [r1, #0]
 8008c4c:	6053      	strne	r3, [r2, #4]
 8008c4e:	4630      	mov	r0, r6
 8008c50:	f000 ffda 	bl	8009c08 <__malloc_unlock>
 8008c54:	f104 000b 	add.w	r0, r4, #11
 8008c58:	1d23      	adds	r3, r4, #4
 8008c5a:	f020 0007 	bic.w	r0, r0, #7
 8008c5e:	1ac2      	subs	r2, r0, r3
 8008c60:	d0cc      	beq.n	8008bfc <_malloc_r+0x20>
 8008c62:	1a1b      	subs	r3, r3, r0
 8008c64:	50a3      	str	r3, [r4, r2]
 8008c66:	e7c9      	b.n	8008bfc <_malloc_r+0x20>
 8008c68:	4622      	mov	r2, r4
 8008c6a:	6864      	ldr	r4, [r4, #4]
 8008c6c:	e7cc      	b.n	8008c08 <_malloc_r+0x2c>
 8008c6e:	1cc4      	adds	r4, r0, #3
 8008c70:	f024 0403 	bic.w	r4, r4, #3
 8008c74:	42a0      	cmp	r0, r4
 8008c76:	d0e3      	beq.n	8008c40 <_malloc_r+0x64>
 8008c78:	1a21      	subs	r1, r4, r0
 8008c7a:	4630      	mov	r0, r6
 8008c7c:	f000 fc9a 	bl	80095b4 <_sbrk_r>
 8008c80:	3001      	adds	r0, #1
 8008c82:	d1dd      	bne.n	8008c40 <_malloc_r+0x64>
 8008c84:	e7cf      	b.n	8008c26 <_malloc_r+0x4a>
 8008c86:	bf00      	nop
 8008c88:	20000200 	.word	0x20000200
 8008c8c:	20000204 	.word	0x20000204

08008c90 <__ssputs_r>:
 8008c90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008c94:	688e      	ldr	r6, [r1, #8]
 8008c96:	4682      	mov	sl, r0
 8008c98:	429e      	cmp	r6, r3
 8008c9a:	460c      	mov	r4, r1
 8008c9c:	4690      	mov	r8, r2
 8008c9e:	461f      	mov	r7, r3
 8008ca0:	d838      	bhi.n	8008d14 <__ssputs_r+0x84>
 8008ca2:	898a      	ldrh	r2, [r1, #12]
 8008ca4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008ca8:	d032      	beq.n	8008d10 <__ssputs_r+0x80>
 8008caa:	6825      	ldr	r5, [r4, #0]
 8008cac:	6909      	ldr	r1, [r1, #16]
 8008cae:	3301      	adds	r3, #1
 8008cb0:	eba5 0901 	sub.w	r9, r5, r1
 8008cb4:	6965      	ldr	r5, [r4, #20]
 8008cb6:	444b      	add	r3, r9
 8008cb8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008cbc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008cc0:	106d      	asrs	r5, r5, #1
 8008cc2:	429d      	cmp	r5, r3
 8008cc4:	bf38      	it	cc
 8008cc6:	461d      	movcc	r5, r3
 8008cc8:	0553      	lsls	r3, r2, #21
 8008cca:	d531      	bpl.n	8008d30 <__ssputs_r+0xa0>
 8008ccc:	4629      	mov	r1, r5
 8008cce:	f7ff ff85 	bl	8008bdc <_malloc_r>
 8008cd2:	4606      	mov	r6, r0
 8008cd4:	b950      	cbnz	r0, 8008cec <__ssputs_r+0x5c>
 8008cd6:	230c      	movs	r3, #12
 8008cd8:	f04f 30ff 	mov.w	r0, #4294967295
 8008cdc:	f8ca 3000 	str.w	r3, [sl]
 8008ce0:	89a3      	ldrh	r3, [r4, #12]
 8008ce2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008ce6:	81a3      	strh	r3, [r4, #12]
 8008ce8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008cec:	464a      	mov	r2, r9
 8008cee:	6921      	ldr	r1, [r4, #16]
 8008cf0:	f7ff fa54 	bl	800819c <memcpy>
 8008cf4:	89a3      	ldrh	r3, [r4, #12]
 8008cf6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008cfa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008cfe:	81a3      	strh	r3, [r4, #12]
 8008d00:	6126      	str	r6, [r4, #16]
 8008d02:	444e      	add	r6, r9
 8008d04:	6026      	str	r6, [r4, #0]
 8008d06:	463e      	mov	r6, r7
 8008d08:	6165      	str	r5, [r4, #20]
 8008d0a:	eba5 0509 	sub.w	r5, r5, r9
 8008d0e:	60a5      	str	r5, [r4, #8]
 8008d10:	42be      	cmp	r6, r7
 8008d12:	d900      	bls.n	8008d16 <__ssputs_r+0x86>
 8008d14:	463e      	mov	r6, r7
 8008d16:	4632      	mov	r2, r6
 8008d18:	4641      	mov	r1, r8
 8008d1a:	6820      	ldr	r0, [r4, #0]
 8008d1c:	f000 ff54 	bl	8009bc8 <memmove>
 8008d20:	68a3      	ldr	r3, [r4, #8]
 8008d22:	6822      	ldr	r2, [r4, #0]
 8008d24:	1b9b      	subs	r3, r3, r6
 8008d26:	4432      	add	r2, r6
 8008d28:	2000      	movs	r0, #0
 8008d2a:	60a3      	str	r3, [r4, #8]
 8008d2c:	6022      	str	r2, [r4, #0]
 8008d2e:	e7db      	b.n	8008ce8 <__ssputs_r+0x58>
 8008d30:	462a      	mov	r2, r5
 8008d32:	f000 ff6f 	bl	8009c14 <_realloc_r>
 8008d36:	4606      	mov	r6, r0
 8008d38:	2800      	cmp	r0, #0
 8008d3a:	d1e1      	bne.n	8008d00 <__ssputs_r+0x70>
 8008d3c:	4650      	mov	r0, sl
 8008d3e:	6921      	ldr	r1, [r4, #16]
 8008d40:	f7ff ff00 	bl	8008b44 <_free_r>
 8008d44:	e7c7      	b.n	8008cd6 <__ssputs_r+0x46>
	...

08008d48 <_svfiprintf_r>:
 8008d48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d4c:	4698      	mov	r8, r3
 8008d4e:	898b      	ldrh	r3, [r1, #12]
 8008d50:	4607      	mov	r7, r0
 8008d52:	061b      	lsls	r3, r3, #24
 8008d54:	460d      	mov	r5, r1
 8008d56:	4614      	mov	r4, r2
 8008d58:	b09d      	sub	sp, #116	; 0x74
 8008d5a:	d50e      	bpl.n	8008d7a <_svfiprintf_r+0x32>
 8008d5c:	690b      	ldr	r3, [r1, #16]
 8008d5e:	b963      	cbnz	r3, 8008d7a <_svfiprintf_r+0x32>
 8008d60:	2140      	movs	r1, #64	; 0x40
 8008d62:	f7ff ff3b 	bl	8008bdc <_malloc_r>
 8008d66:	6028      	str	r0, [r5, #0]
 8008d68:	6128      	str	r0, [r5, #16]
 8008d6a:	b920      	cbnz	r0, 8008d76 <_svfiprintf_r+0x2e>
 8008d6c:	230c      	movs	r3, #12
 8008d6e:	603b      	str	r3, [r7, #0]
 8008d70:	f04f 30ff 	mov.w	r0, #4294967295
 8008d74:	e0d1      	b.n	8008f1a <_svfiprintf_r+0x1d2>
 8008d76:	2340      	movs	r3, #64	; 0x40
 8008d78:	616b      	str	r3, [r5, #20]
 8008d7a:	2300      	movs	r3, #0
 8008d7c:	9309      	str	r3, [sp, #36]	; 0x24
 8008d7e:	2320      	movs	r3, #32
 8008d80:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008d84:	2330      	movs	r3, #48	; 0x30
 8008d86:	f04f 0901 	mov.w	r9, #1
 8008d8a:	f8cd 800c 	str.w	r8, [sp, #12]
 8008d8e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8008f34 <_svfiprintf_r+0x1ec>
 8008d92:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008d96:	4623      	mov	r3, r4
 8008d98:	469a      	mov	sl, r3
 8008d9a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008d9e:	b10a      	cbz	r2, 8008da4 <_svfiprintf_r+0x5c>
 8008da0:	2a25      	cmp	r2, #37	; 0x25
 8008da2:	d1f9      	bne.n	8008d98 <_svfiprintf_r+0x50>
 8008da4:	ebba 0b04 	subs.w	fp, sl, r4
 8008da8:	d00b      	beq.n	8008dc2 <_svfiprintf_r+0x7a>
 8008daa:	465b      	mov	r3, fp
 8008dac:	4622      	mov	r2, r4
 8008dae:	4629      	mov	r1, r5
 8008db0:	4638      	mov	r0, r7
 8008db2:	f7ff ff6d 	bl	8008c90 <__ssputs_r>
 8008db6:	3001      	adds	r0, #1
 8008db8:	f000 80aa 	beq.w	8008f10 <_svfiprintf_r+0x1c8>
 8008dbc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008dbe:	445a      	add	r2, fp
 8008dc0:	9209      	str	r2, [sp, #36]	; 0x24
 8008dc2:	f89a 3000 	ldrb.w	r3, [sl]
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	f000 80a2 	beq.w	8008f10 <_svfiprintf_r+0x1c8>
 8008dcc:	2300      	movs	r3, #0
 8008dce:	f04f 32ff 	mov.w	r2, #4294967295
 8008dd2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008dd6:	f10a 0a01 	add.w	sl, sl, #1
 8008dda:	9304      	str	r3, [sp, #16]
 8008ddc:	9307      	str	r3, [sp, #28]
 8008dde:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008de2:	931a      	str	r3, [sp, #104]	; 0x68
 8008de4:	4654      	mov	r4, sl
 8008de6:	2205      	movs	r2, #5
 8008de8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008dec:	4851      	ldr	r0, [pc, #324]	; (8008f34 <_svfiprintf_r+0x1ec>)
 8008dee:	f7ff f9c7 	bl	8008180 <memchr>
 8008df2:	9a04      	ldr	r2, [sp, #16]
 8008df4:	b9d8      	cbnz	r0, 8008e2e <_svfiprintf_r+0xe6>
 8008df6:	06d0      	lsls	r0, r2, #27
 8008df8:	bf44      	itt	mi
 8008dfa:	2320      	movmi	r3, #32
 8008dfc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008e00:	0711      	lsls	r1, r2, #28
 8008e02:	bf44      	itt	mi
 8008e04:	232b      	movmi	r3, #43	; 0x2b
 8008e06:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008e0a:	f89a 3000 	ldrb.w	r3, [sl]
 8008e0e:	2b2a      	cmp	r3, #42	; 0x2a
 8008e10:	d015      	beq.n	8008e3e <_svfiprintf_r+0xf6>
 8008e12:	4654      	mov	r4, sl
 8008e14:	2000      	movs	r0, #0
 8008e16:	f04f 0c0a 	mov.w	ip, #10
 8008e1a:	9a07      	ldr	r2, [sp, #28]
 8008e1c:	4621      	mov	r1, r4
 8008e1e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008e22:	3b30      	subs	r3, #48	; 0x30
 8008e24:	2b09      	cmp	r3, #9
 8008e26:	d94e      	bls.n	8008ec6 <_svfiprintf_r+0x17e>
 8008e28:	b1b0      	cbz	r0, 8008e58 <_svfiprintf_r+0x110>
 8008e2a:	9207      	str	r2, [sp, #28]
 8008e2c:	e014      	b.n	8008e58 <_svfiprintf_r+0x110>
 8008e2e:	eba0 0308 	sub.w	r3, r0, r8
 8008e32:	fa09 f303 	lsl.w	r3, r9, r3
 8008e36:	4313      	orrs	r3, r2
 8008e38:	46a2      	mov	sl, r4
 8008e3a:	9304      	str	r3, [sp, #16]
 8008e3c:	e7d2      	b.n	8008de4 <_svfiprintf_r+0x9c>
 8008e3e:	9b03      	ldr	r3, [sp, #12]
 8008e40:	1d19      	adds	r1, r3, #4
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	9103      	str	r1, [sp, #12]
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	bfbb      	ittet	lt
 8008e4a:	425b      	neglt	r3, r3
 8008e4c:	f042 0202 	orrlt.w	r2, r2, #2
 8008e50:	9307      	strge	r3, [sp, #28]
 8008e52:	9307      	strlt	r3, [sp, #28]
 8008e54:	bfb8      	it	lt
 8008e56:	9204      	strlt	r2, [sp, #16]
 8008e58:	7823      	ldrb	r3, [r4, #0]
 8008e5a:	2b2e      	cmp	r3, #46	; 0x2e
 8008e5c:	d10c      	bne.n	8008e78 <_svfiprintf_r+0x130>
 8008e5e:	7863      	ldrb	r3, [r4, #1]
 8008e60:	2b2a      	cmp	r3, #42	; 0x2a
 8008e62:	d135      	bne.n	8008ed0 <_svfiprintf_r+0x188>
 8008e64:	9b03      	ldr	r3, [sp, #12]
 8008e66:	3402      	adds	r4, #2
 8008e68:	1d1a      	adds	r2, r3, #4
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	9203      	str	r2, [sp, #12]
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	bfb8      	it	lt
 8008e72:	f04f 33ff 	movlt.w	r3, #4294967295
 8008e76:	9305      	str	r3, [sp, #20]
 8008e78:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008f44 <_svfiprintf_r+0x1fc>
 8008e7c:	2203      	movs	r2, #3
 8008e7e:	4650      	mov	r0, sl
 8008e80:	7821      	ldrb	r1, [r4, #0]
 8008e82:	f7ff f97d 	bl	8008180 <memchr>
 8008e86:	b140      	cbz	r0, 8008e9a <_svfiprintf_r+0x152>
 8008e88:	2340      	movs	r3, #64	; 0x40
 8008e8a:	eba0 000a 	sub.w	r0, r0, sl
 8008e8e:	fa03 f000 	lsl.w	r0, r3, r0
 8008e92:	9b04      	ldr	r3, [sp, #16]
 8008e94:	3401      	adds	r4, #1
 8008e96:	4303      	orrs	r3, r0
 8008e98:	9304      	str	r3, [sp, #16]
 8008e9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e9e:	2206      	movs	r2, #6
 8008ea0:	4825      	ldr	r0, [pc, #148]	; (8008f38 <_svfiprintf_r+0x1f0>)
 8008ea2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008ea6:	f7ff f96b 	bl	8008180 <memchr>
 8008eaa:	2800      	cmp	r0, #0
 8008eac:	d038      	beq.n	8008f20 <_svfiprintf_r+0x1d8>
 8008eae:	4b23      	ldr	r3, [pc, #140]	; (8008f3c <_svfiprintf_r+0x1f4>)
 8008eb0:	bb1b      	cbnz	r3, 8008efa <_svfiprintf_r+0x1b2>
 8008eb2:	9b03      	ldr	r3, [sp, #12]
 8008eb4:	3307      	adds	r3, #7
 8008eb6:	f023 0307 	bic.w	r3, r3, #7
 8008eba:	3308      	adds	r3, #8
 8008ebc:	9303      	str	r3, [sp, #12]
 8008ebe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ec0:	4433      	add	r3, r6
 8008ec2:	9309      	str	r3, [sp, #36]	; 0x24
 8008ec4:	e767      	b.n	8008d96 <_svfiprintf_r+0x4e>
 8008ec6:	460c      	mov	r4, r1
 8008ec8:	2001      	movs	r0, #1
 8008eca:	fb0c 3202 	mla	r2, ip, r2, r3
 8008ece:	e7a5      	b.n	8008e1c <_svfiprintf_r+0xd4>
 8008ed0:	2300      	movs	r3, #0
 8008ed2:	f04f 0c0a 	mov.w	ip, #10
 8008ed6:	4619      	mov	r1, r3
 8008ed8:	3401      	adds	r4, #1
 8008eda:	9305      	str	r3, [sp, #20]
 8008edc:	4620      	mov	r0, r4
 8008ede:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008ee2:	3a30      	subs	r2, #48	; 0x30
 8008ee4:	2a09      	cmp	r2, #9
 8008ee6:	d903      	bls.n	8008ef0 <_svfiprintf_r+0x1a8>
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d0c5      	beq.n	8008e78 <_svfiprintf_r+0x130>
 8008eec:	9105      	str	r1, [sp, #20]
 8008eee:	e7c3      	b.n	8008e78 <_svfiprintf_r+0x130>
 8008ef0:	4604      	mov	r4, r0
 8008ef2:	2301      	movs	r3, #1
 8008ef4:	fb0c 2101 	mla	r1, ip, r1, r2
 8008ef8:	e7f0      	b.n	8008edc <_svfiprintf_r+0x194>
 8008efa:	ab03      	add	r3, sp, #12
 8008efc:	9300      	str	r3, [sp, #0]
 8008efe:	462a      	mov	r2, r5
 8008f00:	4638      	mov	r0, r7
 8008f02:	4b0f      	ldr	r3, [pc, #60]	; (8008f40 <_svfiprintf_r+0x1f8>)
 8008f04:	a904      	add	r1, sp, #16
 8008f06:	f7fc f9fb 	bl	8005300 <_printf_float>
 8008f0a:	1c42      	adds	r2, r0, #1
 8008f0c:	4606      	mov	r6, r0
 8008f0e:	d1d6      	bne.n	8008ebe <_svfiprintf_r+0x176>
 8008f10:	89ab      	ldrh	r3, [r5, #12]
 8008f12:	065b      	lsls	r3, r3, #25
 8008f14:	f53f af2c 	bmi.w	8008d70 <_svfiprintf_r+0x28>
 8008f18:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008f1a:	b01d      	add	sp, #116	; 0x74
 8008f1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f20:	ab03      	add	r3, sp, #12
 8008f22:	9300      	str	r3, [sp, #0]
 8008f24:	462a      	mov	r2, r5
 8008f26:	4638      	mov	r0, r7
 8008f28:	4b05      	ldr	r3, [pc, #20]	; (8008f40 <_svfiprintf_r+0x1f8>)
 8008f2a:	a904      	add	r1, sp, #16
 8008f2c:	f7fc fc84 	bl	8005838 <_printf_i>
 8008f30:	e7eb      	b.n	8008f0a <_svfiprintf_r+0x1c2>
 8008f32:	bf00      	nop
 8008f34:	0800a814 	.word	0x0800a814
 8008f38:	0800a81e 	.word	0x0800a81e
 8008f3c:	08005301 	.word	0x08005301
 8008f40:	08008c91 	.word	0x08008c91
 8008f44:	0800a81a 	.word	0x0800a81a

08008f48 <_sungetc_r>:
 8008f48:	b538      	push	{r3, r4, r5, lr}
 8008f4a:	1c4b      	adds	r3, r1, #1
 8008f4c:	4614      	mov	r4, r2
 8008f4e:	d103      	bne.n	8008f58 <_sungetc_r+0x10>
 8008f50:	f04f 35ff 	mov.w	r5, #4294967295
 8008f54:	4628      	mov	r0, r5
 8008f56:	bd38      	pop	{r3, r4, r5, pc}
 8008f58:	8993      	ldrh	r3, [r2, #12]
 8008f5a:	b2cd      	uxtb	r5, r1
 8008f5c:	f023 0320 	bic.w	r3, r3, #32
 8008f60:	8193      	strh	r3, [r2, #12]
 8008f62:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008f64:	6852      	ldr	r2, [r2, #4]
 8008f66:	b18b      	cbz	r3, 8008f8c <_sungetc_r+0x44>
 8008f68:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8008f6a:	4293      	cmp	r3, r2
 8008f6c:	dd08      	ble.n	8008f80 <_sungetc_r+0x38>
 8008f6e:	6823      	ldr	r3, [r4, #0]
 8008f70:	1e5a      	subs	r2, r3, #1
 8008f72:	6022      	str	r2, [r4, #0]
 8008f74:	f803 5c01 	strb.w	r5, [r3, #-1]
 8008f78:	6863      	ldr	r3, [r4, #4]
 8008f7a:	3301      	adds	r3, #1
 8008f7c:	6063      	str	r3, [r4, #4]
 8008f7e:	e7e9      	b.n	8008f54 <_sungetc_r+0xc>
 8008f80:	4621      	mov	r1, r4
 8008f82:	f000 fbf1 	bl	8009768 <__submore>
 8008f86:	2800      	cmp	r0, #0
 8008f88:	d0f1      	beq.n	8008f6e <_sungetc_r+0x26>
 8008f8a:	e7e1      	b.n	8008f50 <_sungetc_r+0x8>
 8008f8c:	6921      	ldr	r1, [r4, #16]
 8008f8e:	6823      	ldr	r3, [r4, #0]
 8008f90:	b151      	cbz	r1, 8008fa8 <_sungetc_r+0x60>
 8008f92:	4299      	cmp	r1, r3
 8008f94:	d208      	bcs.n	8008fa8 <_sungetc_r+0x60>
 8008f96:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8008f9a:	42a9      	cmp	r1, r5
 8008f9c:	d104      	bne.n	8008fa8 <_sungetc_r+0x60>
 8008f9e:	3b01      	subs	r3, #1
 8008fa0:	3201      	adds	r2, #1
 8008fa2:	6023      	str	r3, [r4, #0]
 8008fa4:	6062      	str	r2, [r4, #4]
 8008fa6:	e7d5      	b.n	8008f54 <_sungetc_r+0xc>
 8008fa8:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8008fac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008fb0:	6363      	str	r3, [r4, #52]	; 0x34
 8008fb2:	2303      	movs	r3, #3
 8008fb4:	63a3      	str	r3, [r4, #56]	; 0x38
 8008fb6:	4623      	mov	r3, r4
 8008fb8:	f803 5f46 	strb.w	r5, [r3, #70]!
 8008fbc:	6023      	str	r3, [r4, #0]
 8008fbe:	2301      	movs	r3, #1
 8008fc0:	e7dc      	b.n	8008f7c <_sungetc_r+0x34>

08008fc2 <__ssrefill_r>:
 8008fc2:	b510      	push	{r4, lr}
 8008fc4:	460c      	mov	r4, r1
 8008fc6:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8008fc8:	b169      	cbz	r1, 8008fe6 <__ssrefill_r+0x24>
 8008fca:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008fce:	4299      	cmp	r1, r3
 8008fd0:	d001      	beq.n	8008fd6 <__ssrefill_r+0x14>
 8008fd2:	f7ff fdb7 	bl	8008b44 <_free_r>
 8008fd6:	2000      	movs	r0, #0
 8008fd8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008fda:	6360      	str	r0, [r4, #52]	; 0x34
 8008fdc:	6063      	str	r3, [r4, #4]
 8008fde:	b113      	cbz	r3, 8008fe6 <__ssrefill_r+0x24>
 8008fe0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8008fe2:	6023      	str	r3, [r4, #0]
 8008fe4:	bd10      	pop	{r4, pc}
 8008fe6:	6923      	ldr	r3, [r4, #16]
 8008fe8:	f04f 30ff 	mov.w	r0, #4294967295
 8008fec:	6023      	str	r3, [r4, #0]
 8008fee:	2300      	movs	r3, #0
 8008ff0:	6063      	str	r3, [r4, #4]
 8008ff2:	89a3      	ldrh	r3, [r4, #12]
 8008ff4:	f043 0320 	orr.w	r3, r3, #32
 8008ff8:	81a3      	strh	r3, [r4, #12]
 8008ffa:	e7f3      	b.n	8008fe4 <__ssrefill_r+0x22>

08008ffc <__ssvfiscanf_r>:
 8008ffc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009000:	460c      	mov	r4, r1
 8009002:	2100      	movs	r1, #0
 8009004:	4606      	mov	r6, r0
 8009006:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 800900a:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800900e:	49b3      	ldr	r1, [pc, #716]	; (80092dc <__ssvfiscanf_r+0x2e0>)
 8009010:	f10d 0804 	add.w	r8, sp, #4
 8009014:	91a0      	str	r1, [sp, #640]	; 0x280
 8009016:	49b2      	ldr	r1, [pc, #712]	; (80092e0 <__ssvfiscanf_r+0x2e4>)
 8009018:	4fb2      	ldr	r7, [pc, #712]	; (80092e4 <__ssvfiscanf_r+0x2e8>)
 800901a:	f8df 92cc 	ldr.w	r9, [pc, #716]	; 80092e8 <__ssvfiscanf_r+0x2ec>
 800901e:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8009022:	91a1      	str	r1, [sp, #644]	; 0x284
 8009024:	9300      	str	r3, [sp, #0]
 8009026:	f892 a000 	ldrb.w	sl, [r2]
 800902a:	f1ba 0f00 	cmp.w	sl, #0
 800902e:	f000 8153 	beq.w	80092d8 <__ssvfiscanf_r+0x2dc>
 8009032:	f81a 3007 	ldrb.w	r3, [sl, r7]
 8009036:	1c55      	adds	r5, r2, #1
 8009038:	f013 0308 	ands.w	r3, r3, #8
 800903c:	d019      	beq.n	8009072 <__ssvfiscanf_r+0x76>
 800903e:	6863      	ldr	r3, [r4, #4]
 8009040:	2b00      	cmp	r3, #0
 8009042:	dd0f      	ble.n	8009064 <__ssvfiscanf_r+0x68>
 8009044:	6823      	ldr	r3, [r4, #0]
 8009046:	781a      	ldrb	r2, [r3, #0]
 8009048:	5cba      	ldrb	r2, [r7, r2]
 800904a:	0712      	lsls	r2, r2, #28
 800904c:	d401      	bmi.n	8009052 <__ssvfiscanf_r+0x56>
 800904e:	462a      	mov	r2, r5
 8009050:	e7e9      	b.n	8009026 <__ssvfiscanf_r+0x2a>
 8009052:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8009054:	3301      	adds	r3, #1
 8009056:	3201      	adds	r2, #1
 8009058:	9245      	str	r2, [sp, #276]	; 0x114
 800905a:	6862      	ldr	r2, [r4, #4]
 800905c:	6023      	str	r3, [r4, #0]
 800905e:	3a01      	subs	r2, #1
 8009060:	6062      	str	r2, [r4, #4]
 8009062:	e7ec      	b.n	800903e <__ssvfiscanf_r+0x42>
 8009064:	4621      	mov	r1, r4
 8009066:	4630      	mov	r0, r6
 8009068:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800906a:	4798      	blx	r3
 800906c:	2800      	cmp	r0, #0
 800906e:	d0e9      	beq.n	8009044 <__ssvfiscanf_r+0x48>
 8009070:	e7ed      	b.n	800904e <__ssvfiscanf_r+0x52>
 8009072:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 8009076:	f040 8086 	bne.w	8009186 <__ssvfiscanf_r+0x18a>
 800907a:	9341      	str	r3, [sp, #260]	; 0x104
 800907c:	9343      	str	r3, [sp, #268]	; 0x10c
 800907e:	7853      	ldrb	r3, [r2, #1]
 8009080:	2b2a      	cmp	r3, #42	; 0x2a
 8009082:	bf04      	itt	eq
 8009084:	2310      	moveq	r3, #16
 8009086:	1c95      	addeq	r5, r2, #2
 8009088:	f04f 020a 	mov.w	r2, #10
 800908c:	bf08      	it	eq
 800908e:	9341      	streq	r3, [sp, #260]	; 0x104
 8009090:	46ab      	mov	fp, r5
 8009092:	f81b 1b01 	ldrb.w	r1, [fp], #1
 8009096:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800909a:	2b09      	cmp	r3, #9
 800909c:	d91d      	bls.n	80090da <__ssvfiscanf_r+0xde>
 800909e:	2203      	movs	r2, #3
 80090a0:	4891      	ldr	r0, [pc, #580]	; (80092e8 <__ssvfiscanf_r+0x2ec>)
 80090a2:	f7ff f86d 	bl	8008180 <memchr>
 80090a6:	b140      	cbz	r0, 80090ba <__ssvfiscanf_r+0xbe>
 80090a8:	2301      	movs	r3, #1
 80090aa:	465d      	mov	r5, fp
 80090ac:	eba0 0009 	sub.w	r0, r0, r9
 80090b0:	fa03 f000 	lsl.w	r0, r3, r0
 80090b4:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80090b6:	4318      	orrs	r0, r3
 80090b8:	9041      	str	r0, [sp, #260]	; 0x104
 80090ba:	f815 3b01 	ldrb.w	r3, [r5], #1
 80090be:	2b78      	cmp	r3, #120	; 0x78
 80090c0:	d806      	bhi.n	80090d0 <__ssvfiscanf_r+0xd4>
 80090c2:	2b57      	cmp	r3, #87	; 0x57
 80090c4:	d810      	bhi.n	80090e8 <__ssvfiscanf_r+0xec>
 80090c6:	2b25      	cmp	r3, #37	; 0x25
 80090c8:	d05d      	beq.n	8009186 <__ssvfiscanf_r+0x18a>
 80090ca:	d857      	bhi.n	800917c <__ssvfiscanf_r+0x180>
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d075      	beq.n	80091bc <__ssvfiscanf_r+0x1c0>
 80090d0:	2303      	movs	r3, #3
 80090d2:	9347      	str	r3, [sp, #284]	; 0x11c
 80090d4:	230a      	movs	r3, #10
 80090d6:	9342      	str	r3, [sp, #264]	; 0x108
 80090d8:	e082      	b.n	80091e0 <__ssvfiscanf_r+0x1e4>
 80090da:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80090dc:	465d      	mov	r5, fp
 80090de:	fb02 1303 	mla	r3, r2, r3, r1
 80090e2:	3b30      	subs	r3, #48	; 0x30
 80090e4:	9343      	str	r3, [sp, #268]	; 0x10c
 80090e6:	e7d3      	b.n	8009090 <__ssvfiscanf_r+0x94>
 80090e8:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 80090ec:	2a20      	cmp	r2, #32
 80090ee:	d8ef      	bhi.n	80090d0 <__ssvfiscanf_r+0xd4>
 80090f0:	a101      	add	r1, pc, #4	; (adr r1, 80090f8 <__ssvfiscanf_r+0xfc>)
 80090f2:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80090f6:	bf00      	nop
 80090f8:	080091cb 	.word	0x080091cb
 80090fc:	080090d1 	.word	0x080090d1
 8009100:	080090d1 	.word	0x080090d1
 8009104:	08009229 	.word	0x08009229
 8009108:	080090d1 	.word	0x080090d1
 800910c:	080090d1 	.word	0x080090d1
 8009110:	080090d1 	.word	0x080090d1
 8009114:	080090d1 	.word	0x080090d1
 8009118:	080090d1 	.word	0x080090d1
 800911c:	080090d1 	.word	0x080090d1
 8009120:	080090d1 	.word	0x080090d1
 8009124:	0800923f 	.word	0x0800923f
 8009128:	08009215 	.word	0x08009215
 800912c:	08009183 	.word	0x08009183
 8009130:	08009183 	.word	0x08009183
 8009134:	08009183 	.word	0x08009183
 8009138:	080090d1 	.word	0x080090d1
 800913c:	08009219 	.word	0x08009219
 8009140:	080090d1 	.word	0x080090d1
 8009144:	080090d1 	.word	0x080090d1
 8009148:	080090d1 	.word	0x080090d1
 800914c:	080090d1 	.word	0x080090d1
 8009150:	0800924f 	.word	0x0800924f
 8009154:	08009221 	.word	0x08009221
 8009158:	080091c3 	.word	0x080091c3
 800915c:	080090d1 	.word	0x080090d1
 8009160:	080090d1 	.word	0x080090d1
 8009164:	0800924b 	.word	0x0800924b
 8009168:	080090d1 	.word	0x080090d1
 800916c:	08009215 	.word	0x08009215
 8009170:	080090d1 	.word	0x080090d1
 8009174:	080090d1 	.word	0x080090d1
 8009178:	080091cb 	.word	0x080091cb
 800917c:	3b45      	subs	r3, #69	; 0x45
 800917e:	2b02      	cmp	r3, #2
 8009180:	d8a6      	bhi.n	80090d0 <__ssvfiscanf_r+0xd4>
 8009182:	2305      	movs	r3, #5
 8009184:	e02b      	b.n	80091de <__ssvfiscanf_r+0x1e2>
 8009186:	6863      	ldr	r3, [r4, #4]
 8009188:	2b00      	cmp	r3, #0
 800918a:	dd0d      	ble.n	80091a8 <__ssvfiscanf_r+0x1ac>
 800918c:	6823      	ldr	r3, [r4, #0]
 800918e:	781a      	ldrb	r2, [r3, #0]
 8009190:	4552      	cmp	r2, sl
 8009192:	f040 80a1 	bne.w	80092d8 <__ssvfiscanf_r+0x2dc>
 8009196:	3301      	adds	r3, #1
 8009198:	6862      	ldr	r2, [r4, #4]
 800919a:	6023      	str	r3, [r4, #0]
 800919c:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800919e:	3a01      	subs	r2, #1
 80091a0:	3301      	adds	r3, #1
 80091a2:	6062      	str	r2, [r4, #4]
 80091a4:	9345      	str	r3, [sp, #276]	; 0x114
 80091a6:	e752      	b.n	800904e <__ssvfiscanf_r+0x52>
 80091a8:	4621      	mov	r1, r4
 80091aa:	4630      	mov	r0, r6
 80091ac:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80091ae:	4798      	blx	r3
 80091b0:	2800      	cmp	r0, #0
 80091b2:	d0eb      	beq.n	800918c <__ssvfiscanf_r+0x190>
 80091b4:	9844      	ldr	r0, [sp, #272]	; 0x110
 80091b6:	2800      	cmp	r0, #0
 80091b8:	f040 8084 	bne.w	80092c4 <__ssvfiscanf_r+0x2c8>
 80091bc:	f04f 30ff 	mov.w	r0, #4294967295
 80091c0:	e086      	b.n	80092d0 <__ssvfiscanf_r+0x2d4>
 80091c2:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80091c4:	f042 0220 	orr.w	r2, r2, #32
 80091c8:	9241      	str	r2, [sp, #260]	; 0x104
 80091ca:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80091cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80091d0:	9241      	str	r2, [sp, #260]	; 0x104
 80091d2:	2210      	movs	r2, #16
 80091d4:	2b6f      	cmp	r3, #111	; 0x6f
 80091d6:	bf34      	ite	cc
 80091d8:	2303      	movcc	r3, #3
 80091da:	2304      	movcs	r3, #4
 80091dc:	9242      	str	r2, [sp, #264]	; 0x108
 80091de:	9347      	str	r3, [sp, #284]	; 0x11c
 80091e0:	6863      	ldr	r3, [r4, #4]
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	dd41      	ble.n	800926a <__ssvfiscanf_r+0x26e>
 80091e6:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80091e8:	0659      	lsls	r1, r3, #25
 80091ea:	d404      	bmi.n	80091f6 <__ssvfiscanf_r+0x1fa>
 80091ec:	6823      	ldr	r3, [r4, #0]
 80091ee:	781a      	ldrb	r2, [r3, #0]
 80091f0:	5cba      	ldrb	r2, [r7, r2]
 80091f2:	0712      	lsls	r2, r2, #28
 80091f4:	d440      	bmi.n	8009278 <__ssvfiscanf_r+0x27c>
 80091f6:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 80091f8:	2b02      	cmp	r3, #2
 80091fa:	dc4f      	bgt.n	800929c <__ssvfiscanf_r+0x2a0>
 80091fc:	466b      	mov	r3, sp
 80091fe:	4622      	mov	r2, r4
 8009200:	4630      	mov	r0, r6
 8009202:	a941      	add	r1, sp, #260	; 0x104
 8009204:	f000 f874 	bl	80092f0 <_scanf_chars>
 8009208:	2801      	cmp	r0, #1
 800920a:	d065      	beq.n	80092d8 <__ssvfiscanf_r+0x2dc>
 800920c:	2802      	cmp	r0, #2
 800920e:	f47f af1e 	bne.w	800904e <__ssvfiscanf_r+0x52>
 8009212:	e7cf      	b.n	80091b4 <__ssvfiscanf_r+0x1b8>
 8009214:	220a      	movs	r2, #10
 8009216:	e7dd      	b.n	80091d4 <__ssvfiscanf_r+0x1d8>
 8009218:	2300      	movs	r3, #0
 800921a:	9342      	str	r3, [sp, #264]	; 0x108
 800921c:	2303      	movs	r3, #3
 800921e:	e7de      	b.n	80091de <__ssvfiscanf_r+0x1e2>
 8009220:	2308      	movs	r3, #8
 8009222:	9342      	str	r3, [sp, #264]	; 0x108
 8009224:	2304      	movs	r3, #4
 8009226:	e7da      	b.n	80091de <__ssvfiscanf_r+0x1e2>
 8009228:	4629      	mov	r1, r5
 800922a:	4640      	mov	r0, r8
 800922c:	f000 f9d2 	bl	80095d4 <__sccl>
 8009230:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8009232:	4605      	mov	r5, r0
 8009234:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009238:	9341      	str	r3, [sp, #260]	; 0x104
 800923a:	2301      	movs	r3, #1
 800923c:	e7cf      	b.n	80091de <__ssvfiscanf_r+0x1e2>
 800923e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8009240:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009244:	9341      	str	r3, [sp, #260]	; 0x104
 8009246:	2300      	movs	r3, #0
 8009248:	e7c9      	b.n	80091de <__ssvfiscanf_r+0x1e2>
 800924a:	2302      	movs	r3, #2
 800924c:	e7c7      	b.n	80091de <__ssvfiscanf_r+0x1e2>
 800924e:	9841      	ldr	r0, [sp, #260]	; 0x104
 8009250:	06c3      	lsls	r3, r0, #27
 8009252:	f53f aefc 	bmi.w	800904e <__ssvfiscanf_r+0x52>
 8009256:	9b00      	ldr	r3, [sp, #0]
 8009258:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800925a:	1d19      	adds	r1, r3, #4
 800925c:	9100      	str	r1, [sp, #0]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	07c0      	lsls	r0, r0, #31
 8009262:	bf4c      	ite	mi
 8009264:	801a      	strhmi	r2, [r3, #0]
 8009266:	601a      	strpl	r2, [r3, #0]
 8009268:	e6f1      	b.n	800904e <__ssvfiscanf_r+0x52>
 800926a:	4621      	mov	r1, r4
 800926c:	4630      	mov	r0, r6
 800926e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8009270:	4798      	blx	r3
 8009272:	2800      	cmp	r0, #0
 8009274:	d0b7      	beq.n	80091e6 <__ssvfiscanf_r+0x1ea>
 8009276:	e79d      	b.n	80091b4 <__ssvfiscanf_r+0x1b8>
 8009278:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800927a:	3201      	adds	r2, #1
 800927c:	9245      	str	r2, [sp, #276]	; 0x114
 800927e:	6862      	ldr	r2, [r4, #4]
 8009280:	3a01      	subs	r2, #1
 8009282:	2a00      	cmp	r2, #0
 8009284:	6062      	str	r2, [r4, #4]
 8009286:	dd02      	ble.n	800928e <__ssvfiscanf_r+0x292>
 8009288:	3301      	adds	r3, #1
 800928a:	6023      	str	r3, [r4, #0]
 800928c:	e7ae      	b.n	80091ec <__ssvfiscanf_r+0x1f0>
 800928e:	4621      	mov	r1, r4
 8009290:	4630      	mov	r0, r6
 8009292:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8009294:	4798      	blx	r3
 8009296:	2800      	cmp	r0, #0
 8009298:	d0a8      	beq.n	80091ec <__ssvfiscanf_r+0x1f0>
 800929a:	e78b      	b.n	80091b4 <__ssvfiscanf_r+0x1b8>
 800929c:	2b04      	cmp	r3, #4
 800929e:	dc06      	bgt.n	80092ae <__ssvfiscanf_r+0x2b2>
 80092a0:	466b      	mov	r3, sp
 80092a2:	4622      	mov	r2, r4
 80092a4:	4630      	mov	r0, r6
 80092a6:	a941      	add	r1, sp, #260	; 0x104
 80092a8:	f000 f87a 	bl	80093a0 <_scanf_i>
 80092ac:	e7ac      	b.n	8009208 <__ssvfiscanf_r+0x20c>
 80092ae:	4b0f      	ldr	r3, [pc, #60]	; (80092ec <__ssvfiscanf_r+0x2f0>)
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	f43f aecc 	beq.w	800904e <__ssvfiscanf_r+0x52>
 80092b6:	466b      	mov	r3, sp
 80092b8:	4622      	mov	r2, r4
 80092ba:	4630      	mov	r0, r6
 80092bc:	a941      	add	r1, sp, #260	; 0x104
 80092be:	f7fc fbe1 	bl	8005a84 <_scanf_float>
 80092c2:	e7a1      	b.n	8009208 <__ssvfiscanf_r+0x20c>
 80092c4:	89a3      	ldrh	r3, [r4, #12]
 80092c6:	f013 0f40 	tst.w	r3, #64	; 0x40
 80092ca:	bf18      	it	ne
 80092cc:	f04f 30ff 	movne.w	r0, #4294967295
 80092d0:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 80092d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092d8:	9844      	ldr	r0, [sp, #272]	; 0x110
 80092da:	e7f9      	b.n	80092d0 <__ssvfiscanf_r+0x2d4>
 80092dc:	08008f49 	.word	0x08008f49
 80092e0:	08008fc3 	.word	0x08008fc3
 80092e4:	0800a4a1 	.word	0x0800a4a1
 80092e8:	0800a81a 	.word	0x0800a81a
 80092ec:	08005a85 	.word	0x08005a85

080092f0 <_scanf_chars>:
 80092f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80092f4:	4615      	mov	r5, r2
 80092f6:	688a      	ldr	r2, [r1, #8]
 80092f8:	4680      	mov	r8, r0
 80092fa:	460c      	mov	r4, r1
 80092fc:	b932      	cbnz	r2, 800930c <_scanf_chars+0x1c>
 80092fe:	698a      	ldr	r2, [r1, #24]
 8009300:	2a00      	cmp	r2, #0
 8009302:	bf0c      	ite	eq
 8009304:	2201      	moveq	r2, #1
 8009306:	f04f 32ff 	movne.w	r2, #4294967295
 800930a:	608a      	str	r2, [r1, #8]
 800930c:	2700      	movs	r7, #0
 800930e:	6822      	ldr	r2, [r4, #0]
 8009310:	f8df 9088 	ldr.w	r9, [pc, #136]	; 800939c <_scanf_chars+0xac>
 8009314:	06d1      	lsls	r1, r2, #27
 8009316:	bf5f      	itttt	pl
 8009318:	681a      	ldrpl	r2, [r3, #0]
 800931a:	1d11      	addpl	r1, r2, #4
 800931c:	6019      	strpl	r1, [r3, #0]
 800931e:	6816      	ldrpl	r6, [r2, #0]
 8009320:	69a0      	ldr	r0, [r4, #24]
 8009322:	b188      	cbz	r0, 8009348 <_scanf_chars+0x58>
 8009324:	2801      	cmp	r0, #1
 8009326:	d107      	bne.n	8009338 <_scanf_chars+0x48>
 8009328:	682b      	ldr	r3, [r5, #0]
 800932a:	781a      	ldrb	r2, [r3, #0]
 800932c:	6963      	ldr	r3, [r4, #20]
 800932e:	5c9b      	ldrb	r3, [r3, r2]
 8009330:	b953      	cbnz	r3, 8009348 <_scanf_chars+0x58>
 8009332:	bb27      	cbnz	r7, 800937e <_scanf_chars+0x8e>
 8009334:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009338:	2802      	cmp	r0, #2
 800933a:	d120      	bne.n	800937e <_scanf_chars+0x8e>
 800933c:	682b      	ldr	r3, [r5, #0]
 800933e:	781b      	ldrb	r3, [r3, #0]
 8009340:	f813 3009 	ldrb.w	r3, [r3, r9]
 8009344:	071b      	lsls	r3, r3, #28
 8009346:	d41a      	bmi.n	800937e <_scanf_chars+0x8e>
 8009348:	6823      	ldr	r3, [r4, #0]
 800934a:	3701      	adds	r7, #1
 800934c:	06da      	lsls	r2, r3, #27
 800934e:	bf5e      	ittt	pl
 8009350:	682b      	ldrpl	r3, [r5, #0]
 8009352:	781b      	ldrbpl	r3, [r3, #0]
 8009354:	f806 3b01 	strbpl.w	r3, [r6], #1
 8009358:	682a      	ldr	r2, [r5, #0]
 800935a:	686b      	ldr	r3, [r5, #4]
 800935c:	3201      	adds	r2, #1
 800935e:	602a      	str	r2, [r5, #0]
 8009360:	68a2      	ldr	r2, [r4, #8]
 8009362:	3b01      	subs	r3, #1
 8009364:	3a01      	subs	r2, #1
 8009366:	606b      	str	r3, [r5, #4]
 8009368:	60a2      	str	r2, [r4, #8]
 800936a:	b142      	cbz	r2, 800937e <_scanf_chars+0x8e>
 800936c:	2b00      	cmp	r3, #0
 800936e:	dcd7      	bgt.n	8009320 <_scanf_chars+0x30>
 8009370:	4629      	mov	r1, r5
 8009372:	4640      	mov	r0, r8
 8009374:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8009378:	4798      	blx	r3
 800937a:	2800      	cmp	r0, #0
 800937c:	d0d0      	beq.n	8009320 <_scanf_chars+0x30>
 800937e:	6823      	ldr	r3, [r4, #0]
 8009380:	f013 0310 	ands.w	r3, r3, #16
 8009384:	d105      	bne.n	8009392 <_scanf_chars+0xa2>
 8009386:	68e2      	ldr	r2, [r4, #12]
 8009388:	3201      	adds	r2, #1
 800938a:	60e2      	str	r2, [r4, #12]
 800938c:	69a2      	ldr	r2, [r4, #24]
 800938e:	b102      	cbz	r2, 8009392 <_scanf_chars+0xa2>
 8009390:	7033      	strb	r3, [r6, #0]
 8009392:	6923      	ldr	r3, [r4, #16]
 8009394:	2000      	movs	r0, #0
 8009396:	441f      	add	r7, r3
 8009398:	6127      	str	r7, [r4, #16]
 800939a:	e7cb      	b.n	8009334 <_scanf_chars+0x44>
 800939c:	0800a4a1 	.word	0x0800a4a1

080093a0 <_scanf_i>:
 80093a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093a4:	460c      	mov	r4, r1
 80093a6:	4698      	mov	r8, r3
 80093a8:	4b72      	ldr	r3, [pc, #456]	; (8009574 <_scanf_i+0x1d4>)
 80093aa:	b087      	sub	sp, #28
 80093ac:	4682      	mov	sl, r0
 80093ae:	4616      	mov	r6, r2
 80093b0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80093b4:	ab03      	add	r3, sp, #12
 80093b6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80093ba:	4b6f      	ldr	r3, [pc, #444]	; (8009578 <_scanf_i+0x1d8>)
 80093bc:	69a1      	ldr	r1, [r4, #24]
 80093be:	4a6f      	ldr	r2, [pc, #444]	; (800957c <_scanf_i+0x1dc>)
 80093c0:	4627      	mov	r7, r4
 80093c2:	2903      	cmp	r1, #3
 80093c4:	bf18      	it	ne
 80093c6:	461a      	movne	r2, r3
 80093c8:	68a3      	ldr	r3, [r4, #8]
 80093ca:	9201      	str	r2, [sp, #4]
 80093cc:	1e5a      	subs	r2, r3, #1
 80093ce:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80093d2:	bf81      	itttt	hi
 80093d4:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80093d8:	eb03 0905 	addhi.w	r9, r3, r5
 80093dc:	f240 135d 	movwhi	r3, #349	; 0x15d
 80093e0:	60a3      	strhi	r3, [r4, #8]
 80093e2:	f857 3b1c 	ldr.w	r3, [r7], #28
 80093e6:	bf98      	it	ls
 80093e8:	f04f 0900 	movls.w	r9, #0
 80093ec:	463d      	mov	r5, r7
 80093ee:	f04f 0b00 	mov.w	fp, #0
 80093f2:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 80093f6:	6023      	str	r3, [r4, #0]
 80093f8:	6831      	ldr	r1, [r6, #0]
 80093fa:	ab03      	add	r3, sp, #12
 80093fc:	2202      	movs	r2, #2
 80093fe:	7809      	ldrb	r1, [r1, #0]
 8009400:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8009404:	f7fe febc 	bl	8008180 <memchr>
 8009408:	b328      	cbz	r0, 8009456 <_scanf_i+0xb6>
 800940a:	f1bb 0f01 	cmp.w	fp, #1
 800940e:	d159      	bne.n	80094c4 <_scanf_i+0x124>
 8009410:	6862      	ldr	r2, [r4, #4]
 8009412:	b92a      	cbnz	r2, 8009420 <_scanf_i+0x80>
 8009414:	2308      	movs	r3, #8
 8009416:	6822      	ldr	r2, [r4, #0]
 8009418:	6063      	str	r3, [r4, #4]
 800941a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800941e:	6022      	str	r2, [r4, #0]
 8009420:	6822      	ldr	r2, [r4, #0]
 8009422:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8009426:	6022      	str	r2, [r4, #0]
 8009428:	68a2      	ldr	r2, [r4, #8]
 800942a:	1e51      	subs	r1, r2, #1
 800942c:	60a1      	str	r1, [r4, #8]
 800942e:	b192      	cbz	r2, 8009456 <_scanf_i+0xb6>
 8009430:	6832      	ldr	r2, [r6, #0]
 8009432:	1c51      	adds	r1, r2, #1
 8009434:	6031      	str	r1, [r6, #0]
 8009436:	7812      	ldrb	r2, [r2, #0]
 8009438:	f805 2b01 	strb.w	r2, [r5], #1
 800943c:	6872      	ldr	r2, [r6, #4]
 800943e:	3a01      	subs	r2, #1
 8009440:	2a00      	cmp	r2, #0
 8009442:	6072      	str	r2, [r6, #4]
 8009444:	dc07      	bgt.n	8009456 <_scanf_i+0xb6>
 8009446:	4631      	mov	r1, r6
 8009448:	4650      	mov	r0, sl
 800944a:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800944e:	4790      	blx	r2
 8009450:	2800      	cmp	r0, #0
 8009452:	f040 8085 	bne.w	8009560 <_scanf_i+0x1c0>
 8009456:	f10b 0b01 	add.w	fp, fp, #1
 800945a:	f1bb 0f03 	cmp.w	fp, #3
 800945e:	d1cb      	bne.n	80093f8 <_scanf_i+0x58>
 8009460:	6863      	ldr	r3, [r4, #4]
 8009462:	b90b      	cbnz	r3, 8009468 <_scanf_i+0xc8>
 8009464:	230a      	movs	r3, #10
 8009466:	6063      	str	r3, [r4, #4]
 8009468:	6863      	ldr	r3, [r4, #4]
 800946a:	4945      	ldr	r1, [pc, #276]	; (8009580 <_scanf_i+0x1e0>)
 800946c:	6960      	ldr	r0, [r4, #20]
 800946e:	1ac9      	subs	r1, r1, r3
 8009470:	f000 f8b0 	bl	80095d4 <__sccl>
 8009474:	f04f 0b00 	mov.w	fp, #0
 8009478:	68a3      	ldr	r3, [r4, #8]
 800947a:	6822      	ldr	r2, [r4, #0]
 800947c:	2b00      	cmp	r3, #0
 800947e:	d03d      	beq.n	80094fc <_scanf_i+0x15c>
 8009480:	6831      	ldr	r1, [r6, #0]
 8009482:	6960      	ldr	r0, [r4, #20]
 8009484:	f891 c000 	ldrb.w	ip, [r1]
 8009488:	f810 000c 	ldrb.w	r0, [r0, ip]
 800948c:	2800      	cmp	r0, #0
 800948e:	d035      	beq.n	80094fc <_scanf_i+0x15c>
 8009490:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8009494:	d124      	bne.n	80094e0 <_scanf_i+0x140>
 8009496:	0510      	lsls	r0, r2, #20
 8009498:	d522      	bpl.n	80094e0 <_scanf_i+0x140>
 800949a:	f10b 0b01 	add.w	fp, fp, #1
 800949e:	f1b9 0f00 	cmp.w	r9, #0
 80094a2:	d003      	beq.n	80094ac <_scanf_i+0x10c>
 80094a4:	3301      	adds	r3, #1
 80094a6:	f109 39ff 	add.w	r9, r9, #4294967295
 80094aa:	60a3      	str	r3, [r4, #8]
 80094ac:	6873      	ldr	r3, [r6, #4]
 80094ae:	3b01      	subs	r3, #1
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	6073      	str	r3, [r6, #4]
 80094b4:	dd1b      	ble.n	80094ee <_scanf_i+0x14e>
 80094b6:	6833      	ldr	r3, [r6, #0]
 80094b8:	3301      	adds	r3, #1
 80094ba:	6033      	str	r3, [r6, #0]
 80094bc:	68a3      	ldr	r3, [r4, #8]
 80094be:	3b01      	subs	r3, #1
 80094c0:	60a3      	str	r3, [r4, #8]
 80094c2:	e7d9      	b.n	8009478 <_scanf_i+0xd8>
 80094c4:	f1bb 0f02 	cmp.w	fp, #2
 80094c8:	d1ae      	bne.n	8009428 <_scanf_i+0x88>
 80094ca:	6822      	ldr	r2, [r4, #0]
 80094cc:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 80094d0:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80094d4:	d1bf      	bne.n	8009456 <_scanf_i+0xb6>
 80094d6:	2310      	movs	r3, #16
 80094d8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80094dc:	6063      	str	r3, [r4, #4]
 80094de:	e7a2      	b.n	8009426 <_scanf_i+0x86>
 80094e0:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 80094e4:	6022      	str	r2, [r4, #0]
 80094e6:	780b      	ldrb	r3, [r1, #0]
 80094e8:	f805 3b01 	strb.w	r3, [r5], #1
 80094ec:	e7de      	b.n	80094ac <_scanf_i+0x10c>
 80094ee:	4631      	mov	r1, r6
 80094f0:	4650      	mov	r0, sl
 80094f2:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80094f6:	4798      	blx	r3
 80094f8:	2800      	cmp	r0, #0
 80094fa:	d0df      	beq.n	80094bc <_scanf_i+0x11c>
 80094fc:	6823      	ldr	r3, [r4, #0]
 80094fe:	05d9      	lsls	r1, r3, #23
 8009500:	d50d      	bpl.n	800951e <_scanf_i+0x17e>
 8009502:	42bd      	cmp	r5, r7
 8009504:	d909      	bls.n	800951a <_scanf_i+0x17a>
 8009506:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800950a:	4632      	mov	r2, r6
 800950c:	4650      	mov	r0, sl
 800950e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009512:	f105 39ff 	add.w	r9, r5, #4294967295
 8009516:	4798      	blx	r3
 8009518:	464d      	mov	r5, r9
 800951a:	42bd      	cmp	r5, r7
 800951c:	d028      	beq.n	8009570 <_scanf_i+0x1d0>
 800951e:	6822      	ldr	r2, [r4, #0]
 8009520:	f012 0210 	ands.w	r2, r2, #16
 8009524:	d113      	bne.n	800954e <_scanf_i+0x1ae>
 8009526:	702a      	strb	r2, [r5, #0]
 8009528:	4639      	mov	r1, r7
 800952a:	6863      	ldr	r3, [r4, #4]
 800952c:	4650      	mov	r0, sl
 800952e:	9e01      	ldr	r6, [sp, #4]
 8009530:	47b0      	blx	r6
 8009532:	f8d8 3000 	ldr.w	r3, [r8]
 8009536:	6821      	ldr	r1, [r4, #0]
 8009538:	1d1a      	adds	r2, r3, #4
 800953a:	f8c8 2000 	str.w	r2, [r8]
 800953e:	f011 0f20 	tst.w	r1, #32
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	d00f      	beq.n	8009566 <_scanf_i+0x1c6>
 8009546:	6018      	str	r0, [r3, #0]
 8009548:	68e3      	ldr	r3, [r4, #12]
 800954a:	3301      	adds	r3, #1
 800954c:	60e3      	str	r3, [r4, #12]
 800954e:	2000      	movs	r0, #0
 8009550:	1bed      	subs	r5, r5, r7
 8009552:	44ab      	add	fp, r5
 8009554:	6925      	ldr	r5, [r4, #16]
 8009556:	445d      	add	r5, fp
 8009558:	6125      	str	r5, [r4, #16]
 800955a:	b007      	add	sp, #28
 800955c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009560:	f04f 0b00 	mov.w	fp, #0
 8009564:	e7ca      	b.n	80094fc <_scanf_i+0x15c>
 8009566:	07ca      	lsls	r2, r1, #31
 8009568:	bf4c      	ite	mi
 800956a:	8018      	strhmi	r0, [r3, #0]
 800956c:	6018      	strpl	r0, [r3, #0]
 800956e:	e7eb      	b.n	8009548 <_scanf_i+0x1a8>
 8009570:	2001      	movs	r0, #1
 8009572:	e7f2      	b.n	800955a <_scanf_i+0x1ba>
 8009574:	0800a3f0 	.word	0x0800a3f0
 8009578:	08009765 	.word	0x08009765
 800957c:	08006d11 	.word	0x08006d11
 8009580:	0800a83e 	.word	0x0800a83e

08009584 <_read_r>:
 8009584:	b538      	push	{r3, r4, r5, lr}
 8009586:	4604      	mov	r4, r0
 8009588:	4608      	mov	r0, r1
 800958a:	4611      	mov	r1, r2
 800958c:	2200      	movs	r2, #0
 800958e:	4d05      	ldr	r5, [pc, #20]	; (80095a4 <_read_r+0x20>)
 8009590:	602a      	str	r2, [r5, #0]
 8009592:	461a      	mov	r2, r3
 8009594:	f7f8 fc2f 	bl	8001df6 <_read>
 8009598:	1c43      	adds	r3, r0, #1
 800959a:	d102      	bne.n	80095a2 <_read_r+0x1e>
 800959c:	682b      	ldr	r3, [r5, #0]
 800959e:	b103      	cbz	r3, 80095a2 <_read_r+0x1e>
 80095a0:	6023      	str	r3, [r4, #0]
 80095a2:	bd38      	pop	{r3, r4, r5, pc}
 80095a4:	2000040c 	.word	0x2000040c

080095a8 <nan>:
 80095a8:	2000      	movs	r0, #0
 80095aa:	4901      	ldr	r1, [pc, #4]	; (80095b0 <nan+0x8>)
 80095ac:	4770      	bx	lr
 80095ae:	bf00      	nop
 80095b0:	7ff80000 	.word	0x7ff80000

080095b4 <_sbrk_r>:
 80095b4:	b538      	push	{r3, r4, r5, lr}
 80095b6:	2300      	movs	r3, #0
 80095b8:	4d05      	ldr	r5, [pc, #20]	; (80095d0 <_sbrk_r+0x1c>)
 80095ba:	4604      	mov	r4, r0
 80095bc:	4608      	mov	r0, r1
 80095be:	602b      	str	r3, [r5, #0]
 80095c0:	f7f8 fc82 	bl	8001ec8 <_sbrk>
 80095c4:	1c43      	adds	r3, r0, #1
 80095c6:	d102      	bne.n	80095ce <_sbrk_r+0x1a>
 80095c8:	682b      	ldr	r3, [r5, #0]
 80095ca:	b103      	cbz	r3, 80095ce <_sbrk_r+0x1a>
 80095cc:	6023      	str	r3, [r4, #0]
 80095ce:	bd38      	pop	{r3, r4, r5, pc}
 80095d0:	2000040c 	.word	0x2000040c

080095d4 <__sccl>:
 80095d4:	b570      	push	{r4, r5, r6, lr}
 80095d6:	780b      	ldrb	r3, [r1, #0]
 80095d8:	4604      	mov	r4, r0
 80095da:	2b5e      	cmp	r3, #94	; 0x5e
 80095dc:	bf13      	iteet	ne
 80095de:	2200      	movne	r2, #0
 80095e0:	2201      	moveq	r2, #1
 80095e2:	784b      	ldrbeq	r3, [r1, #1]
 80095e4:	1c48      	addne	r0, r1, #1
 80095e6:	bf08      	it	eq
 80095e8:	1c88      	addeq	r0, r1, #2
 80095ea:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 80095ee:	1e61      	subs	r1, r4, #1
 80095f0:	f801 2f01 	strb.w	r2, [r1, #1]!
 80095f4:	42a9      	cmp	r1, r5
 80095f6:	d1fb      	bne.n	80095f0 <__sccl+0x1c>
 80095f8:	b90b      	cbnz	r3, 80095fe <__sccl+0x2a>
 80095fa:	3801      	subs	r0, #1
 80095fc:	bd70      	pop	{r4, r5, r6, pc}
 80095fe:	f082 0101 	eor.w	r1, r2, #1
 8009602:	54e1      	strb	r1, [r4, r3]
 8009604:	1c42      	adds	r2, r0, #1
 8009606:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 800960a:	4610      	mov	r0, r2
 800960c:	2d2d      	cmp	r5, #45	; 0x2d
 800960e:	f102 36ff 	add.w	r6, r2, #4294967295
 8009612:	d006      	beq.n	8009622 <__sccl+0x4e>
 8009614:	2d5d      	cmp	r5, #93	; 0x5d
 8009616:	d0f1      	beq.n	80095fc <__sccl+0x28>
 8009618:	b90d      	cbnz	r5, 800961e <__sccl+0x4a>
 800961a:	4630      	mov	r0, r6
 800961c:	e7ee      	b.n	80095fc <__sccl+0x28>
 800961e:	462b      	mov	r3, r5
 8009620:	e7ef      	b.n	8009602 <__sccl+0x2e>
 8009622:	7816      	ldrb	r6, [r2, #0]
 8009624:	2e5d      	cmp	r6, #93	; 0x5d
 8009626:	d0fa      	beq.n	800961e <__sccl+0x4a>
 8009628:	42b3      	cmp	r3, r6
 800962a:	dcf8      	bgt.n	800961e <__sccl+0x4a>
 800962c:	4618      	mov	r0, r3
 800962e:	3001      	adds	r0, #1
 8009630:	4286      	cmp	r6, r0
 8009632:	5421      	strb	r1, [r4, r0]
 8009634:	dcfb      	bgt.n	800962e <__sccl+0x5a>
 8009636:	43d8      	mvns	r0, r3
 8009638:	4430      	add	r0, r6
 800963a:	42b3      	cmp	r3, r6
 800963c:	bfa8      	it	ge
 800963e:	2000      	movge	r0, #0
 8009640:	1c5d      	adds	r5, r3, #1
 8009642:	182b      	adds	r3, r5, r0
 8009644:	3202      	adds	r2, #2
 8009646:	e7de      	b.n	8009606 <__sccl+0x32>

08009648 <strncmp>:
 8009648:	b510      	push	{r4, lr}
 800964a:	b16a      	cbz	r2, 8009668 <strncmp+0x20>
 800964c:	3901      	subs	r1, #1
 800964e:	1884      	adds	r4, r0, r2
 8009650:	f810 3b01 	ldrb.w	r3, [r0], #1
 8009654:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8009658:	4293      	cmp	r3, r2
 800965a:	d103      	bne.n	8009664 <strncmp+0x1c>
 800965c:	42a0      	cmp	r0, r4
 800965e:	d001      	beq.n	8009664 <strncmp+0x1c>
 8009660:	2b00      	cmp	r3, #0
 8009662:	d1f5      	bne.n	8009650 <strncmp+0x8>
 8009664:	1a98      	subs	r0, r3, r2
 8009666:	bd10      	pop	{r4, pc}
 8009668:	4610      	mov	r0, r2
 800966a:	e7fc      	b.n	8009666 <strncmp+0x1e>

0800966c <_strtoul_l.isra.0>:
 800966c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009670:	468c      	mov	ip, r1
 8009672:	4686      	mov	lr, r0
 8009674:	4e3a      	ldr	r6, [pc, #232]	; (8009760 <_strtoul_l.isra.0+0xf4>)
 8009676:	4660      	mov	r0, ip
 8009678:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800967c:	5da5      	ldrb	r5, [r4, r6]
 800967e:	f015 0508 	ands.w	r5, r5, #8
 8009682:	d1f8      	bne.n	8009676 <_strtoul_l.isra.0+0xa>
 8009684:	2c2d      	cmp	r4, #45	; 0x2d
 8009686:	d134      	bne.n	80096f2 <_strtoul_l.isra.0+0x86>
 8009688:	f04f 0801 	mov.w	r8, #1
 800968c:	f89c 4000 	ldrb.w	r4, [ip]
 8009690:	f100 0c02 	add.w	ip, r0, #2
 8009694:	2b00      	cmp	r3, #0
 8009696:	d05e      	beq.n	8009756 <_strtoul_l.isra.0+0xea>
 8009698:	2b10      	cmp	r3, #16
 800969a:	d10c      	bne.n	80096b6 <_strtoul_l.isra.0+0x4a>
 800969c:	2c30      	cmp	r4, #48	; 0x30
 800969e:	d10a      	bne.n	80096b6 <_strtoul_l.isra.0+0x4a>
 80096a0:	f89c 0000 	ldrb.w	r0, [ip]
 80096a4:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80096a8:	2858      	cmp	r0, #88	; 0x58
 80096aa:	d14f      	bne.n	800974c <_strtoul_l.isra.0+0xe0>
 80096ac:	2310      	movs	r3, #16
 80096ae:	f89c 4001 	ldrb.w	r4, [ip, #1]
 80096b2:	f10c 0c02 	add.w	ip, ip, #2
 80096b6:	f04f 37ff 	mov.w	r7, #4294967295
 80096ba:	fbb7 f7f3 	udiv	r7, r7, r3
 80096be:	2500      	movs	r5, #0
 80096c0:	fb03 f907 	mul.w	r9, r3, r7
 80096c4:	4628      	mov	r0, r5
 80096c6:	ea6f 0909 	mvn.w	r9, r9
 80096ca:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 80096ce:	2e09      	cmp	r6, #9
 80096d0:	d818      	bhi.n	8009704 <_strtoul_l.isra.0+0x98>
 80096d2:	4634      	mov	r4, r6
 80096d4:	42a3      	cmp	r3, r4
 80096d6:	dd24      	ble.n	8009722 <_strtoul_l.isra.0+0xb6>
 80096d8:	2d00      	cmp	r5, #0
 80096da:	db1f      	blt.n	800971c <_strtoul_l.isra.0+0xb0>
 80096dc:	4287      	cmp	r7, r0
 80096de:	d31d      	bcc.n	800971c <_strtoul_l.isra.0+0xb0>
 80096e0:	d101      	bne.n	80096e6 <_strtoul_l.isra.0+0x7a>
 80096e2:	45a1      	cmp	r9, r4
 80096e4:	db1a      	blt.n	800971c <_strtoul_l.isra.0+0xb0>
 80096e6:	2501      	movs	r5, #1
 80096e8:	fb00 4003 	mla	r0, r0, r3, r4
 80096ec:	f81c 4b01 	ldrb.w	r4, [ip], #1
 80096f0:	e7eb      	b.n	80096ca <_strtoul_l.isra.0+0x5e>
 80096f2:	2c2b      	cmp	r4, #43	; 0x2b
 80096f4:	bf08      	it	eq
 80096f6:	f89c 4000 	ldrbeq.w	r4, [ip]
 80096fa:	46a8      	mov	r8, r5
 80096fc:	bf08      	it	eq
 80096fe:	f100 0c02 	addeq.w	ip, r0, #2
 8009702:	e7c7      	b.n	8009694 <_strtoul_l.isra.0+0x28>
 8009704:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 8009708:	2e19      	cmp	r6, #25
 800970a:	d801      	bhi.n	8009710 <_strtoul_l.isra.0+0xa4>
 800970c:	3c37      	subs	r4, #55	; 0x37
 800970e:	e7e1      	b.n	80096d4 <_strtoul_l.isra.0+0x68>
 8009710:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 8009714:	2e19      	cmp	r6, #25
 8009716:	d804      	bhi.n	8009722 <_strtoul_l.isra.0+0xb6>
 8009718:	3c57      	subs	r4, #87	; 0x57
 800971a:	e7db      	b.n	80096d4 <_strtoul_l.isra.0+0x68>
 800971c:	f04f 35ff 	mov.w	r5, #4294967295
 8009720:	e7e4      	b.n	80096ec <_strtoul_l.isra.0+0x80>
 8009722:	2d00      	cmp	r5, #0
 8009724:	da07      	bge.n	8009736 <_strtoul_l.isra.0+0xca>
 8009726:	2322      	movs	r3, #34	; 0x22
 8009728:	f04f 30ff 	mov.w	r0, #4294967295
 800972c:	f8ce 3000 	str.w	r3, [lr]
 8009730:	b942      	cbnz	r2, 8009744 <_strtoul_l.isra.0+0xd8>
 8009732:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009736:	f1b8 0f00 	cmp.w	r8, #0
 800973a:	d000      	beq.n	800973e <_strtoul_l.isra.0+0xd2>
 800973c:	4240      	negs	r0, r0
 800973e:	2a00      	cmp	r2, #0
 8009740:	d0f7      	beq.n	8009732 <_strtoul_l.isra.0+0xc6>
 8009742:	b10d      	cbz	r5, 8009748 <_strtoul_l.isra.0+0xdc>
 8009744:	f10c 31ff 	add.w	r1, ip, #4294967295
 8009748:	6011      	str	r1, [r2, #0]
 800974a:	e7f2      	b.n	8009732 <_strtoul_l.isra.0+0xc6>
 800974c:	2430      	movs	r4, #48	; 0x30
 800974e:	2b00      	cmp	r3, #0
 8009750:	d1b1      	bne.n	80096b6 <_strtoul_l.isra.0+0x4a>
 8009752:	2308      	movs	r3, #8
 8009754:	e7af      	b.n	80096b6 <_strtoul_l.isra.0+0x4a>
 8009756:	2c30      	cmp	r4, #48	; 0x30
 8009758:	d0a2      	beq.n	80096a0 <_strtoul_l.isra.0+0x34>
 800975a:	230a      	movs	r3, #10
 800975c:	e7ab      	b.n	80096b6 <_strtoul_l.isra.0+0x4a>
 800975e:	bf00      	nop
 8009760:	0800a4a1 	.word	0x0800a4a1

08009764 <_strtoul_r>:
 8009764:	f7ff bf82 	b.w	800966c <_strtoul_l.isra.0>

08009768 <__submore>:
 8009768:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800976c:	460c      	mov	r4, r1
 800976e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8009770:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009774:	4299      	cmp	r1, r3
 8009776:	d11b      	bne.n	80097b0 <__submore+0x48>
 8009778:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800977c:	f7ff fa2e 	bl	8008bdc <_malloc_r>
 8009780:	b918      	cbnz	r0, 800978a <__submore+0x22>
 8009782:	f04f 30ff 	mov.w	r0, #4294967295
 8009786:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800978a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800978e:	63a3      	str	r3, [r4, #56]	; 0x38
 8009790:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8009794:	6360      	str	r0, [r4, #52]	; 0x34
 8009796:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800979a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800979e:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 80097a2:	7043      	strb	r3, [r0, #1]
 80097a4:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80097a8:	7003      	strb	r3, [r0, #0]
 80097aa:	6020      	str	r0, [r4, #0]
 80097ac:	2000      	movs	r0, #0
 80097ae:	e7ea      	b.n	8009786 <__submore+0x1e>
 80097b0:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80097b2:	0077      	lsls	r7, r6, #1
 80097b4:	463a      	mov	r2, r7
 80097b6:	f000 fa2d 	bl	8009c14 <_realloc_r>
 80097ba:	4605      	mov	r5, r0
 80097bc:	2800      	cmp	r0, #0
 80097be:	d0e0      	beq.n	8009782 <__submore+0x1a>
 80097c0:	eb00 0806 	add.w	r8, r0, r6
 80097c4:	4601      	mov	r1, r0
 80097c6:	4632      	mov	r2, r6
 80097c8:	4640      	mov	r0, r8
 80097ca:	f7fe fce7 	bl	800819c <memcpy>
 80097ce:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 80097d2:	f8c4 8000 	str.w	r8, [r4]
 80097d6:	e7e9      	b.n	80097ac <__submore+0x44>

080097d8 <__ascii_wctomb>:
 80097d8:	4603      	mov	r3, r0
 80097da:	4608      	mov	r0, r1
 80097dc:	b141      	cbz	r1, 80097f0 <__ascii_wctomb+0x18>
 80097de:	2aff      	cmp	r2, #255	; 0xff
 80097e0:	d904      	bls.n	80097ec <__ascii_wctomb+0x14>
 80097e2:	228a      	movs	r2, #138	; 0x8a
 80097e4:	f04f 30ff 	mov.w	r0, #4294967295
 80097e8:	601a      	str	r2, [r3, #0]
 80097ea:	4770      	bx	lr
 80097ec:	2001      	movs	r0, #1
 80097ee:	700a      	strb	r2, [r1, #0]
 80097f0:	4770      	bx	lr
	...

080097f4 <__assert_func>:
 80097f4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80097f6:	4614      	mov	r4, r2
 80097f8:	461a      	mov	r2, r3
 80097fa:	4b09      	ldr	r3, [pc, #36]	; (8009820 <__assert_func+0x2c>)
 80097fc:	4605      	mov	r5, r0
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	68d8      	ldr	r0, [r3, #12]
 8009802:	b14c      	cbz	r4, 8009818 <__assert_func+0x24>
 8009804:	4b07      	ldr	r3, [pc, #28]	; (8009824 <__assert_func+0x30>)
 8009806:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800980a:	9100      	str	r1, [sp, #0]
 800980c:	462b      	mov	r3, r5
 800980e:	4906      	ldr	r1, [pc, #24]	; (8009828 <__assert_func+0x34>)
 8009810:	f000 f9a6 	bl	8009b60 <fiprintf>
 8009814:	f000 fc3c 	bl	800a090 <abort>
 8009818:	4b04      	ldr	r3, [pc, #16]	; (800982c <__assert_func+0x38>)
 800981a:	461c      	mov	r4, r3
 800981c:	e7f3      	b.n	8009806 <__assert_func+0x12>
 800981e:	bf00      	nop
 8009820:	2000000c 	.word	0x2000000c
 8009824:	0800a840 	.word	0x0800a840
 8009828:	0800a84d 	.word	0x0800a84d
 800982c:	0800a87b 	.word	0x0800a87b

08009830 <__sflush_r>:
 8009830:	898a      	ldrh	r2, [r1, #12]
 8009832:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009836:	4605      	mov	r5, r0
 8009838:	0710      	lsls	r0, r2, #28
 800983a:	460c      	mov	r4, r1
 800983c:	d458      	bmi.n	80098f0 <__sflush_r+0xc0>
 800983e:	684b      	ldr	r3, [r1, #4]
 8009840:	2b00      	cmp	r3, #0
 8009842:	dc05      	bgt.n	8009850 <__sflush_r+0x20>
 8009844:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009846:	2b00      	cmp	r3, #0
 8009848:	dc02      	bgt.n	8009850 <__sflush_r+0x20>
 800984a:	2000      	movs	r0, #0
 800984c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009850:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009852:	2e00      	cmp	r6, #0
 8009854:	d0f9      	beq.n	800984a <__sflush_r+0x1a>
 8009856:	2300      	movs	r3, #0
 8009858:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800985c:	682f      	ldr	r7, [r5, #0]
 800985e:	602b      	str	r3, [r5, #0]
 8009860:	d032      	beq.n	80098c8 <__sflush_r+0x98>
 8009862:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009864:	89a3      	ldrh	r3, [r4, #12]
 8009866:	075a      	lsls	r2, r3, #29
 8009868:	d505      	bpl.n	8009876 <__sflush_r+0x46>
 800986a:	6863      	ldr	r3, [r4, #4]
 800986c:	1ac0      	subs	r0, r0, r3
 800986e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009870:	b10b      	cbz	r3, 8009876 <__sflush_r+0x46>
 8009872:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009874:	1ac0      	subs	r0, r0, r3
 8009876:	2300      	movs	r3, #0
 8009878:	4602      	mov	r2, r0
 800987a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800987c:	4628      	mov	r0, r5
 800987e:	6a21      	ldr	r1, [r4, #32]
 8009880:	47b0      	blx	r6
 8009882:	1c43      	adds	r3, r0, #1
 8009884:	89a3      	ldrh	r3, [r4, #12]
 8009886:	d106      	bne.n	8009896 <__sflush_r+0x66>
 8009888:	6829      	ldr	r1, [r5, #0]
 800988a:	291d      	cmp	r1, #29
 800988c:	d82c      	bhi.n	80098e8 <__sflush_r+0xb8>
 800988e:	4a2a      	ldr	r2, [pc, #168]	; (8009938 <__sflush_r+0x108>)
 8009890:	40ca      	lsrs	r2, r1
 8009892:	07d6      	lsls	r6, r2, #31
 8009894:	d528      	bpl.n	80098e8 <__sflush_r+0xb8>
 8009896:	2200      	movs	r2, #0
 8009898:	6062      	str	r2, [r4, #4]
 800989a:	6922      	ldr	r2, [r4, #16]
 800989c:	04d9      	lsls	r1, r3, #19
 800989e:	6022      	str	r2, [r4, #0]
 80098a0:	d504      	bpl.n	80098ac <__sflush_r+0x7c>
 80098a2:	1c42      	adds	r2, r0, #1
 80098a4:	d101      	bne.n	80098aa <__sflush_r+0x7a>
 80098a6:	682b      	ldr	r3, [r5, #0]
 80098a8:	b903      	cbnz	r3, 80098ac <__sflush_r+0x7c>
 80098aa:	6560      	str	r0, [r4, #84]	; 0x54
 80098ac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80098ae:	602f      	str	r7, [r5, #0]
 80098b0:	2900      	cmp	r1, #0
 80098b2:	d0ca      	beq.n	800984a <__sflush_r+0x1a>
 80098b4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80098b8:	4299      	cmp	r1, r3
 80098ba:	d002      	beq.n	80098c2 <__sflush_r+0x92>
 80098bc:	4628      	mov	r0, r5
 80098be:	f7ff f941 	bl	8008b44 <_free_r>
 80098c2:	2000      	movs	r0, #0
 80098c4:	6360      	str	r0, [r4, #52]	; 0x34
 80098c6:	e7c1      	b.n	800984c <__sflush_r+0x1c>
 80098c8:	6a21      	ldr	r1, [r4, #32]
 80098ca:	2301      	movs	r3, #1
 80098cc:	4628      	mov	r0, r5
 80098ce:	47b0      	blx	r6
 80098d0:	1c41      	adds	r1, r0, #1
 80098d2:	d1c7      	bne.n	8009864 <__sflush_r+0x34>
 80098d4:	682b      	ldr	r3, [r5, #0]
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d0c4      	beq.n	8009864 <__sflush_r+0x34>
 80098da:	2b1d      	cmp	r3, #29
 80098dc:	d001      	beq.n	80098e2 <__sflush_r+0xb2>
 80098de:	2b16      	cmp	r3, #22
 80098e0:	d101      	bne.n	80098e6 <__sflush_r+0xb6>
 80098e2:	602f      	str	r7, [r5, #0]
 80098e4:	e7b1      	b.n	800984a <__sflush_r+0x1a>
 80098e6:	89a3      	ldrh	r3, [r4, #12]
 80098e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80098ec:	81a3      	strh	r3, [r4, #12]
 80098ee:	e7ad      	b.n	800984c <__sflush_r+0x1c>
 80098f0:	690f      	ldr	r7, [r1, #16]
 80098f2:	2f00      	cmp	r7, #0
 80098f4:	d0a9      	beq.n	800984a <__sflush_r+0x1a>
 80098f6:	0793      	lsls	r3, r2, #30
 80098f8:	bf18      	it	ne
 80098fa:	2300      	movne	r3, #0
 80098fc:	680e      	ldr	r6, [r1, #0]
 80098fe:	bf08      	it	eq
 8009900:	694b      	ldreq	r3, [r1, #20]
 8009902:	eba6 0807 	sub.w	r8, r6, r7
 8009906:	600f      	str	r7, [r1, #0]
 8009908:	608b      	str	r3, [r1, #8]
 800990a:	f1b8 0f00 	cmp.w	r8, #0
 800990e:	dd9c      	ble.n	800984a <__sflush_r+0x1a>
 8009910:	4643      	mov	r3, r8
 8009912:	463a      	mov	r2, r7
 8009914:	4628      	mov	r0, r5
 8009916:	6a21      	ldr	r1, [r4, #32]
 8009918:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800991a:	47b0      	blx	r6
 800991c:	2800      	cmp	r0, #0
 800991e:	dc06      	bgt.n	800992e <__sflush_r+0xfe>
 8009920:	89a3      	ldrh	r3, [r4, #12]
 8009922:	f04f 30ff 	mov.w	r0, #4294967295
 8009926:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800992a:	81a3      	strh	r3, [r4, #12]
 800992c:	e78e      	b.n	800984c <__sflush_r+0x1c>
 800992e:	4407      	add	r7, r0
 8009930:	eba8 0800 	sub.w	r8, r8, r0
 8009934:	e7e9      	b.n	800990a <__sflush_r+0xda>
 8009936:	bf00      	nop
 8009938:	20400001 	.word	0x20400001

0800993c <_fflush_r>:
 800993c:	b538      	push	{r3, r4, r5, lr}
 800993e:	690b      	ldr	r3, [r1, #16]
 8009940:	4605      	mov	r5, r0
 8009942:	460c      	mov	r4, r1
 8009944:	b913      	cbnz	r3, 800994c <_fflush_r+0x10>
 8009946:	2500      	movs	r5, #0
 8009948:	4628      	mov	r0, r5
 800994a:	bd38      	pop	{r3, r4, r5, pc}
 800994c:	b118      	cbz	r0, 8009956 <_fflush_r+0x1a>
 800994e:	6983      	ldr	r3, [r0, #24]
 8009950:	b90b      	cbnz	r3, 8009956 <_fflush_r+0x1a>
 8009952:	f000 f887 	bl	8009a64 <__sinit>
 8009956:	4b14      	ldr	r3, [pc, #80]	; (80099a8 <_fflush_r+0x6c>)
 8009958:	429c      	cmp	r4, r3
 800995a:	d11b      	bne.n	8009994 <_fflush_r+0x58>
 800995c:	686c      	ldr	r4, [r5, #4]
 800995e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009962:	2b00      	cmp	r3, #0
 8009964:	d0ef      	beq.n	8009946 <_fflush_r+0xa>
 8009966:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009968:	07d0      	lsls	r0, r2, #31
 800996a:	d404      	bmi.n	8009976 <_fflush_r+0x3a>
 800996c:	0599      	lsls	r1, r3, #22
 800996e:	d402      	bmi.n	8009976 <_fflush_r+0x3a>
 8009970:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009972:	f000 f927 	bl	8009bc4 <__retarget_lock_acquire_recursive>
 8009976:	4628      	mov	r0, r5
 8009978:	4621      	mov	r1, r4
 800997a:	f7ff ff59 	bl	8009830 <__sflush_r>
 800997e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009980:	4605      	mov	r5, r0
 8009982:	07da      	lsls	r2, r3, #31
 8009984:	d4e0      	bmi.n	8009948 <_fflush_r+0xc>
 8009986:	89a3      	ldrh	r3, [r4, #12]
 8009988:	059b      	lsls	r3, r3, #22
 800998a:	d4dd      	bmi.n	8009948 <_fflush_r+0xc>
 800998c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800998e:	f000 f91a 	bl	8009bc6 <__retarget_lock_release_recursive>
 8009992:	e7d9      	b.n	8009948 <_fflush_r+0xc>
 8009994:	4b05      	ldr	r3, [pc, #20]	; (80099ac <_fflush_r+0x70>)
 8009996:	429c      	cmp	r4, r3
 8009998:	d101      	bne.n	800999e <_fflush_r+0x62>
 800999a:	68ac      	ldr	r4, [r5, #8]
 800999c:	e7df      	b.n	800995e <_fflush_r+0x22>
 800999e:	4b04      	ldr	r3, [pc, #16]	; (80099b0 <_fflush_r+0x74>)
 80099a0:	429c      	cmp	r4, r3
 80099a2:	bf08      	it	eq
 80099a4:	68ec      	ldreq	r4, [r5, #12]
 80099a6:	e7da      	b.n	800995e <_fflush_r+0x22>
 80099a8:	0800a89c 	.word	0x0800a89c
 80099ac:	0800a8bc 	.word	0x0800a8bc
 80099b0:	0800a87c 	.word	0x0800a87c

080099b4 <std>:
 80099b4:	2300      	movs	r3, #0
 80099b6:	b510      	push	{r4, lr}
 80099b8:	4604      	mov	r4, r0
 80099ba:	e9c0 3300 	strd	r3, r3, [r0]
 80099be:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80099c2:	6083      	str	r3, [r0, #8]
 80099c4:	8181      	strh	r1, [r0, #12]
 80099c6:	6643      	str	r3, [r0, #100]	; 0x64
 80099c8:	81c2      	strh	r2, [r0, #14]
 80099ca:	6183      	str	r3, [r0, #24]
 80099cc:	4619      	mov	r1, r3
 80099ce:	2208      	movs	r2, #8
 80099d0:	305c      	adds	r0, #92	; 0x5c
 80099d2:	f7fb fbef 	bl	80051b4 <memset>
 80099d6:	4b05      	ldr	r3, [pc, #20]	; (80099ec <std+0x38>)
 80099d8:	6224      	str	r4, [r4, #32]
 80099da:	6263      	str	r3, [r4, #36]	; 0x24
 80099dc:	4b04      	ldr	r3, [pc, #16]	; (80099f0 <std+0x3c>)
 80099de:	62a3      	str	r3, [r4, #40]	; 0x28
 80099e0:	4b04      	ldr	r3, [pc, #16]	; (80099f4 <std+0x40>)
 80099e2:	62e3      	str	r3, [r4, #44]	; 0x2c
 80099e4:	4b04      	ldr	r3, [pc, #16]	; (80099f8 <std+0x44>)
 80099e6:	6323      	str	r3, [r4, #48]	; 0x30
 80099e8:	bd10      	pop	{r4, pc}
 80099ea:	bf00      	nop
 80099ec:	08005f45 	.word	0x08005f45
 80099f0:	08005f6b 	.word	0x08005f6b
 80099f4:	08005fa3 	.word	0x08005fa3
 80099f8:	08005fc7 	.word	0x08005fc7

080099fc <_cleanup_r>:
 80099fc:	4901      	ldr	r1, [pc, #4]	; (8009a04 <_cleanup_r+0x8>)
 80099fe:	f000 b8c1 	b.w	8009b84 <_fwalk_reent>
 8009a02:	bf00      	nop
 8009a04:	0800993d 	.word	0x0800993d

08009a08 <__sfmoreglue>:
 8009a08:	b570      	push	{r4, r5, r6, lr}
 8009a0a:	2568      	movs	r5, #104	; 0x68
 8009a0c:	1e4a      	subs	r2, r1, #1
 8009a0e:	4355      	muls	r5, r2
 8009a10:	460e      	mov	r6, r1
 8009a12:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009a16:	f7ff f8e1 	bl	8008bdc <_malloc_r>
 8009a1a:	4604      	mov	r4, r0
 8009a1c:	b140      	cbz	r0, 8009a30 <__sfmoreglue+0x28>
 8009a1e:	2100      	movs	r1, #0
 8009a20:	e9c0 1600 	strd	r1, r6, [r0]
 8009a24:	300c      	adds	r0, #12
 8009a26:	60a0      	str	r0, [r4, #8]
 8009a28:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009a2c:	f7fb fbc2 	bl	80051b4 <memset>
 8009a30:	4620      	mov	r0, r4
 8009a32:	bd70      	pop	{r4, r5, r6, pc}

08009a34 <__sfp_lock_acquire>:
 8009a34:	4801      	ldr	r0, [pc, #4]	; (8009a3c <__sfp_lock_acquire+0x8>)
 8009a36:	f000 b8c5 	b.w	8009bc4 <__retarget_lock_acquire_recursive>
 8009a3a:	bf00      	nop
 8009a3c:	20000418 	.word	0x20000418

08009a40 <__sfp_lock_release>:
 8009a40:	4801      	ldr	r0, [pc, #4]	; (8009a48 <__sfp_lock_release+0x8>)
 8009a42:	f000 b8c0 	b.w	8009bc6 <__retarget_lock_release_recursive>
 8009a46:	bf00      	nop
 8009a48:	20000418 	.word	0x20000418

08009a4c <__sinit_lock_acquire>:
 8009a4c:	4801      	ldr	r0, [pc, #4]	; (8009a54 <__sinit_lock_acquire+0x8>)
 8009a4e:	f000 b8b9 	b.w	8009bc4 <__retarget_lock_acquire_recursive>
 8009a52:	bf00      	nop
 8009a54:	20000413 	.word	0x20000413

08009a58 <__sinit_lock_release>:
 8009a58:	4801      	ldr	r0, [pc, #4]	; (8009a60 <__sinit_lock_release+0x8>)
 8009a5a:	f000 b8b4 	b.w	8009bc6 <__retarget_lock_release_recursive>
 8009a5e:	bf00      	nop
 8009a60:	20000413 	.word	0x20000413

08009a64 <__sinit>:
 8009a64:	b510      	push	{r4, lr}
 8009a66:	4604      	mov	r4, r0
 8009a68:	f7ff fff0 	bl	8009a4c <__sinit_lock_acquire>
 8009a6c:	69a3      	ldr	r3, [r4, #24]
 8009a6e:	b11b      	cbz	r3, 8009a78 <__sinit+0x14>
 8009a70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009a74:	f7ff bff0 	b.w	8009a58 <__sinit_lock_release>
 8009a78:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009a7c:	6523      	str	r3, [r4, #80]	; 0x50
 8009a7e:	4b13      	ldr	r3, [pc, #76]	; (8009acc <__sinit+0x68>)
 8009a80:	4a13      	ldr	r2, [pc, #76]	; (8009ad0 <__sinit+0x6c>)
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	62a2      	str	r2, [r4, #40]	; 0x28
 8009a86:	42a3      	cmp	r3, r4
 8009a88:	bf08      	it	eq
 8009a8a:	2301      	moveq	r3, #1
 8009a8c:	4620      	mov	r0, r4
 8009a8e:	bf08      	it	eq
 8009a90:	61a3      	streq	r3, [r4, #24]
 8009a92:	f000 f81f 	bl	8009ad4 <__sfp>
 8009a96:	6060      	str	r0, [r4, #4]
 8009a98:	4620      	mov	r0, r4
 8009a9a:	f000 f81b 	bl	8009ad4 <__sfp>
 8009a9e:	60a0      	str	r0, [r4, #8]
 8009aa0:	4620      	mov	r0, r4
 8009aa2:	f000 f817 	bl	8009ad4 <__sfp>
 8009aa6:	2200      	movs	r2, #0
 8009aa8:	2104      	movs	r1, #4
 8009aaa:	60e0      	str	r0, [r4, #12]
 8009aac:	6860      	ldr	r0, [r4, #4]
 8009aae:	f7ff ff81 	bl	80099b4 <std>
 8009ab2:	2201      	movs	r2, #1
 8009ab4:	2109      	movs	r1, #9
 8009ab6:	68a0      	ldr	r0, [r4, #8]
 8009ab8:	f7ff ff7c 	bl	80099b4 <std>
 8009abc:	2202      	movs	r2, #2
 8009abe:	2112      	movs	r1, #18
 8009ac0:	68e0      	ldr	r0, [r4, #12]
 8009ac2:	f7ff ff77 	bl	80099b4 <std>
 8009ac6:	2301      	movs	r3, #1
 8009ac8:	61a3      	str	r3, [r4, #24]
 8009aca:	e7d1      	b.n	8009a70 <__sinit+0xc>
 8009acc:	0800a414 	.word	0x0800a414
 8009ad0:	080099fd 	.word	0x080099fd

08009ad4 <__sfp>:
 8009ad4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ad6:	4607      	mov	r7, r0
 8009ad8:	f7ff ffac 	bl	8009a34 <__sfp_lock_acquire>
 8009adc:	4b1e      	ldr	r3, [pc, #120]	; (8009b58 <__sfp+0x84>)
 8009ade:	681e      	ldr	r6, [r3, #0]
 8009ae0:	69b3      	ldr	r3, [r6, #24]
 8009ae2:	b913      	cbnz	r3, 8009aea <__sfp+0x16>
 8009ae4:	4630      	mov	r0, r6
 8009ae6:	f7ff ffbd 	bl	8009a64 <__sinit>
 8009aea:	3648      	adds	r6, #72	; 0x48
 8009aec:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009af0:	3b01      	subs	r3, #1
 8009af2:	d503      	bpl.n	8009afc <__sfp+0x28>
 8009af4:	6833      	ldr	r3, [r6, #0]
 8009af6:	b30b      	cbz	r3, 8009b3c <__sfp+0x68>
 8009af8:	6836      	ldr	r6, [r6, #0]
 8009afa:	e7f7      	b.n	8009aec <__sfp+0x18>
 8009afc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009b00:	b9d5      	cbnz	r5, 8009b38 <__sfp+0x64>
 8009b02:	4b16      	ldr	r3, [pc, #88]	; (8009b5c <__sfp+0x88>)
 8009b04:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009b08:	60e3      	str	r3, [r4, #12]
 8009b0a:	6665      	str	r5, [r4, #100]	; 0x64
 8009b0c:	f000 f859 	bl	8009bc2 <__retarget_lock_init_recursive>
 8009b10:	f7ff ff96 	bl	8009a40 <__sfp_lock_release>
 8009b14:	2208      	movs	r2, #8
 8009b16:	4629      	mov	r1, r5
 8009b18:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009b1c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009b20:	6025      	str	r5, [r4, #0]
 8009b22:	61a5      	str	r5, [r4, #24]
 8009b24:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009b28:	f7fb fb44 	bl	80051b4 <memset>
 8009b2c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009b30:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009b34:	4620      	mov	r0, r4
 8009b36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009b38:	3468      	adds	r4, #104	; 0x68
 8009b3a:	e7d9      	b.n	8009af0 <__sfp+0x1c>
 8009b3c:	2104      	movs	r1, #4
 8009b3e:	4638      	mov	r0, r7
 8009b40:	f7ff ff62 	bl	8009a08 <__sfmoreglue>
 8009b44:	4604      	mov	r4, r0
 8009b46:	6030      	str	r0, [r6, #0]
 8009b48:	2800      	cmp	r0, #0
 8009b4a:	d1d5      	bne.n	8009af8 <__sfp+0x24>
 8009b4c:	f7ff ff78 	bl	8009a40 <__sfp_lock_release>
 8009b50:	230c      	movs	r3, #12
 8009b52:	603b      	str	r3, [r7, #0]
 8009b54:	e7ee      	b.n	8009b34 <__sfp+0x60>
 8009b56:	bf00      	nop
 8009b58:	0800a414 	.word	0x0800a414
 8009b5c:	ffff0001 	.word	0xffff0001

08009b60 <fiprintf>:
 8009b60:	b40e      	push	{r1, r2, r3}
 8009b62:	b503      	push	{r0, r1, lr}
 8009b64:	4601      	mov	r1, r0
 8009b66:	ab03      	add	r3, sp, #12
 8009b68:	4805      	ldr	r0, [pc, #20]	; (8009b80 <fiprintf+0x20>)
 8009b6a:	f853 2b04 	ldr.w	r2, [r3], #4
 8009b6e:	6800      	ldr	r0, [r0, #0]
 8009b70:	9301      	str	r3, [sp, #4]
 8009b72:	f000 f89d 	bl	8009cb0 <_vfiprintf_r>
 8009b76:	b002      	add	sp, #8
 8009b78:	f85d eb04 	ldr.w	lr, [sp], #4
 8009b7c:	b003      	add	sp, #12
 8009b7e:	4770      	bx	lr
 8009b80:	2000000c 	.word	0x2000000c

08009b84 <_fwalk_reent>:
 8009b84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009b88:	4606      	mov	r6, r0
 8009b8a:	4688      	mov	r8, r1
 8009b8c:	2700      	movs	r7, #0
 8009b8e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009b92:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009b96:	f1b9 0901 	subs.w	r9, r9, #1
 8009b9a:	d505      	bpl.n	8009ba8 <_fwalk_reent+0x24>
 8009b9c:	6824      	ldr	r4, [r4, #0]
 8009b9e:	2c00      	cmp	r4, #0
 8009ba0:	d1f7      	bne.n	8009b92 <_fwalk_reent+0xe>
 8009ba2:	4638      	mov	r0, r7
 8009ba4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009ba8:	89ab      	ldrh	r3, [r5, #12]
 8009baa:	2b01      	cmp	r3, #1
 8009bac:	d907      	bls.n	8009bbe <_fwalk_reent+0x3a>
 8009bae:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009bb2:	3301      	adds	r3, #1
 8009bb4:	d003      	beq.n	8009bbe <_fwalk_reent+0x3a>
 8009bb6:	4629      	mov	r1, r5
 8009bb8:	4630      	mov	r0, r6
 8009bba:	47c0      	blx	r8
 8009bbc:	4307      	orrs	r7, r0
 8009bbe:	3568      	adds	r5, #104	; 0x68
 8009bc0:	e7e9      	b.n	8009b96 <_fwalk_reent+0x12>

08009bc2 <__retarget_lock_init_recursive>:
 8009bc2:	4770      	bx	lr

08009bc4 <__retarget_lock_acquire_recursive>:
 8009bc4:	4770      	bx	lr

08009bc6 <__retarget_lock_release_recursive>:
 8009bc6:	4770      	bx	lr

08009bc8 <memmove>:
 8009bc8:	4288      	cmp	r0, r1
 8009bca:	b510      	push	{r4, lr}
 8009bcc:	eb01 0402 	add.w	r4, r1, r2
 8009bd0:	d902      	bls.n	8009bd8 <memmove+0x10>
 8009bd2:	4284      	cmp	r4, r0
 8009bd4:	4623      	mov	r3, r4
 8009bd6:	d807      	bhi.n	8009be8 <memmove+0x20>
 8009bd8:	1e43      	subs	r3, r0, #1
 8009bda:	42a1      	cmp	r1, r4
 8009bdc:	d008      	beq.n	8009bf0 <memmove+0x28>
 8009bde:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009be2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009be6:	e7f8      	b.n	8009bda <memmove+0x12>
 8009be8:	4601      	mov	r1, r0
 8009bea:	4402      	add	r2, r0
 8009bec:	428a      	cmp	r2, r1
 8009bee:	d100      	bne.n	8009bf2 <memmove+0x2a>
 8009bf0:	bd10      	pop	{r4, pc}
 8009bf2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009bf6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009bfa:	e7f7      	b.n	8009bec <memmove+0x24>

08009bfc <__malloc_lock>:
 8009bfc:	4801      	ldr	r0, [pc, #4]	; (8009c04 <__malloc_lock+0x8>)
 8009bfe:	f7ff bfe1 	b.w	8009bc4 <__retarget_lock_acquire_recursive>
 8009c02:	bf00      	nop
 8009c04:	20000414 	.word	0x20000414

08009c08 <__malloc_unlock>:
 8009c08:	4801      	ldr	r0, [pc, #4]	; (8009c10 <__malloc_unlock+0x8>)
 8009c0a:	f7ff bfdc 	b.w	8009bc6 <__retarget_lock_release_recursive>
 8009c0e:	bf00      	nop
 8009c10:	20000414 	.word	0x20000414

08009c14 <_realloc_r>:
 8009c14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c16:	4607      	mov	r7, r0
 8009c18:	4614      	mov	r4, r2
 8009c1a:	460e      	mov	r6, r1
 8009c1c:	b921      	cbnz	r1, 8009c28 <_realloc_r+0x14>
 8009c1e:	4611      	mov	r1, r2
 8009c20:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009c24:	f7fe bfda 	b.w	8008bdc <_malloc_r>
 8009c28:	b922      	cbnz	r2, 8009c34 <_realloc_r+0x20>
 8009c2a:	f7fe ff8b 	bl	8008b44 <_free_r>
 8009c2e:	4625      	mov	r5, r4
 8009c30:	4628      	mov	r0, r5
 8009c32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009c34:	f000 fa98 	bl	800a168 <_malloc_usable_size_r>
 8009c38:	42a0      	cmp	r0, r4
 8009c3a:	d20f      	bcs.n	8009c5c <_realloc_r+0x48>
 8009c3c:	4621      	mov	r1, r4
 8009c3e:	4638      	mov	r0, r7
 8009c40:	f7fe ffcc 	bl	8008bdc <_malloc_r>
 8009c44:	4605      	mov	r5, r0
 8009c46:	2800      	cmp	r0, #0
 8009c48:	d0f2      	beq.n	8009c30 <_realloc_r+0x1c>
 8009c4a:	4631      	mov	r1, r6
 8009c4c:	4622      	mov	r2, r4
 8009c4e:	f7fe faa5 	bl	800819c <memcpy>
 8009c52:	4631      	mov	r1, r6
 8009c54:	4638      	mov	r0, r7
 8009c56:	f7fe ff75 	bl	8008b44 <_free_r>
 8009c5a:	e7e9      	b.n	8009c30 <_realloc_r+0x1c>
 8009c5c:	4635      	mov	r5, r6
 8009c5e:	e7e7      	b.n	8009c30 <_realloc_r+0x1c>

08009c60 <__sfputc_r>:
 8009c60:	6893      	ldr	r3, [r2, #8]
 8009c62:	b410      	push	{r4}
 8009c64:	3b01      	subs	r3, #1
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	6093      	str	r3, [r2, #8]
 8009c6a:	da07      	bge.n	8009c7c <__sfputc_r+0x1c>
 8009c6c:	6994      	ldr	r4, [r2, #24]
 8009c6e:	42a3      	cmp	r3, r4
 8009c70:	db01      	blt.n	8009c76 <__sfputc_r+0x16>
 8009c72:	290a      	cmp	r1, #10
 8009c74:	d102      	bne.n	8009c7c <__sfputc_r+0x1c>
 8009c76:	bc10      	pop	{r4}
 8009c78:	f000 b94a 	b.w	8009f10 <__swbuf_r>
 8009c7c:	6813      	ldr	r3, [r2, #0]
 8009c7e:	1c58      	adds	r0, r3, #1
 8009c80:	6010      	str	r0, [r2, #0]
 8009c82:	7019      	strb	r1, [r3, #0]
 8009c84:	4608      	mov	r0, r1
 8009c86:	bc10      	pop	{r4}
 8009c88:	4770      	bx	lr

08009c8a <__sfputs_r>:
 8009c8a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c8c:	4606      	mov	r6, r0
 8009c8e:	460f      	mov	r7, r1
 8009c90:	4614      	mov	r4, r2
 8009c92:	18d5      	adds	r5, r2, r3
 8009c94:	42ac      	cmp	r4, r5
 8009c96:	d101      	bne.n	8009c9c <__sfputs_r+0x12>
 8009c98:	2000      	movs	r0, #0
 8009c9a:	e007      	b.n	8009cac <__sfputs_r+0x22>
 8009c9c:	463a      	mov	r2, r7
 8009c9e:	4630      	mov	r0, r6
 8009ca0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009ca4:	f7ff ffdc 	bl	8009c60 <__sfputc_r>
 8009ca8:	1c43      	adds	r3, r0, #1
 8009caa:	d1f3      	bne.n	8009c94 <__sfputs_r+0xa>
 8009cac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009cb0 <_vfiprintf_r>:
 8009cb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009cb4:	460d      	mov	r5, r1
 8009cb6:	4614      	mov	r4, r2
 8009cb8:	4698      	mov	r8, r3
 8009cba:	4606      	mov	r6, r0
 8009cbc:	b09d      	sub	sp, #116	; 0x74
 8009cbe:	b118      	cbz	r0, 8009cc8 <_vfiprintf_r+0x18>
 8009cc0:	6983      	ldr	r3, [r0, #24]
 8009cc2:	b90b      	cbnz	r3, 8009cc8 <_vfiprintf_r+0x18>
 8009cc4:	f7ff fece 	bl	8009a64 <__sinit>
 8009cc8:	4b89      	ldr	r3, [pc, #548]	; (8009ef0 <_vfiprintf_r+0x240>)
 8009cca:	429d      	cmp	r5, r3
 8009ccc:	d11b      	bne.n	8009d06 <_vfiprintf_r+0x56>
 8009cce:	6875      	ldr	r5, [r6, #4]
 8009cd0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009cd2:	07d9      	lsls	r1, r3, #31
 8009cd4:	d405      	bmi.n	8009ce2 <_vfiprintf_r+0x32>
 8009cd6:	89ab      	ldrh	r3, [r5, #12]
 8009cd8:	059a      	lsls	r2, r3, #22
 8009cda:	d402      	bmi.n	8009ce2 <_vfiprintf_r+0x32>
 8009cdc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009cde:	f7ff ff71 	bl	8009bc4 <__retarget_lock_acquire_recursive>
 8009ce2:	89ab      	ldrh	r3, [r5, #12]
 8009ce4:	071b      	lsls	r3, r3, #28
 8009ce6:	d501      	bpl.n	8009cec <_vfiprintf_r+0x3c>
 8009ce8:	692b      	ldr	r3, [r5, #16]
 8009cea:	b9eb      	cbnz	r3, 8009d28 <_vfiprintf_r+0x78>
 8009cec:	4629      	mov	r1, r5
 8009cee:	4630      	mov	r0, r6
 8009cf0:	f000 f960 	bl	8009fb4 <__swsetup_r>
 8009cf4:	b1c0      	cbz	r0, 8009d28 <_vfiprintf_r+0x78>
 8009cf6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009cf8:	07dc      	lsls	r4, r3, #31
 8009cfa:	d50e      	bpl.n	8009d1a <_vfiprintf_r+0x6a>
 8009cfc:	f04f 30ff 	mov.w	r0, #4294967295
 8009d00:	b01d      	add	sp, #116	; 0x74
 8009d02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d06:	4b7b      	ldr	r3, [pc, #492]	; (8009ef4 <_vfiprintf_r+0x244>)
 8009d08:	429d      	cmp	r5, r3
 8009d0a:	d101      	bne.n	8009d10 <_vfiprintf_r+0x60>
 8009d0c:	68b5      	ldr	r5, [r6, #8]
 8009d0e:	e7df      	b.n	8009cd0 <_vfiprintf_r+0x20>
 8009d10:	4b79      	ldr	r3, [pc, #484]	; (8009ef8 <_vfiprintf_r+0x248>)
 8009d12:	429d      	cmp	r5, r3
 8009d14:	bf08      	it	eq
 8009d16:	68f5      	ldreq	r5, [r6, #12]
 8009d18:	e7da      	b.n	8009cd0 <_vfiprintf_r+0x20>
 8009d1a:	89ab      	ldrh	r3, [r5, #12]
 8009d1c:	0598      	lsls	r0, r3, #22
 8009d1e:	d4ed      	bmi.n	8009cfc <_vfiprintf_r+0x4c>
 8009d20:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009d22:	f7ff ff50 	bl	8009bc6 <__retarget_lock_release_recursive>
 8009d26:	e7e9      	b.n	8009cfc <_vfiprintf_r+0x4c>
 8009d28:	2300      	movs	r3, #0
 8009d2a:	9309      	str	r3, [sp, #36]	; 0x24
 8009d2c:	2320      	movs	r3, #32
 8009d2e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009d32:	2330      	movs	r3, #48	; 0x30
 8009d34:	f04f 0901 	mov.w	r9, #1
 8009d38:	f8cd 800c 	str.w	r8, [sp, #12]
 8009d3c:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8009efc <_vfiprintf_r+0x24c>
 8009d40:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009d44:	4623      	mov	r3, r4
 8009d46:	469a      	mov	sl, r3
 8009d48:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009d4c:	b10a      	cbz	r2, 8009d52 <_vfiprintf_r+0xa2>
 8009d4e:	2a25      	cmp	r2, #37	; 0x25
 8009d50:	d1f9      	bne.n	8009d46 <_vfiprintf_r+0x96>
 8009d52:	ebba 0b04 	subs.w	fp, sl, r4
 8009d56:	d00b      	beq.n	8009d70 <_vfiprintf_r+0xc0>
 8009d58:	465b      	mov	r3, fp
 8009d5a:	4622      	mov	r2, r4
 8009d5c:	4629      	mov	r1, r5
 8009d5e:	4630      	mov	r0, r6
 8009d60:	f7ff ff93 	bl	8009c8a <__sfputs_r>
 8009d64:	3001      	adds	r0, #1
 8009d66:	f000 80aa 	beq.w	8009ebe <_vfiprintf_r+0x20e>
 8009d6a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009d6c:	445a      	add	r2, fp
 8009d6e:	9209      	str	r2, [sp, #36]	; 0x24
 8009d70:	f89a 3000 	ldrb.w	r3, [sl]
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	f000 80a2 	beq.w	8009ebe <_vfiprintf_r+0x20e>
 8009d7a:	2300      	movs	r3, #0
 8009d7c:	f04f 32ff 	mov.w	r2, #4294967295
 8009d80:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009d84:	f10a 0a01 	add.w	sl, sl, #1
 8009d88:	9304      	str	r3, [sp, #16]
 8009d8a:	9307      	str	r3, [sp, #28]
 8009d8c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009d90:	931a      	str	r3, [sp, #104]	; 0x68
 8009d92:	4654      	mov	r4, sl
 8009d94:	2205      	movs	r2, #5
 8009d96:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009d9a:	4858      	ldr	r0, [pc, #352]	; (8009efc <_vfiprintf_r+0x24c>)
 8009d9c:	f7fe f9f0 	bl	8008180 <memchr>
 8009da0:	9a04      	ldr	r2, [sp, #16]
 8009da2:	b9d8      	cbnz	r0, 8009ddc <_vfiprintf_r+0x12c>
 8009da4:	06d1      	lsls	r1, r2, #27
 8009da6:	bf44      	itt	mi
 8009da8:	2320      	movmi	r3, #32
 8009daa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009dae:	0713      	lsls	r3, r2, #28
 8009db0:	bf44      	itt	mi
 8009db2:	232b      	movmi	r3, #43	; 0x2b
 8009db4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009db8:	f89a 3000 	ldrb.w	r3, [sl]
 8009dbc:	2b2a      	cmp	r3, #42	; 0x2a
 8009dbe:	d015      	beq.n	8009dec <_vfiprintf_r+0x13c>
 8009dc0:	4654      	mov	r4, sl
 8009dc2:	2000      	movs	r0, #0
 8009dc4:	f04f 0c0a 	mov.w	ip, #10
 8009dc8:	9a07      	ldr	r2, [sp, #28]
 8009dca:	4621      	mov	r1, r4
 8009dcc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009dd0:	3b30      	subs	r3, #48	; 0x30
 8009dd2:	2b09      	cmp	r3, #9
 8009dd4:	d94e      	bls.n	8009e74 <_vfiprintf_r+0x1c4>
 8009dd6:	b1b0      	cbz	r0, 8009e06 <_vfiprintf_r+0x156>
 8009dd8:	9207      	str	r2, [sp, #28]
 8009dda:	e014      	b.n	8009e06 <_vfiprintf_r+0x156>
 8009ddc:	eba0 0308 	sub.w	r3, r0, r8
 8009de0:	fa09 f303 	lsl.w	r3, r9, r3
 8009de4:	4313      	orrs	r3, r2
 8009de6:	46a2      	mov	sl, r4
 8009de8:	9304      	str	r3, [sp, #16]
 8009dea:	e7d2      	b.n	8009d92 <_vfiprintf_r+0xe2>
 8009dec:	9b03      	ldr	r3, [sp, #12]
 8009dee:	1d19      	adds	r1, r3, #4
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	9103      	str	r1, [sp, #12]
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	bfbb      	ittet	lt
 8009df8:	425b      	neglt	r3, r3
 8009dfa:	f042 0202 	orrlt.w	r2, r2, #2
 8009dfe:	9307      	strge	r3, [sp, #28]
 8009e00:	9307      	strlt	r3, [sp, #28]
 8009e02:	bfb8      	it	lt
 8009e04:	9204      	strlt	r2, [sp, #16]
 8009e06:	7823      	ldrb	r3, [r4, #0]
 8009e08:	2b2e      	cmp	r3, #46	; 0x2e
 8009e0a:	d10c      	bne.n	8009e26 <_vfiprintf_r+0x176>
 8009e0c:	7863      	ldrb	r3, [r4, #1]
 8009e0e:	2b2a      	cmp	r3, #42	; 0x2a
 8009e10:	d135      	bne.n	8009e7e <_vfiprintf_r+0x1ce>
 8009e12:	9b03      	ldr	r3, [sp, #12]
 8009e14:	3402      	adds	r4, #2
 8009e16:	1d1a      	adds	r2, r3, #4
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	9203      	str	r2, [sp, #12]
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	bfb8      	it	lt
 8009e20:	f04f 33ff 	movlt.w	r3, #4294967295
 8009e24:	9305      	str	r3, [sp, #20]
 8009e26:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009f0c <_vfiprintf_r+0x25c>
 8009e2a:	2203      	movs	r2, #3
 8009e2c:	4650      	mov	r0, sl
 8009e2e:	7821      	ldrb	r1, [r4, #0]
 8009e30:	f7fe f9a6 	bl	8008180 <memchr>
 8009e34:	b140      	cbz	r0, 8009e48 <_vfiprintf_r+0x198>
 8009e36:	2340      	movs	r3, #64	; 0x40
 8009e38:	eba0 000a 	sub.w	r0, r0, sl
 8009e3c:	fa03 f000 	lsl.w	r0, r3, r0
 8009e40:	9b04      	ldr	r3, [sp, #16]
 8009e42:	3401      	adds	r4, #1
 8009e44:	4303      	orrs	r3, r0
 8009e46:	9304      	str	r3, [sp, #16]
 8009e48:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e4c:	2206      	movs	r2, #6
 8009e4e:	482c      	ldr	r0, [pc, #176]	; (8009f00 <_vfiprintf_r+0x250>)
 8009e50:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009e54:	f7fe f994 	bl	8008180 <memchr>
 8009e58:	2800      	cmp	r0, #0
 8009e5a:	d03f      	beq.n	8009edc <_vfiprintf_r+0x22c>
 8009e5c:	4b29      	ldr	r3, [pc, #164]	; (8009f04 <_vfiprintf_r+0x254>)
 8009e5e:	bb1b      	cbnz	r3, 8009ea8 <_vfiprintf_r+0x1f8>
 8009e60:	9b03      	ldr	r3, [sp, #12]
 8009e62:	3307      	adds	r3, #7
 8009e64:	f023 0307 	bic.w	r3, r3, #7
 8009e68:	3308      	adds	r3, #8
 8009e6a:	9303      	str	r3, [sp, #12]
 8009e6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e6e:	443b      	add	r3, r7
 8009e70:	9309      	str	r3, [sp, #36]	; 0x24
 8009e72:	e767      	b.n	8009d44 <_vfiprintf_r+0x94>
 8009e74:	460c      	mov	r4, r1
 8009e76:	2001      	movs	r0, #1
 8009e78:	fb0c 3202 	mla	r2, ip, r2, r3
 8009e7c:	e7a5      	b.n	8009dca <_vfiprintf_r+0x11a>
 8009e7e:	2300      	movs	r3, #0
 8009e80:	f04f 0c0a 	mov.w	ip, #10
 8009e84:	4619      	mov	r1, r3
 8009e86:	3401      	adds	r4, #1
 8009e88:	9305      	str	r3, [sp, #20]
 8009e8a:	4620      	mov	r0, r4
 8009e8c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009e90:	3a30      	subs	r2, #48	; 0x30
 8009e92:	2a09      	cmp	r2, #9
 8009e94:	d903      	bls.n	8009e9e <_vfiprintf_r+0x1ee>
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d0c5      	beq.n	8009e26 <_vfiprintf_r+0x176>
 8009e9a:	9105      	str	r1, [sp, #20]
 8009e9c:	e7c3      	b.n	8009e26 <_vfiprintf_r+0x176>
 8009e9e:	4604      	mov	r4, r0
 8009ea0:	2301      	movs	r3, #1
 8009ea2:	fb0c 2101 	mla	r1, ip, r1, r2
 8009ea6:	e7f0      	b.n	8009e8a <_vfiprintf_r+0x1da>
 8009ea8:	ab03      	add	r3, sp, #12
 8009eaa:	9300      	str	r3, [sp, #0]
 8009eac:	462a      	mov	r2, r5
 8009eae:	4630      	mov	r0, r6
 8009eb0:	4b15      	ldr	r3, [pc, #84]	; (8009f08 <_vfiprintf_r+0x258>)
 8009eb2:	a904      	add	r1, sp, #16
 8009eb4:	f7fb fa24 	bl	8005300 <_printf_float>
 8009eb8:	4607      	mov	r7, r0
 8009eba:	1c78      	adds	r0, r7, #1
 8009ebc:	d1d6      	bne.n	8009e6c <_vfiprintf_r+0x1bc>
 8009ebe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009ec0:	07d9      	lsls	r1, r3, #31
 8009ec2:	d405      	bmi.n	8009ed0 <_vfiprintf_r+0x220>
 8009ec4:	89ab      	ldrh	r3, [r5, #12]
 8009ec6:	059a      	lsls	r2, r3, #22
 8009ec8:	d402      	bmi.n	8009ed0 <_vfiprintf_r+0x220>
 8009eca:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009ecc:	f7ff fe7b 	bl	8009bc6 <__retarget_lock_release_recursive>
 8009ed0:	89ab      	ldrh	r3, [r5, #12]
 8009ed2:	065b      	lsls	r3, r3, #25
 8009ed4:	f53f af12 	bmi.w	8009cfc <_vfiprintf_r+0x4c>
 8009ed8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009eda:	e711      	b.n	8009d00 <_vfiprintf_r+0x50>
 8009edc:	ab03      	add	r3, sp, #12
 8009ede:	9300      	str	r3, [sp, #0]
 8009ee0:	462a      	mov	r2, r5
 8009ee2:	4630      	mov	r0, r6
 8009ee4:	4b08      	ldr	r3, [pc, #32]	; (8009f08 <_vfiprintf_r+0x258>)
 8009ee6:	a904      	add	r1, sp, #16
 8009ee8:	f7fb fca6 	bl	8005838 <_printf_i>
 8009eec:	e7e4      	b.n	8009eb8 <_vfiprintf_r+0x208>
 8009eee:	bf00      	nop
 8009ef0:	0800a89c 	.word	0x0800a89c
 8009ef4:	0800a8bc 	.word	0x0800a8bc
 8009ef8:	0800a87c 	.word	0x0800a87c
 8009efc:	0800a814 	.word	0x0800a814
 8009f00:	0800a81e 	.word	0x0800a81e
 8009f04:	08005301 	.word	0x08005301
 8009f08:	08009c8b 	.word	0x08009c8b
 8009f0c:	0800a81a 	.word	0x0800a81a

08009f10 <__swbuf_r>:
 8009f10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f12:	460e      	mov	r6, r1
 8009f14:	4614      	mov	r4, r2
 8009f16:	4605      	mov	r5, r0
 8009f18:	b118      	cbz	r0, 8009f22 <__swbuf_r+0x12>
 8009f1a:	6983      	ldr	r3, [r0, #24]
 8009f1c:	b90b      	cbnz	r3, 8009f22 <__swbuf_r+0x12>
 8009f1e:	f7ff fda1 	bl	8009a64 <__sinit>
 8009f22:	4b21      	ldr	r3, [pc, #132]	; (8009fa8 <__swbuf_r+0x98>)
 8009f24:	429c      	cmp	r4, r3
 8009f26:	d12b      	bne.n	8009f80 <__swbuf_r+0x70>
 8009f28:	686c      	ldr	r4, [r5, #4]
 8009f2a:	69a3      	ldr	r3, [r4, #24]
 8009f2c:	60a3      	str	r3, [r4, #8]
 8009f2e:	89a3      	ldrh	r3, [r4, #12]
 8009f30:	071a      	lsls	r2, r3, #28
 8009f32:	d52f      	bpl.n	8009f94 <__swbuf_r+0x84>
 8009f34:	6923      	ldr	r3, [r4, #16]
 8009f36:	b36b      	cbz	r3, 8009f94 <__swbuf_r+0x84>
 8009f38:	6923      	ldr	r3, [r4, #16]
 8009f3a:	6820      	ldr	r0, [r4, #0]
 8009f3c:	b2f6      	uxtb	r6, r6
 8009f3e:	1ac0      	subs	r0, r0, r3
 8009f40:	6963      	ldr	r3, [r4, #20]
 8009f42:	4637      	mov	r7, r6
 8009f44:	4283      	cmp	r3, r0
 8009f46:	dc04      	bgt.n	8009f52 <__swbuf_r+0x42>
 8009f48:	4621      	mov	r1, r4
 8009f4a:	4628      	mov	r0, r5
 8009f4c:	f7ff fcf6 	bl	800993c <_fflush_r>
 8009f50:	bb30      	cbnz	r0, 8009fa0 <__swbuf_r+0x90>
 8009f52:	68a3      	ldr	r3, [r4, #8]
 8009f54:	3001      	adds	r0, #1
 8009f56:	3b01      	subs	r3, #1
 8009f58:	60a3      	str	r3, [r4, #8]
 8009f5a:	6823      	ldr	r3, [r4, #0]
 8009f5c:	1c5a      	adds	r2, r3, #1
 8009f5e:	6022      	str	r2, [r4, #0]
 8009f60:	701e      	strb	r6, [r3, #0]
 8009f62:	6963      	ldr	r3, [r4, #20]
 8009f64:	4283      	cmp	r3, r0
 8009f66:	d004      	beq.n	8009f72 <__swbuf_r+0x62>
 8009f68:	89a3      	ldrh	r3, [r4, #12]
 8009f6a:	07db      	lsls	r3, r3, #31
 8009f6c:	d506      	bpl.n	8009f7c <__swbuf_r+0x6c>
 8009f6e:	2e0a      	cmp	r6, #10
 8009f70:	d104      	bne.n	8009f7c <__swbuf_r+0x6c>
 8009f72:	4621      	mov	r1, r4
 8009f74:	4628      	mov	r0, r5
 8009f76:	f7ff fce1 	bl	800993c <_fflush_r>
 8009f7a:	b988      	cbnz	r0, 8009fa0 <__swbuf_r+0x90>
 8009f7c:	4638      	mov	r0, r7
 8009f7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009f80:	4b0a      	ldr	r3, [pc, #40]	; (8009fac <__swbuf_r+0x9c>)
 8009f82:	429c      	cmp	r4, r3
 8009f84:	d101      	bne.n	8009f8a <__swbuf_r+0x7a>
 8009f86:	68ac      	ldr	r4, [r5, #8]
 8009f88:	e7cf      	b.n	8009f2a <__swbuf_r+0x1a>
 8009f8a:	4b09      	ldr	r3, [pc, #36]	; (8009fb0 <__swbuf_r+0xa0>)
 8009f8c:	429c      	cmp	r4, r3
 8009f8e:	bf08      	it	eq
 8009f90:	68ec      	ldreq	r4, [r5, #12]
 8009f92:	e7ca      	b.n	8009f2a <__swbuf_r+0x1a>
 8009f94:	4621      	mov	r1, r4
 8009f96:	4628      	mov	r0, r5
 8009f98:	f000 f80c 	bl	8009fb4 <__swsetup_r>
 8009f9c:	2800      	cmp	r0, #0
 8009f9e:	d0cb      	beq.n	8009f38 <__swbuf_r+0x28>
 8009fa0:	f04f 37ff 	mov.w	r7, #4294967295
 8009fa4:	e7ea      	b.n	8009f7c <__swbuf_r+0x6c>
 8009fa6:	bf00      	nop
 8009fa8:	0800a89c 	.word	0x0800a89c
 8009fac:	0800a8bc 	.word	0x0800a8bc
 8009fb0:	0800a87c 	.word	0x0800a87c

08009fb4 <__swsetup_r>:
 8009fb4:	4b32      	ldr	r3, [pc, #200]	; (800a080 <__swsetup_r+0xcc>)
 8009fb6:	b570      	push	{r4, r5, r6, lr}
 8009fb8:	681d      	ldr	r5, [r3, #0]
 8009fba:	4606      	mov	r6, r0
 8009fbc:	460c      	mov	r4, r1
 8009fbe:	b125      	cbz	r5, 8009fca <__swsetup_r+0x16>
 8009fc0:	69ab      	ldr	r3, [r5, #24]
 8009fc2:	b913      	cbnz	r3, 8009fca <__swsetup_r+0x16>
 8009fc4:	4628      	mov	r0, r5
 8009fc6:	f7ff fd4d 	bl	8009a64 <__sinit>
 8009fca:	4b2e      	ldr	r3, [pc, #184]	; (800a084 <__swsetup_r+0xd0>)
 8009fcc:	429c      	cmp	r4, r3
 8009fce:	d10f      	bne.n	8009ff0 <__swsetup_r+0x3c>
 8009fd0:	686c      	ldr	r4, [r5, #4]
 8009fd2:	89a3      	ldrh	r3, [r4, #12]
 8009fd4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009fd8:	0719      	lsls	r1, r3, #28
 8009fda:	d42c      	bmi.n	800a036 <__swsetup_r+0x82>
 8009fdc:	06dd      	lsls	r5, r3, #27
 8009fde:	d411      	bmi.n	800a004 <__swsetup_r+0x50>
 8009fe0:	2309      	movs	r3, #9
 8009fe2:	6033      	str	r3, [r6, #0]
 8009fe4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009fe8:	f04f 30ff 	mov.w	r0, #4294967295
 8009fec:	81a3      	strh	r3, [r4, #12]
 8009fee:	e03e      	b.n	800a06e <__swsetup_r+0xba>
 8009ff0:	4b25      	ldr	r3, [pc, #148]	; (800a088 <__swsetup_r+0xd4>)
 8009ff2:	429c      	cmp	r4, r3
 8009ff4:	d101      	bne.n	8009ffa <__swsetup_r+0x46>
 8009ff6:	68ac      	ldr	r4, [r5, #8]
 8009ff8:	e7eb      	b.n	8009fd2 <__swsetup_r+0x1e>
 8009ffa:	4b24      	ldr	r3, [pc, #144]	; (800a08c <__swsetup_r+0xd8>)
 8009ffc:	429c      	cmp	r4, r3
 8009ffe:	bf08      	it	eq
 800a000:	68ec      	ldreq	r4, [r5, #12]
 800a002:	e7e6      	b.n	8009fd2 <__swsetup_r+0x1e>
 800a004:	0758      	lsls	r0, r3, #29
 800a006:	d512      	bpl.n	800a02e <__swsetup_r+0x7a>
 800a008:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a00a:	b141      	cbz	r1, 800a01e <__swsetup_r+0x6a>
 800a00c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a010:	4299      	cmp	r1, r3
 800a012:	d002      	beq.n	800a01a <__swsetup_r+0x66>
 800a014:	4630      	mov	r0, r6
 800a016:	f7fe fd95 	bl	8008b44 <_free_r>
 800a01a:	2300      	movs	r3, #0
 800a01c:	6363      	str	r3, [r4, #52]	; 0x34
 800a01e:	89a3      	ldrh	r3, [r4, #12]
 800a020:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a024:	81a3      	strh	r3, [r4, #12]
 800a026:	2300      	movs	r3, #0
 800a028:	6063      	str	r3, [r4, #4]
 800a02a:	6923      	ldr	r3, [r4, #16]
 800a02c:	6023      	str	r3, [r4, #0]
 800a02e:	89a3      	ldrh	r3, [r4, #12]
 800a030:	f043 0308 	orr.w	r3, r3, #8
 800a034:	81a3      	strh	r3, [r4, #12]
 800a036:	6923      	ldr	r3, [r4, #16]
 800a038:	b94b      	cbnz	r3, 800a04e <__swsetup_r+0x9a>
 800a03a:	89a3      	ldrh	r3, [r4, #12]
 800a03c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a040:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a044:	d003      	beq.n	800a04e <__swsetup_r+0x9a>
 800a046:	4621      	mov	r1, r4
 800a048:	4630      	mov	r0, r6
 800a04a:	f000 f84d 	bl	800a0e8 <__smakebuf_r>
 800a04e:	89a0      	ldrh	r0, [r4, #12]
 800a050:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a054:	f010 0301 	ands.w	r3, r0, #1
 800a058:	d00a      	beq.n	800a070 <__swsetup_r+0xbc>
 800a05a:	2300      	movs	r3, #0
 800a05c:	60a3      	str	r3, [r4, #8]
 800a05e:	6963      	ldr	r3, [r4, #20]
 800a060:	425b      	negs	r3, r3
 800a062:	61a3      	str	r3, [r4, #24]
 800a064:	6923      	ldr	r3, [r4, #16]
 800a066:	b943      	cbnz	r3, 800a07a <__swsetup_r+0xc6>
 800a068:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a06c:	d1ba      	bne.n	8009fe4 <__swsetup_r+0x30>
 800a06e:	bd70      	pop	{r4, r5, r6, pc}
 800a070:	0781      	lsls	r1, r0, #30
 800a072:	bf58      	it	pl
 800a074:	6963      	ldrpl	r3, [r4, #20]
 800a076:	60a3      	str	r3, [r4, #8]
 800a078:	e7f4      	b.n	800a064 <__swsetup_r+0xb0>
 800a07a:	2000      	movs	r0, #0
 800a07c:	e7f7      	b.n	800a06e <__swsetup_r+0xba>
 800a07e:	bf00      	nop
 800a080:	2000000c 	.word	0x2000000c
 800a084:	0800a89c 	.word	0x0800a89c
 800a088:	0800a8bc 	.word	0x0800a8bc
 800a08c:	0800a87c 	.word	0x0800a87c

0800a090 <abort>:
 800a090:	2006      	movs	r0, #6
 800a092:	b508      	push	{r3, lr}
 800a094:	f000 f898 	bl	800a1c8 <raise>
 800a098:	2001      	movs	r0, #1
 800a09a:	f7f7 fea2 	bl	8001de2 <_exit>

0800a09e <__swhatbuf_r>:
 800a09e:	b570      	push	{r4, r5, r6, lr}
 800a0a0:	460e      	mov	r6, r1
 800a0a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a0a6:	4614      	mov	r4, r2
 800a0a8:	2900      	cmp	r1, #0
 800a0aa:	461d      	mov	r5, r3
 800a0ac:	b096      	sub	sp, #88	; 0x58
 800a0ae:	da07      	bge.n	800a0c0 <__swhatbuf_r+0x22>
 800a0b0:	2300      	movs	r3, #0
 800a0b2:	602b      	str	r3, [r5, #0]
 800a0b4:	89b3      	ldrh	r3, [r6, #12]
 800a0b6:	061a      	lsls	r2, r3, #24
 800a0b8:	d410      	bmi.n	800a0dc <__swhatbuf_r+0x3e>
 800a0ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a0be:	e00e      	b.n	800a0de <__swhatbuf_r+0x40>
 800a0c0:	466a      	mov	r2, sp
 800a0c2:	f000 f89d 	bl	800a200 <_fstat_r>
 800a0c6:	2800      	cmp	r0, #0
 800a0c8:	dbf2      	blt.n	800a0b0 <__swhatbuf_r+0x12>
 800a0ca:	9a01      	ldr	r2, [sp, #4]
 800a0cc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a0d0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a0d4:	425a      	negs	r2, r3
 800a0d6:	415a      	adcs	r2, r3
 800a0d8:	602a      	str	r2, [r5, #0]
 800a0da:	e7ee      	b.n	800a0ba <__swhatbuf_r+0x1c>
 800a0dc:	2340      	movs	r3, #64	; 0x40
 800a0de:	2000      	movs	r0, #0
 800a0e0:	6023      	str	r3, [r4, #0]
 800a0e2:	b016      	add	sp, #88	; 0x58
 800a0e4:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a0e8 <__smakebuf_r>:
 800a0e8:	898b      	ldrh	r3, [r1, #12]
 800a0ea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a0ec:	079d      	lsls	r5, r3, #30
 800a0ee:	4606      	mov	r6, r0
 800a0f0:	460c      	mov	r4, r1
 800a0f2:	d507      	bpl.n	800a104 <__smakebuf_r+0x1c>
 800a0f4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a0f8:	6023      	str	r3, [r4, #0]
 800a0fa:	6123      	str	r3, [r4, #16]
 800a0fc:	2301      	movs	r3, #1
 800a0fe:	6163      	str	r3, [r4, #20]
 800a100:	b002      	add	sp, #8
 800a102:	bd70      	pop	{r4, r5, r6, pc}
 800a104:	466a      	mov	r2, sp
 800a106:	ab01      	add	r3, sp, #4
 800a108:	f7ff ffc9 	bl	800a09e <__swhatbuf_r>
 800a10c:	9900      	ldr	r1, [sp, #0]
 800a10e:	4605      	mov	r5, r0
 800a110:	4630      	mov	r0, r6
 800a112:	f7fe fd63 	bl	8008bdc <_malloc_r>
 800a116:	b948      	cbnz	r0, 800a12c <__smakebuf_r+0x44>
 800a118:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a11c:	059a      	lsls	r2, r3, #22
 800a11e:	d4ef      	bmi.n	800a100 <__smakebuf_r+0x18>
 800a120:	f023 0303 	bic.w	r3, r3, #3
 800a124:	f043 0302 	orr.w	r3, r3, #2
 800a128:	81a3      	strh	r3, [r4, #12]
 800a12a:	e7e3      	b.n	800a0f4 <__smakebuf_r+0xc>
 800a12c:	4b0d      	ldr	r3, [pc, #52]	; (800a164 <__smakebuf_r+0x7c>)
 800a12e:	62b3      	str	r3, [r6, #40]	; 0x28
 800a130:	89a3      	ldrh	r3, [r4, #12]
 800a132:	6020      	str	r0, [r4, #0]
 800a134:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a138:	81a3      	strh	r3, [r4, #12]
 800a13a:	9b00      	ldr	r3, [sp, #0]
 800a13c:	6120      	str	r0, [r4, #16]
 800a13e:	6163      	str	r3, [r4, #20]
 800a140:	9b01      	ldr	r3, [sp, #4]
 800a142:	b15b      	cbz	r3, 800a15c <__smakebuf_r+0x74>
 800a144:	4630      	mov	r0, r6
 800a146:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a14a:	f000 f86b 	bl	800a224 <_isatty_r>
 800a14e:	b128      	cbz	r0, 800a15c <__smakebuf_r+0x74>
 800a150:	89a3      	ldrh	r3, [r4, #12]
 800a152:	f023 0303 	bic.w	r3, r3, #3
 800a156:	f043 0301 	orr.w	r3, r3, #1
 800a15a:	81a3      	strh	r3, [r4, #12]
 800a15c:	89a0      	ldrh	r0, [r4, #12]
 800a15e:	4305      	orrs	r5, r0
 800a160:	81a5      	strh	r5, [r4, #12]
 800a162:	e7cd      	b.n	800a100 <__smakebuf_r+0x18>
 800a164:	080099fd 	.word	0x080099fd

0800a168 <_malloc_usable_size_r>:
 800a168:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a16c:	1f18      	subs	r0, r3, #4
 800a16e:	2b00      	cmp	r3, #0
 800a170:	bfbc      	itt	lt
 800a172:	580b      	ldrlt	r3, [r1, r0]
 800a174:	18c0      	addlt	r0, r0, r3
 800a176:	4770      	bx	lr

0800a178 <_raise_r>:
 800a178:	291f      	cmp	r1, #31
 800a17a:	b538      	push	{r3, r4, r5, lr}
 800a17c:	4604      	mov	r4, r0
 800a17e:	460d      	mov	r5, r1
 800a180:	d904      	bls.n	800a18c <_raise_r+0x14>
 800a182:	2316      	movs	r3, #22
 800a184:	6003      	str	r3, [r0, #0]
 800a186:	f04f 30ff 	mov.w	r0, #4294967295
 800a18a:	bd38      	pop	{r3, r4, r5, pc}
 800a18c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a18e:	b112      	cbz	r2, 800a196 <_raise_r+0x1e>
 800a190:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a194:	b94b      	cbnz	r3, 800a1aa <_raise_r+0x32>
 800a196:	4620      	mov	r0, r4
 800a198:	f000 f830 	bl	800a1fc <_getpid_r>
 800a19c:	462a      	mov	r2, r5
 800a19e:	4601      	mov	r1, r0
 800a1a0:	4620      	mov	r0, r4
 800a1a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a1a6:	f000 b817 	b.w	800a1d8 <_kill_r>
 800a1aa:	2b01      	cmp	r3, #1
 800a1ac:	d00a      	beq.n	800a1c4 <_raise_r+0x4c>
 800a1ae:	1c59      	adds	r1, r3, #1
 800a1b0:	d103      	bne.n	800a1ba <_raise_r+0x42>
 800a1b2:	2316      	movs	r3, #22
 800a1b4:	6003      	str	r3, [r0, #0]
 800a1b6:	2001      	movs	r0, #1
 800a1b8:	e7e7      	b.n	800a18a <_raise_r+0x12>
 800a1ba:	2400      	movs	r4, #0
 800a1bc:	4628      	mov	r0, r5
 800a1be:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a1c2:	4798      	blx	r3
 800a1c4:	2000      	movs	r0, #0
 800a1c6:	e7e0      	b.n	800a18a <_raise_r+0x12>

0800a1c8 <raise>:
 800a1c8:	4b02      	ldr	r3, [pc, #8]	; (800a1d4 <raise+0xc>)
 800a1ca:	4601      	mov	r1, r0
 800a1cc:	6818      	ldr	r0, [r3, #0]
 800a1ce:	f7ff bfd3 	b.w	800a178 <_raise_r>
 800a1d2:	bf00      	nop
 800a1d4:	2000000c 	.word	0x2000000c

0800a1d8 <_kill_r>:
 800a1d8:	b538      	push	{r3, r4, r5, lr}
 800a1da:	2300      	movs	r3, #0
 800a1dc:	4d06      	ldr	r5, [pc, #24]	; (800a1f8 <_kill_r+0x20>)
 800a1de:	4604      	mov	r4, r0
 800a1e0:	4608      	mov	r0, r1
 800a1e2:	4611      	mov	r1, r2
 800a1e4:	602b      	str	r3, [r5, #0]
 800a1e6:	f7f7 fdec 	bl	8001dc2 <_kill>
 800a1ea:	1c43      	adds	r3, r0, #1
 800a1ec:	d102      	bne.n	800a1f4 <_kill_r+0x1c>
 800a1ee:	682b      	ldr	r3, [r5, #0]
 800a1f0:	b103      	cbz	r3, 800a1f4 <_kill_r+0x1c>
 800a1f2:	6023      	str	r3, [r4, #0]
 800a1f4:	bd38      	pop	{r3, r4, r5, pc}
 800a1f6:	bf00      	nop
 800a1f8:	2000040c 	.word	0x2000040c

0800a1fc <_getpid_r>:
 800a1fc:	f7f7 bdda 	b.w	8001db4 <_getpid>

0800a200 <_fstat_r>:
 800a200:	b538      	push	{r3, r4, r5, lr}
 800a202:	2300      	movs	r3, #0
 800a204:	4d06      	ldr	r5, [pc, #24]	; (800a220 <_fstat_r+0x20>)
 800a206:	4604      	mov	r4, r0
 800a208:	4608      	mov	r0, r1
 800a20a:	4611      	mov	r1, r2
 800a20c:	602b      	str	r3, [r5, #0]
 800a20e:	f7f7 fe36 	bl	8001e7e <_fstat>
 800a212:	1c43      	adds	r3, r0, #1
 800a214:	d102      	bne.n	800a21c <_fstat_r+0x1c>
 800a216:	682b      	ldr	r3, [r5, #0]
 800a218:	b103      	cbz	r3, 800a21c <_fstat_r+0x1c>
 800a21a:	6023      	str	r3, [r4, #0]
 800a21c:	bd38      	pop	{r3, r4, r5, pc}
 800a21e:	bf00      	nop
 800a220:	2000040c 	.word	0x2000040c

0800a224 <_isatty_r>:
 800a224:	b538      	push	{r3, r4, r5, lr}
 800a226:	2300      	movs	r3, #0
 800a228:	4d05      	ldr	r5, [pc, #20]	; (800a240 <_isatty_r+0x1c>)
 800a22a:	4604      	mov	r4, r0
 800a22c:	4608      	mov	r0, r1
 800a22e:	602b      	str	r3, [r5, #0]
 800a230:	f7f7 fe34 	bl	8001e9c <_isatty>
 800a234:	1c43      	adds	r3, r0, #1
 800a236:	d102      	bne.n	800a23e <_isatty_r+0x1a>
 800a238:	682b      	ldr	r3, [r5, #0]
 800a23a:	b103      	cbz	r3, 800a23e <_isatty_r+0x1a>
 800a23c:	6023      	str	r3, [r4, #0]
 800a23e:	bd38      	pop	{r3, r4, r5, pc}
 800a240:	2000040c 	.word	0x2000040c

0800a244 <_init>:
 800a244:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a246:	bf00      	nop
 800a248:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a24a:	bc08      	pop	{r3}
 800a24c:	469e      	mov	lr, r3
 800a24e:	4770      	bx	lr

0800a250 <_fini>:
 800a250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a252:	bf00      	nop
 800a254:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a256:	bc08      	pop	{r3}
 800a258:	469e      	mov	lr, r3
 800a25a:	4770      	bx	lr
