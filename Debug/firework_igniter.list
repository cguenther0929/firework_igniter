
firework_igniter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000538c  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002e0  08005570  08005570  00015570  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005850  08005850  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08005850  08005850  00015850  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005858  08005858  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005858  08005858  00015858  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800585c  0800585c  0001585c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005860  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000023c  20000070  080058d0  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002ac  080058d0  000202ac  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001666f  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c1d  00000000  00000000  00036708  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001380  00000000  00000000  00039328  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001290  00000000  00000000  0003a6a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021344  00000000  00000000  0003b938  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016c1f  00000000  00000000  0005cc7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000be92c  00000000  00000000  0007389b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001321c7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005bc0  00000000  00000000  0013221c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000070 	.word	0x20000070
 8000200:	00000000 	.word	0x00000000
 8000204:	08005558 	.word	0x08005558

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000074 	.word	0x20000074
 8000220:	08005558 	.word	0x08005558

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr

08000234 <__aeabi_uldivmod>:
 8000234:	b953      	cbnz	r3, 800024c <__aeabi_uldivmod+0x18>
 8000236:	b94a      	cbnz	r2, 800024c <__aeabi_uldivmod+0x18>
 8000238:	2900      	cmp	r1, #0
 800023a:	bf08      	it	eq
 800023c:	2800      	cmpeq	r0, #0
 800023e:	bf1c      	itt	ne
 8000240:	f04f 31ff 	movne.w	r1, #4294967295
 8000244:	f04f 30ff 	movne.w	r0, #4294967295
 8000248:	f000 b96e 	b.w	8000528 <__aeabi_idiv0>
 800024c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000250:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000254:	f000 f806 	bl	8000264 <__udivmoddi4>
 8000258:	f8dd e004 	ldr.w	lr, [sp, #4]
 800025c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000260:	b004      	add	sp, #16
 8000262:	4770      	bx	lr

08000264 <__udivmoddi4>:
 8000264:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000268:	9e08      	ldr	r6, [sp, #32]
 800026a:	460d      	mov	r5, r1
 800026c:	4604      	mov	r4, r0
 800026e:	468e      	mov	lr, r1
 8000270:	2b00      	cmp	r3, #0
 8000272:	f040 8083 	bne.w	800037c <__udivmoddi4+0x118>
 8000276:	428a      	cmp	r2, r1
 8000278:	4617      	mov	r7, r2
 800027a:	d947      	bls.n	800030c <__udivmoddi4+0xa8>
 800027c:	fab2 f382 	clz	r3, r2
 8000280:	b14b      	cbz	r3, 8000296 <__udivmoddi4+0x32>
 8000282:	f1c3 0120 	rsb	r1, r3, #32
 8000286:	fa05 fe03 	lsl.w	lr, r5, r3
 800028a:	fa20 f101 	lsr.w	r1, r0, r1
 800028e:	409f      	lsls	r7, r3
 8000290:	ea41 0e0e 	orr.w	lr, r1, lr
 8000294:	409c      	lsls	r4, r3
 8000296:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800029a:	fbbe fcf8 	udiv	ip, lr, r8
 800029e:	fa1f f987 	uxth.w	r9, r7
 80002a2:	fb08 e21c 	mls	r2, r8, ip, lr
 80002a6:	fb0c f009 	mul.w	r0, ip, r9
 80002aa:	0c21      	lsrs	r1, r4, #16
 80002ac:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 80002b0:	4290      	cmp	r0, r2
 80002b2:	d90a      	bls.n	80002ca <__udivmoddi4+0x66>
 80002b4:	18ba      	adds	r2, r7, r2
 80002b6:	f10c 31ff 	add.w	r1, ip, #4294967295
 80002ba:	f080 8118 	bcs.w	80004ee <__udivmoddi4+0x28a>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f240 8115 	bls.w	80004ee <__udivmoddi4+0x28a>
 80002c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80002c8:	443a      	add	r2, r7
 80002ca:	1a12      	subs	r2, r2, r0
 80002cc:	fbb2 f0f8 	udiv	r0, r2, r8
 80002d0:	fb08 2210 	mls	r2, r8, r0, r2
 80002d4:	fb00 f109 	mul.w	r1, r0, r9
 80002d8:	b2a4      	uxth	r4, r4
 80002da:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002de:	42a1      	cmp	r1, r4
 80002e0:	d909      	bls.n	80002f6 <__udivmoddi4+0x92>
 80002e2:	193c      	adds	r4, r7, r4
 80002e4:	f100 32ff 	add.w	r2, r0, #4294967295
 80002e8:	f080 8103 	bcs.w	80004f2 <__udivmoddi4+0x28e>
 80002ec:	42a1      	cmp	r1, r4
 80002ee:	f240 8100 	bls.w	80004f2 <__udivmoddi4+0x28e>
 80002f2:	3802      	subs	r0, #2
 80002f4:	443c      	add	r4, r7
 80002f6:	1a64      	subs	r4, r4, r1
 80002f8:	2100      	movs	r1, #0
 80002fa:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80002fe:	b11e      	cbz	r6, 8000308 <__udivmoddi4+0xa4>
 8000300:	2200      	movs	r2, #0
 8000302:	40dc      	lsrs	r4, r3
 8000304:	e9c6 4200 	strd	r4, r2, [r6]
 8000308:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030c:	b902      	cbnz	r2, 8000310 <__udivmoddi4+0xac>
 800030e:	deff      	udf	#255	; 0xff
 8000310:	fab2 f382 	clz	r3, r2
 8000314:	2b00      	cmp	r3, #0
 8000316:	d14f      	bne.n	80003b8 <__udivmoddi4+0x154>
 8000318:	1a8d      	subs	r5, r1, r2
 800031a:	2101      	movs	r1, #1
 800031c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8000320:	fa1f f882 	uxth.w	r8, r2
 8000324:	fbb5 fcfe 	udiv	ip, r5, lr
 8000328:	fb0e 551c 	mls	r5, lr, ip, r5
 800032c:	fb08 f00c 	mul.w	r0, r8, ip
 8000330:	0c22      	lsrs	r2, r4, #16
 8000332:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 8000336:	42a8      	cmp	r0, r5
 8000338:	d907      	bls.n	800034a <__udivmoddi4+0xe6>
 800033a:	197d      	adds	r5, r7, r5
 800033c:	f10c 32ff 	add.w	r2, ip, #4294967295
 8000340:	d202      	bcs.n	8000348 <__udivmoddi4+0xe4>
 8000342:	42a8      	cmp	r0, r5
 8000344:	f200 80e9 	bhi.w	800051a <__udivmoddi4+0x2b6>
 8000348:	4694      	mov	ip, r2
 800034a:	1a2d      	subs	r5, r5, r0
 800034c:	fbb5 f0fe 	udiv	r0, r5, lr
 8000350:	fb0e 5510 	mls	r5, lr, r0, r5
 8000354:	fb08 f800 	mul.w	r8, r8, r0
 8000358:	b2a4      	uxth	r4, r4
 800035a:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800035e:	45a0      	cmp	r8, r4
 8000360:	d907      	bls.n	8000372 <__udivmoddi4+0x10e>
 8000362:	193c      	adds	r4, r7, r4
 8000364:	f100 32ff 	add.w	r2, r0, #4294967295
 8000368:	d202      	bcs.n	8000370 <__udivmoddi4+0x10c>
 800036a:	45a0      	cmp	r8, r4
 800036c:	f200 80d9 	bhi.w	8000522 <__udivmoddi4+0x2be>
 8000370:	4610      	mov	r0, r2
 8000372:	eba4 0408 	sub.w	r4, r4, r8
 8000376:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800037a:	e7c0      	b.n	80002fe <__udivmoddi4+0x9a>
 800037c:	428b      	cmp	r3, r1
 800037e:	d908      	bls.n	8000392 <__udivmoddi4+0x12e>
 8000380:	2e00      	cmp	r6, #0
 8000382:	f000 80b1 	beq.w	80004e8 <__udivmoddi4+0x284>
 8000386:	2100      	movs	r1, #0
 8000388:	e9c6 0500 	strd	r0, r5, [r6]
 800038c:	4608      	mov	r0, r1
 800038e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000392:	fab3 f183 	clz	r1, r3
 8000396:	2900      	cmp	r1, #0
 8000398:	d14b      	bne.n	8000432 <__udivmoddi4+0x1ce>
 800039a:	42ab      	cmp	r3, r5
 800039c:	d302      	bcc.n	80003a4 <__udivmoddi4+0x140>
 800039e:	4282      	cmp	r2, r0
 80003a0:	f200 80b9 	bhi.w	8000516 <__udivmoddi4+0x2b2>
 80003a4:	1a84      	subs	r4, r0, r2
 80003a6:	eb65 0303 	sbc.w	r3, r5, r3
 80003aa:	2001      	movs	r0, #1
 80003ac:	469e      	mov	lr, r3
 80003ae:	2e00      	cmp	r6, #0
 80003b0:	d0aa      	beq.n	8000308 <__udivmoddi4+0xa4>
 80003b2:	e9c6 4e00 	strd	r4, lr, [r6]
 80003b6:	e7a7      	b.n	8000308 <__udivmoddi4+0xa4>
 80003b8:	409f      	lsls	r7, r3
 80003ba:	f1c3 0220 	rsb	r2, r3, #32
 80003be:	40d1      	lsrs	r1, r2
 80003c0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c4:	fbb1 f0fe 	udiv	r0, r1, lr
 80003c8:	fa1f f887 	uxth.w	r8, r7
 80003cc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003d0:	fa24 f202 	lsr.w	r2, r4, r2
 80003d4:	409d      	lsls	r5, r3
 80003d6:	fb00 fc08 	mul.w	ip, r0, r8
 80003da:	432a      	orrs	r2, r5
 80003dc:	0c15      	lsrs	r5, r2, #16
 80003de:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 80003e2:	45ac      	cmp	ip, r5
 80003e4:	fa04 f403 	lsl.w	r4, r4, r3
 80003e8:	d909      	bls.n	80003fe <__udivmoddi4+0x19a>
 80003ea:	197d      	adds	r5, r7, r5
 80003ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80003f0:	f080 808f 	bcs.w	8000512 <__udivmoddi4+0x2ae>
 80003f4:	45ac      	cmp	ip, r5
 80003f6:	f240 808c 	bls.w	8000512 <__udivmoddi4+0x2ae>
 80003fa:	3802      	subs	r0, #2
 80003fc:	443d      	add	r5, r7
 80003fe:	eba5 050c 	sub.w	r5, r5, ip
 8000402:	fbb5 f1fe 	udiv	r1, r5, lr
 8000406:	fb0e 5c11 	mls	ip, lr, r1, r5
 800040a:	fb01 f908 	mul.w	r9, r1, r8
 800040e:	b295      	uxth	r5, r2
 8000410:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000414:	45a9      	cmp	r9, r5
 8000416:	d907      	bls.n	8000428 <__udivmoddi4+0x1c4>
 8000418:	197d      	adds	r5, r7, r5
 800041a:	f101 32ff 	add.w	r2, r1, #4294967295
 800041e:	d274      	bcs.n	800050a <__udivmoddi4+0x2a6>
 8000420:	45a9      	cmp	r9, r5
 8000422:	d972      	bls.n	800050a <__udivmoddi4+0x2a6>
 8000424:	3902      	subs	r1, #2
 8000426:	443d      	add	r5, r7
 8000428:	eba5 0509 	sub.w	r5, r5, r9
 800042c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000430:	e778      	b.n	8000324 <__udivmoddi4+0xc0>
 8000432:	f1c1 0720 	rsb	r7, r1, #32
 8000436:	408b      	lsls	r3, r1
 8000438:	fa22 fc07 	lsr.w	ip, r2, r7
 800043c:	ea4c 0c03 	orr.w	ip, ip, r3
 8000440:	fa25 f407 	lsr.w	r4, r5, r7
 8000444:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000448:	fbb4 f9fe 	udiv	r9, r4, lr
 800044c:	fa1f f88c 	uxth.w	r8, ip
 8000450:	fb0e 4419 	mls	r4, lr, r9, r4
 8000454:	fa20 f307 	lsr.w	r3, r0, r7
 8000458:	fb09 fa08 	mul.w	sl, r9, r8
 800045c:	408d      	lsls	r5, r1
 800045e:	431d      	orrs	r5, r3
 8000460:	0c2b      	lsrs	r3, r5, #16
 8000462:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000466:	45a2      	cmp	sl, r4
 8000468:	fa02 f201 	lsl.w	r2, r2, r1
 800046c:	fa00 f301 	lsl.w	r3, r0, r1
 8000470:	d909      	bls.n	8000486 <__udivmoddi4+0x222>
 8000472:	eb1c 0404 	adds.w	r4, ip, r4
 8000476:	f109 30ff 	add.w	r0, r9, #4294967295
 800047a:	d248      	bcs.n	800050e <__udivmoddi4+0x2aa>
 800047c:	45a2      	cmp	sl, r4
 800047e:	d946      	bls.n	800050e <__udivmoddi4+0x2aa>
 8000480:	f1a9 0902 	sub.w	r9, r9, #2
 8000484:	4464      	add	r4, ip
 8000486:	eba4 040a 	sub.w	r4, r4, sl
 800048a:	fbb4 f0fe 	udiv	r0, r4, lr
 800048e:	fb0e 4410 	mls	r4, lr, r0, r4
 8000492:	fb00 fa08 	mul.w	sl, r0, r8
 8000496:	b2ad      	uxth	r5, r5
 8000498:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 800049c:	45a2      	cmp	sl, r4
 800049e:	d908      	bls.n	80004b2 <__udivmoddi4+0x24e>
 80004a0:	eb1c 0404 	adds.w	r4, ip, r4
 80004a4:	f100 35ff 	add.w	r5, r0, #4294967295
 80004a8:	d22d      	bcs.n	8000506 <__udivmoddi4+0x2a2>
 80004aa:	45a2      	cmp	sl, r4
 80004ac:	d92b      	bls.n	8000506 <__udivmoddi4+0x2a2>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4464      	add	r4, ip
 80004b2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004b6:	fba0 8902 	umull	r8, r9, r0, r2
 80004ba:	eba4 040a 	sub.w	r4, r4, sl
 80004be:	454c      	cmp	r4, r9
 80004c0:	46c6      	mov	lr, r8
 80004c2:	464d      	mov	r5, r9
 80004c4:	d319      	bcc.n	80004fa <__udivmoddi4+0x296>
 80004c6:	d016      	beq.n	80004f6 <__udivmoddi4+0x292>
 80004c8:	b15e      	cbz	r6, 80004e2 <__udivmoddi4+0x27e>
 80004ca:	ebb3 020e 	subs.w	r2, r3, lr
 80004ce:	eb64 0405 	sbc.w	r4, r4, r5
 80004d2:	fa04 f707 	lsl.w	r7, r4, r7
 80004d6:	fa22 f301 	lsr.w	r3, r2, r1
 80004da:	431f      	orrs	r7, r3
 80004dc:	40cc      	lsrs	r4, r1
 80004de:	e9c6 7400 	strd	r7, r4, [r6]
 80004e2:	2100      	movs	r1, #0
 80004e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004e8:	4631      	mov	r1, r6
 80004ea:	4630      	mov	r0, r6
 80004ec:	e70c      	b.n	8000308 <__udivmoddi4+0xa4>
 80004ee:	468c      	mov	ip, r1
 80004f0:	e6eb      	b.n	80002ca <__udivmoddi4+0x66>
 80004f2:	4610      	mov	r0, r2
 80004f4:	e6ff      	b.n	80002f6 <__udivmoddi4+0x92>
 80004f6:	4543      	cmp	r3, r8
 80004f8:	d2e6      	bcs.n	80004c8 <__udivmoddi4+0x264>
 80004fa:	ebb8 0e02 	subs.w	lr, r8, r2
 80004fe:	eb69 050c 	sbc.w	r5, r9, ip
 8000502:	3801      	subs	r0, #1
 8000504:	e7e0      	b.n	80004c8 <__udivmoddi4+0x264>
 8000506:	4628      	mov	r0, r5
 8000508:	e7d3      	b.n	80004b2 <__udivmoddi4+0x24e>
 800050a:	4611      	mov	r1, r2
 800050c:	e78c      	b.n	8000428 <__udivmoddi4+0x1c4>
 800050e:	4681      	mov	r9, r0
 8000510:	e7b9      	b.n	8000486 <__udivmoddi4+0x222>
 8000512:	4608      	mov	r0, r1
 8000514:	e773      	b.n	80003fe <__udivmoddi4+0x19a>
 8000516:	4608      	mov	r0, r1
 8000518:	e749      	b.n	80003ae <__udivmoddi4+0x14a>
 800051a:	f1ac 0c02 	sub.w	ip, ip, #2
 800051e:	443d      	add	r5, r7
 8000520:	e713      	b.n	800034a <__udivmoddi4+0xe6>
 8000522:	3802      	subs	r0, #2
 8000524:	443c      	add	r4, r7
 8000526:	e724      	b.n	8000372 <__udivmoddi4+0x10e>

08000528 <__aeabi_idiv0>:
 8000528:	4770      	bx	lr
 800052a:	bf00      	nop

0800052c <getNumber_u8>:
#include "console.h"            //Include file to support console

struct UARTMembers uart;        


uint8_t getNumber_u8 ( void ) {
 800052c:	b580      	push	{r7, lr}
 800052e:	b082      	sub	sp, #8
 8000530:	af00      	add	r7, sp, #0
    uint8_t number      = 0;
 8000532:	2300      	movs	r3, #0
 8000534:	71bb      	strb	r3, [r7, #6]
    uint8_t timeout     = 0;
 8000536:	2300      	movs	r3, #0
 8000538:	71fb      	strb	r3, [r7, #7]


    ResetRxBuffer();
 800053a:	f000 ff93 	bl	8001464 <ResetRxBuffer>
    print_string("Here1: ",LF);
 800053e:	2101      	movs	r1, #1
 8000540:	481c      	ldr	r0, [pc, #112]	; (80005b4 <getNumber_u8+0x88>)
 8000542:	f000 fe77 	bl	8001234 <print_string>

    // HAL_UART_Receive(&huart1, &uart.rxbuf, MAX_RX_BUF_INDEX, 1000000);
    print_string("Here1: ",LF);
 8000546:	2101      	movs	r1, #1
 8000548:	481a      	ldr	r0, [pc, #104]	; (80005b4 <getNumber_u8+0x88>)
 800054a:	f000 fe73 	bl	8001234 <print_string>
    
    uart.rxchar = '\0';
 800054e:	4b1a      	ldr	r3, [pc, #104]	; (80005b8 <getNumber_u8+0x8c>)
 8000550:	2200      	movs	r2, #0
 8000552:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while(uart.rxchar == '\0'){}                   // Wait for keyboard input 
 8000556:	bf00      	nop
 8000558:	4b17      	ldr	r3, [pc, #92]	; (80005b8 <getNumber_u8+0x8c>)
 800055a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800055e:	2b00      	cmp	r3, #0
 8000560:	d0fa      	beq.n	8000558 <getNumber_u8+0x2c>
    
    while (timeout < 20) {
 8000562:	e00a      	b.n	800057a <getNumber_u8+0x4e>
        
        
        if(uart.rxchar == ENTER_KEY) break;
 8000564:	4b14      	ldr	r3, [pc, #80]	; (80005b8 <getNumber_u8+0x8c>)
 8000566:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800056a:	2b0d      	cmp	r3, #13
 800056c:	d009      	beq.n	8000582 <getNumber_u8+0x56>

        blockingDelay100ms(1);
 800056e:	2001      	movs	r0, #1
 8000570:	f000 fbd8 	bl	8000d24 <blockingDelay100ms>
        timeout++;
 8000574:	79fb      	ldrb	r3, [r7, #7]
 8000576:	3301      	adds	r3, #1
 8000578:	71fb      	strb	r3, [r7, #7]
    while (timeout < 20) {
 800057a:	79fb      	ldrb	r3, [r7, #7]
 800057c:	2b13      	cmp	r3, #19
 800057e:	d9f1      	bls.n	8000564 <getNumber_u8+0x38>
 8000580:	e000      	b.n	8000584 <getNumber_u8+0x58>
        if(uart.rxchar == ENTER_KEY) break;
 8000582:	bf00      	nop
    }

    sscanf(uart.rxbuf,"%d",&number);
 8000584:	1dbb      	adds	r3, r7, #6
 8000586:	461a      	mov	r2, r3
 8000588:	490c      	ldr	r1, [pc, #48]	; (80005bc <getNumber_u8+0x90>)
 800058a:	480b      	ldr	r0, [pc, #44]	; (80005b8 <getNumber_u8+0x8c>)
 800058c:	f003 ff08 	bl	80043a0 <siscanf>

    print_string("Number Received: ",0);
 8000590:	2100      	movs	r1, #0
 8000592:	480b      	ldr	r0, [pc, #44]	; (80005c0 <getNumber_u8+0x94>)
 8000594:	f000 fe4e 	bl	8001234 <print_string>
    PrintUnsignedDecimal(number, LF);
 8000598:	79bb      	ldrb	r3, [r7, #6]
 800059a:	b29b      	uxth	r3, r3
 800059c:	2101      	movs	r1, #1
 800059e:	4618      	mov	r0, r3
 80005a0:	f000 fe8a 	bl	80012b8 <PrintUnsignedDecimal>

    ResetRxBuffer();
 80005a4:	f000 ff5e 	bl	8001464 <ResetRxBuffer>
    return(number);
 80005a8:	79bb      	ldrb	r3, [r7, #6]
}
 80005aa:	4618      	mov	r0, r3
 80005ac:	3708      	adds	r7, #8
 80005ae:	46bd      	mov	sp, r7
 80005b0:	bd80      	pop	{r7, pc}
 80005b2:	bf00      	nop
 80005b4:	08005570 	.word	0x08005570
 80005b8:	20000098 	.word	0x20000098
 80005bc:	08005578 	.word	0x08005578
 80005c0:	0800557c 	.word	0x0800557c

080005c4 <MainMenu>:

//     return(number);

// }

void MainMenu( void ) {
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b082      	sub	sp, #8
 80005c8:	af00      	add	r7, sp, #0
     * determined, the equation y=mx+b can be rewritten in
     * order to solve for b (b = y-mx).  
     * 
     */

	uint8_t     usr_number_u8       = 0;        // Number user has entered will be stored here
 80005ca:	2300      	movs	r3, #0
 80005cc:	71fb      	strb	r3, [r7, #7]
    
    uart.rxchar = '\0';                  
 80005ce:	4b23      	ldr	r3, [pc, #140]	; (800065c <MainMenu+0x98>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    ResetTerminal();                            // Clear all the contents on the terminal
 80005d6:	f000 fef3 	bl	80013c0 <ResetTerminal>

    
    blockingDelay10ms(1);
 80005da:	2001      	movs	r0, #1
 80005dc:	f000 fb7e 	bl	8000cdc <blockingDelay10ms>
    CursorTopLeft();
 80005e0:	f000 fed6 	bl	8001390 <CursorTopLeft>
    blockingDelay10ms(1);
 80005e4:	2001      	movs	r0, #1
 80005e6:	f000 fb79 	bl	8000cdc <blockingDelay10ms>

    while(usr_number_u8 != 99) {
 80005ea:	e02e      	b.n	800064a <MainMenu+0x86>
        print_string("1 --- Manipulate DAC output.",LF);
 80005ec:	2101      	movs	r1, #1
 80005ee:	481c      	ldr	r0, [pc, #112]	; (8000660 <MainMenu+0x9c>)
 80005f0:	f000 fe20 	bl	8001234 <print_string>
        
        print_string("99 -- Exit menu.",LF);  InsertLineFeed(2);
 80005f4:	2101      	movs	r1, #1
 80005f6:	481b      	ldr	r0, [pc, #108]	; (8000664 <MainMenu+0xa0>)
 80005f8:	f000 fe1c 	bl	8001234 <print_string>
 80005fc:	2002      	movs	r0, #2
 80005fe:	f000 fef7 	bl	80013f0 <InsertLineFeed>
        
        print_string("Enter Selection:  ",0);
 8000602:	2100      	movs	r1, #0
 8000604:	4818      	ldr	r0, [pc, #96]	; (8000668 <MainMenu+0xa4>)
 8000606:	f000 fe15 	bl	8001234 <print_string>
        usr_number_u8 = getNumber_u8();
 800060a:	f7ff ff8f 	bl	800052c <getNumber_u8>
 800060e:	4603      	mov	r3, r0
 8000610:	71fb      	strb	r3, [r7, #7]

       
        switch(usr_number_u8) {
 8000612:	79fb      	ldrb	r3, [r7, #7]
 8000614:	2b01      	cmp	r3, #1
 8000616:	d002      	beq.n	800061e <MainMenu+0x5a>
 8000618:	2b63      	cmp	r3, #99	; 0x63
 800061a:	d00b      	beq.n	8000634 <MainMenu+0x70>
 800061c:	e015      	b.n	800064a <MainMenu+0x86>
            
            case 1:
                ClearScreen();
 800061e:	f000 fe9f 	bl	8001360 <ClearScreen>
                CursorTopLeft();
 8000622:	f000 feb5 	bl	8001390 <CursorTopLeft>
                InsertLineSeparator();
 8000626:	f000 ff13 	bl	8001450 <InsertLineSeparator>
                print_string("Not implemented yet",LF);
 800062a:	2101      	movs	r1, #1
 800062c:	480f      	ldr	r0, [pc, #60]	; (800066c <MainMenu+0xa8>)
 800062e:	f000 fe01 	bl	8001234 <print_string>
                
            break;
 8000632:	e00a      	b.n	800064a <MainMenu+0x86>

            case 99:
                ResetTerminal();              //Leaving menu, so clear the screen so not to confuse user
 8000634:	f000 fec4 	bl	80013c0 <ResetTerminal>
                blockingDelay10ms(1);
 8000638:	2001      	movs	r0, #1
 800063a:	f000 fb4f 	bl	8000cdc <blockingDelay10ms>
                CursorTopLeft();        //Make sure the cursor is in the Top Left position
 800063e:	f000 fea7 	bl	8001390 <CursorTopLeft>
                blockingDelay10ms(1);
 8000642:	2001      	movs	r0, #1
 8000644:	f000 fb4a 	bl	8000cdc <blockingDelay10ms>
            break;
 8000648:	bf00      	nop
    while(usr_number_u8 != 99) {
 800064a:	79fb      	ldrb	r3, [r7, #7]
 800064c:	2b63      	cmp	r3, #99	; 0x63
 800064e:	d1cd      	bne.n	80005ec <MainMenu+0x28>
        }   //END Switch(usr_number_u8)
    }  //END while(glbinfo.rxchar != 99)

}
 8000650:	bf00      	nop
 8000652:	bf00      	nop
 8000654:	3708      	adds	r7, #8
 8000656:	46bd      	mov	sp, r7
 8000658:	bd80      	pop	{r7, pc}
 800065a:	bf00      	nop
 800065c:	20000098 	.word	0x20000098
 8000660:	08005590 	.word	0x08005590
 8000664:	080055b0 	.word	0x080055b0
 8000668:	080055c4 	.word	0x080055c4
 800066c:	080055d8 	.word	0x080055d8

08000670 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000674:	f000 ff36 	bl	80014e4 <HAL_Init>

  /* USER CODE BEGIN Init */
  time.led_fast_blink = false;
 8000678:	4b2b      	ldr	r3, [pc, #172]	; (8000728 <main+0xb8>)
 800067a:	2200      	movs	r2, #0
 800067c:	725a      	strb	r2, [r3, #9]
  time.flag_10ms_tick = false;
 800067e:	4b2a      	ldr	r3, [pc, #168]	; (8000728 <main+0xb8>)
 8000680:	2200      	movs	r2, #0
 8000682:	719a      	strb	r2, [r3, #6]
  time.flag_100ms_tick = false;
 8000684:	4b28      	ldr	r3, [pc, #160]	; (8000728 <main+0xb8>)
 8000686:	2200      	movs	r2, #0
 8000688:	71da      	strb	r2, [r3, #7]
  time.flag_500ms_tick = false;
 800068a:	4b27      	ldr	r3, [pc, #156]	; (8000728 <main+0xb8>)
 800068c:	2200      	movs	r2, #0
 800068e:	721a      	strb	r2, [r3, #8]
  time.ticks10ms = 0;
 8000690:	4b25      	ldr	r3, [pc, #148]	; (8000728 <main+0xb8>)
 8000692:	2200      	movs	r2, #0
 8000694:	801a      	strh	r2, [r3, #0]
  time.ticks100ms = 0;
 8000696:	4b24      	ldr	r3, [pc, #144]	; (8000728 <main+0xb8>)
 8000698:	2200      	movs	r2, #0
 800069a:	805a      	strh	r2, [r3, #2]
  time.ticks500ms = 0;
 800069c:	4b22      	ldr	r3, [pc, #136]	; (8000728 <main+0xb8>)
 800069e:	2200      	movs	r2, #0
 80006a0:	809a      	strh	r2, [r3, #4]

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006a2:	f000 f84f 	bl	8000744 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006a6:	f000 fa07 	bl	8000ab8 <MX_GPIO_Init>
  MX_ADC1_Init();
 80006aa:	f000 f8af 	bl	800080c <MX_ADC1_Init>
  MX_DAC_Init();
 80006ae:	f000 f8eb 	bl	8000888 <MX_DAC_Init>
  MX_I2C2_Init();
 80006b2:	f000 f913 	bl	80008dc <MX_I2C2_Init>
  MX_SPI1_Init();
 80006b6:	f000 f93f 	bl	8000938 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 80006ba:	f000 f9a9 	bl	8000a10 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80006be:	f000 f9d1 	bl	8000a64 <MX_USART2_UART_Init>
  MX_TIM6_Init();
 80006c2:	f000 f96f 	bl	80009a4 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */


  // Must use Base Start IT if using interrupts
  HAL_TIM_Base_Start_IT(&htim6);
 80006c6:	4819      	ldr	r0, [pc, #100]	; (800072c <main+0xbc>)
 80006c8:	f002 fe76 	bl	80033b8 <HAL_TIM_Base_Start_IT>

  HAL_UART_Receive_IT(&huart1, &uart.rxchar, 1);
 80006cc:	2201      	movs	r2, #1
 80006ce:	4918      	ldr	r1, [pc, #96]	; (8000730 <main+0xc0>)
 80006d0:	4818      	ldr	r0, [pc, #96]	; (8000734 <main+0xc4>)
 80006d2:	f003 f9ba 	bl	8003a4a <HAL_UART_Receive_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  if(time.flag_10ms_tick) {
 80006d6:	4b14      	ldr	r3, [pc, #80]	; (8000728 <main+0xb8>)
 80006d8:	799b      	ldrb	r3, [r3, #6]
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d00d      	beq.n	80006fa <main+0x8a>
		  time.flag_10ms_tick = false;
 80006de:	4b12      	ldr	r3, [pc, #72]	; (8000728 <main+0xb8>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	719a      	strb	r2, [r3, #6]
      if(uart.rxchar == 'z') {
 80006e4:	4b14      	ldr	r3, [pc, #80]	; (8000738 <main+0xc8>)
 80006e6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80006ea:	2b7a      	cmp	r3, #122	; 0x7a
 80006ec:	d105      	bne.n	80006fa <main+0x8a>
        MainMenu();
 80006ee:	f7ff ff69 	bl	80005c4 <MainMenu>
        uart.rxchar = '\0';
 80006f2:	4b11      	ldr	r3, [pc, #68]	; (8000738 <main+0xc8>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
	  }

	  if(time.flag_100ms_tick) {
 80006fa:	4b0b      	ldr	r3, [pc, #44]	; (8000728 <main+0xb8>)
 80006fc:	79db      	ldrb	r3, [r3, #7]
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d002      	beq.n	8000708 <main+0x98>
	      time.flag_100ms_tick = false;
 8000702:	4b09      	ldr	r3, [pc, #36]	; (8000728 <main+0xb8>)
 8000704:	2200      	movs	r2, #0
 8000706:	71da      	strb	r2, [r3, #7]
	  }

	    if(time.flag_500ms_tick) {
 8000708:	4b07      	ldr	r3, [pc, #28]	; (8000728 <main+0xb8>)
 800070a:	7a1b      	ldrb	r3, [r3, #8]
 800070c:	2b00      	cmp	r3, #0
 800070e:	d0e2      	beq.n	80006d6 <main+0x66>
	      time.flag_500ms_tick = false;
 8000710:	4b05      	ldr	r3, [pc, #20]	; (8000728 <main+0xb8>)
 8000712:	2200      	movs	r2, #0
 8000714:	721a      	strb	r2, [r3, #8]
	      HAL_GPIO_TogglePin(HLTH_LED_GPIO_Port, HLTH_LED_Pin);
 8000716:	2101      	movs	r1, #1
 8000718:	4808      	ldr	r0, [pc, #32]	; (800073c <main+0xcc>)
 800071a:	f001 fdb3 	bl	8002284 <HAL_GPIO_TogglePin>
        print_string("1s interrupt",LF);
 800071e:	2101      	movs	r1, #1
 8000720:	4807      	ldr	r0, [pc, #28]	; (8000740 <main+0xd0>)
 8000722:	f000 fd87 	bl	8001234 <print_string>
	  if(time.flag_10ms_tick) {
 8000726:	e7d6      	b.n	80006d6 <main+0x66>
 8000728:	200001ec 	.word	0x200001ec
 800072c:	200001a4 	.word	0x200001a4
 8000730:	200000b9 	.word	0x200000b9
 8000734:	2000014c 	.word	0x2000014c
 8000738:	20000098 	.word	0x20000098
 800073c:	40011000 	.word	0x40011000
 8000740:	080055ec 	.word	0x080055ec

08000744 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b09c      	sub	sp, #112	; 0x70
 8000748:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800074a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800074e:	2238      	movs	r2, #56	; 0x38
 8000750:	2100      	movs	r1, #0
 8000752:	4618      	mov	r0, r3
 8000754:	f003 fdfc 	bl	8004350 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000758:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800075c:	2200      	movs	r2, #0
 800075e:	601a      	str	r2, [r3, #0]
 8000760:	605a      	str	r2, [r3, #4]
 8000762:	609a      	str	r2, [r3, #8]
 8000764:	60da      	str	r2, [r3, #12]
 8000766:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000768:	1d3b      	adds	r3, r7, #4
 800076a:	2220      	movs	r2, #32
 800076c:	2100      	movs	r1, #0
 800076e:	4618      	mov	r0, r3
 8000770:	f003 fdee 	bl	8004350 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000774:	2301      	movs	r3, #1
 8000776:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000778:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800077c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 800077e:	2301      	movs	r3, #1
 8000780:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000782:	2301      	movs	r3, #1
 8000784:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.Prediv1Source = RCC_PREDIV1_SOURCE_HSE;
 8000786:	2300      	movs	r3, #0
 8000788:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800078a:	2302      	movs	r3, #2
 800078c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800078e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000792:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000794:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000798:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL2.PLL2State = RCC_PLL_NONE;
 800079a:	2300      	movs	r3, #0
 800079c:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800079e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80007a2:	4618      	mov	r0, r3
 80007a4:	f001 fecc 	bl	8002540 <HAL_RCC_OscConfig>
 80007a8:	4603      	mov	r3, r0
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d001      	beq.n	80007b2 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80007ae:	f000 fadd 	bl	8000d6c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007b2:	230f      	movs	r3, #15
 80007b4:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007b6:	2302      	movs	r3, #2
 80007b8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007ba:	2300      	movs	r3, #0
 80007bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007c2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007c4:	2300      	movs	r3, #0
 80007c6:	637b      	str	r3, [r7, #52]	; 0x34

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007cc:	2102      	movs	r1, #2
 80007ce:	4618      	mov	r0, r3
 80007d0:	f002 f9cc 	bl	8002b6c <HAL_RCC_ClockConfig>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d001      	beq.n	80007de <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80007da:	f000 fac7 	bl	8000d6c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80007de:	2302      	movs	r3, #2
 80007e0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80007e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80007e6:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007e8:	1d3b      	adds	r3, r7, #4
 80007ea:	4618      	mov	r0, r3
 80007ec:	f002 fbde 	bl	8002fac <HAL_RCCEx_PeriphCLKConfig>
 80007f0:	4603      	mov	r3, r0
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d001      	beq.n	80007fa <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80007f6:	f000 fab9 	bl	8000d6c <Error_Handler>
  }
  /** Configure the Systick interrupt time
  */
  __HAL_RCC_PLLI2S_ENABLE();
 80007fa:	4b03      	ldr	r3, [pc, #12]	; (8000808 <SystemClock_Config+0xc4>)
 80007fc:	2201      	movs	r2, #1
 80007fe:	601a      	str	r2, [r3, #0]
}
 8000800:	bf00      	nop
 8000802:	3770      	adds	r7, #112	; 0x70
 8000804:	46bd      	mov	sp, r7
 8000806:	bd80      	pop	{r7, pc}
 8000808:	42420070 	.word	0x42420070

0800080c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b084      	sub	sp, #16
 8000810:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000812:	1d3b      	adds	r3, r7, #4
 8000814:	2200      	movs	r2, #0
 8000816:	601a      	str	r2, [r3, #0]
 8000818:	605a      	str	r2, [r3, #4]
 800081a:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 800081c:	4b18      	ldr	r3, [pc, #96]	; (8000880 <MX_ADC1_Init+0x74>)
 800081e:	4a19      	ldr	r2, [pc, #100]	; (8000884 <MX_ADC1_Init+0x78>)
 8000820:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000822:	4b17      	ldr	r3, [pc, #92]	; (8000880 <MX_ADC1_Init+0x74>)
 8000824:	2200      	movs	r2, #0
 8000826:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000828:	4b15      	ldr	r3, [pc, #84]	; (8000880 <MX_ADC1_Init+0x74>)
 800082a:	2200      	movs	r2, #0
 800082c:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800082e:	4b14      	ldr	r3, [pc, #80]	; (8000880 <MX_ADC1_Init+0x74>)
 8000830:	2200      	movs	r2, #0
 8000832:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000834:	4b12      	ldr	r3, [pc, #72]	; (8000880 <MX_ADC1_Init+0x74>)
 8000836:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800083a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800083c:	4b10      	ldr	r3, [pc, #64]	; (8000880 <MX_ADC1_Init+0x74>)
 800083e:	2200      	movs	r2, #0
 8000840:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000842:	4b0f      	ldr	r3, [pc, #60]	; (8000880 <MX_ADC1_Init+0x74>)
 8000844:	2201      	movs	r2, #1
 8000846:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000848:	480d      	ldr	r0, [pc, #52]	; (8000880 <MX_ADC1_Init+0x74>)
 800084a:	f000 fead 	bl	80015a8 <HAL_ADC_Init>
 800084e:	4603      	mov	r3, r0
 8000850:	2b00      	cmp	r3, #0
 8000852:	d001      	beq.n	8000858 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000854:	f000 fa8a 	bl	8000d6c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000858:	2300      	movs	r3, #0
 800085a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800085c:	2301      	movs	r3, #1
 800085e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000860:	2300      	movs	r3, #0
 8000862:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000864:	1d3b      	adds	r3, r7, #4
 8000866:	4619      	mov	r1, r3
 8000868:	4805      	ldr	r0, [pc, #20]	; (8000880 <MX_ADC1_Init+0x74>)
 800086a:	f000 ff75 	bl	8001758 <HAL_ADC_ConfigChannel>
 800086e:	4603      	mov	r3, r0
 8000870:	2b00      	cmp	r3, #0
 8000872:	d001      	beq.n	8000878 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000874:	f000 fa7a 	bl	8000d6c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000878:	bf00      	nop
 800087a:	3710      	adds	r7, #16
 800087c:	46bd      	mov	sp, r7
 800087e:	bd80      	pop	{r7, pc}
 8000880:	2000011c 	.word	0x2000011c
 8000884:	40012400 	.word	0x40012400

08000888 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b082      	sub	sp, #8
 800088c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800088e:	463b      	mov	r3, r7
 8000890:	2200      	movs	r2, #0
 8000892:	601a      	str	r2, [r3, #0]
 8000894:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8000896:	4b0f      	ldr	r3, [pc, #60]	; (80008d4 <MX_DAC_Init+0x4c>)
 8000898:	4a0f      	ldr	r2, [pc, #60]	; (80008d8 <MX_DAC_Init+0x50>)
 800089a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 800089c:	480d      	ldr	r0, [pc, #52]	; (80008d4 <MX_DAC_Init+0x4c>)
 800089e:	f001 f9a2 	bl	8001be6 <HAL_DAC_Init>
 80008a2:	4603      	mov	r3, r0
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d001      	beq.n	80008ac <MX_DAC_Init+0x24>
  {
    Error_Handler();
 80008a8:	f000 fa60 	bl	8000d6c <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80008ac:	2300      	movs	r3, #0
 80008ae:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80008b0:	2300      	movs	r3, #0
 80008b2:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80008b4:	463b      	mov	r3, r7
 80008b6:	2200      	movs	r2, #0
 80008b8:	4619      	mov	r1, r3
 80008ba:	4806      	ldr	r0, [pc, #24]	; (80008d4 <MX_DAC_Init+0x4c>)
 80008bc:	f001 f9b5 	bl	8001c2a <HAL_DAC_ConfigChannel>
 80008c0:	4603      	mov	r3, r0
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d001      	beq.n	80008ca <MX_DAC_Init+0x42>
  {
    Error_Handler();
 80008c6:	f000 fa51 	bl	8000d6c <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 80008ca:	bf00      	nop
 80008cc:	3708      	adds	r7, #8
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	bf00      	nop
 80008d4:	20000190 	.word	0x20000190
 80008d8:	40007400 	.word	0x40007400

080008dc <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80008e0:	4b12      	ldr	r3, [pc, #72]	; (800092c <MX_I2C2_Init+0x50>)
 80008e2:	4a13      	ldr	r2, [pc, #76]	; (8000930 <MX_I2C2_Init+0x54>)
 80008e4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80008e6:	4b11      	ldr	r3, [pc, #68]	; (800092c <MX_I2C2_Init+0x50>)
 80008e8:	4a12      	ldr	r2, [pc, #72]	; (8000934 <MX_I2C2_Init+0x58>)
 80008ea:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80008ec:	4b0f      	ldr	r3, [pc, #60]	; (800092c <MX_I2C2_Init+0x50>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80008f2:	4b0e      	ldr	r3, [pc, #56]	; (800092c <MX_I2C2_Init+0x50>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008f8:	4b0c      	ldr	r3, [pc, #48]	; (800092c <MX_I2C2_Init+0x50>)
 80008fa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80008fe:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000900:	4b0a      	ldr	r3, [pc, #40]	; (800092c <MX_I2C2_Init+0x50>)
 8000902:	2200      	movs	r2, #0
 8000904:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000906:	4b09      	ldr	r3, [pc, #36]	; (800092c <MX_I2C2_Init+0x50>)
 8000908:	2200      	movs	r2, #0
 800090a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800090c:	4b07      	ldr	r3, [pc, #28]	; (800092c <MX_I2C2_Init+0x50>)
 800090e:	2200      	movs	r2, #0
 8000910:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000912:	4b06      	ldr	r3, [pc, #24]	; (800092c <MX_I2C2_Init+0x50>)
 8000914:	2200      	movs	r2, #0
 8000916:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000918:	4804      	ldr	r0, [pc, #16]	; (800092c <MX_I2C2_Init+0x50>)
 800091a:	f001 fccd 	bl	80022b8 <HAL_I2C_Init>
 800091e:	4603      	mov	r3, r0
 8000920:	2b00      	cmp	r3, #0
 8000922:	d001      	beq.n	8000928 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000924:	f000 fa22 	bl	8000d6c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000928:	bf00      	nop
 800092a:	bd80      	pop	{r7, pc}
 800092c:	200000c8 	.word	0x200000c8
 8000930:	40005800 	.word	0x40005800
 8000934:	000186a0 	.word	0x000186a0

08000938 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800093c:	4b17      	ldr	r3, [pc, #92]	; (800099c <MX_SPI1_Init+0x64>)
 800093e:	4a18      	ldr	r2, [pc, #96]	; (80009a0 <MX_SPI1_Init+0x68>)
 8000940:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000942:	4b16      	ldr	r3, [pc, #88]	; (800099c <MX_SPI1_Init+0x64>)
 8000944:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000948:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800094a:	4b14      	ldr	r3, [pc, #80]	; (800099c <MX_SPI1_Init+0x64>)
 800094c:	2200      	movs	r2, #0
 800094e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000950:	4b12      	ldr	r3, [pc, #72]	; (800099c <MX_SPI1_Init+0x64>)
 8000952:	2200      	movs	r2, #0
 8000954:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000956:	4b11      	ldr	r3, [pc, #68]	; (800099c <MX_SPI1_Init+0x64>)
 8000958:	2200      	movs	r2, #0
 800095a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800095c:	4b0f      	ldr	r3, [pc, #60]	; (800099c <MX_SPI1_Init+0x64>)
 800095e:	2200      	movs	r2, #0
 8000960:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000962:	4b0e      	ldr	r3, [pc, #56]	; (800099c <MX_SPI1_Init+0x64>)
 8000964:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000968:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 800096a:	4b0c      	ldr	r3, [pc, #48]	; (800099c <MX_SPI1_Init+0x64>)
 800096c:	2230      	movs	r2, #48	; 0x30
 800096e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000970:	4b0a      	ldr	r3, [pc, #40]	; (800099c <MX_SPI1_Init+0x64>)
 8000972:	2200      	movs	r2, #0
 8000974:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000976:	4b09      	ldr	r3, [pc, #36]	; (800099c <MX_SPI1_Init+0x64>)
 8000978:	2200      	movs	r2, #0
 800097a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800097c:	4b07      	ldr	r3, [pc, #28]	; (800099c <MX_SPI1_Init+0x64>)
 800097e:	2200      	movs	r2, #0
 8000980:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000982:	4b06      	ldr	r3, [pc, #24]	; (800099c <MX_SPI1_Init+0x64>)
 8000984:	220a      	movs	r2, #10
 8000986:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000988:	4804      	ldr	r0, [pc, #16]	; (800099c <MX_SPI1_Init+0x64>)
 800098a:	f002 fc41 	bl	8003210 <HAL_SPI_Init>
 800098e:	4603      	mov	r3, r0
 8000990:	2b00      	cmp	r3, #0
 8000992:	d001      	beq.n	8000998 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000994:	f000 f9ea 	bl	8000d6c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000998:	bf00      	nop
 800099a:	bd80      	pop	{r7, pc}
 800099c:	200001f8 	.word	0x200001f8
 80009a0:	40013000 	.word	0x40013000

080009a4 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b082      	sub	sp, #8
 80009a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009aa:	463b      	mov	r3, r7
 80009ac:	2200      	movs	r2, #0
 80009ae:	601a      	str	r2, [r3, #0]
 80009b0:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80009b2:	4b15      	ldr	r3, [pc, #84]	; (8000a08 <MX_TIM6_Init+0x64>)
 80009b4:	4a15      	ldr	r2, [pc, #84]	; (8000a0c <MX_TIM6_Init+0x68>)
 80009b6:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 72-1;
 80009b8:	4b13      	ldr	r3, [pc, #76]	; (8000a08 <MX_TIM6_Init+0x64>)
 80009ba:	2247      	movs	r2, #71	; 0x47
 80009bc:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009be:	4b12      	ldr	r3, [pc, #72]	; (8000a08 <MX_TIM6_Init+0x64>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 10000-1;
 80009c4:	4b10      	ldr	r3, [pc, #64]	; (8000a08 <MX_TIM6_Init+0x64>)
 80009c6:	f242 720f 	movw	r2, #9999	; 0x270f
 80009ca:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80009cc:	4b0e      	ldr	r3, [pc, #56]	; (8000a08 <MX_TIM6_Init+0x64>)
 80009ce:	2280      	movs	r2, #128	; 0x80
 80009d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80009d2:	480d      	ldr	r0, [pc, #52]	; (8000a08 <MX_TIM6_Init+0x64>)
 80009d4:	f002 fca0 	bl	8003318 <HAL_TIM_Base_Init>
 80009d8:	4603      	mov	r3, r0
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d001      	beq.n	80009e2 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 80009de:	f000 f9c5 	bl	8000d6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009e2:	2300      	movs	r3, #0
 80009e4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009e6:	2300      	movs	r3, #0
 80009e8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80009ea:	463b      	mov	r3, r7
 80009ec:	4619      	mov	r1, r3
 80009ee:	4806      	ldr	r0, [pc, #24]	; (8000a08 <MX_TIM6_Init+0x64>)
 80009f0:	f002 fed4 	bl	800379c <HAL_TIMEx_MasterConfigSynchronization>
 80009f4:	4603      	mov	r3, r0
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d001      	beq.n	80009fe <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 80009fa:	f000 f9b7 	bl	8000d6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80009fe:	bf00      	nop
 8000a00:	3708      	adds	r7, #8
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	200001a4 	.word	0x200001a4
 8000a0c:	40001000 	.word	0x40001000

08000a10 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000a14:	4b11      	ldr	r3, [pc, #68]	; (8000a5c <MX_USART1_UART_Init+0x4c>)
 8000a16:	4a12      	ldr	r2, [pc, #72]	; (8000a60 <MX_USART1_UART_Init+0x50>)
 8000a18:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000a1a:	4b10      	ldr	r3, [pc, #64]	; (8000a5c <MX_USART1_UART_Init+0x4c>)
 8000a1c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a20:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a22:	4b0e      	ldr	r3, [pc, #56]	; (8000a5c <MX_USART1_UART_Init+0x4c>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000a28:	4b0c      	ldr	r3, [pc, #48]	; (8000a5c <MX_USART1_UART_Init+0x4c>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000a2e:	4b0b      	ldr	r3, [pc, #44]	; (8000a5c <MX_USART1_UART_Init+0x4c>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000a34:	4b09      	ldr	r3, [pc, #36]	; (8000a5c <MX_USART1_UART_Init+0x4c>)
 8000a36:	220c      	movs	r2, #12
 8000a38:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a3a:	4b08      	ldr	r3, [pc, #32]	; (8000a5c <MX_USART1_UART_Init+0x4c>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a40:	4b06      	ldr	r3, [pc, #24]	; (8000a5c <MX_USART1_UART_Init+0x4c>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000a46:	4805      	ldr	r0, [pc, #20]	; (8000a5c <MX_USART1_UART_Init+0x4c>)
 8000a48:	f002 ff20 	bl	800388c <HAL_UART_Init>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d001      	beq.n	8000a56 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000a52:	f000 f98b 	bl	8000d6c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000a56:	bf00      	nop
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	2000014c 	.word	0x2000014c
 8000a60:	40013800 	.word	0x40013800

08000a64 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a68:	4b11      	ldr	r3, [pc, #68]	; (8000ab0 <MX_USART2_UART_Init+0x4c>)
 8000a6a:	4a12      	ldr	r2, [pc, #72]	; (8000ab4 <MX_USART2_UART_Init+0x50>)
 8000a6c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000a6e:	4b10      	ldr	r3, [pc, #64]	; (8000ab0 <MX_USART2_UART_Init+0x4c>)
 8000a70:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000a74:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a76:	4b0e      	ldr	r3, [pc, #56]	; (8000ab0 <MX_USART2_UART_Init+0x4c>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a7c:	4b0c      	ldr	r3, [pc, #48]	; (8000ab0 <MX_USART2_UART_Init+0x4c>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a82:	4b0b      	ldr	r3, [pc, #44]	; (8000ab0 <MX_USART2_UART_Init+0x4c>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a88:	4b09      	ldr	r3, [pc, #36]	; (8000ab0 <MX_USART2_UART_Init+0x4c>)
 8000a8a:	220c      	movs	r2, #12
 8000a8c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a8e:	4b08      	ldr	r3, [pc, #32]	; (8000ab0 <MX_USART2_UART_Init+0x4c>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a94:	4b06      	ldr	r3, [pc, #24]	; (8000ab0 <MX_USART2_UART_Init+0x4c>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a9a:	4805      	ldr	r0, [pc, #20]	; (8000ab0 <MX_USART2_UART_Init+0x4c>)
 8000a9c:	f002 fef6 	bl	800388c <HAL_UART_Init>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d001      	beq.n	8000aaa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000aa6:	f000 f961 	bl	8000d6c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000aaa:	bf00      	nop
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	20000250 	.word	0x20000250
 8000ab4:	40004400 	.word	0x40004400

08000ab8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b088      	sub	sp, #32
 8000abc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000abe:	f107 0310 	add.w	r3, r7, #16
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	601a      	str	r2, [r3, #0]
 8000ac6:	605a      	str	r2, [r3, #4]
 8000ac8:	609a      	str	r2, [r3, #8]
 8000aca:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000acc:	4b3c      	ldr	r3, [pc, #240]	; (8000bc0 <MX_GPIO_Init+0x108>)
 8000ace:	699b      	ldr	r3, [r3, #24]
 8000ad0:	4a3b      	ldr	r2, [pc, #236]	; (8000bc0 <MX_GPIO_Init+0x108>)
 8000ad2:	f043 0310 	orr.w	r3, r3, #16
 8000ad6:	6193      	str	r3, [r2, #24]
 8000ad8:	4b39      	ldr	r3, [pc, #228]	; (8000bc0 <MX_GPIO_Init+0x108>)
 8000ada:	699b      	ldr	r3, [r3, #24]
 8000adc:	f003 0310 	and.w	r3, r3, #16
 8000ae0:	60fb      	str	r3, [r7, #12]
 8000ae2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ae4:	4b36      	ldr	r3, [pc, #216]	; (8000bc0 <MX_GPIO_Init+0x108>)
 8000ae6:	699b      	ldr	r3, [r3, #24]
 8000ae8:	4a35      	ldr	r2, [pc, #212]	; (8000bc0 <MX_GPIO_Init+0x108>)
 8000aea:	f043 0320 	orr.w	r3, r3, #32
 8000aee:	6193      	str	r3, [r2, #24]
 8000af0:	4b33      	ldr	r3, [pc, #204]	; (8000bc0 <MX_GPIO_Init+0x108>)
 8000af2:	699b      	ldr	r3, [r3, #24]
 8000af4:	f003 0320 	and.w	r3, r3, #32
 8000af8:	60bb      	str	r3, [r7, #8]
 8000afa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000afc:	4b30      	ldr	r3, [pc, #192]	; (8000bc0 <MX_GPIO_Init+0x108>)
 8000afe:	699b      	ldr	r3, [r3, #24]
 8000b00:	4a2f      	ldr	r2, [pc, #188]	; (8000bc0 <MX_GPIO_Init+0x108>)
 8000b02:	f043 0304 	orr.w	r3, r3, #4
 8000b06:	6193      	str	r3, [r2, #24]
 8000b08:	4b2d      	ldr	r3, [pc, #180]	; (8000bc0 <MX_GPIO_Init+0x108>)
 8000b0a:	699b      	ldr	r3, [r3, #24]
 8000b0c:	f003 0304 	and.w	r3, r3, #4
 8000b10:	607b      	str	r3, [r7, #4]
 8000b12:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b14:	4b2a      	ldr	r3, [pc, #168]	; (8000bc0 <MX_GPIO_Init+0x108>)
 8000b16:	699b      	ldr	r3, [r3, #24]
 8000b18:	4a29      	ldr	r2, [pc, #164]	; (8000bc0 <MX_GPIO_Init+0x108>)
 8000b1a:	f043 0308 	orr.w	r3, r3, #8
 8000b1e:	6193      	str	r3, [r2, #24]
 8000b20:	4b27      	ldr	r3, [pc, #156]	; (8000bc0 <MX_GPIO_Init+0x108>)
 8000b22:	699b      	ldr	r3, [r3, #24]
 8000b24:	f003 0308 	and.w	r3, r3, #8
 8000b28:	603b      	str	r3, [r7, #0]
 8000b2a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(HLTH_LED_GPIO_Port, HLTH_LED_Pin, GPIO_PIN_RESET);
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	2101      	movs	r1, #1
 8000b30:	4824      	ldr	r0, [pc, #144]	; (8000bc4 <MX_GPIO_Init+0x10c>)
 8000b32:	f001 fb8f 	bl	8002254 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, EXT_LED_1_Pin|EXT_LED_2_Pin|EXT_LED_3_Pin, GPIO_PIN_SET);
 8000b36:	2201      	movs	r2, #1
 8000b38:	2170      	movs	r1, #112	; 0x70
 8000b3a:	4822      	ldr	r0, [pc, #136]	; (8000bc4 <MX_GPIO_Init+0x10c>)
 8000b3c:	f001 fb8a 	bl	8002254 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CH1_8_ANSW_CS_n_Pin|CH1_8_ADC_CS_n_Pin|CH9_12_ADC_CS_n_Pin|CH9_12_ANSW_CS_n_Pin
 8000b40:	2200      	movs	r2, #0
 8000b42:	f24f 0140 	movw	r1, #61504	; 0xf040
 8000b46:	4820      	ldr	r0, [pc, #128]	; (8000bc8 <MX_GPIO_Init+0x110>)
 8000b48:	f001 fb84 	bl	8002254 <HAL_GPIO_WritePin>
                          |XB_RST_n_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : HW_REV_0_Pin HW_REV_1_Pin HW_REV_2_Pin PBTN_1_Pin
                           pbtn_2_Pin */
  GPIO_InitStruct.Pin = HW_REV_0_Pin|HW_REV_1_Pin|HW_REV_2_Pin|PBTN_1_Pin
 8000b4c:	f24e 0306 	movw	r3, #57350	; 0xe006
 8000b50:	613b      	str	r3, [r7, #16]
                          |pbtn_2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b52:	2300      	movs	r3, #0
 8000b54:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b56:	2300      	movs	r3, #0
 8000b58:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b5a:	f107 0310 	add.w	r3, r7, #16
 8000b5e:	4619      	mov	r1, r3
 8000b60:	4818      	ldr	r0, [pc, #96]	; (8000bc4 <MX_GPIO_Init+0x10c>)
 8000b62:	f001 f9f3 	bl	8001f4c <HAL_GPIO_Init>

  /*Configure GPIO pins : HLTH_LED_Pin EXT_LED_1_Pin EXT_LED_2_Pin EXT_LED_3_Pin */
  GPIO_InitStruct.Pin = HLTH_LED_Pin|EXT_LED_1_Pin|EXT_LED_2_Pin|EXT_LED_3_Pin;
 8000b66:	2371      	movs	r3, #113	; 0x71
 8000b68:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b6a:	2301      	movs	r3, #1
 8000b6c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b72:	2302      	movs	r3, #2
 8000b74:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b76:	f107 0310 	add.w	r3, r7, #16
 8000b7a:	4619      	mov	r1, r3
 8000b7c:	4811      	ldr	r0, [pc, #68]	; (8000bc4 <MX_GPIO_Init+0x10c>)
 8000b7e:	f001 f9e5 	bl	8001f4c <HAL_GPIO_Init>

  /*Configure GPIO pins : CH1_8_ANSW_CS_n_Pin CH1_8_ADC_CS_n_Pin CH9_12_ADC_CS_n_Pin CH9_12_ANSW_CS_n_Pin
                           XB_RST_n_Pin */
  GPIO_InitStruct.Pin = CH1_8_ANSW_CS_n_Pin|CH1_8_ADC_CS_n_Pin|CH9_12_ADC_CS_n_Pin|CH9_12_ANSW_CS_n_Pin
 8000b82:	f24f 0340 	movw	r3, #61504	; 0xf040
 8000b86:	613b      	str	r3, [r7, #16]
                          |XB_RST_n_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b88:	2301      	movs	r3, #1
 8000b8a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b90:	2302      	movs	r3, #2
 8000b92:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b94:	f107 0310 	add.w	r3, r7, #16
 8000b98:	4619      	mov	r1, r3
 8000b9a:	480b      	ldr	r0, [pc, #44]	; (8000bc8 <MX_GPIO_Init+0x110>)
 8000b9c:	f001 f9d6 	bl	8001f4c <HAL_GPIO_Init>

  /*Configure GPIO pin : XB_ON_Pin */
  GPIO_InitStruct.Pin = XB_ON_Pin;
 8000ba0:	2320      	movs	r3, #32
 8000ba2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(XB_ON_GPIO_Port, &GPIO_InitStruct);
 8000bac:	f107 0310 	add.w	r3, r7, #16
 8000bb0:	4619      	mov	r1, r3
 8000bb2:	4805      	ldr	r0, [pc, #20]	; (8000bc8 <MX_GPIO_Init+0x110>)
 8000bb4:	f001 f9ca 	bl	8001f4c <HAL_GPIO_Init>

}
 8000bb8:	bf00      	nop
 8000bba:	3720      	adds	r7, #32
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bd80      	pop	{r7, pc}
 8000bc0:	40021000 	.word	0x40021000
 8000bc4:	40011000 	.word	0x40011000
 8000bc8:	40010c00 	.word	0x40010c00

08000bcc <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
/********************************************//**
 *  @brief Handle Timer Interrupts 
 ***********************************************/
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000bcc:	b480      	push	{r7}
 8000bce:	b083      	sub	sp, #12
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
	if(htim == &htim6){
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	4a1d      	ldr	r2, [pc, #116]	; (8000c4c <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000bd8:	4293      	cmp	r3, r2
 8000bda:	d132      	bne.n	8000c42 <HAL_TIM_PeriodElapsedCallback+0x76>
			time.flag_10ms_tick = true;
 8000bdc:	4b1c      	ldr	r3, [pc, #112]	; (8000c50 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000bde:	2201      	movs	r2, #1
 8000be0:	719a      	strb	r2, [r3, #6]

		 if(time.ticks10ms == 9) {
 8000be2:	4b1b      	ldr	r3, [pc, #108]	; (8000c50 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000be4:	881b      	ldrh	r3, [r3, #0]
 8000be6:	2b09      	cmp	r3, #9
 8000be8:	d125      	bne.n	8000c36 <HAL_TIM_PeriodElapsedCallback+0x6a>
		   time.ticks10ms = 0;
 8000bea:	4b19      	ldr	r3, [pc, #100]	; (8000c50 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	801a      	strh	r2, [r3, #0]
		   time.flag_100ms_tick = true;
 8000bf0:	4b17      	ldr	r3, [pc, #92]	; (8000c50 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000bf2:	2201      	movs	r2, #1
 8000bf4:	71da      	strb	r2, [r3, #7]

		   if(time.ticks100ms == 4) {
 8000bf6:	4b16      	ldr	r3, [pc, #88]	; (8000c50 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000bf8:	885b      	ldrh	r3, [r3, #2]
 8000bfa:	2b04      	cmp	r3, #4
 8000bfc:	d114      	bne.n	8000c28 <HAL_TIM_PeriodElapsedCallback+0x5c>
			 time.ticks100ms = 0;
 8000bfe:	4b14      	ldr	r3, [pc, #80]	; (8000c50 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	805a      	strh	r2, [r3, #2]
			 time.flag_500ms_tick = true;
 8000c04:	4b12      	ldr	r3, [pc, #72]	; (8000c50 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000c06:	2201      	movs	r2, #1
 8000c08:	721a      	strb	r2, [r3, #8]

			 if(time.ticks500ms == 119)										// One minute worth of half seconds
 8000c0a:	4b11      	ldr	r3, [pc, #68]	; (8000c50 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000c0c:	889b      	ldrh	r3, [r3, #4]
 8000c0e:	2b77      	cmp	r3, #119	; 0x77
 8000c10:	d103      	bne.n	8000c1a <HAL_TIM_PeriodElapsedCallback+0x4e>
			   time.ticks500ms = 0;
 8000c12:	4b0f      	ldr	r3, [pc, #60]	; (8000c50 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	809a      	strh	r2, [r3, #4]
		 else {
		   time.ticks10ms += 1;
		 }

		}
}
 8000c18:	e013      	b.n	8000c42 <HAL_TIM_PeriodElapsedCallback+0x76>
			   time.ticks500ms += 1;
 8000c1a:	4b0d      	ldr	r3, [pc, #52]	; (8000c50 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000c1c:	889b      	ldrh	r3, [r3, #4]
 8000c1e:	3301      	adds	r3, #1
 8000c20:	b29a      	uxth	r2, r3
 8000c22:	4b0b      	ldr	r3, [pc, #44]	; (8000c50 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000c24:	809a      	strh	r2, [r3, #4]
}
 8000c26:	e00c      	b.n	8000c42 <HAL_TIM_PeriodElapsedCallback+0x76>
			   time.ticks100ms += 1;
 8000c28:	4b09      	ldr	r3, [pc, #36]	; (8000c50 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000c2a:	885b      	ldrh	r3, [r3, #2]
 8000c2c:	3301      	adds	r3, #1
 8000c2e:	b29a      	uxth	r2, r3
 8000c30:	4b07      	ldr	r3, [pc, #28]	; (8000c50 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000c32:	805a      	strh	r2, [r3, #2]
}
 8000c34:	e005      	b.n	8000c42 <HAL_TIM_PeriodElapsedCallback+0x76>
		   time.ticks10ms += 1;
 8000c36:	4b06      	ldr	r3, [pc, #24]	; (8000c50 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000c38:	881b      	ldrh	r3, [r3, #0]
 8000c3a:	3301      	adds	r3, #1
 8000c3c:	b29a      	uxth	r2, r3
 8000c3e:	4b04      	ldr	r3, [pc, #16]	; (8000c50 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000c40:	801a      	strh	r2, [r3, #0]
}
 8000c42:	bf00      	nop
 8000c44:	370c      	adds	r7, #12
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bc80      	pop	{r7}
 8000c4a:	4770      	bx	lr
 8000c4c:	200001a4 	.word	0x200001a4
 8000c50:	200001ec 	.word	0x200001ec

08000c54 <HAL_UART_RxCpltCallback>:

/********************************************//**
 *  @brief Handle UART RX interrupts 
 ***********************************************/
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b082      	sub	sp, #8
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
	if(huart == &huart1) {
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	4a1b      	ldr	r2, [pc, #108]	; (8000ccc <HAL_UART_RxCpltCallback+0x78>)
 8000c60:	4293      	cmp	r3, r2
 8000c62:	d12f      	bne.n	8000cc4 <HAL_UART_RxCpltCallback+0x70>

    uart.rxbuf[uart.producer_index] = uart.rxchar;          // Load this byte into rx buffer  
 8000c64:	4b1a      	ldr	r3, [pc, #104]	; (8000cd0 <HAL_UART_RxCpltCallback+0x7c>)
 8000c66:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8000c6a:	461a      	mov	r2, r3
 8000c6c:	4b18      	ldr	r3, [pc, #96]	; (8000cd0 <HAL_UART_RxCpltCallback+0x7c>)
 8000c6e:	f893 1021 	ldrb.w	r1, [r3, #33]	; 0x21
 8000c72:	4b17      	ldr	r3, [pc, #92]	; (8000cd0 <HAL_UART_RxCpltCallback+0x7c>)
 8000c74:	5499      	strb	r1, [r3, r2]
    uart.byte_counter++;                                                   //Increase data counter
 8000c76:	4b16      	ldr	r3, [pc, #88]	; (8000cd0 <HAL_UART_RxCpltCallback+0x7c>)
 8000c78:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8000c7c:	3301      	adds	r3, #1
 8000c7e:	b2da      	uxtb	r2, r3
 8000c80:	4b13      	ldr	r3, [pc, #76]	; (8000cd0 <HAL_UART_RxCpltCallback+0x7c>)
 8000c82:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    (uart.producer_index >= MAX_RX_BUF_INDEX) ? (uart.producer_index = 0):(uart.producer_index++);       
 8000c86:	4b12      	ldr	r3, [pc, #72]	; (8000cd0 <HAL_UART_RxCpltCallback+0x7c>)
 8000c88:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8000c8c:	2b1f      	cmp	r3, #31
 8000c8e:	d904      	bls.n	8000c9a <HAL_UART_RxCpltCallback+0x46>
 8000c90:	4b0f      	ldr	r3, [pc, #60]	; (8000cd0 <HAL_UART_RxCpltCallback+0x7c>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 8000c98:	e007      	b.n	8000caa <HAL_UART_RxCpltCallback+0x56>
 8000c9a:	4b0d      	ldr	r3, [pc, #52]	; (8000cd0 <HAL_UART_RxCpltCallback+0x7c>)
 8000c9c:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8000ca0:	3301      	adds	r3, #1
 8000ca2:	b2da      	uxtb	r2, r3
 8000ca4:	4b0a      	ldr	r3, [pc, #40]	; (8000cd0 <HAL_UART_RxCpltCallback+0x7c>)
 8000ca6:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
        
		print_string("Character Received: ",0);
 8000caa:	2100      	movs	r1, #0
 8000cac:	4809      	ldr	r0, [pc, #36]	; (8000cd4 <HAL_UART_RxCpltCallback+0x80>)
 8000cae:	f000 fac1 	bl	8001234 <print_string>
		print_string(&uart.rxchar,LF);
 8000cb2:	2101      	movs	r1, #1
 8000cb4:	4808      	ldr	r0, [pc, #32]	; (8000cd8 <HAL_UART_RxCpltCallback+0x84>)
 8000cb6:	f000 fabd 	bl	8001234 <print_string>
		// Restart the interrupt routine
		HAL_UART_Receive_IT(&huart1, &uart.rxchar, 1);
 8000cba:	2201      	movs	r2, #1
 8000cbc:	4906      	ldr	r1, [pc, #24]	; (8000cd8 <HAL_UART_RxCpltCallback+0x84>)
 8000cbe:	4803      	ldr	r0, [pc, #12]	; (8000ccc <HAL_UART_RxCpltCallback+0x78>)
 8000cc0:	f002 fec3 	bl	8003a4a <HAL_UART_Receive_IT>
	}
}
 8000cc4:	bf00      	nop
 8000cc6:	3708      	adds	r7, #8
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	bd80      	pop	{r7, pc}
 8000ccc:	2000014c 	.word	0x2000014c
 8000cd0:	20000098 	.word	0x20000098
 8000cd4:	080055fc 	.word	0x080055fc
 8000cd8:	200000b9 	.word	0x200000b9

08000cdc <blockingDelay10ms>:

/********************************************//**
 *  @brief Blocking delay -- 10ms increments  
 ***********************************************/
void blockingDelay10ms( uint16_t ticks ) {
 8000cdc:	b480      	push	{r7}
 8000cde:	b085      	sub	sp, #20
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	80fb      	strh	r3, [r7, #6]
    uint16_t i = 0;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	81fb      	strh	r3, [r7, #14]
    uint16_t tick = 0;  //Used to lock time value
 8000cea:	2300      	movs	r3, #0
 8000cec:	81bb      	strh	r3, [r7, #12]
    for(i = ticks; i > 0; i--) {
 8000cee:	88fb      	ldrh	r3, [r7, #6]
 8000cf0:	81fb      	strh	r3, [r7, #14]
 8000cf2:	e00b      	b.n	8000d0c <blockingDelay10ms+0x30>
        tick = time.ticks10ms;
 8000cf4:	4b0a      	ldr	r3, [pc, #40]	; (8000d20 <blockingDelay10ms+0x44>)
 8000cf6:	881b      	ldrh	r3, [r3, #0]
 8000cf8:	81bb      	strh	r3, [r7, #12]
        while (tick == time.ticks10ms);  //Wait for timer to advance
 8000cfa:	bf00      	nop
 8000cfc:	4b08      	ldr	r3, [pc, #32]	; (8000d20 <blockingDelay10ms+0x44>)
 8000cfe:	881b      	ldrh	r3, [r3, #0]
 8000d00:	89ba      	ldrh	r2, [r7, #12]
 8000d02:	429a      	cmp	r2, r3
 8000d04:	d0fa      	beq.n	8000cfc <blockingDelay10ms+0x20>
    for(i = ticks; i > 0; i--) {
 8000d06:	89fb      	ldrh	r3, [r7, #14]
 8000d08:	3b01      	subs	r3, #1
 8000d0a:	81fb      	strh	r3, [r7, #14]
 8000d0c:	89fb      	ldrh	r3, [r7, #14]
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d1f0      	bne.n	8000cf4 <blockingDelay10ms+0x18>
    }
}
 8000d12:	bf00      	nop
 8000d14:	bf00      	nop
 8000d16:	3714      	adds	r7, #20
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bc80      	pop	{r7}
 8000d1c:	4770      	bx	lr
 8000d1e:	bf00      	nop
 8000d20:	200001ec 	.word	0x200001ec

08000d24 <blockingDelay100ms>:

void blockingDelay100ms( uint16_t ticks ) {
 8000d24:	b480      	push	{r7}
 8000d26:	b085      	sub	sp, #20
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	80fb      	strh	r3, [r7, #6]
    uint16_t i = 0;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	81fb      	strh	r3, [r7, #14]
    uint16_t tick = 0;  //Used to lock time value
 8000d32:	2300      	movs	r3, #0
 8000d34:	81bb      	strh	r3, [r7, #12]
    for(i = ticks; i > 0; i--) {
 8000d36:	88fb      	ldrh	r3, [r7, #6]
 8000d38:	81fb      	strh	r3, [r7, #14]
 8000d3a:	e00b      	b.n	8000d54 <blockingDelay100ms+0x30>
        tick = time.ticks100ms;
 8000d3c:	4b0a      	ldr	r3, [pc, #40]	; (8000d68 <blockingDelay100ms+0x44>)
 8000d3e:	885b      	ldrh	r3, [r3, #2]
 8000d40:	81bb      	strh	r3, [r7, #12]
        while (tick == time.ticks100ms);
 8000d42:	bf00      	nop
 8000d44:	4b08      	ldr	r3, [pc, #32]	; (8000d68 <blockingDelay100ms+0x44>)
 8000d46:	885b      	ldrh	r3, [r3, #2]
 8000d48:	89ba      	ldrh	r2, [r7, #12]
 8000d4a:	429a      	cmp	r2, r3
 8000d4c:	d0fa      	beq.n	8000d44 <blockingDelay100ms+0x20>
    for(i = ticks; i > 0; i--) {
 8000d4e:	89fb      	ldrh	r3, [r7, #14]
 8000d50:	3b01      	subs	r3, #1
 8000d52:	81fb      	strh	r3, [r7, #14]
 8000d54:	89fb      	ldrh	r3, [r7, #14]
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d1f0      	bne.n	8000d3c <blockingDelay100ms+0x18>
    }
}
 8000d5a:	bf00      	nop
 8000d5c:	bf00      	nop
 8000d5e:	3714      	adds	r7, #20
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bc80      	pop	{r7}
 8000d64:	4770      	bx	lr
 8000d66:	bf00      	nop
 8000d68:	200001ec 	.word	0x200001ec

08000d6c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d70:	b672      	cpsid	i
}
 8000d72:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d74:	e7fe      	b.n	8000d74 <Error_Handler+0x8>
	...

08000d78 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	b085      	sub	sp, #20
 8000d7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000d7e:	4b15      	ldr	r3, [pc, #84]	; (8000dd4 <HAL_MspInit+0x5c>)
 8000d80:	699b      	ldr	r3, [r3, #24]
 8000d82:	4a14      	ldr	r2, [pc, #80]	; (8000dd4 <HAL_MspInit+0x5c>)
 8000d84:	f043 0301 	orr.w	r3, r3, #1
 8000d88:	6193      	str	r3, [r2, #24]
 8000d8a:	4b12      	ldr	r3, [pc, #72]	; (8000dd4 <HAL_MspInit+0x5c>)
 8000d8c:	699b      	ldr	r3, [r3, #24]
 8000d8e:	f003 0301 	and.w	r3, r3, #1
 8000d92:	60bb      	str	r3, [r7, #8]
 8000d94:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d96:	4b0f      	ldr	r3, [pc, #60]	; (8000dd4 <HAL_MspInit+0x5c>)
 8000d98:	69db      	ldr	r3, [r3, #28]
 8000d9a:	4a0e      	ldr	r2, [pc, #56]	; (8000dd4 <HAL_MspInit+0x5c>)
 8000d9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000da0:	61d3      	str	r3, [r2, #28]
 8000da2:	4b0c      	ldr	r3, [pc, #48]	; (8000dd4 <HAL_MspInit+0x5c>)
 8000da4:	69db      	ldr	r3, [r3, #28]
 8000da6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000daa:	607b      	str	r3, [r7, #4]
 8000dac:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000dae:	4b0a      	ldr	r3, [pc, #40]	; (8000dd8 <HAL_MspInit+0x60>)
 8000db0:	685b      	ldr	r3, [r3, #4]
 8000db2:	60fb      	str	r3, [r7, #12]
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000dba:	60fb      	str	r3, [r7, #12]
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000dc2:	60fb      	str	r3, [r7, #12]
 8000dc4:	4a04      	ldr	r2, [pc, #16]	; (8000dd8 <HAL_MspInit+0x60>)
 8000dc6:	68fb      	ldr	r3, [r7, #12]
 8000dc8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dca:	bf00      	nop
 8000dcc:	3714      	adds	r7, #20
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bc80      	pop	{r7}
 8000dd2:	4770      	bx	lr
 8000dd4:	40021000 	.word	0x40021000
 8000dd8:	40010000 	.word	0x40010000

08000ddc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b088      	sub	sp, #32
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000de4:	f107 0310 	add.w	r3, r7, #16
 8000de8:	2200      	movs	r2, #0
 8000dea:	601a      	str	r2, [r3, #0]
 8000dec:	605a      	str	r2, [r3, #4]
 8000dee:	609a      	str	r2, [r3, #8]
 8000df0:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	4a14      	ldr	r2, [pc, #80]	; (8000e48 <HAL_ADC_MspInit+0x6c>)
 8000df8:	4293      	cmp	r3, r2
 8000dfa:	d121      	bne.n	8000e40 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000dfc:	4b13      	ldr	r3, [pc, #76]	; (8000e4c <HAL_ADC_MspInit+0x70>)
 8000dfe:	699b      	ldr	r3, [r3, #24]
 8000e00:	4a12      	ldr	r2, [pc, #72]	; (8000e4c <HAL_ADC_MspInit+0x70>)
 8000e02:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e06:	6193      	str	r3, [r2, #24]
 8000e08:	4b10      	ldr	r3, [pc, #64]	; (8000e4c <HAL_ADC_MspInit+0x70>)
 8000e0a:	699b      	ldr	r3, [r3, #24]
 8000e0c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000e10:	60fb      	str	r3, [r7, #12]
 8000e12:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e14:	4b0d      	ldr	r3, [pc, #52]	; (8000e4c <HAL_ADC_MspInit+0x70>)
 8000e16:	699b      	ldr	r3, [r3, #24]
 8000e18:	4a0c      	ldr	r2, [pc, #48]	; (8000e4c <HAL_ADC_MspInit+0x70>)
 8000e1a:	f043 0304 	orr.w	r3, r3, #4
 8000e1e:	6193      	str	r3, [r2, #24]
 8000e20:	4b0a      	ldr	r3, [pc, #40]	; (8000e4c <HAL_ADC_MspInit+0x70>)
 8000e22:	699b      	ldr	r3, [r3, #24]
 8000e24:	f003 0304 	and.w	r3, r3, #4
 8000e28:	60bb      	str	r3, [r7, #8]
 8000e2a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000e2c:	2301      	movs	r3, #1
 8000e2e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e30:	2303      	movs	r3, #3
 8000e32:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e34:	f107 0310 	add.w	r3, r7, #16
 8000e38:	4619      	mov	r1, r3
 8000e3a:	4805      	ldr	r0, [pc, #20]	; (8000e50 <HAL_ADC_MspInit+0x74>)
 8000e3c:	f001 f886 	bl	8001f4c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000e40:	bf00      	nop
 8000e42:	3720      	adds	r7, #32
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd80      	pop	{r7, pc}
 8000e48:	40012400 	.word	0x40012400
 8000e4c:	40021000 	.word	0x40021000
 8000e50:	40010800 	.word	0x40010800

08000e54 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b088      	sub	sp, #32
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e5c:	f107 0310 	add.w	r3, r7, #16
 8000e60:	2200      	movs	r2, #0
 8000e62:	601a      	str	r2, [r3, #0]
 8000e64:	605a      	str	r2, [r3, #4]
 8000e66:	609a      	str	r2, [r3, #8]
 8000e68:	60da      	str	r2, [r3, #12]
  if(hdac->Instance==DAC)
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	4a14      	ldr	r2, [pc, #80]	; (8000ec0 <HAL_DAC_MspInit+0x6c>)
 8000e70:	4293      	cmp	r3, r2
 8000e72:	d121      	bne.n	8000eb8 <HAL_DAC_MspInit+0x64>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8000e74:	4b13      	ldr	r3, [pc, #76]	; (8000ec4 <HAL_DAC_MspInit+0x70>)
 8000e76:	69db      	ldr	r3, [r3, #28]
 8000e78:	4a12      	ldr	r2, [pc, #72]	; (8000ec4 <HAL_DAC_MspInit+0x70>)
 8000e7a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000e7e:	61d3      	str	r3, [r2, #28]
 8000e80:	4b10      	ldr	r3, [pc, #64]	; (8000ec4 <HAL_DAC_MspInit+0x70>)
 8000e82:	69db      	ldr	r3, [r3, #28]
 8000e84:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000e88:	60fb      	str	r3, [r7, #12]
 8000e8a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e8c:	4b0d      	ldr	r3, [pc, #52]	; (8000ec4 <HAL_DAC_MspInit+0x70>)
 8000e8e:	699b      	ldr	r3, [r3, #24]
 8000e90:	4a0c      	ldr	r2, [pc, #48]	; (8000ec4 <HAL_DAC_MspInit+0x70>)
 8000e92:	f043 0304 	orr.w	r3, r3, #4
 8000e96:	6193      	str	r3, [r2, #24]
 8000e98:	4b0a      	ldr	r3, [pc, #40]	; (8000ec4 <HAL_DAC_MspInit+0x70>)
 8000e9a:	699b      	ldr	r3, [r3, #24]
 8000e9c:	f003 0304 	and.w	r3, r3, #4
 8000ea0:	60bb      	str	r3, [r7, #8]
 8000ea2:	68bb      	ldr	r3, [r7, #8]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000ea4:	2310      	movs	r3, #16
 8000ea6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ea8:	2303      	movs	r3, #3
 8000eaa:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eac:	f107 0310 	add.w	r3, r7, #16
 8000eb0:	4619      	mov	r1, r3
 8000eb2:	4805      	ldr	r0, [pc, #20]	; (8000ec8 <HAL_DAC_MspInit+0x74>)
 8000eb4:	f001 f84a 	bl	8001f4c <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8000eb8:	bf00      	nop
 8000eba:	3720      	adds	r7, #32
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}
 8000ec0:	40007400 	.word	0x40007400
 8000ec4:	40021000 	.word	0x40021000
 8000ec8:	40010800 	.word	0x40010800

08000ecc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b088      	sub	sp, #32
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ed4:	f107 0310 	add.w	r3, r7, #16
 8000ed8:	2200      	movs	r2, #0
 8000eda:	601a      	str	r2, [r3, #0]
 8000edc:	605a      	str	r2, [r3, #4]
 8000ede:	609a      	str	r2, [r3, #8]
 8000ee0:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	4a16      	ldr	r2, [pc, #88]	; (8000f40 <HAL_I2C_MspInit+0x74>)
 8000ee8:	4293      	cmp	r3, r2
 8000eea:	d124      	bne.n	8000f36 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eec:	4b15      	ldr	r3, [pc, #84]	; (8000f44 <HAL_I2C_MspInit+0x78>)
 8000eee:	699b      	ldr	r3, [r3, #24]
 8000ef0:	4a14      	ldr	r2, [pc, #80]	; (8000f44 <HAL_I2C_MspInit+0x78>)
 8000ef2:	f043 0308 	orr.w	r3, r3, #8
 8000ef6:	6193      	str	r3, [r2, #24]
 8000ef8:	4b12      	ldr	r3, [pc, #72]	; (8000f44 <HAL_I2C_MspInit+0x78>)
 8000efa:	699b      	ldr	r3, [r3, #24]
 8000efc:	f003 0308 	and.w	r3, r3, #8
 8000f00:	60fb      	str	r3, [r7, #12]
 8000f02:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000f04:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000f08:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f0a:	2312      	movs	r3, #18
 8000f0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f0e:	2303      	movs	r3, #3
 8000f10:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f12:	f107 0310 	add.w	r3, r7, #16
 8000f16:	4619      	mov	r1, r3
 8000f18:	480b      	ldr	r0, [pc, #44]	; (8000f48 <HAL_I2C_MspInit+0x7c>)
 8000f1a:	f001 f817 	bl	8001f4c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000f1e:	4b09      	ldr	r3, [pc, #36]	; (8000f44 <HAL_I2C_MspInit+0x78>)
 8000f20:	69db      	ldr	r3, [r3, #28]
 8000f22:	4a08      	ldr	r2, [pc, #32]	; (8000f44 <HAL_I2C_MspInit+0x78>)
 8000f24:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000f28:	61d3      	str	r3, [r2, #28]
 8000f2a:	4b06      	ldr	r3, [pc, #24]	; (8000f44 <HAL_I2C_MspInit+0x78>)
 8000f2c:	69db      	ldr	r3, [r3, #28]
 8000f2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000f32:	60bb      	str	r3, [r7, #8]
 8000f34:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000f36:	bf00      	nop
 8000f38:	3720      	adds	r7, #32
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	40005800 	.word	0x40005800
 8000f44:	40021000 	.word	0x40021000
 8000f48:	40010c00 	.word	0x40010c00

08000f4c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b088      	sub	sp, #32
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f54:	f107 0310 	add.w	r3, r7, #16
 8000f58:	2200      	movs	r2, #0
 8000f5a:	601a      	str	r2, [r3, #0]
 8000f5c:	605a      	str	r2, [r3, #4]
 8000f5e:	609a      	str	r2, [r3, #8]
 8000f60:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	4a1b      	ldr	r2, [pc, #108]	; (8000fd4 <HAL_SPI_MspInit+0x88>)
 8000f68:	4293      	cmp	r3, r2
 8000f6a:	d12f      	bne.n	8000fcc <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000f6c:	4b1a      	ldr	r3, [pc, #104]	; (8000fd8 <HAL_SPI_MspInit+0x8c>)
 8000f6e:	699b      	ldr	r3, [r3, #24]
 8000f70:	4a19      	ldr	r2, [pc, #100]	; (8000fd8 <HAL_SPI_MspInit+0x8c>)
 8000f72:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000f76:	6193      	str	r3, [r2, #24]
 8000f78:	4b17      	ldr	r3, [pc, #92]	; (8000fd8 <HAL_SPI_MspInit+0x8c>)
 8000f7a:	699b      	ldr	r3, [r3, #24]
 8000f7c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f80:	60fb      	str	r3, [r7, #12]
 8000f82:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f84:	4b14      	ldr	r3, [pc, #80]	; (8000fd8 <HAL_SPI_MspInit+0x8c>)
 8000f86:	699b      	ldr	r3, [r3, #24]
 8000f88:	4a13      	ldr	r2, [pc, #76]	; (8000fd8 <HAL_SPI_MspInit+0x8c>)
 8000f8a:	f043 0304 	orr.w	r3, r3, #4
 8000f8e:	6193      	str	r3, [r2, #24]
 8000f90:	4b11      	ldr	r3, [pc, #68]	; (8000fd8 <HAL_SPI_MspInit+0x8c>)
 8000f92:	699b      	ldr	r3, [r3, #24]
 8000f94:	f003 0304 	and.w	r3, r3, #4
 8000f98:	60bb      	str	r3, [r7, #8]
 8000f9a:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000f9c:	23a0      	movs	r3, #160	; 0xa0
 8000f9e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fa0:	2302      	movs	r3, #2
 8000fa2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000fa4:	2303      	movs	r3, #3
 8000fa6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fa8:	f107 0310 	add.w	r3, r7, #16
 8000fac:	4619      	mov	r1, r3
 8000fae:	480b      	ldr	r0, [pc, #44]	; (8000fdc <HAL_SPI_MspInit+0x90>)
 8000fb0:	f000 ffcc 	bl	8001f4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000fb4:	2340      	movs	r3, #64	; 0x40
 8000fb6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fc0:	f107 0310 	add.w	r3, r7, #16
 8000fc4:	4619      	mov	r1, r3
 8000fc6:	4805      	ldr	r0, [pc, #20]	; (8000fdc <HAL_SPI_MspInit+0x90>)
 8000fc8:	f000 ffc0 	bl	8001f4c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000fcc:	bf00      	nop
 8000fce:	3720      	adds	r7, #32
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}
 8000fd4:	40013000 	.word	0x40013000
 8000fd8:	40021000 	.word	0x40021000
 8000fdc:	40010800 	.word	0x40010800

08000fe0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b084      	sub	sp, #16
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	4a0d      	ldr	r2, [pc, #52]	; (8001024 <HAL_TIM_Base_MspInit+0x44>)
 8000fee:	4293      	cmp	r3, r2
 8000ff0:	d113      	bne.n	800101a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000ff2:	4b0d      	ldr	r3, [pc, #52]	; (8001028 <HAL_TIM_Base_MspInit+0x48>)
 8000ff4:	69db      	ldr	r3, [r3, #28]
 8000ff6:	4a0c      	ldr	r2, [pc, #48]	; (8001028 <HAL_TIM_Base_MspInit+0x48>)
 8000ff8:	f043 0310 	orr.w	r3, r3, #16
 8000ffc:	61d3      	str	r3, [r2, #28]
 8000ffe:	4b0a      	ldr	r3, [pc, #40]	; (8001028 <HAL_TIM_Base_MspInit+0x48>)
 8001000:	69db      	ldr	r3, [r3, #28]
 8001002:	f003 0310 	and.w	r3, r3, #16
 8001006:	60fb      	str	r3, [r7, #12]
 8001008:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_IRQn, 0, 0);
 800100a:	2200      	movs	r2, #0
 800100c:	2100      	movs	r1, #0
 800100e:	2036      	movs	r0, #54	; 0x36
 8001010:	f000 fdb3 	bl	8001b7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8001014:	2036      	movs	r0, #54	; 0x36
 8001016:	f000 fdcc 	bl	8001bb2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 800101a:	bf00      	nop
 800101c:	3710      	adds	r7, #16
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	40001000 	.word	0x40001000
 8001028:	40021000 	.word	0x40021000

0800102c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b08a      	sub	sp, #40	; 0x28
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001034:	f107 0318 	add.w	r3, r7, #24
 8001038:	2200      	movs	r2, #0
 800103a:	601a      	str	r2, [r3, #0]
 800103c:	605a      	str	r2, [r3, #4]
 800103e:	609a      	str	r2, [r3, #8]
 8001040:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	4a3b      	ldr	r2, [pc, #236]	; (8001134 <HAL_UART_MspInit+0x108>)
 8001048:	4293      	cmp	r3, r2
 800104a:	d13a      	bne.n	80010c2 <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800104c:	4b3a      	ldr	r3, [pc, #232]	; (8001138 <HAL_UART_MspInit+0x10c>)
 800104e:	699b      	ldr	r3, [r3, #24]
 8001050:	4a39      	ldr	r2, [pc, #228]	; (8001138 <HAL_UART_MspInit+0x10c>)
 8001052:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001056:	6193      	str	r3, [r2, #24]
 8001058:	4b37      	ldr	r3, [pc, #220]	; (8001138 <HAL_UART_MspInit+0x10c>)
 800105a:	699b      	ldr	r3, [r3, #24]
 800105c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001060:	617b      	str	r3, [r7, #20]
 8001062:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001064:	4b34      	ldr	r3, [pc, #208]	; (8001138 <HAL_UART_MspInit+0x10c>)
 8001066:	699b      	ldr	r3, [r3, #24]
 8001068:	4a33      	ldr	r2, [pc, #204]	; (8001138 <HAL_UART_MspInit+0x10c>)
 800106a:	f043 0304 	orr.w	r3, r3, #4
 800106e:	6193      	str	r3, [r2, #24]
 8001070:	4b31      	ldr	r3, [pc, #196]	; (8001138 <HAL_UART_MspInit+0x10c>)
 8001072:	699b      	ldr	r3, [r3, #24]
 8001074:	f003 0304 	and.w	r3, r3, #4
 8001078:	613b      	str	r3, [r7, #16]
 800107a:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800107c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001080:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001082:	2302      	movs	r3, #2
 8001084:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001086:	2303      	movs	r3, #3
 8001088:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800108a:	f107 0318 	add.w	r3, r7, #24
 800108e:	4619      	mov	r1, r3
 8001090:	482a      	ldr	r0, [pc, #168]	; (800113c <HAL_UART_MspInit+0x110>)
 8001092:	f000 ff5b 	bl	8001f4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001096:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800109a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800109c:	2300      	movs	r3, #0
 800109e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a0:	2300      	movs	r3, #0
 80010a2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010a4:	f107 0318 	add.w	r3, r7, #24
 80010a8:	4619      	mov	r1, r3
 80010aa:	4824      	ldr	r0, [pc, #144]	; (800113c <HAL_UART_MspInit+0x110>)
 80010ac:	f000 ff4e 	bl	8001f4c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80010b0:	2200      	movs	r2, #0
 80010b2:	2100      	movs	r1, #0
 80010b4:	2025      	movs	r0, #37	; 0x25
 80010b6:	f000 fd60 	bl	8001b7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80010ba:	2025      	movs	r0, #37	; 0x25
 80010bc:	f000 fd79 	bl	8001bb2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80010c0:	e034      	b.n	800112c <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART2)
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	4a1e      	ldr	r2, [pc, #120]	; (8001140 <HAL_UART_MspInit+0x114>)
 80010c8:	4293      	cmp	r3, r2
 80010ca:	d12f      	bne.n	800112c <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 80010cc:	4b1a      	ldr	r3, [pc, #104]	; (8001138 <HAL_UART_MspInit+0x10c>)
 80010ce:	69db      	ldr	r3, [r3, #28]
 80010d0:	4a19      	ldr	r2, [pc, #100]	; (8001138 <HAL_UART_MspInit+0x10c>)
 80010d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010d6:	61d3      	str	r3, [r2, #28]
 80010d8:	4b17      	ldr	r3, [pc, #92]	; (8001138 <HAL_UART_MspInit+0x10c>)
 80010da:	69db      	ldr	r3, [r3, #28]
 80010dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010e0:	60fb      	str	r3, [r7, #12]
 80010e2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010e4:	4b14      	ldr	r3, [pc, #80]	; (8001138 <HAL_UART_MspInit+0x10c>)
 80010e6:	699b      	ldr	r3, [r3, #24]
 80010e8:	4a13      	ldr	r2, [pc, #76]	; (8001138 <HAL_UART_MspInit+0x10c>)
 80010ea:	f043 0304 	orr.w	r3, r3, #4
 80010ee:	6193      	str	r3, [r2, #24]
 80010f0:	4b11      	ldr	r3, [pc, #68]	; (8001138 <HAL_UART_MspInit+0x10c>)
 80010f2:	699b      	ldr	r3, [r3, #24]
 80010f4:	f003 0304 	and.w	r3, r3, #4
 80010f8:	60bb      	str	r3, [r7, #8]
 80010fa:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80010fc:	2304      	movs	r3, #4
 80010fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001100:	2302      	movs	r3, #2
 8001102:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001104:	2303      	movs	r3, #3
 8001106:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001108:	f107 0318 	add.w	r3, r7, #24
 800110c:	4619      	mov	r1, r3
 800110e:	480b      	ldr	r0, [pc, #44]	; (800113c <HAL_UART_MspInit+0x110>)
 8001110:	f000 ff1c 	bl	8001f4c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001114:	2308      	movs	r3, #8
 8001116:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001118:	2300      	movs	r3, #0
 800111a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800111c:	2300      	movs	r3, #0
 800111e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001120:	f107 0318 	add.w	r3, r7, #24
 8001124:	4619      	mov	r1, r3
 8001126:	4805      	ldr	r0, [pc, #20]	; (800113c <HAL_UART_MspInit+0x110>)
 8001128:	f000 ff10 	bl	8001f4c <HAL_GPIO_Init>
}
 800112c:	bf00      	nop
 800112e:	3728      	adds	r7, #40	; 0x28
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}
 8001134:	40013800 	.word	0x40013800
 8001138:	40021000 	.word	0x40021000
 800113c:	40010800 	.word	0x40010800
 8001140:	40004400 	.word	0x40004400

08001144 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001144:	b480      	push	{r7}
 8001146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001148:	e7fe      	b.n	8001148 <NMI_Handler+0x4>

0800114a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800114a:	b480      	push	{r7}
 800114c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800114e:	e7fe      	b.n	800114e <HardFault_Handler+0x4>

08001150 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001150:	b480      	push	{r7}
 8001152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001154:	e7fe      	b.n	8001154 <MemManage_Handler+0x4>

08001156 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001156:	b480      	push	{r7}
 8001158:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800115a:	e7fe      	b.n	800115a <BusFault_Handler+0x4>

0800115c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800115c:	b480      	push	{r7}
 800115e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001160:	e7fe      	b.n	8001160 <UsageFault_Handler+0x4>

08001162 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001162:	b480      	push	{r7}
 8001164:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001166:	bf00      	nop
 8001168:	46bd      	mov	sp, r7
 800116a:	bc80      	pop	{r7}
 800116c:	4770      	bx	lr

0800116e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800116e:	b480      	push	{r7}
 8001170:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001172:	bf00      	nop
 8001174:	46bd      	mov	sp, r7
 8001176:	bc80      	pop	{r7}
 8001178:	4770      	bx	lr

0800117a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800117a:	b480      	push	{r7}
 800117c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800117e:	bf00      	nop
 8001180:	46bd      	mov	sp, r7
 8001182:	bc80      	pop	{r7}
 8001184:	4770      	bx	lr

08001186 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001186:	b580      	push	{r7, lr}
 8001188:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800118a:	f000 f9f1 	bl	8001570 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800118e:	bf00      	nop
 8001190:	bd80      	pop	{r7, pc}
	...

08001194 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001198:	4802      	ldr	r0, [pc, #8]	; (80011a4 <USART1_IRQHandler+0x10>)
 800119a:	f002 fc87 	bl	8003aac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800119e:	bf00      	nop
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	2000014c 	.word	0x2000014c

080011a8 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80011ac:	4802      	ldr	r0, [pc, #8]	; (80011b8 <TIM6_IRQHandler+0x10>)
 80011ae:	f002 f95d 	bl	800346c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 80011b2:	bf00      	nop
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	200001a4 	.word	0x200001a4

080011bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b086      	sub	sp, #24
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011c4:	4a14      	ldr	r2, [pc, #80]	; (8001218 <_sbrk+0x5c>)
 80011c6:	4b15      	ldr	r3, [pc, #84]	; (800121c <_sbrk+0x60>)
 80011c8:	1ad3      	subs	r3, r2, r3
 80011ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80011cc:	697b      	ldr	r3, [r7, #20]
 80011ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011d0:	4b13      	ldr	r3, [pc, #76]	; (8001220 <_sbrk+0x64>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d102      	bne.n	80011de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80011d8:	4b11      	ldr	r3, [pc, #68]	; (8001220 <_sbrk+0x64>)
 80011da:	4a12      	ldr	r2, [pc, #72]	; (8001224 <_sbrk+0x68>)
 80011dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011de:	4b10      	ldr	r3, [pc, #64]	; (8001220 <_sbrk+0x64>)
 80011e0:	681a      	ldr	r2, [r3, #0]
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	4413      	add	r3, r2
 80011e6:	693a      	ldr	r2, [r7, #16]
 80011e8:	429a      	cmp	r2, r3
 80011ea:	d207      	bcs.n	80011fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80011ec:	f003 f886 	bl	80042fc <__errno>
 80011f0:	4603      	mov	r3, r0
 80011f2:	220c      	movs	r2, #12
 80011f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80011f6:	f04f 33ff 	mov.w	r3, #4294967295
 80011fa:	e009      	b.n	8001210 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011fc:	4b08      	ldr	r3, [pc, #32]	; (8001220 <_sbrk+0x64>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001202:	4b07      	ldr	r3, [pc, #28]	; (8001220 <_sbrk+0x64>)
 8001204:	681a      	ldr	r2, [r3, #0]
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	4413      	add	r3, r2
 800120a:	4a05      	ldr	r2, [pc, #20]	; (8001220 <_sbrk+0x64>)
 800120c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800120e:	68fb      	ldr	r3, [r7, #12]
}
 8001210:	4618      	mov	r0, r3
 8001212:	3718      	adds	r7, #24
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}
 8001218:	20010000 	.word	0x20010000
 800121c:	00000400 	.word	0x00000400
 8001220:	2000008c 	.word	0x2000008c
 8001224:	200002b0 	.word	0x200002b0

08001228 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001228:	b480      	push	{r7}
 800122a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800122c:	bf00      	nop
 800122e:	46bd      	mov	sp, r7
 8001230:	bc80      	pop	{r7}
 8001232:	4770      	bx	lr

08001234 <print_string>:
    else if(action == CR) {
        c = '\r';  HAL_UART_Transmit(&huart1,(uint8_t *) &c, (uint16_t) 0x01, HAL_MAX_DELAY);
    }
}

void print_string(const char * s, uint8_t action) {
 8001234:	b580      	push	{r7, lr}
 8001236:	b084      	sub	sp, #16
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
 800123c:	460b      	mov	r3, r1
 800123e:	70fb      	strb	r3, [r7, #3]
    char c = '\0';
 8001240:	2300      	movs	r3, #0
 8001242:	73fb      	strb	r3, [r7, #15]

    while(*s != '\0') {
 8001244:	e009      	b.n	800125a <print_string+0x26>
        HAL_UART_Transmit(&huart1, (uint8_t *) s, (uint16_t) 0x01, HAL_MAX_DELAY);
 8001246:	f04f 33ff 	mov.w	r3, #4294967295
 800124a:	2201      	movs	r2, #1
 800124c:	6879      	ldr	r1, [r7, #4]
 800124e:	4819      	ldr	r0, [pc, #100]	; (80012b4 <print_string+0x80>)
 8001250:	f002 fb69 	bl	8003926 <HAL_UART_Transmit>
        s++;
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	3301      	adds	r3, #1
 8001258:	607b      	str	r3, [r7, #4]
    while(*s != '\0') {
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	781b      	ldrb	r3, [r3, #0]
 800125e:	2b00      	cmp	r3, #0
 8001260:	d1f1      	bne.n	8001246 <print_string+0x12>
    }

    /* CHECK TO SEE IF THE USER WISHES TO CREATE A NEW LINE */
    if(action == LF) {
 8001262:	78fb      	ldrb	r3, [r7, #3]
 8001264:	2b01      	cmp	r3, #1
 8001266:	d114      	bne.n	8001292 <print_string+0x5e>
        c = '\r';  HAL_UART_Transmit(&huart1,(uint8_t *) &c, (uint16_t) 0x01, HAL_MAX_DELAY);
 8001268:	230d      	movs	r3, #13
 800126a:	73fb      	strb	r3, [r7, #15]
 800126c:	f107 010f 	add.w	r1, r7, #15
 8001270:	f04f 33ff 	mov.w	r3, #4294967295
 8001274:	2201      	movs	r2, #1
 8001276:	480f      	ldr	r0, [pc, #60]	; (80012b4 <print_string+0x80>)
 8001278:	f002 fb55 	bl	8003926 <HAL_UART_Transmit>
        c = '\n';  HAL_UART_Transmit(&huart1, (uint8_t *) &c, (uint16_t) 0x01, HAL_MAX_DELAY);
 800127c:	230a      	movs	r3, #10
 800127e:	73fb      	strb	r3, [r7, #15]
 8001280:	f107 010f 	add.w	r1, r7, #15
 8001284:	f04f 33ff 	mov.w	r3, #4294967295
 8001288:	2201      	movs	r2, #1
 800128a:	480a      	ldr	r0, [pc, #40]	; (80012b4 <print_string+0x80>)
 800128c:	f002 fb4b 	bl	8003926 <HAL_UART_Transmit>
    }
    else if(action == CR) {
        c = '\r';  HAL_UART_Transmit(&huart1,(uint8_t *) &c, (uint16_t) 0x01, HAL_MAX_DELAY);
    }

}
 8001290:	e00c      	b.n	80012ac <print_string+0x78>
    else if(action == CR) {
 8001292:	78fb      	ldrb	r3, [r7, #3]
 8001294:	2b02      	cmp	r3, #2
 8001296:	d109      	bne.n	80012ac <print_string+0x78>
        c = '\r';  HAL_UART_Transmit(&huart1,(uint8_t *) &c, (uint16_t) 0x01, HAL_MAX_DELAY);
 8001298:	230d      	movs	r3, #13
 800129a:	73fb      	strb	r3, [r7, #15]
 800129c:	f107 010f 	add.w	r1, r7, #15
 80012a0:	f04f 33ff 	mov.w	r3, #4294967295
 80012a4:	2201      	movs	r2, #1
 80012a6:	4803      	ldr	r0, [pc, #12]	; (80012b4 <print_string+0x80>)
 80012a8:	f002 fb3d 	bl	8003926 <HAL_UART_Transmit>
}
 80012ac:	bf00      	nop
 80012ae:	3710      	adds	r7, #16
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bd80      	pop	{r7, pc}
 80012b4:	2000014c 	.word	0x2000014c

080012b8 <PrintUnsignedDecimal>:

void PrintUnsignedDecimal (uint16_t number, uint8_t action) {
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b086      	sub	sp, #24
 80012bc:	af00      	add	r7, sp, #0
 80012be:	4603      	mov	r3, r0
 80012c0:	460a      	mov	r2, r1
 80012c2:	80fb      	strh	r3, [r7, #6]
 80012c4:	4613      	mov	r3, r2
 80012c6:	717b      	strb	r3, [r7, #5]
    char temphex[5];        //Define the array that will hold the ASCII values
    char c = '\r';
 80012c8:	230d      	movs	r3, #13
 80012ca:	72fb      	strb	r3, [r7, #11]
    uint8_t i;                
    uint16_t j=0;
 80012cc:	2300      	movs	r3, #0
 80012ce:	82bb      	strh	r3, [r7, #20]
    uint8_t decimal_count;    //This is how many digits are written

    /* USE SPRINT F TO BUILD THE ARRAY OF ASCII CHARACTERS */
    decimal_count = (uint8_t)(sprintf(temphex, "%u", number)); //u tells the function we want an unsigned decimal number
 80012d0:	88fa      	ldrh	r2, [r7, #6]
 80012d2:	f107 030c 	add.w	r3, r7, #12
 80012d6:	4920      	ldr	r1, [pc, #128]	; (8001358 <PrintUnsignedDecimal+0xa0>)
 80012d8:	4618      	mov	r0, r3
 80012da:	f003 f841 	bl	8004360 <siprintf>
 80012de:	4603      	mov	r3, r0
 80012e0:	74fb      	strb	r3, [r7, #19]

    for(i = 0; i < decimal_count; i++) {    //Print out the array of ASCII characters.
 80012e2:	2300      	movs	r3, #0
 80012e4:	75fb      	strb	r3, [r7, #23]
 80012e6:	e00c      	b.n	8001302 <PrintUnsignedDecimal+0x4a>
        // TXREG1 = (temphex[i]);
        HAL_UART_Transmit(&huart1,(uint8_t *) &temphex[i], (uint16_t) 0x01, HAL_MAX_DELAY);
 80012e8:	7dfb      	ldrb	r3, [r7, #23]
 80012ea:	f107 020c 	add.w	r2, r7, #12
 80012ee:	18d1      	adds	r1, r2, r3
 80012f0:	f04f 33ff 	mov.w	r3, #4294967295
 80012f4:	2201      	movs	r2, #1
 80012f6:	4819      	ldr	r0, [pc, #100]	; (800135c <PrintUnsignedDecimal+0xa4>)
 80012f8:	f002 fb15 	bl	8003926 <HAL_UART_Transmit>
    for(i = 0; i < decimal_count; i++) {    //Print out the array of ASCII characters.
 80012fc:	7dfb      	ldrb	r3, [r7, #23]
 80012fe:	3301      	adds	r3, #1
 8001300:	75fb      	strb	r3, [r7, #23]
 8001302:	7dfa      	ldrb	r2, [r7, #23]
 8001304:	7cfb      	ldrb	r3, [r7, #19]
 8001306:	429a      	cmp	r2, r3
 8001308:	d3ee      	bcc.n	80012e8 <PrintUnsignedDecimal+0x30>
    }

    /* CHECK TO SEE IF THE USER WISHES TO CREATE A NEW LINE */
    if(action == LF) {
 800130a:	797b      	ldrb	r3, [r7, #5]
 800130c:	2b01      	cmp	r3, #1
 800130e:	d112      	bne.n	8001336 <PrintUnsignedDecimal+0x7e>
        HAL_UART_Transmit(&huart1,(uint8_t *) &c, (uint16_t) 0x01, HAL_MAX_DELAY);
 8001310:	f107 010b 	add.w	r1, r7, #11
 8001314:	f04f 33ff 	mov.w	r3, #4294967295
 8001318:	2201      	movs	r2, #1
 800131a:	4810      	ldr	r0, [pc, #64]	; (800135c <PrintUnsignedDecimal+0xa4>)
 800131c:	f002 fb03 	bl	8003926 <HAL_UART_Transmit>
        c = '\n';  HAL_UART_Transmit(&huart1, (uint8_t *) &c, (uint16_t) 0x01, HAL_MAX_DELAY);
 8001320:	230a      	movs	r3, #10
 8001322:	72fb      	strb	r3, [r7, #11]
 8001324:	f107 010b 	add.w	r1, r7, #11
 8001328:	f04f 33ff 	mov.w	r3, #4294967295
 800132c:	2201      	movs	r2, #1
 800132e:	480b      	ldr	r0, [pc, #44]	; (800135c <PrintUnsignedDecimal+0xa4>)
 8001330:	f002 faf9 	bl	8003926 <HAL_UART_Transmit>
    }
    else if(action == CR) {
        c = '\r';  HAL_UART_Transmit(&huart1,(uint8_t *) &c, (uint16_t) 0x01, HAL_MAX_DELAY);
    }
}
 8001334:	e00c      	b.n	8001350 <PrintUnsignedDecimal+0x98>
    else if(action == CR) {
 8001336:	797b      	ldrb	r3, [r7, #5]
 8001338:	2b02      	cmp	r3, #2
 800133a:	d109      	bne.n	8001350 <PrintUnsignedDecimal+0x98>
        c = '\r';  HAL_UART_Transmit(&huart1,(uint8_t *) &c, (uint16_t) 0x01, HAL_MAX_DELAY);
 800133c:	230d      	movs	r3, #13
 800133e:	72fb      	strb	r3, [r7, #11]
 8001340:	f107 010b 	add.w	r1, r7, #11
 8001344:	f04f 33ff 	mov.w	r3, #4294967295
 8001348:	2201      	movs	r2, #1
 800134a:	4804      	ldr	r0, [pc, #16]	; (800135c <PrintUnsignedDecimal+0xa4>)
 800134c:	f002 faeb 	bl	8003926 <HAL_UART_Transmit>
}
 8001350:	bf00      	nop
 8001352:	3718      	adds	r7, #24
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}
 8001358:	0800561c 	.word	0x0800561c
 800135c:	2000014c 	.word	0x2000014c

08001360 <ClearScreen>:
    HAL_UART_Transmit(&huart1,(uint8_t *) &c, (uint16_t) 0x01, HAL_MAX_DELAY);
    print_string("[1J",0);        //Send the rest of the sequence to clear the screen

}

void ClearScreen( void ) {
 8001360:	b580      	push	{r7, lr}
 8001362:	b082      	sub	sp, #8
 8001364:	af00      	add	r7, sp, #0
    char c = 0x1B;
 8001366:	231b      	movs	r3, #27
 8001368:	71fb      	strb	r3, [r7, #7]
    HAL_UART_Transmit(&huart1,(uint8_t *) &c, (uint16_t) 0x01, HAL_MAX_DELAY);
 800136a:	1df9      	adds	r1, r7, #7
 800136c:	f04f 33ff 	mov.w	r3, #4294967295
 8001370:	2201      	movs	r2, #1
 8001372:	4805      	ldr	r0, [pc, #20]	; (8001388 <ClearScreen+0x28>)
 8001374:	f002 fad7 	bl	8003926 <HAL_UART_Transmit>
    print_string("[2J",0);        //Send the rest of the sequence to clear the screen
 8001378:	2100      	movs	r1, #0
 800137a:	4804      	ldr	r0, [pc, #16]	; (800138c <ClearScreen+0x2c>)
 800137c:	f7ff ff5a 	bl	8001234 <print_string>
}
 8001380:	bf00      	nop
 8001382:	3708      	adds	r7, #8
 8001384:	46bd      	mov	sp, r7
 8001386:	bd80      	pop	{r7, pc}
 8001388:	2000014c 	.word	0x2000014c
 800138c:	08005624 	.word	0x08005624

08001390 <CursorTopLeft>:
    HAL_UART_Transmit(&huart1,(uint8_t *) &c, (uint16_t) 0x01, HAL_MAX_DELAY);
    print_string("[2K",0);        //Send the rest of the sequence to clear the screen

}

void CursorTopLeft( void ) {
 8001390:	b580      	push	{r7, lr}
 8001392:	b082      	sub	sp, #8
 8001394:	af00      	add	r7, sp, #0
    char c = 0x1B;
 8001396:	231b      	movs	r3, #27
 8001398:	71fb      	strb	r3, [r7, #7]
    HAL_UART_Transmit(&huart1,(uint8_t *) &c, (uint16_t) 0x01, HAL_MAX_DELAY);
 800139a:	1df9      	adds	r1, r7, #7
 800139c:	f04f 33ff 	mov.w	r3, #4294967295
 80013a0:	2201      	movs	r2, #1
 80013a2:	4805      	ldr	r0, [pc, #20]	; (80013b8 <CursorTopLeft+0x28>)
 80013a4:	f002 fabf 	bl	8003926 <HAL_UART_Transmit>
    print_string("[H",0);     //Send the rest of the sequence to clear the screen
 80013a8:	2100      	movs	r1, #0
 80013aa:	4804      	ldr	r0, [pc, #16]	; (80013bc <CursorTopLeft+0x2c>)
 80013ac:	f7ff ff42 	bl	8001234 <print_string>
}
 80013b0:	bf00      	nop
 80013b2:	3708      	adds	r7, #8
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}
 80013b8:	2000014c 	.word	0x2000014c
 80013bc:	0800562c 	.word	0x0800562c

080013c0 <ResetTerminal>:

void ResetTerminal( void ) {
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b082      	sub	sp, #8
 80013c4:	af00      	add	r7, sp, #0
    char c = 0x1B;
 80013c6:	231b      	movs	r3, #27
 80013c8:	71fb      	strb	r3, [r7, #7]
    HAL_UART_Transmit(&huart1,(uint8_t *) &c, (uint16_t) 0x01, HAL_MAX_DELAY);
 80013ca:	1df9      	adds	r1, r7, #7
 80013cc:	f04f 33ff 	mov.w	r3, #4294967295
 80013d0:	2201      	movs	r2, #1
 80013d2:	4805      	ldr	r0, [pc, #20]	; (80013e8 <ResetTerminal+0x28>)
 80013d4:	f002 faa7 	bl	8003926 <HAL_UART_Transmit>
    print_string("c",0);      //Send the rest of the sequence to clear the screen
 80013d8:	2100      	movs	r1, #0
 80013da:	4804      	ldr	r0, [pc, #16]	; (80013ec <ResetTerminal+0x2c>)
 80013dc:	f7ff ff2a 	bl	8001234 <print_string>
}
 80013e0:	bf00      	nop
 80013e2:	3708      	adds	r7, #8
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bd80      	pop	{r7, pc}
 80013e8:	2000014c 	.word	0x2000014c
 80013ec:	08005630 	.word	0x08005630

080013f0 <InsertLineFeed>:

void InsertLineFeed( uint8_t line_feeds ) {
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b084      	sub	sp, #16
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	4603      	mov	r3, r0
 80013f8:	71fb      	strb	r3, [r7, #7]
    uint8_t i = 0;         //Use this as a counter
 80013fa:	2300      	movs	r3, #0
 80013fc:	73fb      	strb	r3, [r7, #15]
    char c = '\r';
 80013fe:	230d      	movs	r3, #13
 8001400:	73bb      	strb	r3, [r7, #14]
    
    for(i = 0; i < line_feeds; i++){
 8001402:	2300      	movs	r3, #0
 8001404:	73fb      	strb	r3, [r7, #15]
 8001406:	e015      	b.n	8001434 <InsertLineFeed+0x44>
        HAL_UART_Transmit(&huart1,(uint8_t *) &c, (uint16_t) 0x01, HAL_MAX_DELAY);
 8001408:	f107 010e 	add.w	r1, r7, #14
 800140c:	f04f 33ff 	mov.w	r3, #4294967295
 8001410:	2201      	movs	r2, #1
 8001412:	480d      	ldr	r0, [pc, #52]	; (8001448 <InsertLineFeed+0x58>)
 8001414:	f002 fa87 	bl	8003926 <HAL_UART_Transmit>
        c = "\n"; 
 8001418:	4b0c      	ldr	r3, [pc, #48]	; (800144c <InsertLineFeed+0x5c>)
 800141a:	b2db      	uxtb	r3, r3
 800141c:	73bb      	strb	r3, [r7, #14]
        HAL_UART_Transmit(&huart1,(uint8_t *) &c, (uint16_t) 0x01, HAL_MAX_DELAY);
 800141e:	f107 010e 	add.w	r1, r7, #14
 8001422:	f04f 33ff 	mov.w	r3, #4294967295
 8001426:	2201      	movs	r2, #1
 8001428:	4807      	ldr	r0, [pc, #28]	; (8001448 <InsertLineFeed+0x58>)
 800142a:	f002 fa7c 	bl	8003926 <HAL_UART_Transmit>
    for(i = 0; i < line_feeds; i++){
 800142e:	7bfb      	ldrb	r3, [r7, #15]
 8001430:	3301      	adds	r3, #1
 8001432:	73fb      	strb	r3, [r7, #15]
 8001434:	7bfa      	ldrb	r2, [r7, #15]
 8001436:	79fb      	ldrb	r3, [r7, #7]
 8001438:	429a      	cmp	r2, r3
 800143a:	d3e5      	bcc.n	8001408 <InsertLineFeed+0x18>
    }
}
 800143c:	bf00      	nop
 800143e:	bf00      	nop
 8001440:	3710      	adds	r7, #16
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	2000014c 	.word	0x2000014c
 800144c:	08005634 	.word	0x08005634

08001450 <InsertLineSeparator>:

void InsertLineSeparator( void ) {
 8001450:	b580      	push	{r7, lr}
 8001452:	af00      	add	r7, sp, #0
    print_string("---------------------------------", LF);
 8001454:	2101      	movs	r1, #1
 8001456:	4802      	ldr	r0, [pc, #8]	; (8001460 <InsertLineSeparator+0x10>)
 8001458:	f7ff feec 	bl	8001234 <print_string>
}
 800145c:	bf00      	nop
 800145e:	bd80      	pop	{r7, pc}
 8001460:	08005638 	.word	0x08005638

08001464 <ResetRxBuffer>:

void ResetRxBuffer( void ) {
 8001464:	b580      	push	{r7, lr}
 8001466:	af00      	add	r7, sp, #0

    uart.consumer_index = uart.producer_index = 0;                              //Reset the pointers
 8001468:	4b0a      	ldr	r3, [pc, #40]	; (8001494 <ResetRxBuffer+0x30>)
 800146a:	2200      	movs	r2, #0
 800146c:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 8001470:	4b08      	ldr	r3, [pc, #32]	; (8001494 <ResetRxBuffer+0x30>)
 8001472:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8001476:	4b07      	ldr	r3, [pc, #28]	; (8001494 <ResetRxBuffer+0x30>)
 8001478:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
    uart.byte_counter = 0;                                            //Reset the data counter
 800147c:	4b05      	ldr	r3, [pc, #20]	; (8001494 <ResetRxBuffer+0x30>)
 800147e:	2200      	movs	r2, #0
 8001480:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    memset(uart.rxbuf,'\0',MAX_ELEMENTS);                           //Null out the buffer
 8001484:	2221      	movs	r2, #33	; 0x21
 8001486:	2100      	movs	r1, #0
 8001488:	4802      	ldr	r0, [pc, #8]	; (8001494 <ResetRxBuffer+0x30>)
 800148a:	f002 ff61 	bl	8004350 <memset>
} /* End of ResetRxBuffer */
 800148e:	bf00      	nop
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	20000098 	.word	0x20000098

08001498 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001498:	480c      	ldr	r0, [pc, #48]	; (80014cc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800149a:	490d      	ldr	r1, [pc, #52]	; (80014d0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800149c:	4a0d      	ldr	r2, [pc, #52]	; (80014d4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800149e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014a0:	e002      	b.n	80014a8 <LoopCopyDataInit>

080014a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014a6:	3304      	adds	r3, #4

080014a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014ac:	d3f9      	bcc.n	80014a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014ae:	4a0a      	ldr	r2, [pc, #40]	; (80014d8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80014b0:	4c0a      	ldr	r4, [pc, #40]	; (80014dc <LoopFillZerobss+0x22>)
  movs r3, #0
 80014b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014b4:	e001      	b.n	80014ba <LoopFillZerobss>

080014b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014b8:	3204      	adds	r2, #4

080014ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014bc:	d3fb      	bcc.n	80014b6 <FillZerobss>
/* Call the clock system intitialization function.*/
    bl  SystemInit
 80014be:	f7ff feb3 	bl	8001228 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80014c2:	f002 ff21 	bl	8004308 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80014c6:	f7ff f8d3 	bl	8000670 <main>
  bx lr
 80014ca:	4770      	bx	lr
  ldr r0, =_sdata
 80014cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014d0:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80014d4:	08005860 	.word	0x08005860
  ldr r2, =_sbss
 80014d8:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80014dc:	200002ac 	.word	0x200002ac

080014e0 <ADC1_2_IRQHandler>:
 * @retval None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80014e0:	e7fe      	b.n	80014e0 <ADC1_2_IRQHandler>
	...

080014e4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014e8:	4b08      	ldr	r3, [pc, #32]	; (800150c <HAL_Init+0x28>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	4a07      	ldr	r2, [pc, #28]	; (800150c <HAL_Init+0x28>)
 80014ee:	f043 0310 	orr.w	r3, r3, #16
 80014f2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014f4:	2003      	movs	r0, #3
 80014f6:	f000 fb35 	bl	8001b64 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014fa:	200f      	movs	r0, #15
 80014fc:	f000 f808 	bl	8001510 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001500:	f7ff fc3a 	bl	8000d78 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001504:	2300      	movs	r3, #0
}
 8001506:	4618      	mov	r0, r3
 8001508:	bd80      	pop	{r7, pc}
 800150a:	bf00      	nop
 800150c:	40022000 	.word	0x40022000

08001510 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b082      	sub	sp, #8
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001518:	4b12      	ldr	r3, [pc, #72]	; (8001564 <HAL_InitTick+0x54>)
 800151a:	681a      	ldr	r2, [r3, #0]
 800151c:	4b12      	ldr	r3, [pc, #72]	; (8001568 <HAL_InitTick+0x58>)
 800151e:	781b      	ldrb	r3, [r3, #0]
 8001520:	4619      	mov	r1, r3
 8001522:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001526:	fbb3 f3f1 	udiv	r3, r3, r1
 800152a:	fbb2 f3f3 	udiv	r3, r2, r3
 800152e:	4618      	mov	r0, r3
 8001530:	f000 fb4d 	bl	8001bce <HAL_SYSTICK_Config>
 8001534:	4603      	mov	r3, r0
 8001536:	2b00      	cmp	r3, #0
 8001538:	d001      	beq.n	800153e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800153a:	2301      	movs	r3, #1
 800153c:	e00e      	b.n	800155c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	2b0f      	cmp	r3, #15
 8001542:	d80a      	bhi.n	800155a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001544:	2200      	movs	r2, #0
 8001546:	6879      	ldr	r1, [r7, #4]
 8001548:	f04f 30ff 	mov.w	r0, #4294967295
 800154c:	f000 fb15 	bl	8001b7a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001550:	4a06      	ldr	r2, [pc, #24]	; (800156c <HAL_InitTick+0x5c>)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001556:	2300      	movs	r3, #0
 8001558:	e000      	b.n	800155c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800155a:	2301      	movs	r3, #1
}
 800155c:	4618      	mov	r0, r3
 800155e:	3708      	adds	r7, #8
 8001560:	46bd      	mov	sp, r7
 8001562:	bd80      	pop	{r7, pc}
 8001564:	20000000 	.word	0x20000000
 8001568:	20000008 	.word	0x20000008
 800156c:	20000004 	.word	0x20000004

08001570 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001570:	b480      	push	{r7}
 8001572:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001574:	4b05      	ldr	r3, [pc, #20]	; (800158c <HAL_IncTick+0x1c>)
 8001576:	781b      	ldrb	r3, [r3, #0]
 8001578:	461a      	mov	r2, r3
 800157a:	4b05      	ldr	r3, [pc, #20]	; (8001590 <HAL_IncTick+0x20>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	4413      	add	r3, r2
 8001580:	4a03      	ldr	r2, [pc, #12]	; (8001590 <HAL_IncTick+0x20>)
 8001582:	6013      	str	r3, [r2, #0]
}
 8001584:	bf00      	nop
 8001586:	46bd      	mov	sp, r7
 8001588:	bc80      	pop	{r7}
 800158a:	4770      	bx	lr
 800158c:	20000008 	.word	0x20000008
 8001590:	20000298 	.word	0x20000298

08001594 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001594:	b480      	push	{r7}
 8001596:	af00      	add	r7, sp, #0
  return uwTick;
 8001598:	4b02      	ldr	r3, [pc, #8]	; (80015a4 <HAL_GetTick+0x10>)
 800159a:	681b      	ldr	r3, [r3, #0]
}
 800159c:	4618      	mov	r0, r3
 800159e:	46bd      	mov	sp, r7
 80015a0:	bc80      	pop	{r7}
 80015a2:	4770      	bx	lr
 80015a4:	20000298 	.word	0x20000298

080015a8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b086      	sub	sp, #24
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80015b0:	2300      	movs	r3, #0
 80015b2:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80015b4:	2300      	movs	r3, #0
 80015b6:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80015b8:	2300      	movs	r3, #0
 80015ba:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80015bc:	2300      	movs	r3, #0
 80015be:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d101      	bne.n	80015ca <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80015c6:	2301      	movs	r3, #1
 80015c8:	e0be      	b.n	8001748 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	689b      	ldr	r3, [r3, #8]
 80015ce:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d109      	bne.n	80015ec <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	2200      	movs	r2, #0
 80015dc:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	2200      	movs	r2, #0
 80015e2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80015e6:	6878      	ldr	r0, [r7, #4]
 80015e8:	f7ff fbf8 	bl	8000ddc <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80015ec:	6878      	ldr	r0, [r7, #4]
 80015ee:	f000 f9ab 	bl	8001948 <ADC_ConversionStop_Disable>
 80015f2:	4603      	mov	r3, r0
 80015f4:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015fa:	f003 0310 	and.w	r3, r3, #16
 80015fe:	2b00      	cmp	r3, #0
 8001600:	f040 8099 	bne.w	8001736 <HAL_ADC_Init+0x18e>
 8001604:	7dfb      	ldrb	r3, [r7, #23]
 8001606:	2b00      	cmp	r3, #0
 8001608:	f040 8095 	bne.w	8001736 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001610:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001614:	f023 0302 	bic.w	r3, r3, #2
 8001618:	f043 0202 	orr.w	r2, r3, #2
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001628:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	7b1b      	ldrb	r3, [r3, #12]
 800162e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001630:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001632:	68ba      	ldr	r2, [r7, #8]
 8001634:	4313      	orrs	r3, r2
 8001636:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	689b      	ldr	r3, [r3, #8]
 800163c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001640:	d003      	beq.n	800164a <HAL_ADC_Init+0xa2>
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	689b      	ldr	r3, [r3, #8]
 8001646:	2b01      	cmp	r3, #1
 8001648:	d102      	bne.n	8001650 <HAL_ADC_Init+0xa8>
 800164a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800164e:	e000      	b.n	8001652 <HAL_ADC_Init+0xaa>
 8001650:	2300      	movs	r3, #0
 8001652:	693a      	ldr	r2, [r7, #16]
 8001654:	4313      	orrs	r3, r2
 8001656:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	7d1b      	ldrb	r3, [r3, #20]
 800165c:	2b01      	cmp	r3, #1
 800165e:	d119      	bne.n	8001694 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	7b1b      	ldrb	r3, [r3, #12]
 8001664:	2b00      	cmp	r3, #0
 8001666:	d109      	bne.n	800167c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	699b      	ldr	r3, [r3, #24]
 800166c:	3b01      	subs	r3, #1
 800166e:	035a      	lsls	r2, r3, #13
 8001670:	693b      	ldr	r3, [r7, #16]
 8001672:	4313      	orrs	r3, r2
 8001674:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001678:	613b      	str	r3, [r7, #16]
 800167a:	e00b      	b.n	8001694 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001680:	f043 0220 	orr.w	r2, r3, #32
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800168c:	f043 0201 	orr.w	r2, r3, #1
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	685b      	ldr	r3, [r3, #4]
 800169a:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	693a      	ldr	r2, [r7, #16]
 80016a4:	430a      	orrs	r2, r1
 80016a6:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	689a      	ldr	r2, [r3, #8]
 80016ae:	4b28      	ldr	r3, [pc, #160]	; (8001750 <HAL_ADC_Init+0x1a8>)
 80016b0:	4013      	ands	r3, r2
 80016b2:	687a      	ldr	r2, [r7, #4]
 80016b4:	6812      	ldr	r2, [r2, #0]
 80016b6:	68b9      	ldr	r1, [r7, #8]
 80016b8:	430b      	orrs	r3, r1
 80016ba:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	689b      	ldr	r3, [r3, #8]
 80016c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80016c4:	d003      	beq.n	80016ce <HAL_ADC_Init+0x126>
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	689b      	ldr	r3, [r3, #8]
 80016ca:	2b01      	cmp	r3, #1
 80016cc:	d104      	bne.n	80016d8 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	691b      	ldr	r3, [r3, #16]
 80016d2:	3b01      	subs	r3, #1
 80016d4:	051b      	lsls	r3, r3, #20
 80016d6:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016de:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	68fa      	ldr	r2, [r7, #12]
 80016e8:	430a      	orrs	r2, r1
 80016ea:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	689a      	ldr	r2, [r3, #8]
 80016f2:	4b18      	ldr	r3, [pc, #96]	; (8001754 <HAL_ADC_Init+0x1ac>)
 80016f4:	4013      	ands	r3, r2
 80016f6:	68ba      	ldr	r2, [r7, #8]
 80016f8:	429a      	cmp	r2, r3
 80016fa:	d10b      	bne.n	8001714 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	2200      	movs	r2, #0
 8001700:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001706:	f023 0303 	bic.w	r3, r3, #3
 800170a:	f043 0201 	orr.w	r2, r3, #1
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001712:	e018      	b.n	8001746 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001718:	f023 0312 	bic.w	r3, r3, #18
 800171c:	f043 0210 	orr.w	r2, r3, #16
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001728:	f043 0201 	orr.w	r2, r3, #1
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001730:	2301      	movs	r3, #1
 8001732:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001734:	e007      	b.n	8001746 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800173a:	f043 0210 	orr.w	r2, r3, #16
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001742:	2301      	movs	r3, #1
 8001744:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001746:	7dfb      	ldrb	r3, [r7, #23]
}
 8001748:	4618      	mov	r0, r3
 800174a:	3718      	adds	r7, #24
 800174c:	46bd      	mov	sp, r7
 800174e:	bd80      	pop	{r7, pc}
 8001750:	ffe1f7fd 	.word	0xffe1f7fd
 8001754:	ff1f0efe 	.word	0xff1f0efe

08001758 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001758:	b480      	push	{r7}
 800175a:	b085      	sub	sp, #20
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
 8001760:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001762:	2300      	movs	r3, #0
 8001764:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001766:	2300      	movs	r3, #0
 8001768:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001770:	2b01      	cmp	r3, #1
 8001772:	d101      	bne.n	8001778 <HAL_ADC_ConfigChannel+0x20>
 8001774:	2302      	movs	r3, #2
 8001776:	e0dc      	b.n	8001932 <HAL_ADC_ConfigChannel+0x1da>
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	2201      	movs	r2, #1
 800177c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	685b      	ldr	r3, [r3, #4]
 8001784:	2b06      	cmp	r3, #6
 8001786:	d81c      	bhi.n	80017c2 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	685a      	ldr	r2, [r3, #4]
 8001792:	4613      	mov	r3, r2
 8001794:	009b      	lsls	r3, r3, #2
 8001796:	4413      	add	r3, r2
 8001798:	3b05      	subs	r3, #5
 800179a:	221f      	movs	r2, #31
 800179c:	fa02 f303 	lsl.w	r3, r2, r3
 80017a0:	43db      	mvns	r3, r3
 80017a2:	4019      	ands	r1, r3
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	6818      	ldr	r0, [r3, #0]
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	685a      	ldr	r2, [r3, #4]
 80017ac:	4613      	mov	r3, r2
 80017ae:	009b      	lsls	r3, r3, #2
 80017b0:	4413      	add	r3, r2
 80017b2:	3b05      	subs	r3, #5
 80017b4:	fa00 f203 	lsl.w	r2, r0, r3
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	430a      	orrs	r2, r1
 80017be:	635a      	str	r2, [r3, #52]	; 0x34
 80017c0:	e03c      	b.n	800183c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	685b      	ldr	r3, [r3, #4]
 80017c6:	2b0c      	cmp	r3, #12
 80017c8:	d81c      	bhi.n	8001804 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	685a      	ldr	r2, [r3, #4]
 80017d4:	4613      	mov	r3, r2
 80017d6:	009b      	lsls	r3, r3, #2
 80017d8:	4413      	add	r3, r2
 80017da:	3b23      	subs	r3, #35	; 0x23
 80017dc:	221f      	movs	r2, #31
 80017de:	fa02 f303 	lsl.w	r3, r2, r3
 80017e2:	43db      	mvns	r3, r3
 80017e4:	4019      	ands	r1, r3
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	6818      	ldr	r0, [r3, #0]
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	685a      	ldr	r2, [r3, #4]
 80017ee:	4613      	mov	r3, r2
 80017f0:	009b      	lsls	r3, r3, #2
 80017f2:	4413      	add	r3, r2
 80017f4:	3b23      	subs	r3, #35	; 0x23
 80017f6:	fa00 f203 	lsl.w	r2, r0, r3
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	430a      	orrs	r2, r1
 8001800:	631a      	str	r2, [r3, #48]	; 0x30
 8001802:	e01b      	b.n	800183c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	685a      	ldr	r2, [r3, #4]
 800180e:	4613      	mov	r3, r2
 8001810:	009b      	lsls	r3, r3, #2
 8001812:	4413      	add	r3, r2
 8001814:	3b41      	subs	r3, #65	; 0x41
 8001816:	221f      	movs	r2, #31
 8001818:	fa02 f303 	lsl.w	r3, r2, r3
 800181c:	43db      	mvns	r3, r3
 800181e:	4019      	ands	r1, r3
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	6818      	ldr	r0, [r3, #0]
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	685a      	ldr	r2, [r3, #4]
 8001828:	4613      	mov	r3, r2
 800182a:	009b      	lsls	r3, r3, #2
 800182c:	4413      	add	r3, r2
 800182e:	3b41      	subs	r3, #65	; 0x41
 8001830:	fa00 f203 	lsl.w	r2, r0, r3
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	430a      	orrs	r2, r1
 800183a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	2b09      	cmp	r3, #9
 8001842:	d91c      	bls.n	800187e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	68d9      	ldr	r1, [r3, #12]
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	681a      	ldr	r2, [r3, #0]
 800184e:	4613      	mov	r3, r2
 8001850:	005b      	lsls	r3, r3, #1
 8001852:	4413      	add	r3, r2
 8001854:	3b1e      	subs	r3, #30
 8001856:	2207      	movs	r2, #7
 8001858:	fa02 f303 	lsl.w	r3, r2, r3
 800185c:	43db      	mvns	r3, r3
 800185e:	4019      	ands	r1, r3
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	6898      	ldr	r0, [r3, #8]
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	681a      	ldr	r2, [r3, #0]
 8001868:	4613      	mov	r3, r2
 800186a:	005b      	lsls	r3, r3, #1
 800186c:	4413      	add	r3, r2
 800186e:	3b1e      	subs	r3, #30
 8001870:	fa00 f203 	lsl.w	r2, r0, r3
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	430a      	orrs	r2, r1
 800187a:	60da      	str	r2, [r3, #12]
 800187c:	e019      	b.n	80018b2 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	6919      	ldr	r1, [r3, #16]
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	681a      	ldr	r2, [r3, #0]
 8001888:	4613      	mov	r3, r2
 800188a:	005b      	lsls	r3, r3, #1
 800188c:	4413      	add	r3, r2
 800188e:	2207      	movs	r2, #7
 8001890:	fa02 f303 	lsl.w	r3, r2, r3
 8001894:	43db      	mvns	r3, r3
 8001896:	4019      	ands	r1, r3
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	6898      	ldr	r0, [r3, #8]
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	681a      	ldr	r2, [r3, #0]
 80018a0:	4613      	mov	r3, r2
 80018a2:	005b      	lsls	r3, r3, #1
 80018a4:	4413      	add	r3, r2
 80018a6:	fa00 f203 	lsl.w	r2, r0, r3
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	430a      	orrs	r2, r1
 80018b0:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	2b10      	cmp	r3, #16
 80018b8:	d003      	beq.n	80018c2 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80018be:	2b11      	cmp	r3, #17
 80018c0:	d132      	bne.n	8001928 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	4a1d      	ldr	r2, [pc, #116]	; (800193c <HAL_ADC_ConfigChannel+0x1e4>)
 80018c8:	4293      	cmp	r3, r2
 80018ca:	d125      	bne.n	8001918 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	689b      	ldr	r3, [r3, #8]
 80018d2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d126      	bne.n	8001928 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	689a      	ldr	r2, [r3, #8]
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80018e8:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	2b10      	cmp	r3, #16
 80018f0:	d11a      	bne.n	8001928 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80018f2:	4b13      	ldr	r3, [pc, #76]	; (8001940 <HAL_ADC_ConfigChannel+0x1e8>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	4a13      	ldr	r2, [pc, #76]	; (8001944 <HAL_ADC_ConfigChannel+0x1ec>)
 80018f8:	fba2 2303 	umull	r2, r3, r2, r3
 80018fc:	0c9a      	lsrs	r2, r3, #18
 80018fe:	4613      	mov	r3, r2
 8001900:	009b      	lsls	r3, r3, #2
 8001902:	4413      	add	r3, r2
 8001904:	005b      	lsls	r3, r3, #1
 8001906:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001908:	e002      	b.n	8001910 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800190a:	68bb      	ldr	r3, [r7, #8]
 800190c:	3b01      	subs	r3, #1
 800190e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001910:	68bb      	ldr	r3, [r7, #8]
 8001912:	2b00      	cmp	r3, #0
 8001914:	d1f9      	bne.n	800190a <HAL_ADC_ConfigChannel+0x1b2>
 8001916:	e007      	b.n	8001928 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800191c:	f043 0220 	orr.w	r2, r3, #32
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001924:	2301      	movs	r3, #1
 8001926:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	2200      	movs	r2, #0
 800192c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001930:	7bfb      	ldrb	r3, [r7, #15]
}
 8001932:	4618      	mov	r0, r3
 8001934:	3714      	adds	r7, #20
 8001936:	46bd      	mov	sp, r7
 8001938:	bc80      	pop	{r7}
 800193a:	4770      	bx	lr
 800193c:	40012400 	.word	0x40012400
 8001940:	20000000 	.word	0x20000000
 8001944:	431bde83 	.word	0x431bde83

08001948 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b084      	sub	sp, #16
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001950:	2300      	movs	r3, #0
 8001952:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	689b      	ldr	r3, [r3, #8]
 800195a:	f003 0301 	and.w	r3, r3, #1
 800195e:	2b01      	cmp	r3, #1
 8001960:	d12e      	bne.n	80019c0 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	689a      	ldr	r2, [r3, #8]
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f022 0201 	bic.w	r2, r2, #1
 8001970:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001972:	f7ff fe0f 	bl	8001594 <HAL_GetTick>
 8001976:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001978:	e01b      	b.n	80019b2 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800197a:	f7ff fe0b 	bl	8001594 <HAL_GetTick>
 800197e:	4602      	mov	r2, r0
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	1ad3      	subs	r3, r2, r3
 8001984:	2b02      	cmp	r3, #2
 8001986:	d914      	bls.n	80019b2 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	689b      	ldr	r3, [r3, #8]
 800198e:	f003 0301 	and.w	r3, r3, #1
 8001992:	2b01      	cmp	r3, #1
 8001994:	d10d      	bne.n	80019b2 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800199a:	f043 0210 	orr.w	r2, r3, #16
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019a6:	f043 0201 	orr.w	r2, r3, #1
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 80019ae:	2301      	movs	r3, #1
 80019b0:	e007      	b.n	80019c2 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	689b      	ldr	r3, [r3, #8]
 80019b8:	f003 0301 	and.w	r3, r3, #1
 80019bc:	2b01      	cmp	r3, #1
 80019be:	d0dc      	beq.n	800197a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80019c0:	2300      	movs	r3, #0
}
 80019c2:	4618      	mov	r0, r3
 80019c4:	3710      	adds	r7, #16
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}
	...

080019cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b085      	sub	sp, #20
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	f003 0307 	and.w	r3, r3, #7
 80019da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019dc:	4b0c      	ldr	r3, [pc, #48]	; (8001a10 <__NVIC_SetPriorityGrouping+0x44>)
 80019de:	68db      	ldr	r3, [r3, #12]
 80019e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019e2:	68ba      	ldr	r2, [r7, #8]
 80019e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80019e8:	4013      	ands	r3, r2
 80019ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019f0:	68bb      	ldr	r3, [r7, #8]
 80019f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80019f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019fe:	4a04      	ldr	r2, [pc, #16]	; (8001a10 <__NVIC_SetPriorityGrouping+0x44>)
 8001a00:	68bb      	ldr	r3, [r7, #8]
 8001a02:	60d3      	str	r3, [r2, #12]
}
 8001a04:	bf00      	nop
 8001a06:	3714      	adds	r7, #20
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bc80      	pop	{r7}
 8001a0c:	4770      	bx	lr
 8001a0e:	bf00      	nop
 8001a10:	e000ed00 	.word	0xe000ed00

08001a14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a14:	b480      	push	{r7}
 8001a16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a18:	4b04      	ldr	r3, [pc, #16]	; (8001a2c <__NVIC_GetPriorityGrouping+0x18>)
 8001a1a:	68db      	ldr	r3, [r3, #12]
 8001a1c:	0a1b      	lsrs	r3, r3, #8
 8001a1e:	f003 0307 	and.w	r3, r3, #7
}
 8001a22:	4618      	mov	r0, r3
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bc80      	pop	{r7}
 8001a28:	4770      	bx	lr
 8001a2a:	bf00      	nop
 8001a2c:	e000ed00 	.word	0xe000ed00

08001a30 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a30:	b480      	push	{r7}
 8001a32:	b083      	sub	sp, #12
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	4603      	mov	r3, r0
 8001a38:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	db0b      	blt.n	8001a5a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a42:	79fb      	ldrb	r3, [r7, #7]
 8001a44:	f003 021f 	and.w	r2, r3, #31
 8001a48:	4906      	ldr	r1, [pc, #24]	; (8001a64 <__NVIC_EnableIRQ+0x34>)
 8001a4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a4e:	095b      	lsrs	r3, r3, #5
 8001a50:	2001      	movs	r0, #1
 8001a52:	fa00 f202 	lsl.w	r2, r0, r2
 8001a56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a5a:	bf00      	nop
 8001a5c:	370c      	adds	r7, #12
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bc80      	pop	{r7}
 8001a62:	4770      	bx	lr
 8001a64:	e000e100 	.word	0xe000e100

08001a68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	b083      	sub	sp, #12
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	4603      	mov	r3, r0
 8001a70:	6039      	str	r1, [r7, #0]
 8001a72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	db0a      	blt.n	8001a92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	b2da      	uxtb	r2, r3
 8001a80:	490c      	ldr	r1, [pc, #48]	; (8001ab4 <__NVIC_SetPriority+0x4c>)
 8001a82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a86:	0112      	lsls	r2, r2, #4
 8001a88:	b2d2      	uxtb	r2, r2
 8001a8a:	440b      	add	r3, r1
 8001a8c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a90:	e00a      	b.n	8001aa8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	b2da      	uxtb	r2, r3
 8001a96:	4908      	ldr	r1, [pc, #32]	; (8001ab8 <__NVIC_SetPriority+0x50>)
 8001a98:	79fb      	ldrb	r3, [r7, #7]
 8001a9a:	f003 030f 	and.w	r3, r3, #15
 8001a9e:	3b04      	subs	r3, #4
 8001aa0:	0112      	lsls	r2, r2, #4
 8001aa2:	b2d2      	uxtb	r2, r2
 8001aa4:	440b      	add	r3, r1
 8001aa6:	761a      	strb	r2, [r3, #24]
}
 8001aa8:	bf00      	nop
 8001aaa:	370c      	adds	r7, #12
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bc80      	pop	{r7}
 8001ab0:	4770      	bx	lr
 8001ab2:	bf00      	nop
 8001ab4:	e000e100 	.word	0xe000e100
 8001ab8:	e000ed00 	.word	0xe000ed00

08001abc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001abc:	b480      	push	{r7}
 8001abe:	b089      	sub	sp, #36	; 0x24
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	60f8      	str	r0, [r7, #12]
 8001ac4:	60b9      	str	r1, [r7, #8]
 8001ac6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	f003 0307 	and.w	r3, r3, #7
 8001ace:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ad0:	69fb      	ldr	r3, [r7, #28]
 8001ad2:	f1c3 0307 	rsb	r3, r3, #7
 8001ad6:	2b04      	cmp	r3, #4
 8001ad8:	bf28      	it	cs
 8001ada:	2304      	movcs	r3, #4
 8001adc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ade:	69fb      	ldr	r3, [r7, #28]
 8001ae0:	3304      	adds	r3, #4
 8001ae2:	2b06      	cmp	r3, #6
 8001ae4:	d902      	bls.n	8001aec <NVIC_EncodePriority+0x30>
 8001ae6:	69fb      	ldr	r3, [r7, #28]
 8001ae8:	3b03      	subs	r3, #3
 8001aea:	e000      	b.n	8001aee <NVIC_EncodePriority+0x32>
 8001aec:	2300      	movs	r3, #0
 8001aee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001af0:	f04f 32ff 	mov.w	r2, #4294967295
 8001af4:	69bb      	ldr	r3, [r7, #24]
 8001af6:	fa02 f303 	lsl.w	r3, r2, r3
 8001afa:	43da      	mvns	r2, r3
 8001afc:	68bb      	ldr	r3, [r7, #8]
 8001afe:	401a      	ands	r2, r3
 8001b00:	697b      	ldr	r3, [r7, #20]
 8001b02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b04:	f04f 31ff 	mov.w	r1, #4294967295
 8001b08:	697b      	ldr	r3, [r7, #20]
 8001b0a:	fa01 f303 	lsl.w	r3, r1, r3
 8001b0e:	43d9      	mvns	r1, r3
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b14:	4313      	orrs	r3, r2
         );
}
 8001b16:	4618      	mov	r0, r3
 8001b18:	3724      	adds	r7, #36	; 0x24
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bc80      	pop	{r7}
 8001b1e:	4770      	bx	lr

08001b20 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b082      	sub	sp, #8
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	3b01      	subs	r3, #1
 8001b2c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b30:	d301      	bcc.n	8001b36 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b32:	2301      	movs	r3, #1
 8001b34:	e00f      	b.n	8001b56 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b36:	4a0a      	ldr	r2, [pc, #40]	; (8001b60 <SysTick_Config+0x40>)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	3b01      	subs	r3, #1
 8001b3c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b3e:	210f      	movs	r1, #15
 8001b40:	f04f 30ff 	mov.w	r0, #4294967295
 8001b44:	f7ff ff90 	bl	8001a68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b48:	4b05      	ldr	r3, [pc, #20]	; (8001b60 <SysTick_Config+0x40>)
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b4e:	4b04      	ldr	r3, [pc, #16]	; (8001b60 <SysTick_Config+0x40>)
 8001b50:	2207      	movs	r2, #7
 8001b52:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b54:	2300      	movs	r3, #0
}
 8001b56:	4618      	mov	r0, r3
 8001b58:	3708      	adds	r7, #8
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	e000e010 	.word	0xe000e010

08001b64 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b082      	sub	sp, #8
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b6c:	6878      	ldr	r0, [r7, #4]
 8001b6e:	f7ff ff2d 	bl	80019cc <__NVIC_SetPriorityGrouping>
}
 8001b72:	bf00      	nop
 8001b74:	3708      	adds	r7, #8
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}

08001b7a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b7a:	b580      	push	{r7, lr}
 8001b7c:	b086      	sub	sp, #24
 8001b7e:	af00      	add	r7, sp, #0
 8001b80:	4603      	mov	r3, r0
 8001b82:	60b9      	str	r1, [r7, #8]
 8001b84:	607a      	str	r2, [r7, #4]
 8001b86:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b8c:	f7ff ff42 	bl	8001a14 <__NVIC_GetPriorityGrouping>
 8001b90:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b92:	687a      	ldr	r2, [r7, #4]
 8001b94:	68b9      	ldr	r1, [r7, #8]
 8001b96:	6978      	ldr	r0, [r7, #20]
 8001b98:	f7ff ff90 	bl	8001abc <NVIC_EncodePriority>
 8001b9c:	4602      	mov	r2, r0
 8001b9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ba2:	4611      	mov	r1, r2
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	f7ff ff5f 	bl	8001a68 <__NVIC_SetPriority>
}
 8001baa:	bf00      	nop
 8001bac:	3718      	adds	r7, #24
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}

08001bb2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bb2:	b580      	push	{r7, lr}
 8001bb4:	b082      	sub	sp, #8
 8001bb6:	af00      	add	r7, sp, #0
 8001bb8:	4603      	mov	r3, r0
 8001bba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001bbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	f7ff ff35 	bl	8001a30 <__NVIC_EnableIRQ>
}
 8001bc6:	bf00      	nop
 8001bc8:	3708      	adds	r7, #8
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}

08001bce <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001bce:	b580      	push	{r7, lr}
 8001bd0:	b082      	sub	sp, #8
 8001bd2:	af00      	add	r7, sp, #0
 8001bd4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001bd6:	6878      	ldr	r0, [r7, #4]
 8001bd8:	f7ff ffa2 	bl	8001b20 <SysTick_Config>
 8001bdc:	4603      	mov	r3, r0
}
 8001bde:	4618      	mov	r0, r3
 8001be0:	3708      	adds	r7, #8
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}

08001be6 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8001be6:	b580      	push	{r7, lr}
 8001be8:	b082      	sub	sp, #8
 8001bea:	af00      	add	r7, sp, #0
 8001bec:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d101      	bne.n	8001bf8 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	e014      	b.n	8001c22 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	791b      	ldrb	r3, [r3, #4]
 8001bfc:	b2db      	uxtb	r3, r3
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d105      	bne.n	8001c0e <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	2200      	movs	r2, #0
 8001c06:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001c08:	6878      	ldr	r0, [r7, #4]
 8001c0a:	f7ff f923 	bl	8000e54 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	2202      	movs	r2, #2
 8001c12:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2200      	movs	r2, #0
 8001c18:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	2201      	movs	r2, #1
 8001c1e:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8001c20:	2300      	movs	r3, #0
}
 8001c22:	4618      	mov	r0, r3
 8001c24:	3708      	adds	r7, #8
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd80      	pop	{r7, pc}

08001c2a <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8001c2a:	b480      	push	{r7}
 8001c2c:	b087      	sub	sp, #28
 8001c2e:	af00      	add	r7, sp, #0
 8001c30:	60f8      	str	r0, [r7, #12]
 8001c32:	60b9      	str	r1, [r7, #8]
 8001c34:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	795b      	ldrb	r3, [r3, #5]
 8001c3a:	2b01      	cmp	r3, #1
 8001c3c:	d101      	bne.n	8001c42 <HAL_DAC_ConfigChannel+0x18>
 8001c3e:	2302      	movs	r3, #2
 8001c40:	e03c      	b.n	8001cbc <HAL_DAC_ConfigChannel+0x92>
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	2201      	movs	r2, #1
 8001c46:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	2202      	movs	r2, #2
 8001c4c:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	f003 0310 	and.w	r3, r3, #16
 8001c5c:	f640 72fe 	movw	r2, #4094	; 0xffe
 8001c60:	fa02 f303 	lsl.w	r3, r2, r3
 8001c64:	43db      	mvns	r3, r3
 8001c66:	697a      	ldr	r2, [r7, #20]
 8001c68:	4013      	ands	r3, r2
 8001c6a:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8001c6c:	68bb      	ldr	r3, [r7, #8]
 8001c6e:	681a      	ldr	r2, [r3, #0]
 8001c70:	68bb      	ldr	r3, [r7, #8]
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	4313      	orrs	r3, r2
 8001c76:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	f003 0310 	and.w	r3, r3, #16
 8001c7e:	693a      	ldr	r2, [r7, #16]
 8001c80:	fa02 f303 	lsl.w	r3, r2, r3
 8001c84:	697a      	ldr	r2, [r7, #20]
 8001c86:	4313      	orrs	r3, r2
 8001c88:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	697a      	ldr	r2, [r7, #20]
 8001c90:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	6819      	ldr	r1, [r3, #0]
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	f003 0310 	and.w	r3, r3, #16
 8001c9e:	22c0      	movs	r2, #192	; 0xc0
 8001ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca4:	43da      	mvns	r2, r3
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	400a      	ands	r2, r1
 8001cac:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	2201      	movs	r2, #1
 8001cb2:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001cba:	2300      	movs	r3, #0
}
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	371c      	adds	r7, #28
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bc80      	pop	{r7}
 8001cc4:	4770      	bx	lr

08001cc6 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001cc6:	b480      	push	{r7}
 8001cc8:	b085      	sub	sp, #20
 8001cca:	af00      	add	r7, sp, #0
 8001ccc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001cd8:	2b02      	cmp	r3, #2
 8001cda:	d008      	beq.n	8001cee <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	2204      	movs	r2, #4
 8001ce0:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001cea:	2301      	movs	r3, #1
 8001cec:	e020      	b.n	8001d30 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	681a      	ldr	r2, [r3, #0]
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f022 020e 	bic.w	r2, r2, #14
 8001cfc:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	681a      	ldr	r2, [r3, #0]
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f022 0201 	bic.w	r2, r2, #1
 8001d0c:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d16:	2101      	movs	r1, #1
 8001d18:	fa01 f202 	lsl.w	r2, r1, r2
 8001d1c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	2201      	movs	r2, #1
 8001d22:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	2200      	movs	r2, #0
 8001d2a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001d2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d30:	4618      	mov	r0, r3
 8001d32:	3714      	adds	r7, #20
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bc80      	pop	{r7}
 8001d38:	4770      	bx	lr
	...

08001d3c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b084      	sub	sp, #16
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d44:	2300      	movs	r3, #0
 8001d46:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001d4e:	2b02      	cmp	r3, #2
 8001d50:	d005      	beq.n	8001d5e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	2204      	movs	r2, #4
 8001d56:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001d58:	2301      	movs	r3, #1
 8001d5a:	73fb      	strb	r3, [r7, #15]
 8001d5c:	e0d6      	b.n	8001f0c <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	681a      	ldr	r2, [r3, #0]
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f022 020e 	bic.w	r2, r2, #14
 8001d6c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	681a      	ldr	r2, [r3, #0]
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f022 0201 	bic.w	r2, r2, #1
 8001d7c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	461a      	mov	r2, r3
 8001d84:	4b64      	ldr	r3, [pc, #400]	; (8001f18 <HAL_DMA_Abort_IT+0x1dc>)
 8001d86:	429a      	cmp	r2, r3
 8001d88:	d958      	bls.n	8001e3c <HAL_DMA_Abort_IT+0x100>
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	4a63      	ldr	r2, [pc, #396]	; (8001f1c <HAL_DMA_Abort_IT+0x1e0>)
 8001d90:	4293      	cmp	r3, r2
 8001d92:	d04f      	beq.n	8001e34 <HAL_DMA_Abort_IT+0xf8>
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4a61      	ldr	r2, [pc, #388]	; (8001f20 <HAL_DMA_Abort_IT+0x1e4>)
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d048      	beq.n	8001e30 <HAL_DMA_Abort_IT+0xf4>
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	4a60      	ldr	r2, [pc, #384]	; (8001f24 <HAL_DMA_Abort_IT+0x1e8>)
 8001da4:	4293      	cmp	r3, r2
 8001da6:	d040      	beq.n	8001e2a <HAL_DMA_Abort_IT+0xee>
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4a5e      	ldr	r2, [pc, #376]	; (8001f28 <HAL_DMA_Abort_IT+0x1ec>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d038      	beq.n	8001e24 <HAL_DMA_Abort_IT+0xe8>
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	4a5d      	ldr	r2, [pc, #372]	; (8001f2c <HAL_DMA_Abort_IT+0x1f0>)
 8001db8:	4293      	cmp	r3, r2
 8001dba:	d030      	beq.n	8001e1e <HAL_DMA_Abort_IT+0xe2>
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4a5b      	ldr	r2, [pc, #364]	; (8001f30 <HAL_DMA_Abort_IT+0x1f4>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d028      	beq.n	8001e18 <HAL_DMA_Abort_IT+0xdc>
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	4a53      	ldr	r2, [pc, #332]	; (8001f18 <HAL_DMA_Abort_IT+0x1dc>)
 8001dcc:	4293      	cmp	r3, r2
 8001dce:	d020      	beq.n	8001e12 <HAL_DMA_Abort_IT+0xd6>
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4a57      	ldr	r2, [pc, #348]	; (8001f34 <HAL_DMA_Abort_IT+0x1f8>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d019      	beq.n	8001e0e <HAL_DMA_Abort_IT+0xd2>
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	4a56      	ldr	r2, [pc, #344]	; (8001f38 <HAL_DMA_Abort_IT+0x1fc>)
 8001de0:	4293      	cmp	r3, r2
 8001de2:	d012      	beq.n	8001e0a <HAL_DMA_Abort_IT+0xce>
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4a54      	ldr	r2, [pc, #336]	; (8001f3c <HAL_DMA_Abort_IT+0x200>)
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d00a      	beq.n	8001e04 <HAL_DMA_Abort_IT+0xc8>
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	4a53      	ldr	r2, [pc, #332]	; (8001f40 <HAL_DMA_Abort_IT+0x204>)
 8001df4:	4293      	cmp	r3, r2
 8001df6:	d102      	bne.n	8001dfe <HAL_DMA_Abort_IT+0xc2>
 8001df8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001dfc:	e01b      	b.n	8001e36 <HAL_DMA_Abort_IT+0xfa>
 8001dfe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001e02:	e018      	b.n	8001e36 <HAL_DMA_Abort_IT+0xfa>
 8001e04:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e08:	e015      	b.n	8001e36 <HAL_DMA_Abort_IT+0xfa>
 8001e0a:	2310      	movs	r3, #16
 8001e0c:	e013      	b.n	8001e36 <HAL_DMA_Abort_IT+0xfa>
 8001e0e:	2301      	movs	r3, #1
 8001e10:	e011      	b.n	8001e36 <HAL_DMA_Abort_IT+0xfa>
 8001e12:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001e16:	e00e      	b.n	8001e36 <HAL_DMA_Abort_IT+0xfa>
 8001e18:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001e1c:	e00b      	b.n	8001e36 <HAL_DMA_Abort_IT+0xfa>
 8001e1e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001e22:	e008      	b.n	8001e36 <HAL_DMA_Abort_IT+0xfa>
 8001e24:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e28:	e005      	b.n	8001e36 <HAL_DMA_Abort_IT+0xfa>
 8001e2a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e2e:	e002      	b.n	8001e36 <HAL_DMA_Abort_IT+0xfa>
 8001e30:	2310      	movs	r3, #16
 8001e32:	e000      	b.n	8001e36 <HAL_DMA_Abort_IT+0xfa>
 8001e34:	2301      	movs	r3, #1
 8001e36:	4a43      	ldr	r2, [pc, #268]	; (8001f44 <HAL_DMA_Abort_IT+0x208>)
 8001e38:	6053      	str	r3, [r2, #4]
 8001e3a:	e057      	b.n	8001eec <HAL_DMA_Abort_IT+0x1b0>
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4a36      	ldr	r2, [pc, #216]	; (8001f1c <HAL_DMA_Abort_IT+0x1e0>)
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d04f      	beq.n	8001ee6 <HAL_DMA_Abort_IT+0x1aa>
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4a35      	ldr	r2, [pc, #212]	; (8001f20 <HAL_DMA_Abort_IT+0x1e4>)
 8001e4c:	4293      	cmp	r3, r2
 8001e4e:	d048      	beq.n	8001ee2 <HAL_DMA_Abort_IT+0x1a6>
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4a33      	ldr	r2, [pc, #204]	; (8001f24 <HAL_DMA_Abort_IT+0x1e8>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d040      	beq.n	8001edc <HAL_DMA_Abort_IT+0x1a0>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4a32      	ldr	r2, [pc, #200]	; (8001f28 <HAL_DMA_Abort_IT+0x1ec>)
 8001e60:	4293      	cmp	r3, r2
 8001e62:	d038      	beq.n	8001ed6 <HAL_DMA_Abort_IT+0x19a>
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4a30      	ldr	r2, [pc, #192]	; (8001f2c <HAL_DMA_Abort_IT+0x1f0>)
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d030      	beq.n	8001ed0 <HAL_DMA_Abort_IT+0x194>
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4a2f      	ldr	r2, [pc, #188]	; (8001f30 <HAL_DMA_Abort_IT+0x1f4>)
 8001e74:	4293      	cmp	r3, r2
 8001e76:	d028      	beq.n	8001eca <HAL_DMA_Abort_IT+0x18e>
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4a26      	ldr	r2, [pc, #152]	; (8001f18 <HAL_DMA_Abort_IT+0x1dc>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d020      	beq.n	8001ec4 <HAL_DMA_Abort_IT+0x188>
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4a2b      	ldr	r2, [pc, #172]	; (8001f34 <HAL_DMA_Abort_IT+0x1f8>)
 8001e88:	4293      	cmp	r3, r2
 8001e8a:	d019      	beq.n	8001ec0 <HAL_DMA_Abort_IT+0x184>
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4a29      	ldr	r2, [pc, #164]	; (8001f38 <HAL_DMA_Abort_IT+0x1fc>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d012      	beq.n	8001ebc <HAL_DMA_Abort_IT+0x180>
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	4a28      	ldr	r2, [pc, #160]	; (8001f3c <HAL_DMA_Abort_IT+0x200>)
 8001e9c:	4293      	cmp	r3, r2
 8001e9e:	d00a      	beq.n	8001eb6 <HAL_DMA_Abort_IT+0x17a>
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4a26      	ldr	r2, [pc, #152]	; (8001f40 <HAL_DMA_Abort_IT+0x204>)
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d102      	bne.n	8001eb0 <HAL_DMA_Abort_IT+0x174>
 8001eaa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001eae:	e01b      	b.n	8001ee8 <HAL_DMA_Abort_IT+0x1ac>
 8001eb0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001eb4:	e018      	b.n	8001ee8 <HAL_DMA_Abort_IT+0x1ac>
 8001eb6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001eba:	e015      	b.n	8001ee8 <HAL_DMA_Abort_IT+0x1ac>
 8001ebc:	2310      	movs	r3, #16
 8001ebe:	e013      	b.n	8001ee8 <HAL_DMA_Abort_IT+0x1ac>
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	e011      	b.n	8001ee8 <HAL_DMA_Abort_IT+0x1ac>
 8001ec4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001ec8:	e00e      	b.n	8001ee8 <HAL_DMA_Abort_IT+0x1ac>
 8001eca:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001ece:	e00b      	b.n	8001ee8 <HAL_DMA_Abort_IT+0x1ac>
 8001ed0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001ed4:	e008      	b.n	8001ee8 <HAL_DMA_Abort_IT+0x1ac>
 8001ed6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001eda:	e005      	b.n	8001ee8 <HAL_DMA_Abort_IT+0x1ac>
 8001edc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ee0:	e002      	b.n	8001ee8 <HAL_DMA_Abort_IT+0x1ac>
 8001ee2:	2310      	movs	r3, #16
 8001ee4:	e000      	b.n	8001ee8 <HAL_DMA_Abort_IT+0x1ac>
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	4a17      	ldr	r2, [pc, #92]	; (8001f48 <HAL_DMA_Abort_IT+0x20c>)
 8001eea:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2201      	movs	r2, #1
 8001ef0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d003      	beq.n	8001f0c <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f08:	6878      	ldr	r0, [r7, #4]
 8001f0a:	4798      	blx	r3
    } 
  }
  return status;
 8001f0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f0e:	4618      	mov	r0, r3
 8001f10:	3710      	adds	r7, #16
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}
 8001f16:	bf00      	nop
 8001f18:	40020080 	.word	0x40020080
 8001f1c:	40020008 	.word	0x40020008
 8001f20:	4002001c 	.word	0x4002001c
 8001f24:	40020030 	.word	0x40020030
 8001f28:	40020044 	.word	0x40020044
 8001f2c:	40020058 	.word	0x40020058
 8001f30:	4002006c 	.word	0x4002006c
 8001f34:	40020408 	.word	0x40020408
 8001f38:	4002041c 	.word	0x4002041c
 8001f3c:	40020430 	.word	0x40020430
 8001f40:	40020444 	.word	0x40020444
 8001f44:	40020400 	.word	0x40020400
 8001f48:	40020000 	.word	0x40020000

08001f4c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	b08b      	sub	sp, #44	; 0x2c
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
 8001f54:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001f56:	2300      	movs	r3, #0
 8001f58:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f5e:	e169      	b.n	8002234 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001f60:	2201      	movs	r2, #1
 8001f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f64:	fa02 f303 	lsl.w	r3, r2, r3
 8001f68:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	69fa      	ldr	r2, [r7, #28]
 8001f70:	4013      	ands	r3, r2
 8001f72:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001f74:	69ba      	ldr	r2, [r7, #24]
 8001f76:	69fb      	ldr	r3, [r7, #28]
 8001f78:	429a      	cmp	r2, r3
 8001f7a:	f040 8158 	bne.w	800222e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	685b      	ldr	r3, [r3, #4]
 8001f82:	4a9a      	ldr	r2, [pc, #616]	; (80021ec <HAL_GPIO_Init+0x2a0>)
 8001f84:	4293      	cmp	r3, r2
 8001f86:	d05e      	beq.n	8002046 <HAL_GPIO_Init+0xfa>
 8001f88:	4a98      	ldr	r2, [pc, #608]	; (80021ec <HAL_GPIO_Init+0x2a0>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d875      	bhi.n	800207a <HAL_GPIO_Init+0x12e>
 8001f8e:	4a98      	ldr	r2, [pc, #608]	; (80021f0 <HAL_GPIO_Init+0x2a4>)
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d058      	beq.n	8002046 <HAL_GPIO_Init+0xfa>
 8001f94:	4a96      	ldr	r2, [pc, #600]	; (80021f0 <HAL_GPIO_Init+0x2a4>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d86f      	bhi.n	800207a <HAL_GPIO_Init+0x12e>
 8001f9a:	4a96      	ldr	r2, [pc, #600]	; (80021f4 <HAL_GPIO_Init+0x2a8>)
 8001f9c:	4293      	cmp	r3, r2
 8001f9e:	d052      	beq.n	8002046 <HAL_GPIO_Init+0xfa>
 8001fa0:	4a94      	ldr	r2, [pc, #592]	; (80021f4 <HAL_GPIO_Init+0x2a8>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d869      	bhi.n	800207a <HAL_GPIO_Init+0x12e>
 8001fa6:	4a94      	ldr	r2, [pc, #592]	; (80021f8 <HAL_GPIO_Init+0x2ac>)
 8001fa8:	4293      	cmp	r3, r2
 8001faa:	d04c      	beq.n	8002046 <HAL_GPIO_Init+0xfa>
 8001fac:	4a92      	ldr	r2, [pc, #584]	; (80021f8 <HAL_GPIO_Init+0x2ac>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d863      	bhi.n	800207a <HAL_GPIO_Init+0x12e>
 8001fb2:	4a92      	ldr	r2, [pc, #584]	; (80021fc <HAL_GPIO_Init+0x2b0>)
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	d046      	beq.n	8002046 <HAL_GPIO_Init+0xfa>
 8001fb8:	4a90      	ldr	r2, [pc, #576]	; (80021fc <HAL_GPIO_Init+0x2b0>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d85d      	bhi.n	800207a <HAL_GPIO_Init+0x12e>
 8001fbe:	2b12      	cmp	r3, #18
 8001fc0:	d82a      	bhi.n	8002018 <HAL_GPIO_Init+0xcc>
 8001fc2:	2b12      	cmp	r3, #18
 8001fc4:	d859      	bhi.n	800207a <HAL_GPIO_Init+0x12e>
 8001fc6:	a201      	add	r2, pc, #4	; (adr r2, 8001fcc <HAL_GPIO_Init+0x80>)
 8001fc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fcc:	08002047 	.word	0x08002047
 8001fd0:	08002021 	.word	0x08002021
 8001fd4:	08002033 	.word	0x08002033
 8001fd8:	08002075 	.word	0x08002075
 8001fdc:	0800207b 	.word	0x0800207b
 8001fe0:	0800207b 	.word	0x0800207b
 8001fe4:	0800207b 	.word	0x0800207b
 8001fe8:	0800207b 	.word	0x0800207b
 8001fec:	0800207b 	.word	0x0800207b
 8001ff0:	0800207b 	.word	0x0800207b
 8001ff4:	0800207b 	.word	0x0800207b
 8001ff8:	0800207b 	.word	0x0800207b
 8001ffc:	0800207b 	.word	0x0800207b
 8002000:	0800207b 	.word	0x0800207b
 8002004:	0800207b 	.word	0x0800207b
 8002008:	0800207b 	.word	0x0800207b
 800200c:	0800207b 	.word	0x0800207b
 8002010:	08002029 	.word	0x08002029
 8002014:	0800203d 	.word	0x0800203d
 8002018:	4a79      	ldr	r2, [pc, #484]	; (8002200 <HAL_GPIO_Init+0x2b4>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d013      	beq.n	8002046 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800201e:	e02c      	b.n	800207a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	68db      	ldr	r3, [r3, #12]
 8002024:	623b      	str	r3, [r7, #32]
          break;
 8002026:	e029      	b.n	800207c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	68db      	ldr	r3, [r3, #12]
 800202c:	3304      	adds	r3, #4
 800202e:	623b      	str	r3, [r7, #32]
          break;
 8002030:	e024      	b.n	800207c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	68db      	ldr	r3, [r3, #12]
 8002036:	3308      	adds	r3, #8
 8002038:	623b      	str	r3, [r7, #32]
          break;
 800203a:	e01f      	b.n	800207c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	68db      	ldr	r3, [r3, #12]
 8002040:	330c      	adds	r3, #12
 8002042:	623b      	str	r3, [r7, #32]
          break;
 8002044:	e01a      	b.n	800207c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	689b      	ldr	r3, [r3, #8]
 800204a:	2b00      	cmp	r3, #0
 800204c:	d102      	bne.n	8002054 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800204e:	2304      	movs	r3, #4
 8002050:	623b      	str	r3, [r7, #32]
          break;
 8002052:	e013      	b.n	800207c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	689b      	ldr	r3, [r3, #8]
 8002058:	2b01      	cmp	r3, #1
 800205a:	d105      	bne.n	8002068 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800205c:	2308      	movs	r3, #8
 800205e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	69fa      	ldr	r2, [r7, #28]
 8002064:	611a      	str	r2, [r3, #16]
          break;
 8002066:	e009      	b.n	800207c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002068:	2308      	movs	r3, #8
 800206a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	69fa      	ldr	r2, [r7, #28]
 8002070:	615a      	str	r2, [r3, #20]
          break;
 8002072:	e003      	b.n	800207c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002074:	2300      	movs	r3, #0
 8002076:	623b      	str	r3, [r7, #32]
          break;
 8002078:	e000      	b.n	800207c <HAL_GPIO_Init+0x130>
          break;
 800207a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800207c:	69bb      	ldr	r3, [r7, #24]
 800207e:	2bff      	cmp	r3, #255	; 0xff
 8002080:	d801      	bhi.n	8002086 <HAL_GPIO_Init+0x13a>
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	e001      	b.n	800208a <HAL_GPIO_Init+0x13e>
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	3304      	adds	r3, #4
 800208a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800208c:	69bb      	ldr	r3, [r7, #24]
 800208e:	2bff      	cmp	r3, #255	; 0xff
 8002090:	d802      	bhi.n	8002098 <HAL_GPIO_Init+0x14c>
 8002092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002094:	009b      	lsls	r3, r3, #2
 8002096:	e002      	b.n	800209e <HAL_GPIO_Init+0x152>
 8002098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800209a:	3b08      	subs	r3, #8
 800209c:	009b      	lsls	r3, r3, #2
 800209e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80020a0:	697b      	ldr	r3, [r7, #20]
 80020a2:	681a      	ldr	r2, [r3, #0]
 80020a4:	210f      	movs	r1, #15
 80020a6:	693b      	ldr	r3, [r7, #16]
 80020a8:	fa01 f303 	lsl.w	r3, r1, r3
 80020ac:	43db      	mvns	r3, r3
 80020ae:	401a      	ands	r2, r3
 80020b0:	6a39      	ldr	r1, [r7, #32]
 80020b2:	693b      	ldr	r3, [r7, #16]
 80020b4:	fa01 f303 	lsl.w	r3, r1, r3
 80020b8:	431a      	orrs	r2, r3
 80020ba:	697b      	ldr	r3, [r7, #20]
 80020bc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	f000 80b1 	beq.w	800222e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80020cc:	4b4d      	ldr	r3, [pc, #308]	; (8002204 <HAL_GPIO_Init+0x2b8>)
 80020ce:	699b      	ldr	r3, [r3, #24]
 80020d0:	4a4c      	ldr	r2, [pc, #304]	; (8002204 <HAL_GPIO_Init+0x2b8>)
 80020d2:	f043 0301 	orr.w	r3, r3, #1
 80020d6:	6193      	str	r3, [r2, #24]
 80020d8:	4b4a      	ldr	r3, [pc, #296]	; (8002204 <HAL_GPIO_Init+0x2b8>)
 80020da:	699b      	ldr	r3, [r3, #24]
 80020dc:	f003 0301 	and.w	r3, r3, #1
 80020e0:	60bb      	str	r3, [r7, #8]
 80020e2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80020e4:	4a48      	ldr	r2, [pc, #288]	; (8002208 <HAL_GPIO_Init+0x2bc>)
 80020e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020e8:	089b      	lsrs	r3, r3, #2
 80020ea:	3302      	adds	r3, #2
 80020ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020f0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80020f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020f4:	f003 0303 	and.w	r3, r3, #3
 80020f8:	009b      	lsls	r3, r3, #2
 80020fa:	220f      	movs	r2, #15
 80020fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002100:	43db      	mvns	r3, r3
 8002102:	68fa      	ldr	r2, [r7, #12]
 8002104:	4013      	ands	r3, r2
 8002106:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	4a40      	ldr	r2, [pc, #256]	; (800220c <HAL_GPIO_Init+0x2c0>)
 800210c:	4293      	cmp	r3, r2
 800210e:	d013      	beq.n	8002138 <HAL_GPIO_Init+0x1ec>
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	4a3f      	ldr	r2, [pc, #252]	; (8002210 <HAL_GPIO_Init+0x2c4>)
 8002114:	4293      	cmp	r3, r2
 8002116:	d00d      	beq.n	8002134 <HAL_GPIO_Init+0x1e8>
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	4a3e      	ldr	r2, [pc, #248]	; (8002214 <HAL_GPIO_Init+0x2c8>)
 800211c:	4293      	cmp	r3, r2
 800211e:	d007      	beq.n	8002130 <HAL_GPIO_Init+0x1e4>
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	4a3d      	ldr	r2, [pc, #244]	; (8002218 <HAL_GPIO_Init+0x2cc>)
 8002124:	4293      	cmp	r3, r2
 8002126:	d101      	bne.n	800212c <HAL_GPIO_Init+0x1e0>
 8002128:	2303      	movs	r3, #3
 800212a:	e006      	b.n	800213a <HAL_GPIO_Init+0x1ee>
 800212c:	2304      	movs	r3, #4
 800212e:	e004      	b.n	800213a <HAL_GPIO_Init+0x1ee>
 8002130:	2302      	movs	r3, #2
 8002132:	e002      	b.n	800213a <HAL_GPIO_Init+0x1ee>
 8002134:	2301      	movs	r3, #1
 8002136:	e000      	b.n	800213a <HAL_GPIO_Init+0x1ee>
 8002138:	2300      	movs	r3, #0
 800213a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800213c:	f002 0203 	and.w	r2, r2, #3
 8002140:	0092      	lsls	r2, r2, #2
 8002142:	4093      	lsls	r3, r2
 8002144:	68fa      	ldr	r2, [r7, #12]
 8002146:	4313      	orrs	r3, r2
 8002148:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800214a:	492f      	ldr	r1, [pc, #188]	; (8002208 <HAL_GPIO_Init+0x2bc>)
 800214c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800214e:	089b      	lsrs	r3, r3, #2
 8002150:	3302      	adds	r3, #2
 8002152:	68fa      	ldr	r2, [r7, #12]
 8002154:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002160:	2b00      	cmp	r3, #0
 8002162:	d006      	beq.n	8002172 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002164:	4b2d      	ldr	r3, [pc, #180]	; (800221c <HAL_GPIO_Init+0x2d0>)
 8002166:	681a      	ldr	r2, [r3, #0]
 8002168:	492c      	ldr	r1, [pc, #176]	; (800221c <HAL_GPIO_Init+0x2d0>)
 800216a:	69bb      	ldr	r3, [r7, #24]
 800216c:	4313      	orrs	r3, r2
 800216e:	600b      	str	r3, [r1, #0]
 8002170:	e006      	b.n	8002180 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002172:	4b2a      	ldr	r3, [pc, #168]	; (800221c <HAL_GPIO_Init+0x2d0>)
 8002174:	681a      	ldr	r2, [r3, #0]
 8002176:	69bb      	ldr	r3, [r7, #24]
 8002178:	43db      	mvns	r3, r3
 800217a:	4928      	ldr	r1, [pc, #160]	; (800221c <HAL_GPIO_Init+0x2d0>)
 800217c:	4013      	ands	r3, r2
 800217e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002188:	2b00      	cmp	r3, #0
 800218a:	d006      	beq.n	800219a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800218c:	4b23      	ldr	r3, [pc, #140]	; (800221c <HAL_GPIO_Init+0x2d0>)
 800218e:	685a      	ldr	r2, [r3, #4]
 8002190:	4922      	ldr	r1, [pc, #136]	; (800221c <HAL_GPIO_Init+0x2d0>)
 8002192:	69bb      	ldr	r3, [r7, #24]
 8002194:	4313      	orrs	r3, r2
 8002196:	604b      	str	r3, [r1, #4]
 8002198:	e006      	b.n	80021a8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800219a:	4b20      	ldr	r3, [pc, #128]	; (800221c <HAL_GPIO_Init+0x2d0>)
 800219c:	685a      	ldr	r2, [r3, #4]
 800219e:	69bb      	ldr	r3, [r7, #24]
 80021a0:	43db      	mvns	r3, r3
 80021a2:	491e      	ldr	r1, [pc, #120]	; (800221c <HAL_GPIO_Init+0x2d0>)
 80021a4:	4013      	ands	r3, r2
 80021a6:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d006      	beq.n	80021c2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80021b4:	4b19      	ldr	r3, [pc, #100]	; (800221c <HAL_GPIO_Init+0x2d0>)
 80021b6:	689a      	ldr	r2, [r3, #8]
 80021b8:	4918      	ldr	r1, [pc, #96]	; (800221c <HAL_GPIO_Init+0x2d0>)
 80021ba:	69bb      	ldr	r3, [r7, #24]
 80021bc:	4313      	orrs	r3, r2
 80021be:	608b      	str	r3, [r1, #8]
 80021c0:	e006      	b.n	80021d0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80021c2:	4b16      	ldr	r3, [pc, #88]	; (800221c <HAL_GPIO_Init+0x2d0>)
 80021c4:	689a      	ldr	r2, [r3, #8]
 80021c6:	69bb      	ldr	r3, [r7, #24]
 80021c8:	43db      	mvns	r3, r3
 80021ca:	4914      	ldr	r1, [pc, #80]	; (800221c <HAL_GPIO_Init+0x2d0>)
 80021cc:	4013      	ands	r3, r2
 80021ce:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d021      	beq.n	8002220 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80021dc:	4b0f      	ldr	r3, [pc, #60]	; (800221c <HAL_GPIO_Init+0x2d0>)
 80021de:	68da      	ldr	r2, [r3, #12]
 80021e0:	490e      	ldr	r1, [pc, #56]	; (800221c <HAL_GPIO_Init+0x2d0>)
 80021e2:	69bb      	ldr	r3, [r7, #24]
 80021e4:	4313      	orrs	r3, r2
 80021e6:	60cb      	str	r3, [r1, #12]
 80021e8:	e021      	b.n	800222e <HAL_GPIO_Init+0x2e2>
 80021ea:	bf00      	nop
 80021ec:	10320000 	.word	0x10320000
 80021f0:	10310000 	.word	0x10310000
 80021f4:	10220000 	.word	0x10220000
 80021f8:	10210000 	.word	0x10210000
 80021fc:	10120000 	.word	0x10120000
 8002200:	10110000 	.word	0x10110000
 8002204:	40021000 	.word	0x40021000
 8002208:	40010000 	.word	0x40010000
 800220c:	40010800 	.word	0x40010800
 8002210:	40010c00 	.word	0x40010c00
 8002214:	40011000 	.word	0x40011000
 8002218:	40011400 	.word	0x40011400
 800221c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002220:	4b0b      	ldr	r3, [pc, #44]	; (8002250 <HAL_GPIO_Init+0x304>)
 8002222:	68da      	ldr	r2, [r3, #12]
 8002224:	69bb      	ldr	r3, [r7, #24]
 8002226:	43db      	mvns	r3, r3
 8002228:	4909      	ldr	r1, [pc, #36]	; (8002250 <HAL_GPIO_Init+0x304>)
 800222a:	4013      	ands	r3, r2
 800222c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800222e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002230:	3301      	adds	r3, #1
 8002232:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	681a      	ldr	r2, [r3, #0]
 8002238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800223a:	fa22 f303 	lsr.w	r3, r2, r3
 800223e:	2b00      	cmp	r3, #0
 8002240:	f47f ae8e 	bne.w	8001f60 <HAL_GPIO_Init+0x14>
  }
}
 8002244:	bf00      	nop
 8002246:	bf00      	nop
 8002248:	372c      	adds	r7, #44	; 0x2c
 800224a:	46bd      	mov	sp, r7
 800224c:	bc80      	pop	{r7}
 800224e:	4770      	bx	lr
 8002250:	40010400 	.word	0x40010400

08002254 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002254:	b480      	push	{r7}
 8002256:	b083      	sub	sp, #12
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
 800225c:	460b      	mov	r3, r1
 800225e:	807b      	strh	r3, [r7, #2]
 8002260:	4613      	mov	r3, r2
 8002262:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002264:	787b      	ldrb	r3, [r7, #1]
 8002266:	2b00      	cmp	r3, #0
 8002268:	d003      	beq.n	8002272 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800226a:	887a      	ldrh	r2, [r7, #2]
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002270:	e003      	b.n	800227a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002272:	887b      	ldrh	r3, [r7, #2]
 8002274:	041a      	lsls	r2, r3, #16
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	611a      	str	r2, [r3, #16]
}
 800227a:	bf00      	nop
 800227c:	370c      	adds	r7, #12
 800227e:	46bd      	mov	sp, r7
 8002280:	bc80      	pop	{r7}
 8002282:	4770      	bx	lr

08002284 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002284:	b480      	push	{r7}
 8002286:	b085      	sub	sp, #20
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
 800228c:	460b      	mov	r3, r1
 800228e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	68db      	ldr	r3, [r3, #12]
 8002294:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002296:	887a      	ldrh	r2, [r7, #2]
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	4013      	ands	r3, r2
 800229c:	041a      	lsls	r2, r3, #16
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	43d9      	mvns	r1, r3
 80022a2:	887b      	ldrh	r3, [r7, #2]
 80022a4:	400b      	ands	r3, r1
 80022a6:	431a      	orrs	r2, r3
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	611a      	str	r2, [r3, #16]
}
 80022ac:	bf00      	nop
 80022ae:	3714      	adds	r7, #20
 80022b0:	46bd      	mov	sp, r7
 80022b2:	bc80      	pop	{r7}
 80022b4:	4770      	bx	lr
	...

080022b8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b084      	sub	sp, #16
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d101      	bne.n	80022ca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80022c6:	2301      	movs	r3, #1
 80022c8:	e12b      	b.n	8002522 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022d0:	b2db      	uxtb	r3, r3
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d106      	bne.n	80022e4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	2200      	movs	r2, #0
 80022da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80022de:	6878      	ldr	r0, [r7, #4]
 80022e0:	f7fe fdf4 	bl	8000ecc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2224      	movs	r2, #36	; 0x24
 80022e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	681a      	ldr	r2, [r3, #0]
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f022 0201 	bic.w	r2, r2, #1
 80022fa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	681a      	ldr	r2, [r3, #0]
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800230a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	681a      	ldr	r2, [r3, #0]
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800231a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800231c:	f000 fe00 	bl	8002f20 <HAL_RCC_GetPCLK1Freq>
 8002320:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	4a81      	ldr	r2, [pc, #516]	; (800252c <HAL_I2C_Init+0x274>)
 8002328:	4293      	cmp	r3, r2
 800232a:	d807      	bhi.n	800233c <HAL_I2C_Init+0x84>
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	4a80      	ldr	r2, [pc, #512]	; (8002530 <HAL_I2C_Init+0x278>)
 8002330:	4293      	cmp	r3, r2
 8002332:	bf94      	ite	ls
 8002334:	2301      	movls	r3, #1
 8002336:	2300      	movhi	r3, #0
 8002338:	b2db      	uxtb	r3, r3
 800233a:	e006      	b.n	800234a <HAL_I2C_Init+0x92>
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	4a7d      	ldr	r2, [pc, #500]	; (8002534 <HAL_I2C_Init+0x27c>)
 8002340:	4293      	cmp	r3, r2
 8002342:	bf94      	ite	ls
 8002344:	2301      	movls	r3, #1
 8002346:	2300      	movhi	r3, #0
 8002348:	b2db      	uxtb	r3, r3
 800234a:	2b00      	cmp	r3, #0
 800234c:	d001      	beq.n	8002352 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800234e:	2301      	movs	r3, #1
 8002350:	e0e7      	b.n	8002522 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	4a78      	ldr	r2, [pc, #480]	; (8002538 <HAL_I2C_Init+0x280>)
 8002356:	fba2 2303 	umull	r2, r3, r2, r3
 800235a:	0c9b      	lsrs	r3, r3, #18
 800235c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	68ba      	ldr	r2, [r7, #8]
 800236e:	430a      	orrs	r2, r1
 8002370:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	6a1b      	ldr	r3, [r3, #32]
 8002378:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	4a6a      	ldr	r2, [pc, #424]	; (800252c <HAL_I2C_Init+0x274>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d802      	bhi.n	800238c <HAL_I2C_Init+0xd4>
 8002386:	68bb      	ldr	r3, [r7, #8]
 8002388:	3301      	adds	r3, #1
 800238a:	e009      	b.n	80023a0 <HAL_I2C_Init+0xe8>
 800238c:	68bb      	ldr	r3, [r7, #8]
 800238e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002392:	fb02 f303 	mul.w	r3, r2, r3
 8002396:	4a69      	ldr	r2, [pc, #420]	; (800253c <HAL_I2C_Init+0x284>)
 8002398:	fba2 2303 	umull	r2, r3, r2, r3
 800239c:	099b      	lsrs	r3, r3, #6
 800239e:	3301      	adds	r3, #1
 80023a0:	687a      	ldr	r2, [r7, #4]
 80023a2:	6812      	ldr	r2, [r2, #0]
 80023a4:	430b      	orrs	r3, r1
 80023a6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	69db      	ldr	r3, [r3, #28]
 80023ae:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80023b2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	495c      	ldr	r1, [pc, #368]	; (800252c <HAL_I2C_Init+0x274>)
 80023bc:	428b      	cmp	r3, r1
 80023be:	d819      	bhi.n	80023f4 <HAL_I2C_Init+0x13c>
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	1e59      	subs	r1, r3, #1
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	005b      	lsls	r3, r3, #1
 80023ca:	fbb1 f3f3 	udiv	r3, r1, r3
 80023ce:	1c59      	adds	r1, r3, #1
 80023d0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80023d4:	400b      	ands	r3, r1
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d00a      	beq.n	80023f0 <HAL_I2C_Init+0x138>
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	1e59      	subs	r1, r3, #1
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	005b      	lsls	r3, r3, #1
 80023e4:	fbb1 f3f3 	udiv	r3, r1, r3
 80023e8:	3301      	adds	r3, #1
 80023ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023ee:	e051      	b.n	8002494 <HAL_I2C_Init+0x1dc>
 80023f0:	2304      	movs	r3, #4
 80023f2:	e04f      	b.n	8002494 <HAL_I2C_Init+0x1dc>
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	689b      	ldr	r3, [r3, #8]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d111      	bne.n	8002420 <HAL_I2C_Init+0x168>
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	1e58      	subs	r0, r3, #1
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6859      	ldr	r1, [r3, #4]
 8002404:	460b      	mov	r3, r1
 8002406:	005b      	lsls	r3, r3, #1
 8002408:	440b      	add	r3, r1
 800240a:	fbb0 f3f3 	udiv	r3, r0, r3
 800240e:	3301      	adds	r3, #1
 8002410:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002414:	2b00      	cmp	r3, #0
 8002416:	bf0c      	ite	eq
 8002418:	2301      	moveq	r3, #1
 800241a:	2300      	movne	r3, #0
 800241c:	b2db      	uxtb	r3, r3
 800241e:	e012      	b.n	8002446 <HAL_I2C_Init+0x18e>
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	1e58      	subs	r0, r3, #1
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6859      	ldr	r1, [r3, #4]
 8002428:	460b      	mov	r3, r1
 800242a:	009b      	lsls	r3, r3, #2
 800242c:	440b      	add	r3, r1
 800242e:	0099      	lsls	r1, r3, #2
 8002430:	440b      	add	r3, r1
 8002432:	fbb0 f3f3 	udiv	r3, r0, r3
 8002436:	3301      	adds	r3, #1
 8002438:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800243c:	2b00      	cmp	r3, #0
 800243e:	bf0c      	ite	eq
 8002440:	2301      	moveq	r3, #1
 8002442:	2300      	movne	r3, #0
 8002444:	b2db      	uxtb	r3, r3
 8002446:	2b00      	cmp	r3, #0
 8002448:	d001      	beq.n	800244e <HAL_I2C_Init+0x196>
 800244a:	2301      	movs	r3, #1
 800244c:	e022      	b.n	8002494 <HAL_I2C_Init+0x1dc>
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	689b      	ldr	r3, [r3, #8]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d10e      	bne.n	8002474 <HAL_I2C_Init+0x1bc>
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	1e58      	subs	r0, r3, #1
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6859      	ldr	r1, [r3, #4]
 800245e:	460b      	mov	r3, r1
 8002460:	005b      	lsls	r3, r3, #1
 8002462:	440b      	add	r3, r1
 8002464:	fbb0 f3f3 	udiv	r3, r0, r3
 8002468:	3301      	adds	r3, #1
 800246a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800246e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002472:	e00f      	b.n	8002494 <HAL_I2C_Init+0x1dc>
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	1e58      	subs	r0, r3, #1
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6859      	ldr	r1, [r3, #4]
 800247c:	460b      	mov	r3, r1
 800247e:	009b      	lsls	r3, r3, #2
 8002480:	440b      	add	r3, r1
 8002482:	0099      	lsls	r1, r3, #2
 8002484:	440b      	add	r3, r1
 8002486:	fbb0 f3f3 	udiv	r3, r0, r3
 800248a:	3301      	adds	r3, #1
 800248c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002490:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002494:	6879      	ldr	r1, [r7, #4]
 8002496:	6809      	ldr	r1, [r1, #0]
 8002498:	4313      	orrs	r3, r2
 800249a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	69da      	ldr	r2, [r3, #28]
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6a1b      	ldr	r3, [r3, #32]
 80024ae:	431a      	orrs	r2, r3
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	430a      	orrs	r2, r1
 80024b6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	689b      	ldr	r3, [r3, #8]
 80024be:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80024c2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80024c6:	687a      	ldr	r2, [r7, #4]
 80024c8:	6911      	ldr	r1, [r2, #16]
 80024ca:	687a      	ldr	r2, [r7, #4]
 80024cc:	68d2      	ldr	r2, [r2, #12]
 80024ce:	4311      	orrs	r1, r2
 80024d0:	687a      	ldr	r2, [r7, #4]
 80024d2:	6812      	ldr	r2, [r2, #0]
 80024d4:	430b      	orrs	r3, r1
 80024d6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	68db      	ldr	r3, [r3, #12]
 80024de:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	695a      	ldr	r2, [r3, #20]
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	699b      	ldr	r3, [r3, #24]
 80024ea:	431a      	orrs	r2, r3
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	430a      	orrs	r2, r1
 80024f2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	681a      	ldr	r2, [r3, #0]
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f042 0201 	orr.w	r2, r2, #1
 8002502:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2200      	movs	r2, #0
 8002508:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2220      	movs	r2, #32
 800250e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	2200      	movs	r2, #0
 8002516:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2200      	movs	r2, #0
 800251c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002520:	2300      	movs	r3, #0
}
 8002522:	4618      	mov	r0, r3
 8002524:	3710      	adds	r7, #16
 8002526:	46bd      	mov	sp, r7
 8002528:	bd80      	pop	{r7, pc}
 800252a:	bf00      	nop
 800252c:	000186a0 	.word	0x000186a0
 8002530:	001e847f 	.word	0x001e847f
 8002534:	003d08ff 	.word	0x003d08ff
 8002538:	431bde83 	.word	0x431bde83
 800253c:	10624dd3 	.word	0x10624dd3

08002540 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b086      	sub	sp, #24
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d101      	bne.n	8002552 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800254e:	2301      	movs	r3, #1
 8002550:	e304      	b.n	8002b5c <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f003 0301 	and.w	r3, r3, #1
 800255a:	2b00      	cmp	r3, #0
 800255c:	f000 8087 	beq.w	800266e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002560:	4b92      	ldr	r3, [pc, #584]	; (80027ac <HAL_RCC_OscConfig+0x26c>)
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	f003 030c 	and.w	r3, r3, #12
 8002568:	2b04      	cmp	r3, #4
 800256a:	d00c      	beq.n	8002586 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800256c:	4b8f      	ldr	r3, [pc, #572]	; (80027ac <HAL_RCC_OscConfig+0x26c>)
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	f003 030c 	and.w	r3, r3, #12
 8002574:	2b08      	cmp	r3, #8
 8002576:	d112      	bne.n	800259e <HAL_RCC_OscConfig+0x5e>
 8002578:	4b8c      	ldr	r3, [pc, #560]	; (80027ac <HAL_RCC_OscConfig+0x26c>)
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002580:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002584:	d10b      	bne.n	800259e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002586:	4b89      	ldr	r3, [pc, #548]	; (80027ac <HAL_RCC_OscConfig+0x26c>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800258e:	2b00      	cmp	r3, #0
 8002590:	d06c      	beq.n	800266c <HAL_RCC_OscConfig+0x12c>
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	689b      	ldr	r3, [r3, #8]
 8002596:	2b00      	cmp	r3, #0
 8002598:	d168      	bne.n	800266c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800259a:	2301      	movs	r3, #1
 800259c:	e2de      	b.n	8002b5c <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	689b      	ldr	r3, [r3, #8]
 80025a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025a6:	d106      	bne.n	80025b6 <HAL_RCC_OscConfig+0x76>
 80025a8:	4b80      	ldr	r3, [pc, #512]	; (80027ac <HAL_RCC_OscConfig+0x26c>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4a7f      	ldr	r2, [pc, #508]	; (80027ac <HAL_RCC_OscConfig+0x26c>)
 80025ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025b2:	6013      	str	r3, [r2, #0]
 80025b4:	e02e      	b.n	8002614 <HAL_RCC_OscConfig+0xd4>
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	689b      	ldr	r3, [r3, #8]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d10c      	bne.n	80025d8 <HAL_RCC_OscConfig+0x98>
 80025be:	4b7b      	ldr	r3, [pc, #492]	; (80027ac <HAL_RCC_OscConfig+0x26c>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4a7a      	ldr	r2, [pc, #488]	; (80027ac <HAL_RCC_OscConfig+0x26c>)
 80025c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025c8:	6013      	str	r3, [r2, #0]
 80025ca:	4b78      	ldr	r3, [pc, #480]	; (80027ac <HAL_RCC_OscConfig+0x26c>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4a77      	ldr	r2, [pc, #476]	; (80027ac <HAL_RCC_OscConfig+0x26c>)
 80025d0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80025d4:	6013      	str	r3, [r2, #0]
 80025d6:	e01d      	b.n	8002614 <HAL_RCC_OscConfig+0xd4>
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	689b      	ldr	r3, [r3, #8]
 80025dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80025e0:	d10c      	bne.n	80025fc <HAL_RCC_OscConfig+0xbc>
 80025e2:	4b72      	ldr	r3, [pc, #456]	; (80027ac <HAL_RCC_OscConfig+0x26c>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4a71      	ldr	r2, [pc, #452]	; (80027ac <HAL_RCC_OscConfig+0x26c>)
 80025e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80025ec:	6013      	str	r3, [r2, #0]
 80025ee:	4b6f      	ldr	r3, [pc, #444]	; (80027ac <HAL_RCC_OscConfig+0x26c>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	4a6e      	ldr	r2, [pc, #440]	; (80027ac <HAL_RCC_OscConfig+0x26c>)
 80025f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025f8:	6013      	str	r3, [r2, #0]
 80025fa:	e00b      	b.n	8002614 <HAL_RCC_OscConfig+0xd4>
 80025fc:	4b6b      	ldr	r3, [pc, #428]	; (80027ac <HAL_RCC_OscConfig+0x26c>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4a6a      	ldr	r2, [pc, #424]	; (80027ac <HAL_RCC_OscConfig+0x26c>)
 8002602:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002606:	6013      	str	r3, [r2, #0]
 8002608:	4b68      	ldr	r3, [pc, #416]	; (80027ac <HAL_RCC_OscConfig+0x26c>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4a67      	ldr	r2, [pc, #412]	; (80027ac <HAL_RCC_OscConfig+0x26c>)
 800260e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002612:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	689b      	ldr	r3, [r3, #8]
 8002618:	2b00      	cmp	r3, #0
 800261a:	d013      	beq.n	8002644 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800261c:	f7fe ffba 	bl	8001594 <HAL_GetTick>
 8002620:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002622:	e008      	b.n	8002636 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002624:	f7fe ffb6 	bl	8001594 <HAL_GetTick>
 8002628:	4602      	mov	r2, r0
 800262a:	693b      	ldr	r3, [r7, #16]
 800262c:	1ad3      	subs	r3, r2, r3
 800262e:	2b64      	cmp	r3, #100	; 0x64
 8002630:	d901      	bls.n	8002636 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002632:	2303      	movs	r3, #3
 8002634:	e292      	b.n	8002b5c <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002636:	4b5d      	ldr	r3, [pc, #372]	; (80027ac <HAL_RCC_OscConfig+0x26c>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800263e:	2b00      	cmp	r3, #0
 8002640:	d0f0      	beq.n	8002624 <HAL_RCC_OscConfig+0xe4>
 8002642:	e014      	b.n	800266e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002644:	f7fe ffa6 	bl	8001594 <HAL_GetTick>
 8002648:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800264a:	e008      	b.n	800265e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800264c:	f7fe ffa2 	bl	8001594 <HAL_GetTick>
 8002650:	4602      	mov	r2, r0
 8002652:	693b      	ldr	r3, [r7, #16]
 8002654:	1ad3      	subs	r3, r2, r3
 8002656:	2b64      	cmp	r3, #100	; 0x64
 8002658:	d901      	bls.n	800265e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800265a:	2303      	movs	r3, #3
 800265c:	e27e      	b.n	8002b5c <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800265e:	4b53      	ldr	r3, [pc, #332]	; (80027ac <HAL_RCC_OscConfig+0x26c>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002666:	2b00      	cmp	r3, #0
 8002668:	d1f0      	bne.n	800264c <HAL_RCC_OscConfig+0x10c>
 800266a:	e000      	b.n	800266e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800266c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f003 0302 	and.w	r3, r3, #2
 8002676:	2b00      	cmp	r3, #0
 8002678:	d063      	beq.n	8002742 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800267a:	4b4c      	ldr	r3, [pc, #304]	; (80027ac <HAL_RCC_OscConfig+0x26c>)
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	f003 030c 	and.w	r3, r3, #12
 8002682:	2b00      	cmp	r3, #0
 8002684:	d00b      	beq.n	800269e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002686:	4b49      	ldr	r3, [pc, #292]	; (80027ac <HAL_RCC_OscConfig+0x26c>)
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	f003 030c 	and.w	r3, r3, #12
 800268e:	2b08      	cmp	r3, #8
 8002690:	d11c      	bne.n	80026cc <HAL_RCC_OscConfig+0x18c>
 8002692:	4b46      	ldr	r3, [pc, #280]	; (80027ac <HAL_RCC_OscConfig+0x26c>)
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800269a:	2b00      	cmp	r3, #0
 800269c:	d116      	bne.n	80026cc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800269e:	4b43      	ldr	r3, [pc, #268]	; (80027ac <HAL_RCC_OscConfig+0x26c>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f003 0302 	and.w	r3, r3, #2
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d005      	beq.n	80026b6 <HAL_RCC_OscConfig+0x176>
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	695b      	ldr	r3, [r3, #20]
 80026ae:	2b01      	cmp	r3, #1
 80026b0:	d001      	beq.n	80026b6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80026b2:	2301      	movs	r3, #1
 80026b4:	e252      	b.n	8002b5c <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026b6:	4b3d      	ldr	r3, [pc, #244]	; (80027ac <HAL_RCC_OscConfig+0x26c>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	699b      	ldr	r3, [r3, #24]
 80026c2:	00db      	lsls	r3, r3, #3
 80026c4:	4939      	ldr	r1, [pc, #228]	; (80027ac <HAL_RCC_OscConfig+0x26c>)
 80026c6:	4313      	orrs	r3, r2
 80026c8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026ca:	e03a      	b.n	8002742 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	695b      	ldr	r3, [r3, #20]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d020      	beq.n	8002716 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80026d4:	4b36      	ldr	r3, [pc, #216]	; (80027b0 <HAL_RCC_OscConfig+0x270>)
 80026d6:	2201      	movs	r2, #1
 80026d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026da:	f7fe ff5b 	bl	8001594 <HAL_GetTick>
 80026de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026e0:	e008      	b.n	80026f4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026e2:	f7fe ff57 	bl	8001594 <HAL_GetTick>
 80026e6:	4602      	mov	r2, r0
 80026e8:	693b      	ldr	r3, [r7, #16]
 80026ea:	1ad3      	subs	r3, r2, r3
 80026ec:	2b02      	cmp	r3, #2
 80026ee:	d901      	bls.n	80026f4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80026f0:	2303      	movs	r3, #3
 80026f2:	e233      	b.n	8002b5c <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026f4:	4b2d      	ldr	r3, [pc, #180]	; (80027ac <HAL_RCC_OscConfig+0x26c>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f003 0302 	and.w	r3, r3, #2
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d0f0      	beq.n	80026e2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002700:	4b2a      	ldr	r3, [pc, #168]	; (80027ac <HAL_RCC_OscConfig+0x26c>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	699b      	ldr	r3, [r3, #24]
 800270c:	00db      	lsls	r3, r3, #3
 800270e:	4927      	ldr	r1, [pc, #156]	; (80027ac <HAL_RCC_OscConfig+0x26c>)
 8002710:	4313      	orrs	r3, r2
 8002712:	600b      	str	r3, [r1, #0]
 8002714:	e015      	b.n	8002742 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002716:	4b26      	ldr	r3, [pc, #152]	; (80027b0 <HAL_RCC_OscConfig+0x270>)
 8002718:	2200      	movs	r2, #0
 800271a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800271c:	f7fe ff3a 	bl	8001594 <HAL_GetTick>
 8002720:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002722:	e008      	b.n	8002736 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002724:	f7fe ff36 	bl	8001594 <HAL_GetTick>
 8002728:	4602      	mov	r2, r0
 800272a:	693b      	ldr	r3, [r7, #16]
 800272c:	1ad3      	subs	r3, r2, r3
 800272e:	2b02      	cmp	r3, #2
 8002730:	d901      	bls.n	8002736 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002732:	2303      	movs	r3, #3
 8002734:	e212      	b.n	8002b5c <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002736:	4b1d      	ldr	r3, [pc, #116]	; (80027ac <HAL_RCC_OscConfig+0x26c>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f003 0302 	and.w	r3, r3, #2
 800273e:	2b00      	cmp	r3, #0
 8002740:	d1f0      	bne.n	8002724 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f003 0308 	and.w	r3, r3, #8
 800274a:	2b00      	cmp	r3, #0
 800274c:	d03a      	beq.n	80027c4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	69db      	ldr	r3, [r3, #28]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d019      	beq.n	800278a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002756:	4b17      	ldr	r3, [pc, #92]	; (80027b4 <HAL_RCC_OscConfig+0x274>)
 8002758:	2201      	movs	r2, #1
 800275a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800275c:	f7fe ff1a 	bl	8001594 <HAL_GetTick>
 8002760:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002762:	e008      	b.n	8002776 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002764:	f7fe ff16 	bl	8001594 <HAL_GetTick>
 8002768:	4602      	mov	r2, r0
 800276a:	693b      	ldr	r3, [r7, #16]
 800276c:	1ad3      	subs	r3, r2, r3
 800276e:	2b02      	cmp	r3, #2
 8002770:	d901      	bls.n	8002776 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002772:	2303      	movs	r3, #3
 8002774:	e1f2      	b.n	8002b5c <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002776:	4b0d      	ldr	r3, [pc, #52]	; (80027ac <HAL_RCC_OscConfig+0x26c>)
 8002778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800277a:	f003 0302 	and.w	r3, r3, #2
 800277e:	2b00      	cmp	r3, #0
 8002780:	d0f0      	beq.n	8002764 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002782:	2001      	movs	r0, #1
 8002784:	f000 fbf4 	bl	8002f70 <RCC_Delay>
 8002788:	e01c      	b.n	80027c4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800278a:	4b0a      	ldr	r3, [pc, #40]	; (80027b4 <HAL_RCC_OscConfig+0x274>)
 800278c:	2200      	movs	r2, #0
 800278e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002790:	f7fe ff00 	bl	8001594 <HAL_GetTick>
 8002794:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002796:	e00f      	b.n	80027b8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002798:	f7fe fefc 	bl	8001594 <HAL_GetTick>
 800279c:	4602      	mov	r2, r0
 800279e:	693b      	ldr	r3, [r7, #16]
 80027a0:	1ad3      	subs	r3, r2, r3
 80027a2:	2b02      	cmp	r3, #2
 80027a4:	d908      	bls.n	80027b8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80027a6:	2303      	movs	r3, #3
 80027a8:	e1d8      	b.n	8002b5c <HAL_RCC_OscConfig+0x61c>
 80027aa:	bf00      	nop
 80027ac:	40021000 	.word	0x40021000
 80027b0:	42420000 	.word	0x42420000
 80027b4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027b8:	4b9b      	ldr	r3, [pc, #620]	; (8002a28 <HAL_RCC_OscConfig+0x4e8>)
 80027ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027bc:	f003 0302 	and.w	r3, r3, #2
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d1e9      	bne.n	8002798 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f003 0304 	and.w	r3, r3, #4
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	f000 80a6 	beq.w	800291e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027d2:	2300      	movs	r3, #0
 80027d4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80027d6:	4b94      	ldr	r3, [pc, #592]	; (8002a28 <HAL_RCC_OscConfig+0x4e8>)
 80027d8:	69db      	ldr	r3, [r3, #28]
 80027da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d10d      	bne.n	80027fe <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027e2:	4b91      	ldr	r3, [pc, #580]	; (8002a28 <HAL_RCC_OscConfig+0x4e8>)
 80027e4:	69db      	ldr	r3, [r3, #28]
 80027e6:	4a90      	ldr	r2, [pc, #576]	; (8002a28 <HAL_RCC_OscConfig+0x4e8>)
 80027e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027ec:	61d3      	str	r3, [r2, #28]
 80027ee:	4b8e      	ldr	r3, [pc, #568]	; (8002a28 <HAL_RCC_OscConfig+0x4e8>)
 80027f0:	69db      	ldr	r3, [r3, #28]
 80027f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027f6:	60bb      	str	r3, [r7, #8]
 80027f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027fa:	2301      	movs	r3, #1
 80027fc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027fe:	4b8b      	ldr	r3, [pc, #556]	; (8002a2c <HAL_RCC_OscConfig+0x4ec>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002806:	2b00      	cmp	r3, #0
 8002808:	d118      	bne.n	800283c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800280a:	4b88      	ldr	r3, [pc, #544]	; (8002a2c <HAL_RCC_OscConfig+0x4ec>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4a87      	ldr	r2, [pc, #540]	; (8002a2c <HAL_RCC_OscConfig+0x4ec>)
 8002810:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002814:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002816:	f7fe febd 	bl	8001594 <HAL_GetTick>
 800281a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800281c:	e008      	b.n	8002830 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800281e:	f7fe feb9 	bl	8001594 <HAL_GetTick>
 8002822:	4602      	mov	r2, r0
 8002824:	693b      	ldr	r3, [r7, #16]
 8002826:	1ad3      	subs	r3, r2, r3
 8002828:	2b64      	cmp	r3, #100	; 0x64
 800282a:	d901      	bls.n	8002830 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800282c:	2303      	movs	r3, #3
 800282e:	e195      	b.n	8002b5c <HAL_RCC_OscConfig+0x61c>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002830:	4b7e      	ldr	r3, [pc, #504]	; (8002a2c <HAL_RCC_OscConfig+0x4ec>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002838:	2b00      	cmp	r3, #0
 800283a:	d0f0      	beq.n	800281e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	691b      	ldr	r3, [r3, #16]
 8002840:	2b01      	cmp	r3, #1
 8002842:	d106      	bne.n	8002852 <HAL_RCC_OscConfig+0x312>
 8002844:	4b78      	ldr	r3, [pc, #480]	; (8002a28 <HAL_RCC_OscConfig+0x4e8>)
 8002846:	6a1b      	ldr	r3, [r3, #32]
 8002848:	4a77      	ldr	r2, [pc, #476]	; (8002a28 <HAL_RCC_OscConfig+0x4e8>)
 800284a:	f043 0301 	orr.w	r3, r3, #1
 800284e:	6213      	str	r3, [r2, #32]
 8002850:	e02d      	b.n	80028ae <HAL_RCC_OscConfig+0x36e>
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	691b      	ldr	r3, [r3, #16]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d10c      	bne.n	8002874 <HAL_RCC_OscConfig+0x334>
 800285a:	4b73      	ldr	r3, [pc, #460]	; (8002a28 <HAL_RCC_OscConfig+0x4e8>)
 800285c:	6a1b      	ldr	r3, [r3, #32]
 800285e:	4a72      	ldr	r2, [pc, #456]	; (8002a28 <HAL_RCC_OscConfig+0x4e8>)
 8002860:	f023 0301 	bic.w	r3, r3, #1
 8002864:	6213      	str	r3, [r2, #32]
 8002866:	4b70      	ldr	r3, [pc, #448]	; (8002a28 <HAL_RCC_OscConfig+0x4e8>)
 8002868:	6a1b      	ldr	r3, [r3, #32]
 800286a:	4a6f      	ldr	r2, [pc, #444]	; (8002a28 <HAL_RCC_OscConfig+0x4e8>)
 800286c:	f023 0304 	bic.w	r3, r3, #4
 8002870:	6213      	str	r3, [r2, #32]
 8002872:	e01c      	b.n	80028ae <HAL_RCC_OscConfig+0x36e>
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	691b      	ldr	r3, [r3, #16]
 8002878:	2b05      	cmp	r3, #5
 800287a:	d10c      	bne.n	8002896 <HAL_RCC_OscConfig+0x356>
 800287c:	4b6a      	ldr	r3, [pc, #424]	; (8002a28 <HAL_RCC_OscConfig+0x4e8>)
 800287e:	6a1b      	ldr	r3, [r3, #32]
 8002880:	4a69      	ldr	r2, [pc, #420]	; (8002a28 <HAL_RCC_OscConfig+0x4e8>)
 8002882:	f043 0304 	orr.w	r3, r3, #4
 8002886:	6213      	str	r3, [r2, #32]
 8002888:	4b67      	ldr	r3, [pc, #412]	; (8002a28 <HAL_RCC_OscConfig+0x4e8>)
 800288a:	6a1b      	ldr	r3, [r3, #32]
 800288c:	4a66      	ldr	r2, [pc, #408]	; (8002a28 <HAL_RCC_OscConfig+0x4e8>)
 800288e:	f043 0301 	orr.w	r3, r3, #1
 8002892:	6213      	str	r3, [r2, #32]
 8002894:	e00b      	b.n	80028ae <HAL_RCC_OscConfig+0x36e>
 8002896:	4b64      	ldr	r3, [pc, #400]	; (8002a28 <HAL_RCC_OscConfig+0x4e8>)
 8002898:	6a1b      	ldr	r3, [r3, #32]
 800289a:	4a63      	ldr	r2, [pc, #396]	; (8002a28 <HAL_RCC_OscConfig+0x4e8>)
 800289c:	f023 0301 	bic.w	r3, r3, #1
 80028a0:	6213      	str	r3, [r2, #32]
 80028a2:	4b61      	ldr	r3, [pc, #388]	; (8002a28 <HAL_RCC_OscConfig+0x4e8>)
 80028a4:	6a1b      	ldr	r3, [r3, #32]
 80028a6:	4a60      	ldr	r2, [pc, #384]	; (8002a28 <HAL_RCC_OscConfig+0x4e8>)
 80028a8:	f023 0304 	bic.w	r3, r3, #4
 80028ac:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	691b      	ldr	r3, [r3, #16]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d015      	beq.n	80028e2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028b6:	f7fe fe6d 	bl	8001594 <HAL_GetTick>
 80028ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028bc:	e00a      	b.n	80028d4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028be:	f7fe fe69 	bl	8001594 <HAL_GetTick>
 80028c2:	4602      	mov	r2, r0
 80028c4:	693b      	ldr	r3, [r7, #16]
 80028c6:	1ad3      	subs	r3, r2, r3
 80028c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80028cc:	4293      	cmp	r3, r2
 80028ce:	d901      	bls.n	80028d4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80028d0:	2303      	movs	r3, #3
 80028d2:	e143      	b.n	8002b5c <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028d4:	4b54      	ldr	r3, [pc, #336]	; (8002a28 <HAL_RCC_OscConfig+0x4e8>)
 80028d6:	6a1b      	ldr	r3, [r3, #32]
 80028d8:	f003 0302 	and.w	r3, r3, #2
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d0ee      	beq.n	80028be <HAL_RCC_OscConfig+0x37e>
 80028e0:	e014      	b.n	800290c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028e2:	f7fe fe57 	bl	8001594 <HAL_GetTick>
 80028e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028e8:	e00a      	b.n	8002900 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028ea:	f7fe fe53 	bl	8001594 <HAL_GetTick>
 80028ee:	4602      	mov	r2, r0
 80028f0:	693b      	ldr	r3, [r7, #16]
 80028f2:	1ad3      	subs	r3, r2, r3
 80028f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d901      	bls.n	8002900 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80028fc:	2303      	movs	r3, #3
 80028fe:	e12d      	b.n	8002b5c <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002900:	4b49      	ldr	r3, [pc, #292]	; (8002a28 <HAL_RCC_OscConfig+0x4e8>)
 8002902:	6a1b      	ldr	r3, [r3, #32]
 8002904:	f003 0302 	and.w	r3, r3, #2
 8002908:	2b00      	cmp	r3, #0
 800290a:	d1ee      	bne.n	80028ea <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800290c:	7dfb      	ldrb	r3, [r7, #23]
 800290e:	2b01      	cmp	r3, #1
 8002910:	d105      	bne.n	800291e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002912:	4b45      	ldr	r3, [pc, #276]	; (8002a28 <HAL_RCC_OscConfig+0x4e8>)
 8002914:	69db      	ldr	r3, [r3, #28]
 8002916:	4a44      	ldr	r2, [pc, #272]	; (8002a28 <HAL_RCC_OscConfig+0x4e8>)
 8002918:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800291c:	61d3      	str	r3, [r2, #28]

#if defined(RCC_CR_PLL2ON)
  /*-------------------------------- PLL2 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL2(RCC_OscInitStruct->PLL2.PLL2State));
  if ((RCC_OscInitStruct->PLL2.PLL2State) != RCC_PLL2_NONE)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002922:	2b00      	cmp	r3, #0
 8002924:	f000 808c 	beq.w	8002a40 <HAL_RCC_OscConfig+0x500>
  {
    /* This bit can not be cleared if the PLL2 clock is used indirectly as system
      clock (i.e. it is used as PLL clock entry that is used as system clock). */
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 8002928:	4b3f      	ldr	r3, [pc, #252]	; (8002a28 <HAL_RCC_OscConfig+0x4e8>)
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002930:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002934:	d10e      	bne.n	8002954 <HAL_RCC_OscConfig+0x414>
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 8002936:	4b3c      	ldr	r3, [pc, #240]	; (8002a28 <HAL_RCC_OscConfig+0x4e8>)
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 800293e:	2b08      	cmp	r3, #8
 8002940:	d108      	bne.n	8002954 <HAL_RCC_OscConfig+0x414>
        ((READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC)) == RCC_CFGR2_PREDIV1SRC_PLL2))
 8002942:	4b39      	ldr	r3, [pc, #228]	; (8002a28 <HAL_RCC_OscConfig+0x4e8>)
 8002944:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002946:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 800294a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800294e:	d101      	bne.n	8002954 <HAL_RCC_OscConfig+0x414>
    {
      return HAL_ERROR;
 8002950:	2301      	movs	r3, #1
 8002952:	e103      	b.n	8002b5c <HAL_RCC_OscConfig+0x61c>
    }
    else
    {
      if ((RCC_OscInitStruct->PLL2.PLL2State) == RCC_PLL2_ON)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002958:	2b02      	cmp	r3, #2
 800295a:	d14e      	bne.n	80029fa <HAL_RCC_OscConfig+0x4ba>
        assert_param(IS_RCC_PLL2_MUL(RCC_OscInitStruct->PLL2.PLL2MUL));
        assert_param(IS_RCC_HSE_PREDIV2(RCC_OscInitStruct->PLL2.HSEPrediv2Value));

        /* Prediv2 can be written only when the PLLI2S is disabled. */
        /* Return an error only if new value is different from the programmed value */
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 800295c:	4b32      	ldr	r3, [pc, #200]	; (8002a28 <HAL_RCC_OscConfig+0x4e8>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002964:	2b00      	cmp	r3, #0
 8002966:	d009      	beq.n	800297c <HAL_RCC_OscConfig+0x43c>
            (__HAL_RCC_HSE_GET_PREDIV2() != RCC_OscInitStruct->PLL2.HSEPrediv2Value))
 8002968:	4b2f      	ldr	r3, [pc, #188]	; (8002a28 <HAL_RCC_OscConfig+0x4e8>)
 800296a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800296c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6b5b      	ldr	r3, [r3, #52]	; 0x34
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 8002974:	429a      	cmp	r2, r3
 8002976:	d001      	beq.n	800297c <HAL_RCC_OscConfig+0x43c>
        {
          return HAL_ERROR;
 8002978:	2301      	movs	r3, #1
 800297a:	e0ef      	b.n	8002b5c <HAL_RCC_OscConfig+0x61c>
        }

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 800297c:	4b2c      	ldr	r3, [pc, #176]	; (8002a30 <HAL_RCC_OscConfig+0x4f0>)
 800297e:	2200      	movs	r2, #0
 8002980:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002982:	f7fe fe07 	bl	8001594 <HAL_GetTick>
 8002986:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8002988:	e008      	b.n	800299c <HAL_RCC_OscConfig+0x45c>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800298a:	f7fe fe03 	bl	8001594 <HAL_GetTick>
 800298e:	4602      	mov	r2, r0
 8002990:	693b      	ldr	r3, [r7, #16]
 8002992:	1ad3      	subs	r3, r2, r3
 8002994:	2b64      	cmp	r3, #100	; 0x64
 8002996:	d901      	bls.n	800299c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002998:	2303      	movs	r3, #3
 800299a:	e0df      	b.n	8002b5c <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 800299c:	4b22      	ldr	r3, [pc, #136]	; (8002a28 <HAL_RCC_OscConfig+0x4e8>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d1f0      	bne.n	800298a <HAL_RCC_OscConfig+0x44a>
          }
        }

        /* Configure the HSE prediv2 factor --------------------------------*/
        __HAL_RCC_HSE_PREDIV2_CONFIG(RCC_OscInitStruct->PLL2.HSEPrediv2Value);
 80029a8:	4b1f      	ldr	r3, [pc, #124]	; (8002a28 <HAL_RCC_OscConfig+0x4e8>)
 80029aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029b4:	491c      	ldr	r1, [pc, #112]	; (8002a28 <HAL_RCC_OscConfig+0x4e8>)
 80029b6:	4313      	orrs	r3, r2
 80029b8:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Configure the main PLL2 multiplication factors. */
        __HAL_RCC_PLL2_CONFIG(RCC_OscInitStruct->PLL2.PLL2MUL);
 80029ba:	4b1b      	ldr	r3, [pc, #108]	; (8002a28 <HAL_RCC_OscConfig+0x4e8>)
 80029bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029be:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029c6:	4918      	ldr	r1, [pc, #96]	; (8002a28 <HAL_RCC_OscConfig+0x4e8>)
 80029c8:	4313      	orrs	r3, r2
 80029ca:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable the main PLL2. */
        __HAL_RCC_PLL2_ENABLE();
 80029cc:	4b18      	ldr	r3, [pc, #96]	; (8002a30 <HAL_RCC_OscConfig+0x4f0>)
 80029ce:	2201      	movs	r2, #1
 80029d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029d2:	f7fe fddf 	bl	8001594 <HAL_GetTick>
 80029d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 80029d8:	e008      	b.n	80029ec <HAL_RCC_OscConfig+0x4ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80029da:	f7fe fddb 	bl	8001594 <HAL_GetTick>
 80029de:	4602      	mov	r2, r0
 80029e0:	693b      	ldr	r3, [r7, #16]
 80029e2:	1ad3      	subs	r3, r2, r3
 80029e4:	2b64      	cmp	r3, #100	; 0x64
 80029e6:	d901      	bls.n	80029ec <HAL_RCC_OscConfig+0x4ac>
          {
            return HAL_TIMEOUT;
 80029e8:	2303      	movs	r3, #3
 80029ea:	e0b7      	b.n	8002b5c <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 80029ec:	4b0e      	ldr	r3, [pc, #56]	; (8002a28 <HAL_RCC_OscConfig+0x4e8>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d0f0      	beq.n	80029da <HAL_RCC_OscConfig+0x49a>
 80029f8:	e022      	b.n	8002a40 <HAL_RCC_OscConfig+0x500>
        }
      }
      else
      {
        /* Set PREDIV1 source to HSE */
        CLEAR_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC);
 80029fa:	4b0b      	ldr	r3, [pc, #44]	; (8002a28 <HAL_RCC_OscConfig+0x4e8>)
 80029fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029fe:	4a0a      	ldr	r2, [pc, #40]	; (8002a28 <HAL_RCC_OscConfig+0x4e8>)
 8002a00:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a04:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 8002a06:	4b0a      	ldr	r3, [pc, #40]	; (8002a30 <HAL_RCC_OscConfig+0x4f0>)
 8002a08:	2200      	movs	r2, #0
 8002a0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a0c:	f7fe fdc2 	bl	8001594 <HAL_GetTick>
 8002a10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 8002a12:	e00f      	b.n	8002a34 <HAL_RCC_OscConfig+0x4f4>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8002a14:	f7fe fdbe 	bl	8001594 <HAL_GetTick>
 8002a18:	4602      	mov	r2, r0
 8002a1a:	693b      	ldr	r3, [r7, #16]
 8002a1c:	1ad3      	subs	r3, r2, r3
 8002a1e:	2b64      	cmp	r3, #100	; 0x64
 8002a20:	d908      	bls.n	8002a34 <HAL_RCC_OscConfig+0x4f4>
          {
            return HAL_TIMEOUT;
 8002a22:	2303      	movs	r3, #3
 8002a24:	e09a      	b.n	8002b5c <HAL_RCC_OscConfig+0x61c>
 8002a26:	bf00      	nop
 8002a28:	40021000 	.word	0x40021000
 8002a2c:	40007000 	.word	0x40007000
 8002a30:	42420068 	.word	0x42420068
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 8002a34:	4b4b      	ldr	r3, [pc, #300]	; (8002b64 <HAL_RCC_OscConfig+0x624>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d1e9      	bne.n	8002a14 <HAL_RCC_OscConfig+0x4d4>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6a1b      	ldr	r3, [r3, #32]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	f000 8088 	beq.w	8002b5a <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002a4a:	4b46      	ldr	r3, [pc, #280]	; (8002b64 <HAL_RCC_OscConfig+0x624>)
 8002a4c:	685b      	ldr	r3, [r3, #4]
 8002a4e:	f003 030c 	and.w	r3, r3, #12
 8002a52:	2b08      	cmp	r3, #8
 8002a54:	d068      	beq.n	8002b28 <HAL_RCC_OscConfig+0x5e8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6a1b      	ldr	r3, [r3, #32]
 8002a5a:	2b02      	cmp	r3, #2
 8002a5c:	d14d      	bne.n	8002afa <HAL_RCC_OscConfig+0x5ba>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a5e:	4b42      	ldr	r3, [pc, #264]	; (8002b68 <HAL_RCC_OscConfig+0x628>)
 8002a60:	2200      	movs	r2, #0
 8002a62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a64:	f7fe fd96 	bl	8001594 <HAL_GetTick>
 8002a68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a6a:	e008      	b.n	8002a7e <HAL_RCC_OscConfig+0x53e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a6c:	f7fe fd92 	bl	8001594 <HAL_GetTick>
 8002a70:	4602      	mov	r2, r0
 8002a72:	693b      	ldr	r3, [r7, #16]
 8002a74:	1ad3      	subs	r3, r2, r3
 8002a76:	2b02      	cmp	r3, #2
 8002a78:	d901      	bls.n	8002a7e <HAL_RCC_OscConfig+0x53e>
          {
            return HAL_TIMEOUT;
 8002a7a:	2303      	movs	r3, #3
 8002a7c:	e06e      	b.n	8002b5c <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a7e:	4b39      	ldr	r3, [pc, #228]	; (8002b64 <HAL_RCC_OscConfig+0x624>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d1f0      	bne.n	8002a6c <HAL_RCC_OscConfig+0x52c>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a92:	d10f      	bne.n	8002ab4 <HAL_RCC_OscConfig+0x574>
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
#if defined(RCC_CFGR2_PREDIV1SRC)
          assert_param(IS_RCC_PREDIV1_SOURCE(RCC_OscInitStruct->Prediv1Source));

          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
 8002a94:	4b33      	ldr	r3, [pc, #204]	; (8002b64 <HAL_RCC_OscConfig+0x624>)
 8002a96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	685b      	ldr	r3, [r3, #4]
 8002a9c:	4931      	ldr	r1, [pc, #196]	; (8002b64 <HAL_RCC_OscConfig+0x624>)
 8002a9e:	4313      	orrs	r3, r2
 8002aa0:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002aa2:	4b30      	ldr	r3, [pc, #192]	; (8002b64 <HAL_RCC_OscConfig+0x624>)
 8002aa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aa6:	f023 020f 	bic.w	r2, r3, #15
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	68db      	ldr	r3, [r3, #12]
 8002aae:	492d      	ldr	r1, [pc, #180]	; (8002b64 <HAL_RCC_OscConfig+0x624>)
 8002ab0:	4313      	orrs	r3, r2
 8002ab2:	62cb      	str	r3, [r1, #44]	; 0x2c
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ab4:	4b2b      	ldr	r3, [pc, #172]	; (8002b64 <HAL_RCC_OscConfig+0x624>)
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ac4:	430b      	orrs	r3, r1
 8002ac6:	4927      	ldr	r1, [pc, #156]	; (8002b64 <HAL_RCC_OscConfig+0x624>)
 8002ac8:	4313      	orrs	r3, r2
 8002aca:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002acc:	4b26      	ldr	r3, [pc, #152]	; (8002b68 <HAL_RCC_OscConfig+0x628>)
 8002ace:	2201      	movs	r2, #1
 8002ad0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ad2:	f7fe fd5f 	bl	8001594 <HAL_GetTick>
 8002ad6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ad8:	e008      	b.n	8002aec <HAL_RCC_OscConfig+0x5ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ada:	f7fe fd5b 	bl	8001594 <HAL_GetTick>
 8002ade:	4602      	mov	r2, r0
 8002ae0:	693b      	ldr	r3, [r7, #16]
 8002ae2:	1ad3      	subs	r3, r2, r3
 8002ae4:	2b02      	cmp	r3, #2
 8002ae6:	d901      	bls.n	8002aec <HAL_RCC_OscConfig+0x5ac>
          {
            return HAL_TIMEOUT;
 8002ae8:	2303      	movs	r3, #3
 8002aea:	e037      	b.n	8002b5c <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002aec:	4b1d      	ldr	r3, [pc, #116]	; (8002b64 <HAL_RCC_OscConfig+0x624>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d0f0      	beq.n	8002ada <HAL_RCC_OscConfig+0x59a>
 8002af8:	e02f      	b.n	8002b5a <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002afa:	4b1b      	ldr	r3, [pc, #108]	; (8002b68 <HAL_RCC_OscConfig+0x628>)
 8002afc:	2200      	movs	r2, #0
 8002afe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b00:	f7fe fd48 	bl	8001594 <HAL_GetTick>
 8002b04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b06:	e008      	b.n	8002b1a <HAL_RCC_OscConfig+0x5da>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b08:	f7fe fd44 	bl	8001594 <HAL_GetTick>
 8002b0c:	4602      	mov	r2, r0
 8002b0e:	693b      	ldr	r3, [r7, #16]
 8002b10:	1ad3      	subs	r3, r2, r3
 8002b12:	2b02      	cmp	r3, #2
 8002b14:	d901      	bls.n	8002b1a <HAL_RCC_OscConfig+0x5da>
          {
            return HAL_TIMEOUT;
 8002b16:	2303      	movs	r3, #3
 8002b18:	e020      	b.n	8002b5c <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b1a:	4b12      	ldr	r3, [pc, #72]	; (8002b64 <HAL_RCC_OscConfig+0x624>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d1f0      	bne.n	8002b08 <HAL_RCC_OscConfig+0x5c8>
 8002b26:	e018      	b.n	8002b5a <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6a1b      	ldr	r3, [r3, #32]
 8002b2c:	2b01      	cmp	r3, #1
 8002b2e:	d101      	bne.n	8002b34 <HAL_RCC_OscConfig+0x5f4>
      {
        return HAL_ERROR;
 8002b30:	2301      	movs	r3, #1
 8002b32:	e013      	b.n	8002b5c <HAL_RCC_OscConfig+0x61c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002b34:	4b0b      	ldr	r3, [pc, #44]	; (8002b64 <HAL_RCC_OscConfig+0x624>)
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b44:	429a      	cmp	r2, r3
 8002b46:	d106      	bne.n	8002b56 <HAL_RCC_OscConfig+0x616>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b52:	429a      	cmp	r2, r3
 8002b54:	d001      	beq.n	8002b5a <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 8002b56:	2301      	movs	r3, #1
 8002b58:	e000      	b.n	8002b5c <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }

  return HAL_OK;
 8002b5a:	2300      	movs	r3, #0
}
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	3718      	adds	r7, #24
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bd80      	pop	{r7, pc}
 8002b64:	40021000 	.word	0x40021000
 8002b68:	42420060 	.word	0x42420060

08002b6c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b084      	sub	sp, #16
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
 8002b74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d101      	bne.n	8002b80 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b7c:	2301      	movs	r3, #1
 8002b7e:	e0d0      	b.n	8002d22 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002b80:	4b6a      	ldr	r3, [pc, #424]	; (8002d2c <HAL_RCC_ClockConfig+0x1c0>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f003 0307 	and.w	r3, r3, #7
 8002b88:	683a      	ldr	r2, [r7, #0]
 8002b8a:	429a      	cmp	r2, r3
 8002b8c:	d910      	bls.n	8002bb0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b8e:	4b67      	ldr	r3, [pc, #412]	; (8002d2c <HAL_RCC_ClockConfig+0x1c0>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f023 0207 	bic.w	r2, r3, #7
 8002b96:	4965      	ldr	r1, [pc, #404]	; (8002d2c <HAL_RCC_ClockConfig+0x1c0>)
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	4313      	orrs	r3, r2
 8002b9c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b9e:	4b63      	ldr	r3, [pc, #396]	; (8002d2c <HAL_RCC_ClockConfig+0x1c0>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f003 0307 	and.w	r3, r3, #7
 8002ba6:	683a      	ldr	r2, [r7, #0]
 8002ba8:	429a      	cmp	r2, r3
 8002baa:	d001      	beq.n	8002bb0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002bac:	2301      	movs	r3, #1
 8002bae:	e0b8      	b.n	8002d22 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f003 0302 	and.w	r3, r3, #2
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d020      	beq.n	8002bfe <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f003 0304 	and.w	r3, r3, #4
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d005      	beq.n	8002bd4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002bc8:	4b59      	ldr	r3, [pc, #356]	; (8002d30 <HAL_RCC_ClockConfig+0x1c4>)
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	4a58      	ldr	r2, [pc, #352]	; (8002d30 <HAL_RCC_ClockConfig+0x1c4>)
 8002bce:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002bd2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f003 0308 	and.w	r3, r3, #8
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d005      	beq.n	8002bec <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002be0:	4b53      	ldr	r3, [pc, #332]	; (8002d30 <HAL_RCC_ClockConfig+0x1c4>)
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	4a52      	ldr	r2, [pc, #328]	; (8002d30 <HAL_RCC_ClockConfig+0x1c4>)
 8002be6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002bea:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002bec:	4b50      	ldr	r3, [pc, #320]	; (8002d30 <HAL_RCC_ClockConfig+0x1c4>)
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	689b      	ldr	r3, [r3, #8]
 8002bf8:	494d      	ldr	r1, [pc, #308]	; (8002d30 <HAL_RCC_ClockConfig+0x1c4>)
 8002bfa:	4313      	orrs	r3, r2
 8002bfc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f003 0301 	and.w	r3, r3, #1
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d040      	beq.n	8002c8c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	2b01      	cmp	r3, #1
 8002c10:	d107      	bne.n	8002c22 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c12:	4b47      	ldr	r3, [pc, #284]	; (8002d30 <HAL_RCC_ClockConfig+0x1c4>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d115      	bne.n	8002c4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c1e:	2301      	movs	r3, #1
 8002c20:	e07f      	b.n	8002d22 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	2b02      	cmp	r3, #2
 8002c28:	d107      	bne.n	8002c3a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c2a:	4b41      	ldr	r3, [pc, #260]	; (8002d30 <HAL_RCC_ClockConfig+0x1c4>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d109      	bne.n	8002c4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c36:	2301      	movs	r3, #1
 8002c38:	e073      	b.n	8002d22 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c3a:	4b3d      	ldr	r3, [pc, #244]	; (8002d30 <HAL_RCC_ClockConfig+0x1c4>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f003 0302 	and.w	r3, r3, #2
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d101      	bne.n	8002c4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c46:	2301      	movs	r3, #1
 8002c48:	e06b      	b.n	8002d22 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c4a:	4b39      	ldr	r3, [pc, #228]	; (8002d30 <HAL_RCC_ClockConfig+0x1c4>)
 8002c4c:	685b      	ldr	r3, [r3, #4]
 8002c4e:	f023 0203 	bic.w	r2, r3, #3
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	685b      	ldr	r3, [r3, #4]
 8002c56:	4936      	ldr	r1, [pc, #216]	; (8002d30 <HAL_RCC_ClockConfig+0x1c4>)
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c5c:	f7fe fc9a 	bl	8001594 <HAL_GetTick>
 8002c60:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c62:	e00a      	b.n	8002c7a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c64:	f7fe fc96 	bl	8001594 <HAL_GetTick>
 8002c68:	4602      	mov	r2, r0
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	1ad3      	subs	r3, r2, r3
 8002c6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d901      	bls.n	8002c7a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002c76:	2303      	movs	r3, #3
 8002c78:	e053      	b.n	8002d22 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c7a:	4b2d      	ldr	r3, [pc, #180]	; (8002d30 <HAL_RCC_ClockConfig+0x1c4>)
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	f003 020c 	and.w	r2, r3, #12
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	009b      	lsls	r3, r3, #2
 8002c88:	429a      	cmp	r2, r3
 8002c8a:	d1eb      	bne.n	8002c64 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002c8c:	4b27      	ldr	r3, [pc, #156]	; (8002d2c <HAL_RCC_ClockConfig+0x1c0>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f003 0307 	and.w	r3, r3, #7
 8002c94:	683a      	ldr	r2, [r7, #0]
 8002c96:	429a      	cmp	r2, r3
 8002c98:	d210      	bcs.n	8002cbc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c9a:	4b24      	ldr	r3, [pc, #144]	; (8002d2c <HAL_RCC_ClockConfig+0x1c0>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f023 0207 	bic.w	r2, r3, #7
 8002ca2:	4922      	ldr	r1, [pc, #136]	; (8002d2c <HAL_RCC_ClockConfig+0x1c0>)
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	4313      	orrs	r3, r2
 8002ca8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002caa:	4b20      	ldr	r3, [pc, #128]	; (8002d2c <HAL_RCC_ClockConfig+0x1c0>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f003 0307 	and.w	r3, r3, #7
 8002cb2:	683a      	ldr	r2, [r7, #0]
 8002cb4:	429a      	cmp	r2, r3
 8002cb6:	d001      	beq.n	8002cbc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002cb8:	2301      	movs	r3, #1
 8002cba:	e032      	b.n	8002d22 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f003 0304 	and.w	r3, r3, #4
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d008      	beq.n	8002cda <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002cc8:	4b19      	ldr	r3, [pc, #100]	; (8002d30 <HAL_RCC_ClockConfig+0x1c4>)
 8002cca:	685b      	ldr	r3, [r3, #4]
 8002ccc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	68db      	ldr	r3, [r3, #12]
 8002cd4:	4916      	ldr	r1, [pc, #88]	; (8002d30 <HAL_RCC_ClockConfig+0x1c4>)
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f003 0308 	and.w	r3, r3, #8
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d009      	beq.n	8002cfa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002ce6:	4b12      	ldr	r3, [pc, #72]	; (8002d30 <HAL_RCC_ClockConfig+0x1c4>)
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	691b      	ldr	r3, [r3, #16]
 8002cf2:	00db      	lsls	r3, r3, #3
 8002cf4:	490e      	ldr	r1, [pc, #56]	; (8002d30 <HAL_RCC_ClockConfig+0x1c4>)
 8002cf6:	4313      	orrs	r3, r2
 8002cf8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002cfa:	f000 f821 	bl	8002d40 <HAL_RCC_GetSysClockFreq>
 8002cfe:	4602      	mov	r2, r0
 8002d00:	4b0b      	ldr	r3, [pc, #44]	; (8002d30 <HAL_RCC_ClockConfig+0x1c4>)
 8002d02:	685b      	ldr	r3, [r3, #4]
 8002d04:	091b      	lsrs	r3, r3, #4
 8002d06:	f003 030f 	and.w	r3, r3, #15
 8002d0a:	490a      	ldr	r1, [pc, #40]	; (8002d34 <HAL_RCC_ClockConfig+0x1c8>)
 8002d0c:	5ccb      	ldrb	r3, [r1, r3]
 8002d0e:	fa22 f303 	lsr.w	r3, r2, r3
 8002d12:	4a09      	ldr	r2, [pc, #36]	; (8002d38 <HAL_RCC_ClockConfig+0x1cc>)
 8002d14:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002d16:	4b09      	ldr	r3, [pc, #36]	; (8002d3c <HAL_RCC_ClockConfig+0x1d0>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	f7fe fbf8 	bl	8001510 <HAL_InitTick>

  return HAL_OK;
 8002d20:	2300      	movs	r3, #0
}
 8002d22:	4618      	mov	r0, r3
 8002d24:	3710      	adds	r7, #16
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bd80      	pop	{r7, pc}
 8002d2a:	bf00      	nop
 8002d2c:	40022000 	.word	0x40022000
 8002d30:	40021000 	.word	0x40021000
 8002d34:	08005688 	.word	0x08005688
 8002d38:	20000000 	.word	0x20000000
 8002d3c:	20000004 	.word	0x20000004

08002d40 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d40:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002d44:	b091      	sub	sp, #68	; 0x44
 8002d46:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
 8002d48:	4b6a      	ldr	r3, [pc, #424]	; (8002ef4 <HAL_RCC_GetSysClockFreq+0x1b4>)
 8002d4a:	f107 0414 	add.w	r4, r7, #20
 8002d4e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002d50:	c407      	stmia	r4!, {r0, r1, r2}
 8002d52:	8023      	strh	r3, [r4, #0]
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
 8002d54:	4b68      	ldr	r3, [pc, #416]	; (8002ef8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002d56:	1d3c      	adds	r4, r7, #4
 8002d58:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002d5a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002d5e:	2300      	movs	r3, #0
 8002d60:	637b      	str	r3, [r7, #52]	; 0x34
 8002d62:	2300      	movs	r3, #0
 8002d64:	633b      	str	r3, [r7, #48]	; 0x30
 8002d66:	2300      	movs	r3, #0
 8002d68:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t sysclockfreq = 0U;
 8002d6e:	2300      	movs	r3, #0
 8002d70:	63bb      	str	r3, [r7, #56]	; 0x38
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
 8002d72:	2300      	movs	r3, #0
 8002d74:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d76:	2300      	movs	r3, #0
 8002d78:	627b      	str	r3, [r7, #36]	; 0x24
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002d7a:	4b60      	ldr	r3, [pc, #384]	; (8002efc <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	637b      	str	r3, [r7, #52]	; 0x34

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002d80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d82:	f003 030c 	and.w	r3, r3, #12
 8002d86:	2b04      	cmp	r3, #4
 8002d88:	d002      	beq.n	8002d90 <HAL_RCC_GetSysClockFreq+0x50>
 8002d8a:	2b08      	cmp	r3, #8
 8002d8c:	d003      	beq.n	8002d96 <HAL_RCC_GetSysClockFreq+0x56>
 8002d8e:	e0a8      	b.n	8002ee2 <HAL_RCC_GetSysClockFreq+0x1a2>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002d90:	4b5b      	ldr	r3, [pc, #364]	; (8002f00 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8002d92:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002d94:	e0a8      	b.n	8002ee8 <HAL_RCC_GetSysClockFreq+0x1a8>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002d96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d98:	0c9b      	lsrs	r3, r3, #18
 8002d9a:	f003 030f 	and.w	r3, r3, #15
 8002d9e:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8002da2:	4413      	add	r3, r2
 8002da4:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 8002da8:	62fb      	str	r3, [r7, #44]	; 0x2c
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002daa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002dac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	f000 808e 	beq.w	8002ed2 <HAL_RCC_GetSysClockFreq+0x192>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 8002db6:	4b51      	ldr	r3, [pc, #324]	; (8002efc <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002db8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dba:	f003 030f 	and.w	r3, r3, #15
 8002dbe:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8002dc2:	4413      	add	r3, r2
 8002dc4:	f813 3c3c 	ldrb.w	r3, [r3, #-60]
 8002dc8:	633b      	str	r3, [r7, #48]	; 0x30
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
#endif /*RCC_CFGR2_PREDIV1*/
#if defined(RCC_CFGR2_PREDIV1SRC)

        if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC))
 8002dca:	4b4c      	ldr	r3, [pc, #304]	; (8002efc <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002dcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d06b      	beq.n	8002eae <HAL_RCC_GetSysClockFreq+0x16e>
        {
          /* PLL2 selected as Prediv1 source */
          /* PLLCLK = PLL2CLK / PREDIV1 * PLLMUL with PLL2CLK = HSE/PREDIV2 * PLL2MUL */
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 8002dd6:	4b49      	ldr	r3, [pc, #292]	; (8002efc <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002dd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dda:	091b      	lsrs	r3, r3, #4
 8002ddc:	f003 030f 	and.w	r3, r3, #15
 8002de0:	3301      	adds	r3, #1
 8002de2:	62bb      	str	r3, [r7, #40]	; 0x28
          pll2mul = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> RCC_CFGR2_PLL2MUL_Pos) + 2;
 8002de4:	4b45      	ldr	r3, [pc, #276]	; (8002efc <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002de6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002de8:	0a1b      	lsrs	r3, r3, #8
 8002dea:	f003 030f 	and.w	r3, r3, #15
 8002dee:	3302      	adds	r3, #2
 8002df0:	627b      	str	r3, [r7, #36]	; 0x24
          pllclk = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pll2mul * (uint64_t)pllmul) / ((uint64_t)prediv2 * (uint64_t)prediv));
 8002df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002df4:	4618      	mov	r0, r3
 8002df6:	f04f 0100 	mov.w	r1, #0
 8002dfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dfc:	461a      	mov	r2, r3
 8002dfe:	f04f 0300 	mov.w	r3, #0
 8002e02:	fb02 f501 	mul.w	r5, r2, r1
 8002e06:	fb00 f403 	mul.w	r4, r0, r3
 8002e0a:	192e      	adds	r6, r5, r4
 8002e0c:	fba0 4502 	umull	r4, r5, r0, r2
 8002e10:	1973      	adds	r3, r6, r5
 8002e12:	461d      	mov	r5, r3
 8002e14:	4620      	mov	r0, r4
 8002e16:	4629      	mov	r1, r5
 8002e18:	f04f 0200 	mov.w	r2, #0
 8002e1c:	f04f 0300 	mov.w	r3, #0
 8002e20:	014b      	lsls	r3, r1, #5
 8002e22:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002e26:	0142      	lsls	r2, r0, #5
 8002e28:	4610      	mov	r0, r2
 8002e2a:	4619      	mov	r1, r3
 8002e2c:	1b00      	subs	r0, r0, r4
 8002e2e:	eb61 0105 	sbc.w	r1, r1, r5
 8002e32:	f04f 0200 	mov.w	r2, #0
 8002e36:	f04f 0300 	mov.w	r3, #0
 8002e3a:	018b      	lsls	r3, r1, #6
 8002e3c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002e40:	0182      	lsls	r2, r0, #6
 8002e42:	1a12      	subs	r2, r2, r0
 8002e44:	eb63 0301 	sbc.w	r3, r3, r1
 8002e48:	f04f 0000 	mov.w	r0, #0
 8002e4c:	f04f 0100 	mov.w	r1, #0
 8002e50:	00d9      	lsls	r1, r3, #3
 8002e52:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002e56:	00d0      	lsls	r0, r2, #3
 8002e58:	4602      	mov	r2, r0
 8002e5a:	460b      	mov	r3, r1
 8002e5c:	1912      	adds	r2, r2, r4
 8002e5e:	eb45 0303 	adc.w	r3, r5, r3
 8002e62:	f04f 0000 	mov.w	r0, #0
 8002e66:	f04f 0100 	mov.w	r1, #0
 8002e6a:	0299      	lsls	r1, r3, #10
 8002e6c:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002e70:	0290      	lsls	r0, r2, #10
 8002e72:	4602      	mov	r2, r0
 8002e74:	460b      	mov	r3, r1
 8002e76:	4690      	mov	r8, r2
 8002e78:	4699      	mov	r9, r3
 8002e7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	f04f 0100 	mov.w	r1, #0
 8002e82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e84:	461a      	mov	r2, r3
 8002e86:	f04f 0300 	mov.w	r3, #0
 8002e8a:	fb02 f501 	mul.w	r5, r2, r1
 8002e8e:	fb00 f403 	mul.w	r4, r0, r3
 8002e92:	442c      	add	r4, r5
 8002e94:	fba0 2302 	umull	r2, r3, r0, r2
 8002e98:	18e1      	adds	r1, r4, r3
 8002e9a:	460b      	mov	r3, r1
 8002e9c:	4640      	mov	r0, r8
 8002e9e:	4649      	mov	r1, r9
 8002ea0:	f7fd f9c8 	bl	8000234 <__aeabi_uldivmod>
 8002ea4:	4602      	mov	r2, r0
 8002ea6:	460b      	mov	r3, r1
 8002ea8:	4613      	mov	r3, r2
 8002eaa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002eac:	e007      	b.n	8002ebe <HAL_RCC_GetSysClockFreq+0x17e>
        }
        else
        {
          /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
          pllclk = (uint32_t)((HSE_VALUE * pllmul) / prediv);
 8002eae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002eb0:	4a13      	ldr	r2, [pc, #76]	; (8002f00 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8002eb2:	fb02 f203 	mul.w	r2, r2, r3
 8002eb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002eb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ebc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        /* If PLLMUL was set to 13 means that it was to cover the case PLLMUL 6.5 (avoid using float) */
        /* In this case need to divide pllclk by 2 */
        if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
 8002ebe:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8002ec2:	461a      	mov	r2, r3
 8002ec4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d108      	bne.n	8002edc <HAL_RCC_GetSysClockFreq+0x19c>
        {
          pllclk = pllclk / 2;
 8002eca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ecc:	085b      	lsrs	r3, r3, #1
 8002ece:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002ed0:	e004      	b.n	8002edc <HAL_RCC_GetSysClockFreq+0x19c>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002ed2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ed4:	4a0b      	ldr	r2, [pc, #44]	; (8002f04 <HAL_RCC_GetSysClockFreq+0x1c4>)
 8002ed6:	fb02 f303 	mul.w	r3, r2, r3
 8002eda:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      sysclockfreq = pllclk;
 8002edc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ede:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002ee0:	e002      	b.n	8002ee8 <HAL_RCC_GetSysClockFreq+0x1a8>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002ee2:	4b09      	ldr	r3, [pc, #36]	; (8002f08 <HAL_RCC_GetSysClockFreq+0x1c8>)
 8002ee4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002ee6:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002ee8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002eea:	4618      	mov	r0, r3
 8002eec:	3744      	adds	r7, #68	; 0x44
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002ef4:	0800565c 	.word	0x0800565c
 8002ef8:	0800566c 	.word	0x0800566c
 8002efc:	40021000 	.word	0x40021000
 8002f00:	00f42400 	.word	0x00f42400
 8002f04:	003d0900 	.word	0x003d0900
 8002f08:	007a1200 	.word	0x007a1200

08002f0c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f10:	4b02      	ldr	r3, [pc, #8]	; (8002f1c <HAL_RCC_GetHCLKFreq+0x10>)
 8002f12:	681b      	ldr	r3, [r3, #0]
}
 8002f14:	4618      	mov	r0, r3
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bc80      	pop	{r7}
 8002f1a:	4770      	bx	lr
 8002f1c:	20000000 	.word	0x20000000

08002f20 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002f24:	f7ff fff2 	bl	8002f0c <HAL_RCC_GetHCLKFreq>
 8002f28:	4602      	mov	r2, r0
 8002f2a:	4b05      	ldr	r3, [pc, #20]	; (8002f40 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002f2c:	685b      	ldr	r3, [r3, #4]
 8002f2e:	0a1b      	lsrs	r3, r3, #8
 8002f30:	f003 0307 	and.w	r3, r3, #7
 8002f34:	4903      	ldr	r1, [pc, #12]	; (8002f44 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f36:	5ccb      	ldrb	r3, [r1, r3]
 8002f38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	bd80      	pop	{r7, pc}
 8002f40:	40021000 	.word	0x40021000
 8002f44:	08005698 	.word	0x08005698

08002f48 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002f4c:	f7ff ffde 	bl	8002f0c <HAL_RCC_GetHCLKFreq>
 8002f50:	4602      	mov	r2, r0
 8002f52:	4b05      	ldr	r3, [pc, #20]	; (8002f68 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002f54:	685b      	ldr	r3, [r3, #4]
 8002f56:	0adb      	lsrs	r3, r3, #11
 8002f58:	f003 0307 	and.w	r3, r3, #7
 8002f5c:	4903      	ldr	r1, [pc, #12]	; (8002f6c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002f5e:	5ccb      	ldrb	r3, [r1, r3]
 8002f60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f64:	4618      	mov	r0, r3
 8002f66:	bd80      	pop	{r7, pc}
 8002f68:	40021000 	.word	0x40021000
 8002f6c:	08005698 	.word	0x08005698

08002f70 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002f70:	b480      	push	{r7}
 8002f72:	b085      	sub	sp, #20
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002f78:	4b0a      	ldr	r3, [pc, #40]	; (8002fa4 <RCC_Delay+0x34>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	4a0a      	ldr	r2, [pc, #40]	; (8002fa8 <RCC_Delay+0x38>)
 8002f7e:	fba2 2303 	umull	r2, r3, r2, r3
 8002f82:	0a5b      	lsrs	r3, r3, #9
 8002f84:	687a      	ldr	r2, [r7, #4]
 8002f86:	fb02 f303 	mul.w	r3, r2, r3
 8002f8a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002f8c:	bf00      	nop
  }
  while (Delay --);
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	1e5a      	subs	r2, r3, #1
 8002f92:	60fa      	str	r2, [r7, #12]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d1f9      	bne.n	8002f8c <RCC_Delay+0x1c>
}
 8002f98:	bf00      	nop
 8002f9a:	bf00      	nop
 8002f9c:	3714      	adds	r7, #20
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bc80      	pop	{r7}
 8002fa2:	4770      	bx	lr
 8002fa4:	20000000 	.word	0x20000000
 8002fa8:	10624dd3 	.word	0x10624dd3

08002fac <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b088      	sub	sp, #32
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	617b      	str	r3, [r7, #20]
 8002fb8:	2300      	movs	r3, #0
 8002fba:	613b      	str	r3, [r7, #16]
#if defined(STM32F105xC) || defined(STM32F107xC)
  uint32_t  pllactive = 0U;
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	61fb      	str	r3, [r7, #28]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f003 0301 	and.w	r3, r3, #1
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d07d      	beq.n	80030c8 <HAL_RCCEx_PeriphCLKConfig+0x11c>
  {
    FlagStatus pwrclkchanged = RESET;
 8002fcc:	2300      	movs	r3, #0
 8002fce:	76fb      	strb	r3, [r7, #27]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002fd0:	4b8b      	ldr	r3, [pc, #556]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002fd2:	69db      	ldr	r3, [r3, #28]
 8002fd4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d10d      	bne.n	8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x4c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fdc:	4b88      	ldr	r3, [pc, #544]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002fde:	69db      	ldr	r3, [r3, #28]
 8002fe0:	4a87      	ldr	r2, [pc, #540]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002fe2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fe6:	61d3      	str	r3, [r2, #28]
 8002fe8:	4b85      	ldr	r3, [pc, #532]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002fea:	69db      	ldr	r3, [r3, #28]
 8002fec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ff0:	60fb      	str	r3, [r7, #12]
 8002ff2:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002ff4:	2301      	movs	r3, #1
 8002ff6:	76fb      	strb	r3, [r7, #27]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ff8:	4b82      	ldr	r3, [pc, #520]	; (8003204 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003000:	2b00      	cmp	r3, #0
 8003002:	d118      	bne.n	8003036 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003004:	4b7f      	ldr	r3, [pc, #508]	; (8003204 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4a7e      	ldr	r2, [pc, #504]	; (8003204 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800300a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800300e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003010:	f7fe fac0 	bl	8001594 <HAL_GetTick>
 8003014:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003016:	e008      	b.n	800302a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003018:	f7fe fabc 	bl	8001594 <HAL_GetTick>
 800301c:	4602      	mov	r2, r0
 800301e:	697b      	ldr	r3, [r7, #20]
 8003020:	1ad3      	subs	r3, r2, r3
 8003022:	2b64      	cmp	r3, #100	; 0x64
 8003024:	d901      	bls.n	800302a <HAL_RCCEx_PeriphCLKConfig+0x7e>
        {
          return HAL_TIMEOUT;
 8003026:	2303      	movs	r3, #3
 8003028:	e0e5      	b.n	80031f6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800302a:	4b76      	ldr	r3, [pc, #472]	; (8003204 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003032:	2b00      	cmp	r3, #0
 8003034:	d0f0      	beq.n	8003018 <HAL_RCCEx_PeriphCLKConfig+0x6c>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003036:	4b72      	ldr	r3, [pc, #456]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003038:	6a1b      	ldr	r3, [r3, #32]
 800303a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800303e:	613b      	str	r3, [r7, #16]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003040:	693b      	ldr	r3, [r7, #16]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d02e      	beq.n	80030a4 <HAL_RCCEx_PeriphCLKConfig+0xf8>
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800304e:	693a      	ldr	r2, [r7, #16]
 8003050:	429a      	cmp	r2, r3
 8003052:	d027      	beq.n	80030a4 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003054:	4b6a      	ldr	r3, [pc, #424]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003056:	6a1b      	ldr	r3, [r3, #32]
 8003058:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800305c:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800305e:	4b6a      	ldr	r3, [pc, #424]	; (8003208 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003060:	2201      	movs	r2, #1
 8003062:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003064:	4b68      	ldr	r3, [pc, #416]	; (8003208 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003066:	2200      	movs	r2, #0
 8003068:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800306a:	4a65      	ldr	r2, [pc, #404]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800306c:	693b      	ldr	r3, [r7, #16]
 800306e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003070:	693b      	ldr	r3, [r7, #16]
 8003072:	f003 0301 	and.w	r3, r3, #1
 8003076:	2b00      	cmp	r3, #0
 8003078:	d014      	beq.n	80030a4 <HAL_RCCEx_PeriphCLKConfig+0xf8>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800307a:	f7fe fa8b 	bl	8001594 <HAL_GetTick>
 800307e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003080:	e00a      	b.n	8003098 <HAL_RCCEx_PeriphCLKConfig+0xec>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003082:	f7fe fa87 	bl	8001594 <HAL_GetTick>
 8003086:	4602      	mov	r2, r0
 8003088:	697b      	ldr	r3, [r7, #20]
 800308a:	1ad3      	subs	r3, r2, r3
 800308c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003090:	4293      	cmp	r3, r2
 8003092:	d901      	bls.n	8003098 <HAL_RCCEx_PeriphCLKConfig+0xec>
          {
            return HAL_TIMEOUT;
 8003094:	2303      	movs	r3, #3
 8003096:	e0ae      	b.n	80031f6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003098:	4b59      	ldr	r3, [pc, #356]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800309a:	6a1b      	ldr	r3, [r3, #32]
 800309c:	f003 0302 	and.w	r3, r3, #2
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d0ee      	beq.n	8003082 <HAL_RCCEx_PeriphCLKConfig+0xd6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80030a4:	4b56      	ldr	r3, [pc, #344]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80030a6:	6a1b      	ldr	r3, [r3, #32]
 80030a8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	4953      	ldr	r1, [pc, #332]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80030b2:	4313      	orrs	r3, r2
 80030b4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80030b6:	7efb      	ldrb	r3, [r7, #27]
 80030b8:	2b01      	cmp	r3, #1
 80030ba:	d105      	bne.n	80030c8 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030bc:	4b50      	ldr	r3, [pc, #320]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80030be:	69db      	ldr	r3, [r3, #28]
 80030c0:	4a4f      	ldr	r2, [pc, #316]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80030c2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030c6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f003 0302 	and.w	r3, r3, #2
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d008      	beq.n	80030e6 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80030d4:	4b4a      	ldr	r3, [pc, #296]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	689b      	ldr	r3, [r3, #8]
 80030e0:	4947      	ldr	r1, [pc, #284]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80030e2:	4313      	orrs	r3, r2
 80030e4:	604b      	str	r3, [r1, #4]
  }

#if defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ I2S2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f003 0304 	and.w	r3, r3, #4
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d008      	beq.n	8003104 <HAL_RCCEx_PeriphCLKConfig+0x158>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 80030f2:	4b43      	ldr	r3, [pc, #268]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80030f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030f6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	68db      	ldr	r3, [r3, #12]
 80030fe:	4940      	ldr	r1, [pc, #256]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003100:	4313      	orrs	r3, r2
 8003102:	62cb      	str	r3, [r1, #44]	; 0x2c
  }

  /*------------------------------ I2S3 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S3) == RCC_PERIPHCLK_I2S3)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f003 0308 	and.w	r3, r3, #8
 800310c:	2b00      	cmp	r3, #0
 800310e:	d008      	beq.n	8003122 <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S3CLKSOURCE(PeriphClkInit->I2s3ClockSelection));

    /* Configure the I2S3 clock source */
    __HAL_RCC_I2S3_CONFIG(PeriphClkInit->I2s3ClockSelection);
 8003110:	4b3b      	ldr	r3, [pc, #236]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003112:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003114:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	691b      	ldr	r3, [r3, #16]
 800311c:	4938      	ldr	r1, [pc, #224]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800311e:	4313      	orrs	r3, r2
 8003120:	62cb      	str	r3, [r1, #44]	; 0x2c
  }

  /*------------------------------ PLL I2S Configuration ----------------------*/
  /* Check that PLLI2S need to be enabled */
  if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_I2S2SRC) || HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_I2S3SRC))
 8003122:	4b37      	ldr	r3, [pc, #220]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003124:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003126:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800312a:	2b00      	cmp	r3, #0
 800312c:	d105      	bne.n	800313a <HAL_RCCEx_PeriphCLKConfig+0x18e>
 800312e:	4b34      	ldr	r3, [pc, #208]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003130:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003132:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003136:	2b00      	cmp	r3, #0
 8003138:	d001      	beq.n	800313e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Update flag to indicate that PLL I2S should be active */
    pllactive = 1;
 800313a:	2301      	movs	r3, #1
 800313c:	61fb      	str	r3, [r7, #28]
  }

  /* Check if PLL I2S need to be enabled */
  if (pllactive == 1)
 800313e:	69fb      	ldr	r3, [r7, #28]
 8003140:	2b01      	cmp	r3, #1
 8003142:	d148      	bne.n	80031d6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
  {
    /* Enable PLL I2S only if not active */
    if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_PLL3ON))
 8003144:	4b2e      	ldr	r3, [pc, #184]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800314c:	2b00      	cmp	r3, #0
 800314e:	d138      	bne.n	80031c2 <HAL_RCCEx_PeriphCLKConfig+0x216>
      assert_param(IS_RCC_PLLI2S_MUL(PeriphClkInit->PLLI2S.PLLI2SMUL));
      assert_param(IS_RCC_HSE_PREDIV2(PeriphClkInit->PLLI2S.HSEPrediv2Value));

      /* Prediv2 can be written only when the PLL2 is disabled. */
      /* Return an error only if new value is different from the programmed value */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2ON) && \
 8003150:	4b2b      	ldr	r3, [pc, #172]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003158:	2b00      	cmp	r3, #0
 800315a:	d009      	beq.n	8003170 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
          (__HAL_RCC_HSE_GET_PREDIV2() != PeriphClkInit->PLLI2S.HSEPrediv2Value))
 800315c:	4b28      	ldr	r3, [pc, #160]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800315e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003160:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	699b      	ldr	r3, [r3, #24]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2ON) && \
 8003168:	429a      	cmp	r2, r3
 800316a:	d001      	beq.n	8003170 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
      {
        return HAL_ERROR;
 800316c:	2301      	movs	r3, #1
 800316e:	e042      	b.n	80031f6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
      }

      /* Configure the HSE prediv2 factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV2_CONFIG(PeriphClkInit->PLLI2S.HSEPrediv2Value);
 8003170:	4b23      	ldr	r3, [pc, #140]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003172:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003174:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	699b      	ldr	r3, [r3, #24]
 800317c:	4920      	ldr	r1, [pc, #128]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800317e:	4313      	orrs	r3, r2
 8003180:	62cb      	str	r3, [r1, #44]	; 0x2c

      /* Configure the main PLLI2S multiplication factors. */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SMUL);
 8003182:	4b1f      	ldr	r3, [pc, #124]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003184:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003186:	f423 4270 	bic.w	r2, r3, #61440	; 0xf000
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	695b      	ldr	r3, [r3, #20]
 800318e:	491c      	ldr	r1, [pc, #112]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003190:	4313      	orrs	r3, r2
 8003192:	62cb      	str	r3, [r1, #44]	; 0x2c

      /* Enable the main PLLI2S. */
      __HAL_RCC_PLLI2S_ENABLE();
 8003194:	4b1d      	ldr	r3, [pc, #116]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003196:	2201      	movs	r2, #1
 8003198:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800319a:	f7fe f9fb 	bl	8001594 <HAL_GetTick>
 800319e:	6178      	str	r0, [r7, #20]

      /* Wait till PLLI2S is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80031a0:	e008      	b.n	80031b4 <HAL_RCCEx_PeriphCLKConfig+0x208>
      {
        if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80031a2:	f7fe f9f7 	bl	8001594 <HAL_GetTick>
 80031a6:	4602      	mov	r2, r0
 80031a8:	697b      	ldr	r3, [r7, #20]
 80031aa:	1ad3      	subs	r3, r2, r3
 80031ac:	2b64      	cmp	r3, #100	; 0x64
 80031ae:	d901      	bls.n	80031b4 <HAL_RCCEx_PeriphCLKConfig+0x208>
        {
          return HAL_TIMEOUT;
 80031b0:	2303      	movs	r3, #3
 80031b2:	e020      	b.n	80031f6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80031b4:	4b12      	ldr	r3, [pc, #72]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d0f0      	beq.n	80031a2 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 80031c0:	e009      	b.n	80031d6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
      }
    }
    else
    {
      /* Return an error only if user wants to change the PLLI2SMUL whereas PLLI2S is active */
      if (READ_BIT(RCC->CFGR2, RCC_CFGR2_PLL3MUL) != PeriphClkInit->PLLI2S.PLLI2SMUL)
 80031c2:	4b0f      	ldr	r3, [pc, #60]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80031c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031c6:	f403 4270 	and.w	r2, r3, #61440	; 0xf000
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	695b      	ldr	r3, [r3, #20]
 80031ce:	429a      	cmp	r2, r3
 80031d0:	d001      	beq.n	80031d6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
      {
        return HAL_ERROR;
 80031d2:	2301      	movs	r3, #1
 80031d4:	e00f      	b.n	80031f6 <HAL_RCCEx_PeriphCLKConfig+0x24a>

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f003 0310 	and.w	r3, r3, #16
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d008      	beq.n	80031f4 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80031e2:	4b07      	ldr	r3, [pc, #28]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80031e4:	685b      	ldr	r3, [r3, #4]
 80031e6:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	69db      	ldr	r3, [r3, #28]
 80031ee:	4904      	ldr	r1, [pc, #16]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80031f0:	4313      	orrs	r3, r2
 80031f2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80031f4:	2300      	movs	r3, #0
}
 80031f6:	4618      	mov	r0, r3
 80031f8:	3720      	adds	r7, #32
 80031fa:	46bd      	mov	sp, r7
 80031fc:	bd80      	pop	{r7, pc}
 80031fe:	bf00      	nop
 8003200:	40021000 	.word	0x40021000
 8003204:	40007000 	.word	0x40007000
 8003208:	42420440 	.word	0x42420440
 800320c:	42420070 	.word	0x42420070

08003210 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b082      	sub	sp, #8
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d101      	bne.n	8003222 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800321e:	2301      	movs	r3, #1
 8003220:	e076      	b.n	8003310 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003226:	2b00      	cmp	r3, #0
 8003228:	d108      	bne.n	800323c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	685b      	ldr	r3, [r3, #4]
 800322e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003232:	d009      	beq.n	8003248 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2200      	movs	r2, #0
 8003238:	61da      	str	r2, [r3, #28]
 800323a:	e005      	b.n	8003248 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2200      	movs	r2, #0
 8003240:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2200      	movs	r2, #0
 8003246:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2200      	movs	r2, #0
 800324c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003254:	b2db      	uxtb	r3, r3
 8003256:	2b00      	cmp	r3, #0
 8003258:	d106      	bne.n	8003268 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2200      	movs	r2, #0
 800325e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003262:	6878      	ldr	r0, [r7, #4]
 8003264:	f7fd fe72 	bl	8000f4c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2202      	movs	r2, #2
 800326c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	681a      	ldr	r2, [r3, #0]
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800327e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	689b      	ldr	r3, [r3, #8]
 800328c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003290:	431a      	orrs	r2, r3
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	68db      	ldr	r3, [r3, #12]
 8003296:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800329a:	431a      	orrs	r2, r3
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	691b      	ldr	r3, [r3, #16]
 80032a0:	f003 0302 	and.w	r3, r3, #2
 80032a4:	431a      	orrs	r2, r3
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	695b      	ldr	r3, [r3, #20]
 80032aa:	f003 0301 	and.w	r3, r3, #1
 80032ae:	431a      	orrs	r2, r3
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	699b      	ldr	r3, [r3, #24]
 80032b4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80032b8:	431a      	orrs	r2, r3
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	69db      	ldr	r3, [r3, #28]
 80032be:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80032c2:	431a      	orrs	r2, r3
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6a1b      	ldr	r3, [r3, #32]
 80032c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032cc:	ea42 0103 	orr.w	r1, r2, r3
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032d4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	430a      	orrs	r2, r1
 80032de:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	699b      	ldr	r3, [r3, #24]
 80032e4:	0c1a      	lsrs	r2, r3, #16
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f002 0204 	and.w	r2, r2, #4
 80032ee:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	69da      	ldr	r2, [r3, #28]
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80032fe:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2200      	movs	r2, #0
 8003304:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2201      	movs	r2, #1
 800330a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800330e:	2300      	movs	r3, #0
}
 8003310:	4618      	mov	r0, r3
 8003312:	3708      	adds	r7, #8
 8003314:	46bd      	mov	sp, r7
 8003316:	bd80      	pop	{r7, pc}

08003318 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b082      	sub	sp, #8
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d101      	bne.n	800332a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003326:	2301      	movs	r3, #1
 8003328:	e041      	b.n	80033ae <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003330:	b2db      	uxtb	r3, r3
 8003332:	2b00      	cmp	r3, #0
 8003334:	d106      	bne.n	8003344 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2200      	movs	r2, #0
 800333a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800333e:	6878      	ldr	r0, [r7, #4]
 8003340:	f7fd fe4e 	bl	8000fe0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2202      	movs	r2, #2
 8003348:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681a      	ldr	r2, [r3, #0]
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	3304      	adds	r3, #4
 8003354:	4619      	mov	r1, r3
 8003356:	4610      	mov	r0, r2
 8003358:	f000 f9b4 	bl	80036c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2201      	movs	r2, #1
 8003360:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2201      	movs	r2, #1
 8003368:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2201      	movs	r2, #1
 8003370:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2201      	movs	r2, #1
 8003378:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2201      	movs	r2, #1
 8003380:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2201      	movs	r2, #1
 8003388:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2201      	movs	r2, #1
 8003390:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2201      	movs	r2, #1
 8003398:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2201      	movs	r2, #1
 80033a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2201      	movs	r2, #1
 80033a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80033ac:	2300      	movs	r3, #0
}
 80033ae:	4618      	mov	r0, r3
 80033b0:	3708      	adds	r7, #8
 80033b2:	46bd      	mov	sp, r7
 80033b4:	bd80      	pop	{r7, pc}
	...

080033b8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80033b8:	b480      	push	{r7}
 80033ba:	b085      	sub	sp, #20
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033c6:	b2db      	uxtb	r3, r3
 80033c8:	2b01      	cmp	r3, #1
 80033ca:	d001      	beq.n	80033d0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80033cc:	2301      	movs	r3, #1
 80033ce:	e03f      	b.n	8003450 <HAL_TIM_Base_Start_IT+0x98>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2202      	movs	r2, #2
 80033d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	68da      	ldr	r2, [r3, #12]
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f042 0201 	orr.w	r2, r2, #1
 80033e6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4a1b      	ldr	r2, [pc, #108]	; (800345c <HAL_TIM_Base_Start_IT+0xa4>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d013      	beq.n	800341a <HAL_TIM_Base_Start_IT+0x62>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033fa:	d00e      	beq.n	800341a <HAL_TIM_Base_Start_IT+0x62>
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4a17      	ldr	r2, [pc, #92]	; (8003460 <HAL_TIM_Base_Start_IT+0xa8>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d009      	beq.n	800341a <HAL_TIM_Base_Start_IT+0x62>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	4a16      	ldr	r2, [pc, #88]	; (8003464 <HAL_TIM_Base_Start_IT+0xac>)
 800340c:	4293      	cmp	r3, r2
 800340e:	d004      	beq.n	800341a <HAL_TIM_Base_Start_IT+0x62>
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4a14      	ldr	r2, [pc, #80]	; (8003468 <HAL_TIM_Base_Start_IT+0xb0>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d111      	bne.n	800343e <HAL_TIM_Base_Start_IT+0x86>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	689b      	ldr	r3, [r3, #8]
 8003420:	f003 0307 	and.w	r3, r3, #7
 8003424:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	2b06      	cmp	r3, #6
 800342a:	d010      	beq.n	800344e <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	681a      	ldr	r2, [r3, #0]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f042 0201 	orr.w	r2, r2, #1
 800343a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800343c:	e007      	b.n	800344e <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	681a      	ldr	r2, [r3, #0]
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f042 0201 	orr.w	r2, r2, #1
 800344c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800344e:	2300      	movs	r3, #0
}
 8003450:	4618      	mov	r0, r3
 8003452:	3714      	adds	r7, #20
 8003454:	46bd      	mov	sp, r7
 8003456:	bc80      	pop	{r7}
 8003458:	4770      	bx	lr
 800345a:	bf00      	nop
 800345c:	40012c00 	.word	0x40012c00
 8003460:	40000400 	.word	0x40000400
 8003464:	40000800 	.word	0x40000800
 8003468:	40000c00 	.word	0x40000c00

0800346c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b082      	sub	sp, #8
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	691b      	ldr	r3, [r3, #16]
 800347a:	f003 0302 	and.w	r3, r3, #2
 800347e:	2b02      	cmp	r3, #2
 8003480:	d122      	bne.n	80034c8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	68db      	ldr	r3, [r3, #12]
 8003488:	f003 0302 	and.w	r3, r3, #2
 800348c:	2b02      	cmp	r3, #2
 800348e:	d11b      	bne.n	80034c8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f06f 0202 	mvn.w	r2, #2
 8003498:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2201      	movs	r2, #1
 800349e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	699b      	ldr	r3, [r3, #24]
 80034a6:	f003 0303 	and.w	r3, r3, #3
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d003      	beq.n	80034b6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80034ae:	6878      	ldr	r0, [r7, #4]
 80034b0:	f000 f8ed 	bl	800368e <HAL_TIM_IC_CaptureCallback>
 80034b4:	e005      	b.n	80034c2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80034b6:	6878      	ldr	r0, [r7, #4]
 80034b8:	f000 f8e0 	bl	800367c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034bc:	6878      	ldr	r0, [r7, #4]
 80034be:	f000 f8ef 	bl	80036a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2200      	movs	r2, #0
 80034c6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	691b      	ldr	r3, [r3, #16]
 80034ce:	f003 0304 	and.w	r3, r3, #4
 80034d2:	2b04      	cmp	r3, #4
 80034d4:	d122      	bne.n	800351c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	68db      	ldr	r3, [r3, #12]
 80034dc:	f003 0304 	and.w	r3, r3, #4
 80034e0:	2b04      	cmp	r3, #4
 80034e2:	d11b      	bne.n	800351c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f06f 0204 	mvn.w	r2, #4
 80034ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2202      	movs	r2, #2
 80034f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	699b      	ldr	r3, [r3, #24]
 80034fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d003      	beq.n	800350a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003502:	6878      	ldr	r0, [r7, #4]
 8003504:	f000 f8c3 	bl	800368e <HAL_TIM_IC_CaptureCallback>
 8003508:	e005      	b.n	8003516 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800350a:	6878      	ldr	r0, [r7, #4]
 800350c:	f000 f8b6 	bl	800367c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003510:	6878      	ldr	r0, [r7, #4]
 8003512:	f000 f8c5 	bl	80036a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2200      	movs	r2, #0
 800351a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	691b      	ldr	r3, [r3, #16]
 8003522:	f003 0308 	and.w	r3, r3, #8
 8003526:	2b08      	cmp	r3, #8
 8003528:	d122      	bne.n	8003570 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	68db      	ldr	r3, [r3, #12]
 8003530:	f003 0308 	and.w	r3, r3, #8
 8003534:	2b08      	cmp	r3, #8
 8003536:	d11b      	bne.n	8003570 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f06f 0208 	mvn.w	r2, #8
 8003540:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2204      	movs	r2, #4
 8003546:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	69db      	ldr	r3, [r3, #28]
 800354e:	f003 0303 	and.w	r3, r3, #3
 8003552:	2b00      	cmp	r3, #0
 8003554:	d003      	beq.n	800355e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003556:	6878      	ldr	r0, [r7, #4]
 8003558:	f000 f899 	bl	800368e <HAL_TIM_IC_CaptureCallback>
 800355c:	e005      	b.n	800356a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800355e:	6878      	ldr	r0, [r7, #4]
 8003560:	f000 f88c 	bl	800367c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003564:	6878      	ldr	r0, [r7, #4]
 8003566:	f000 f89b 	bl	80036a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2200      	movs	r2, #0
 800356e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	691b      	ldr	r3, [r3, #16]
 8003576:	f003 0310 	and.w	r3, r3, #16
 800357a:	2b10      	cmp	r3, #16
 800357c:	d122      	bne.n	80035c4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	68db      	ldr	r3, [r3, #12]
 8003584:	f003 0310 	and.w	r3, r3, #16
 8003588:	2b10      	cmp	r3, #16
 800358a:	d11b      	bne.n	80035c4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f06f 0210 	mvn.w	r2, #16
 8003594:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2208      	movs	r2, #8
 800359a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	69db      	ldr	r3, [r3, #28]
 80035a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d003      	beq.n	80035b2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035aa:	6878      	ldr	r0, [r7, #4]
 80035ac:	f000 f86f 	bl	800368e <HAL_TIM_IC_CaptureCallback>
 80035b0:	e005      	b.n	80035be <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035b2:	6878      	ldr	r0, [r7, #4]
 80035b4:	f000 f862 	bl	800367c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035b8:	6878      	ldr	r0, [r7, #4]
 80035ba:	f000 f871 	bl	80036a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2200      	movs	r2, #0
 80035c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	691b      	ldr	r3, [r3, #16]
 80035ca:	f003 0301 	and.w	r3, r3, #1
 80035ce:	2b01      	cmp	r3, #1
 80035d0:	d10e      	bne.n	80035f0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	68db      	ldr	r3, [r3, #12]
 80035d8:	f003 0301 	and.w	r3, r3, #1
 80035dc:	2b01      	cmp	r3, #1
 80035de:	d107      	bne.n	80035f0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f06f 0201 	mvn.w	r2, #1
 80035e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80035ea:	6878      	ldr	r0, [r7, #4]
 80035ec:	f7fd faee 	bl	8000bcc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	691b      	ldr	r3, [r3, #16]
 80035f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035fa:	2b80      	cmp	r3, #128	; 0x80
 80035fc:	d10e      	bne.n	800361c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	68db      	ldr	r3, [r3, #12]
 8003604:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003608:	2b80      	cmp	r3, #128	; 0x80
 800360a:	d107      	bne.n	800361c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003614:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003616:	6878      	ldr	r0, [r7, #4]
 8003618:	f000 f92f 	bl	800387a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	691b      	ldr	r3, [r3, #16]
 8003622:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003626:	2b40      	cmp	r3, #64	; 0x40
 8003628:	d10e      	bne.n	8003648 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	68db      	ldr	r3, [r3, #12]
 8003630:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003634:	2b40      	cmp	r3, #64	; 0x40
 8003636:	d107      	bne.n	8003648 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003640:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003642:	6878      	ldr	r0, [r7, #4]
 8003644:	f000 f835 	bl	80036b2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	691b      	ldr	r3, [r3, #16]
 800364e:	f003 0320 	and.w	r3, r3, #32
 8003652:	2b20      	cmp	r3, #32
 8003654:	d10e      	bne.n	8003674 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	68db      	ldr	r3, [r3, #12]
 800365c:	f003 0320 	and.w	r3, r3, #32
 8003660:	2b20      	cmp	r3, #32
 8003662:	d107      	bne.n	8003674 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f06f 0220 	mvn.w	r2, #32
 800366c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800366e:	6878      	ldr	r0, [r7, #4]
 8003670:	f000 f8fa 	bl	8003868 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003674:	bf00      	nop
 8003676:	3708      	adds	r7, #8
 8003678:	46bd      	mov	sp, r7
 800367a:	bd80      	pop	{r7, pc}

0800367c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800367c:	b480      	push	{r7}
 800367e:	b083      	sub	sp, #12
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003684:	bf00      	nop
 8003686:	370c      	adds	r7, #12
 8003688:	46bd      	mov	sp, r7
 800368a:	bc80      	pop	{r7}
 800368c:	4770      	bx	lr

0800368e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800368e:	b480      	push	{r7}
 8003690:	b083      	sub	sp, #12
 8003692:	af00      	add	r7, sp, #0
 8003694:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003696:	bf00      	nop
 8003698:	370c      	adds	r7, #12
 800369a:	46bd      	mov	sp, r7
 800369c:	bc80      	pop	{r7}
 800369e:	4770      	bx	lr

080036a0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80036a0:	b480      	push	{r7}
 80036a2:	b083      	sub	sp, #12
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80036a8:	bf00      	nop
 80036aa:	370c      	adds	r7, #12
 80036ac:	46bd      	mov	sp, r7
 80036ae:	bc80      	pop	{r7}
 80036b0:	4770      	bx	lr

080036b2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80036b2:	b480      	push	{r7}
 80036b4:	b083      	sub	sp, #12
 80036b6:	af00      	add	r7, sp, #0
 80036b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80036ba:	bf00      	nop
 80036bc:	370c      	adds	r7, #12
 80036be:	46bd      	mov	sp, r7
 80036c0:	bc80      	pop	{r7}
 80036c2:	4770      	bx	lr

080036c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80036c4:	b480      	push	{r7}
 80036c6:	b085      	sub	sp, #20
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
 80036cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	4a2d      	ldr	r2, [pc, #180]	; (800378c <TIM_Base_SetConfig+0xc8>)
 80036d8:	4293      	cmp	r3, r2
 80036da:	d00f      	beq.n	80036fc <TIM_Base_SetConfig+0x38>
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036e2:	d00b      	beq.n	80036fc <TIM_Base_SetConfig+0x38>
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	4a2a      	ldr	r2, [pc, #168]	; (8003790 <TIM_Base_SetConfig+0xcc>)
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d007      	beq.n	80036fc <TIM_Base_SetConfig+0x38>
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	4a29      	ldr	r2, [pc, #164]	; (8003794 <TIM_Base_SetConfig+0xd0>)
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d003      	beq.n	80036fc <TIM_Base_SetConfig+0x38>
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	4a28      	ldr	r2, [pc, #160]	; (8003798 <TIM_Base_SetConfig+0xd4>)
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d108      	bne.n	800370e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003702:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	685b      	ldr	r3, [r3, #4]
 8003708:	68fa      	ldr	r2, [r7, #12]
 800370a:	4313      	orrs	r3, r2
 800370c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	4a1e      	ldr	r2, [pc, #120]	; (800378c <TIM_Base_SetConfig+0xc8>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d00f      	beq.n	8003736 <TIM_Base_SetConfig+0x72>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800371c:	d00b      	beq.n	8003736 <TIM_Base_SetConfig+0x72>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	4a1b      	ldr	r2, [pc, #108]	; (8003790 <TIM_Base_SetConfig+0xcc>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d007      	beq.n	8003736 <TIM_Base_SetConfig+0x72>
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	4a1a      	ldr	r2, [pc, #104]	; (8003794 <TIM_Base_SetConfig+0xd0>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d003      	beq.n	8003736 <TIM_Base_SetConfig+0x72>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	4a19      	ldr	r2, [pc, #100]	; (8003798 <TIM_Base_SetConfig+0xd4>)
 8003732:	4293      	cmp	r3, r2
 8003734:	d108      	bne.n	8003748 <TIM_Base_SetConfig+0x84>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800373c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	68db      	ldr	r3, [r3, #12]
 8003742:	68fa      	ldr	r2, [r7, #12]
 8003744:	4313      	orrs	r3, r2
 8003746:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	695b      	ldr	r3, [r3, #20]
 8003752:	4313      	orrs	r3, r2
 8003754:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	68fa      	ldr	r2, [r7, #12]
 800375a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	689a      	ldr	r2, [r3, #8]
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	681a      	ldr	r2, [r3, #0]
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	4a07      	ldr	r2, [pc, #28]	; (800378c <TIM_Base_SetConfig+0xc8>)
 8003770:	4293      	cmp	r3, r2
 8003772:	d103      	bne.n	800377c <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	691a      	ldr	r2, [r3, #16]
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2201      	movs	r2, #1
 8003780:	615a      	str	r2, [r3, #20]
}
 8003782:	bf00      	nop
 8003784:	3714      	adds	r7, #20
 8003786:	46bd      	mov	sp, r7
 8003788:	bc80      	pop	{r7}
 800378a:	4770      	bx	lr
 800378c:	40012c00 	.word	0x40012c00
 8003790:	40000400 	.word	0x40000400
 8003794:	40000800 	.word	0x40000800
 8003798:	40000c00 	.word	0x40000c00

0800379c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800379c:	b480      	push	{r7}
 800379e:	b085      	sub	sp, #20
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
 80037a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037ac:	2b01      	cmp	r3, #1
 80037ae:	d101      	bne.n	80037b4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80037b0:	2302      	movs	r3, #2
 80037b2:	e04b      	b.n	800384c <HAL_TIMEx_MasterConfigSynchronization+0xb0>
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2201      	movs	r2, #1
 80037b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2202      	movs	r2, #2
 80037c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	685b      	ldr	r3, [r3, #4]
 80037ca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	689b      	ldr	r3, [r3, #8]
 80037d2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037da:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	68fa      	ldr	r2, [r7, #12]
 80037e2:	4313      	orrs	r3, r2
 80037e4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	68fa      	ldr	r2, [r7, #12]
 80037ec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	4a19      	ldr	r2, [pc, #100]	; (8003858 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 80037f4:	4293      	cmp	r3, r2
 80037f6:	d013      	beq.n	8003820 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003800:	d00e      	beq.n	8003820 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	4a15      	ldr	r2, [pc, #84]	; (800385c <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8003808:	4293      	cmp	r3, r2
 800380a:	d009      	beq.n	8003820 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4a13      	ldr	r2, [pc, #76]	; (8003860 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8003812:	4293      	cmp	r3, r2
 8003814:	d004      	beq.n	8003820 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	4a12      	ldr	r2, [pc, #72]	; (8003864 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800381c:	4293      	cmp	r3, r2
 800381e:	d10c      	bne.n	800383a <HAL_TIMEx_MasterConfigSynchronization+0x9e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003820:	68bb      	ldr	r3, [r7, #8]
 8003822:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003826:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	685b      	ldr	r3, [r3, #4]
 800382c:	68ba      	ldr	r2, [r7, #8]
 800382e:	4313      	orrs	r3, r2
 8003830:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	68ba      	ldr	r2, [r7, #8]
 8003838:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2201      	movs	r2, #1
 800383e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2200      	movs	r2, #0
 8003846:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800384a:	2300      	movs	r3, #0
}
 800384c:	4618      	mov	r0, r3
 800384e:	3714      	adds	r7, #20
 8003850:	46bd      	mov	sp, r7
 8003852:	bc80      	pop	{r7}
 8003854:	4770      	bx	lr
 8003856:	bf00      	nop
 8003858:	40012c00 	.word	0x40012c00
 800385c:	40000400 	.word	0x40000400
 8003860:	40000800 	.word	0x40000800
 8003864:	40000c00 	.word	0x40000c00

08003868 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003868:	b480      	push	{r7}
 800386a:	b083      	sub	sp, #12
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003870:	bf00      	nop
 8003872:	370c      	adds	r7, #12
 8003874:	46bd      	mov	sp, r7
 8003876:	bc80      	pop	{r7}
 8003878:	4770      	bx	lr

0800387a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800387a:	b480      	push	{r7}
 800387c:	b083      	sub	sp, #12
 800387e:	af00      	add	r7, sp, #0
 8003880:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003882:	bf00      	nop
 8003884:	370c      	adds	r7, #12
 8003886:	46bd      	mov	sp, r7
 8003888:	bc80      	pop	{r7}
 800388a:	4770      	bx	lr

0800388c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b082      	sub	sp, #8
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2b00      	cmp	r3, #0
 8003898:	d101      	bne.n	800389e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800389a:	2301      	movs	r3, #1
 800389c:	e03f      	b.n	800391e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038a4:	b2db      	uxtb	r3, r3
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d106      	bne.n	80038b8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2200      	movs	r2, #0
 80038ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80038b2:	6878      	ldr	r0, [r7, #4]
 80038b4:	f7fd fbba 	bl	800102c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2224      	movs	r2, #36	; 0x24
 80038bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	68da      	ldr	r2, [r3, #12]
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80038ce:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80038d0:	6878      	ldr	r0, [r7, #4]
 80038d2:	f000 fc85 	bl	80041e0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	691a      	ldr	r2, [r3, #16]
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80038e4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	695a      	ldr	r2, [r3, #20]
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80038f4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	68da      	ldr	r2, [r3, #12]
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003904:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2200      	movs	r2, #0
 800390a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2220      	movs	r2, #32
 8003910:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2220      	movs	r2, #32
 8003918:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800391c:	2300      	movs	r3, #0
}
 800391e:	4618      	mov	r0, r3
 8003920:	3708      	adds	r7, #8
 8003922:	46bd      	mov	sp, r7
 8003924:	bd80      	pop	{r7, pc}

08003926 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003926:	b580      	push	{r7, lr}
 8003928:	b08a      	sub	sp, #40	; 0x28
 800392a:	af02      	add	r7, sp, #8
 800392c:	60f8      	str	r0, [r7, #12]
 800392e:	60b9      	str	r1, [r7, #8]
 8003930:	603b      	str	r3, [r7, #0]
 8003932:	4613      	mov	r3, r2
 8003934:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003936:	2300      	movs	r3, #0
 8003938:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003940:	b2db      	uxtb	r3, r3
 8003942:	2b20      	cmp	r3, #32
 8003944:	d17c      	bne.n	8003a40 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003946:	68bb      	ldr	r3, [r7, #8]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d002      	beq.n	8003952 <HAL_UART_Transmit+0x2c>
 800394c:	88fb      	ldrh	r3, [r7, #6]
 800394e:	2b00      	cmp	r3, #0
 8003950:	d101      	bne.n	8003956 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003952:	2301      	movs	r3, #1
 8003954:	e075      	b.n	8003a42 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800395c:	2b01      	cmp	r3, #1
 800395e:	d101      	bne.n	8003964 <HAL_UART_Transmit+0x3e>
 8003960:	2302      	movs	r3, #2
 8003962:	e06e      	b.n	8003a42 <HAL_UART_Transmit+0x11c>
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	2201      	movs	r2, #1
 8003968:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	2200      	movs	r2, #0
 8003970:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	2221      	movs	r2, #33	; 0x21
 8003976:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800397a:	f7fd fe0b 	bl	8001594 <HAL_GetTick>
 800397e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	88fa      	ldrh	r2, [r7, #6]
 8003984:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	88fa      	ldrh	r2, [r7, #6]
 800398a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	689b      	ldr	r3, [r3, #8]
 8003990:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003994:	d108      	bne.n	80039a8 <HAL_UART_Transmit+0x82>
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	691b      	ldr	r3, [r3, #16]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d104      	bne.n	80039a8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800399e:	2300      	movs	r3, #0
 80039a0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80039a2:	68bb      	ldr	r3, [r7, #8]
 80039a4:	61bb      	str	r3, [r7, #24]
 80039a6:	e003      	b.n	80039b0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80039a8:	68bb      	ldr	r3, [r7, #8]
 80039aa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80039ac:	2300      	movs	r3, #0
 80039ae:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	2200      	movs	r2, #0
 80039b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80039b8:	e02a      	b.n	8003a10 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	9300      	str	r3, [sp, #0]
 80039be:	697b      	ldr	r3, [r7, #20]
 80039c0:	2200      	movs	r2, #0
 80039c2:	2180      	movs	r1, #128	; 0x80
 80039c4:	68f8      	ldr	r0, [r7, #12]
 80039c6:	f000 fa38 	bl	8003e3a <UART_WaitOnFlagUntilTimeout>
 80039ca:	4603      	mov	r3, r0
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d001      	beq.n	80039d4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80039d0:	2303      	movs	r3, #3
 80039d2:	e036      	b.n	8003a42 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80039d4:	69fb      	ldr	r3, [r7, #28]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d10b      	bne.n	80039f2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80039da:	69bb      	ldr	r3, [r7, #24]
 80039dc:	881b      	ldrh	r3, [r3, #0]
 80039de:	461a      	mov	r2, r3
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80039e8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80039ea:	69bb      	ldr	r3, [r7, #24]
 80039ec:	3302      	adds	r3, #2
 80039ee:	61bb      	str	r3, [r7, #24]
 80039f0:	e007      	b.n	8003a02 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80039f2:	69fb      	ldr	r3, [r7, #28]
 80039f4:	781a      	ldrb	r2, [r3, #0]
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80039fc:	69fb      	ldr	r3, [r7, #28]
 80039fe:	3301      	adds	r3, #1
 8003a00:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003a06:	b29b      	uxth	r3, r3
 8003a08:	3b01      	subs	r3, #1
 8003a0a:	b29a      	uxth	r2, r3
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003a14:	b29b      	uxth	r3, r3
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d1cf      	bne.n	80039ba <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	9300      	str	r3, [sp, #0]
 8003a1e:	697b      	ldr	r3, [r7, #20]
 8003a20:	2200      	movs	r2, #0
 8003a22:	2140      	movs	r1, #64	; 0x40
 8003a24:	68f8      	ldr	r0, [r7, #12]
 8003a26:	f000 fa08 	bl	8003e3a <UART_WaitOnFlagUntilTimeout>
 8003a2a:	4603      	mov	r3, r0
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d001      	beq.n	8003a34 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003a30:	2303      	movs	r3, #3
 8003a32:	e006      	b.n	8003a42 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	2220      	movs	r2, #32
 8003a38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	e000      	b.n	8003a42 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003a40:	2302      	movs	r3, #2
  }
}
 8003a42:	4618      	mov	r0, r3
 8003a44:	3720      	adds	r7, #32
 8003a46:	46bd      	mov	sp, r7
 8003a48:	bd80      	pop	{r7, pc}

08003a4a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003a4a:	b580      	push	{r7, lr}
 8003a4c:	b084      	sub	sp, #16
 8003a4e:	af00      	add	r7, sp, #0
 8003a50:	60f8      	str	r0, [r7, #12]
 8003a52:	60b9      	str	r1, [r7, #8]
 8003a54:	4613      	mov	r3, r2
 8003a56:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003a5e:	b2db      	uxtb	r3, r3
 8003a60:	2b20      	cmp	r3, #32
 8003a62:	d11d      	bne.n	8003aa0 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a64:	68bb      	ldr	r3, [r7, #8]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d002      	beq.n	8003a70 <HAL_UART_Receive_IT+0x26>
 8003a6a:	88fb      	ldrh	r3, [r7, #6]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d101      	bne.n	8003a74 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003a70:	2301      	movs	r3, #1
 8003a72:	e016      	b.n	8003aa2 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a7a:	2b01      	cmp	r3, #1
 8003a7c:	d101      	bne.n	8003a82 <HAL_UART_Receive_IT+0x38>
 8003a7e:	2302      	movs	r3, #2
 8003a80:	e00f      	b.n	8003aa2 <HAL_UART_Receive_IT+0x58>
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	2201      	movs	r2, #1
 8003a86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8003a90:	88fb      	ldrh	r3, [r7, #6]
 8003a92:	461a      	mov	r2, r3
 8003a94:	68b9      	ldr	r1, [r7, #8]
 8003a96:	68f8      	ldr	r0, [r7, #12]
 8003a98:	f000 fa19 	bl	8003ece <UART_Start_Receive_IT>
 8003a9c:	4603      	mov	r3, r0
 8003a9e:	e000      	b.n	8003aa2 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8003aa0:	2302      	movs	r3, #2
  }
}
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	3710      	adds	r7, #16
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	bd80      	pop	{r7, pc}
	...

08003aac <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b08a      	sub	sp, #40	; 0x28
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	68db      	ldr	r3, [r3, #12]
 8003ac2:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	695b      	ldr	r3, [r3, #20]
 8003aca:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8003acc:	2300      	movs	r3, #0
 8003ace:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ad6:	f003 030f 	and.w	r3, r3, #15
 8003ada:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8003adc:	69bb      	ldr	r3, [r7, #24]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d10d      	bne.n	8003afe <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ae4:	f003 0320 	and.w	r3, r3, #32
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d008      	beq.n	8003afe <HAL_UART_IRQHandler+0x52>
 8003aec:	6a3b      	ldr	r3, [r7, #32]
 8003aee:	f003 0320 	and.w	r3, r3, #32
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d003      	beq.n	8003afe <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003af6:	6878      	ldr	r0, [r7, #4]
 8003af8:	f000 fac9 	bl	800408e <UART_Receive_IT>
      return;
 8003afc:	e17b      	b.n	8003df6 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003afe:	69bb      	ldr	r3, [r7, #24]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	f000 80b1 	beq.w	8003c68 <HAL_UART_IRQHandler+0x1bc>
 8003b06:	69fb      	ldr	r3, [r7, #28]
 8003b08:	f003 0301 	and.w	r3, r3, #1
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d105      	bne.n	8003b1c <HAL_UART_IRQHandler+0x70>
 8003b10:	6a3b      	ldr	r3, [r7, #32]
 8003b12:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	f000 80a6 	beq.w	8003c68 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b1e:	f003 0301 	and.w	r3, r3, #1
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d00a      	beq.n	8003b3c <HAL_UART_IRQHandler+0x90>
 8003b26:	6a3b      	ldr	r3, [r7, #32]
 8003b28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d005      	beq.n	8003b3c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b34:	f043 0201 	orr.w	r2, r3, #1
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b3e:	f003 0304 	and.w	r3, r3, #4
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d00a      	beq.n	8003b5c <HAL_UART_IRQHandler+0xb0>
 8003b46:	69fb      	ldr	r3, [r7, #28]
 8003b48:	f003 0301 	and.w	r3, r3, #1
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d005      	beq.n	8003b5c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b54:	f043 0202 	orr.w	r2, r3, #2
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b5e:	f003 0302 	and.w	r3, r3, #2
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d00a      	beq.n	8003b7c <HAL_UART_IRQHandler+0xd0>
 8003b66:	69fb      	ldr	r3, [r7, #28]
 8003b68:	f003 0301 	and.w	r3, r3, #1
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d005      	beq.n	8003b7c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b74:	f043 0204 	orr.w	r2, r3, #4
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b7e:	f003 0308 	and.w	r3, r3, #8
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d00f      	beq.n	8003ba6 <HAL_UART_IRQHandler+0xfa>
 8003b86:	6a3b      	ldr	r3, [r7, #32]
 8003b88:	f003 0320 	and.w	r3, r3, #32
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d104      	bne.n	8003b9a <HAL_UART_IRQHandler+0xee>
 8003b90:	69fb      	ldr	r3, [r7, #28]
 8003b92:	f003 0301 	and.w	r3, r3, #1
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d005      	beq.n	8003ba6 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b9e:	f043 0208 	orr.w	r2, r3, #8
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	f000 811e 	beq.w	8003dec <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bb2:	f003 0320 	and.w	r3, r3, #32
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d007      	beq.n	8003bca <HAL_UART_IRQHandler+0x11e>
 8003bba:	6a3b      	ldr	r3, [r7, #32]
 8003bbc:	f003 0320 	and.w	r3, r3, #32
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d002      	beq.n	8003bca <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8003bc4:	6878      	ldr	r0, [r7, #4]
 8003bc6:	f000 fa62 	bl	800408e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	695b      	ldr	r3, [r3, #20]
 8003bd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	bf14      	ite	ne
 8003bd8:	2301      	movne	r3, #1
 8003bda:	2300      	moveq	r3, #0
 8003bdc:	b2db      	uxtb	r3, r3
 8003bde:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003be4:	f003 0308 	and.w	r3, r3, #8
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d102      	bne.n	8003bf2 <HAL_UART_IRQHandler+0x146>
 8003bec:	697b      	ldr	r3, [r7, #20]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d031      	beq.n	8003c56 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003bf2:	6878      	ldr	r0, [r7, #4]
 8003bf4:	f000 f9a4 	bl	8003f40 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	695b      	ldr	r3, [r3, #20]
 8003bfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d023      	beq.n	8003c4e <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	695a      	ldr	r2, [r3, #20]
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c14:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d013      	beq.n	8003c46 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c22:	4a76      	ldr	r2, [pc, #472]	; (8003dfc <HAL_UART_IRQHandler+0x350>)
 8003c24:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	f7fe f886 	bl	8001d3c <HAL_DMA_Abort_IT>
 8003c30:	4603      	mov	r3, r0
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d016      	beq.n	8003c64 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c3c:	687a      	ldr	r2, [r7, #4]
 8003c3e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003c40:	4610      	mov	r0, r2
 8003c42:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c44:	e00e      	b.n	8003c64 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003c46:	6878      	ldr	r0, [r7, #4]
 8003c48:	f000 f8e3 	bl	8003e12 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c4c:	e00a      	b.n	8003c64 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003c4e:	6878      	ldr	r0, [r7, #4]
 8003c50:	f000 f8df 	bl	8003e12 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c54:	e006      	b.n	8003c64 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003c56:	6878      	ldr	r0, [r7, #4]
 8003c58:	f000 f8db 	bl	8003e12 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2200      	movs	r2, #0
 8003c60:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003c62:	e0c3      	b.n	8003dec <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c64:	bf00      	nop
    return;
 8003c66:	e0c1      	b.n	8003dec <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c6c:	2b01      	cmp	r3, #1
 8003c6e:	f040 80a1 	bne.w	8003db4 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8003c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c74:	f003 0310 	and.w	r3, r3, #16
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	f000 809b 	beq.w	8003db4 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8003c7e:	6a3b      	ldr	r3, [r7, #32]
 8003c80:	f003 0310 	and.w	r3, r3, #16
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	f000 8095 	beq.w	8003db4 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	60fb      	str	r3, [r7, #12]
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	60fb      	str	r3, [r7, #12]
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	685b      	ldr	r3, [r3, #4]
 8003c9c:	60fb      	str	r3, [r7, #12]
 8003c9e:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	695b      	ldr	r3, [r3, #20]
 8003ca6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d04e      	beq.n	8003d4c <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	685b      	ldr	r3, [r3, #4]
 8003cb6:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8003cb8:	8a3b      	ldrh	r3, [r7, #16]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	f000 8098 	beq.w	8003df0 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003cc4:	8a3a      	ldrh	r2, [r7, #16]
 8003cc6:	429a      	cmp	r2, r3
 8003cc8:	f080 8092 	bcs.w	8003df0 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	8a3a      	ldrh	r2, [r7, #16]
 8003cd0:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cd6:	699b      	ldr	r3, [r3, #24]
 8003cd8:	2b20      	cmp	r3, #32
 8003cda:	d02b      	beq.n	8003d34 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	68da      	ldr	r2, [r3, #12]
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003cea:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	695a      	ldr	r2, [r3, #20]
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f022 0201 	bic.w	r2, r2, #1
 8003cfa:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	695a      	ldr	r2, [r3, #20]
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d0a:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2220      	movs	r2, #32
 8003d10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2200      	movs	r2, #0
 8003d18:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	68da      	ldr	r2, [r3, #12]
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f022 0210 	bic.w	r2, r2, #16
 8003d28:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d2e:	4618      	mov	r0, r3
 8003d30:	f7fd ffc9 	bl	8001cc6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003d3c:	b29b      	uxth	r3, r3
 8003d3e:	1ad3      	subs	r3, r2, r3
 8003d40:	b29b      	uxth	r3, r3
 8003d42:	4619      	mov	r1, r3
 8003d44:	6878      	ldr	r0, [r7, #4]
 8003d46:	f000 f86d 	bl	8003e24 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003d4a:	e051      	b.n	8003df0 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003d54:	b29b      	uxth	r3, r3
 8003d56:	1ad3      	subs	r3, r2, r3
 8003d58:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003d5e:	b29b      	uxth	r3, r3
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d047      	beq.n	8003df4 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8003d64:	8a7b      	ldrh	r3, [r7, #18]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d044      	beq.n	8003df4 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	68da      	ldr	r2, [r3, #12]
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003d78:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	695a      	ldr	r2, [r3, #20]
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f022 0201 	bic.w	r2, r2, #1
 8003d88:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2220      	movs	r2, #32
 8003d8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	2200      	movs	r2, #0
 8003d96:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	68da      	ldr	r2, [r3, #12]
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f022 0210 	bic.w	r2, r2, #16
 8003da6:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003da8:	8a7b      	ldrh	r3, [r7, #18]
 8003daa:	4619      	mov	r1, r3
 8003dac:	6878      	ldr	r0, [r7, #4]
 8003dae:	f000 f839 	bl	8003e24 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003db2:	e01f      	b.n	8003df4 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003db6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d008      	beq.n	8003dd0 <HAL_UART_IRQHandler+0x324>
 8003dbe:	6a3b      	ldr	r3, [r7, #32]
 8003dc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d003      	beq.n	8003dd0 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8003dc8:	6878      	ldr	r0, [r7, #4]
 8003dca:	f000 f8f9 	bl	8003fc0 <UART_Transmit_IT>
    return;
 8003dce:	e012      	b.n	8003df6 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d00d      	beq.n	8003df6 <HAL_UART_IRQHandler+0x34a>
 8003dda:	6a3b      	ldr	r3, [r7, #32]
 8003ddc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d008      	beq.n	8003df6 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8003de4:	6878      	ldr	r0, [r7, #4]
 8003de6:	f000 f93a 	bl	800405e <UART_EndTransmit_IT>
    return;
 8003dea:	e004      	b.n	8003df6 <HAL_UART_IRQHandler+0x34a>
    return;
 8003dec:	bf00      	nop
 8003dee:	e002      	b.n	8003df6 <HAL_UART_IRQHandler+0x34a>
      return;
 8003df0:	bf00      	nop
 8003df2:	e000      	b.n	8003df6 <HAL_UART_IRQHandler+0x34a>
      return;
 8003df4:	bf00      	nop
  }
}
 8003df6:	3728      	adds	r7, #40	; 0x28
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	bd80      	pop	{r7, pc}
 8003dfc:	08003f99 	.word	0x08003f99

08003e00 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003e00:	b480      	push	{r7}
 8003e02:	b083      	sub	sp, #12
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003e08:	bf00      	nop
 8003e0a:	370c      	adds	r7, #12
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	bc80      	pop	{r7}
 8003e10:	4770      	bx	lr

08003e12 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003e12:	b480      	push	{r7}
 8003e14:	b083      	sub	sp, #12
 8003e16:	af00      	add	r7, sp, #0
 8003e18:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003e1a:	bf00      	nop
 8003e1c:	370c      	adds	r7, #12
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	bc80      	pop	{r7}
 8003e22:	4770      	bx	lr

08003e24 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003e24:	b480      	push	{r7}
 8003e26:	b083      	sub	sp, #12
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
 8003e2c:	460b      	mov	r3, r1
 8003e2e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003e30:	bf00      	nop
 8003e32:	370c      	adds	r7, #12
 8003e34:	46bd      	mov	sp, r7
 8003e36:	bc80      	pop	{r7}
 8003e38:	4770      	bx	lr

08003e3a <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003e3a:	b580      	push	{r7, lr}
 8003e3c:	b084      	sub	sp, #16
 8003e3e:	af00      	add	r7, sp, #0
 8003e40:	60f8      	str	r0, [r7, #12]
 8003e42:	60b9      	str	r1, [r7, #8]
 8003e44:	603b      	str	r3, [r7, #0]
 8003e46:	4613      	mov	r3, r2
 8003e48:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e4a:	e02c      	b.n	8003ea6 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e4c:	69bb      	ldr	r3, [r7, #24]
 8003e4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e52:	d028      	beq.n	8003ea6 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003e54:	69bb      	ldr	r3, [r7, #24]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d007      	beq.n	8003e6a <UART_WaitOnFlagUntilTimeout+0x30>
 8003e5a:	f7fd fb9b 	bl	8001594 <HAL_GetTick>
 8003e5e:	4602      	mov	r2, r0
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	1ad3      	subs	r3, r2, r3
 8003e64:	69ba      	ldr	r2, [r7, #24]
 8003e66:	429a      	cmp	r2, r3
 8003e68:	d21d      	bcs.n	8003ea6 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	68da      	ldr	r2, [r3, #12]
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003e78:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	695a      	ldr	r2, [r3, #20]
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f022 0201 	bic.w	r2, r2, #1
 8003e88:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	2220      	movs	r2, #32
 8003e8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	2220      	movs	r2, #32
 8003e96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003ea2:	2303      	movs	r3, #3
 8003ea4:	e00f      	b.n	8003ec6 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	681a      	ldr	r2, [r3, #0]
 8003eac:	68bb      	ldr	r3, [r7, #8]
 8003eae:	4013      	ands	r3, r2
 8003eb0:	68ba      	ldr	r2, [r7, #8]
 8003eb2:	429a      	cmp	r2, r3
 8003eb4:	bf0c      	ite	eq
 8003eb6:	2301      	moveq	r3, #1
 8003eb8:	2300      	movne	r3, #0
 8003eba:	b2db      	uxtb	r3, r3
 8003ebc:	461a      	mov	r2, r3
 8003ebe:	79fb      	ldrb	r3, [r7, #7]
 8003ec0:	429a      	cmp	r2, r3
 8003ec2:	d0c3      	beq.n	8003e4c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003ec4:	2300      	movs	r3, #0
}
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	3710      	adds	r7, #16
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	bd80      	pop	{r7, pc}

08003ece <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003ece:	b480      	push	{r7}
 8003ed0:	b085      	sub	sp, #20
 8003ed2:	af00      	add	r7, sp, #0
 8003ed4:	60f8      	str	r0, [r7, #12]
 8003ed6:	60b9      	str	r1, [r7, #8]
 8003ed8:	4613      	mov	r3, r2
 8003eda:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	68ba      	ldr	r2, [r7, #8]
 8003ee0:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	88fa      	ldrh	r2, [r7, #6]
 8003ee6:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	88fa      	ldrh	r2, [r7, #6]
 8003eec:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	2222      	movs	r2, #34	; 0x22
 8003ef8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	2200      	movs	r2, #0
 8003f00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	68da      	ldr	r2, [r3, #12]
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f12:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	695a      	ldr	r2, [r3, #20]
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f042 0201 	orr.w	r2, r2, #1
 8003f22:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	68da      	ldr	r2, [r3, #12]
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f042 0220 	orr.w	r2, r2, #32
 8003f32:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003f34:	2300      	movs	r3, #0
}
 8003f36:	4618      	mov	r0, r3
 8003f38:	3714      	adds	r7, #20
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	bc80      	pop	{r7}
 8003f3e:	4770      	bx	lr

08003f40 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003f40:	b480      	push	{r7}
 8003f42:	b083      	sub	sp, #12
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	68da      	ldr	r2, [r3, #12]
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003f56:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	695a      	ldr	r2, [r3, #20]
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f022 0201 	bic.w	r2, r2, #1
 8003f66:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f6c:	2b01      	cmp	r3, #1
 8003f6e:	d107      	bne.n	8003f80 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	68da      	ldr	r2, [r3, #12]
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f022 0210 	bic.w	r2, r2, #16
 8003f7e:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2220      	movs	r2, #32
 8003f84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003f8e:	bf00      	nop
 8003f90:	370c      	adds	r7, #12
 8003f92:	46bd      	mov	sp, r7
 8003f94:	bc80      	pop	{r7}
 8003f96:	4770      	bx	lr

08003f98 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b084      	sub	sp, #16
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fa4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	2200      	movs	r2, #0
 8003faa:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	2200      	movs	r2, #0
 8003fb0:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003fb2:	68f8      	ldr	r0, [r7, #12]
 8003fb4:	f7ff ff2d 	bl	8003e12 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003fb8:	bf00      	nop
 8003fba:	3710      	adds	r7, #16
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	bd80      	pop	{r7, pc}

08003fc0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003fc0:	b480      	push	{r7}
 8003fc2:	b085      	sub	sp, #20
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fce:	b2db      	uxtb	r3, r3
 8003fd0:	2b21      	cmp	r3, #33	; 0x21
 8003fd2:	d13e      	bne.n	8004052 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	689b      	ldr	r3, [r3, #8]
 8003fd8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fdc:	d114      	bne.n	8004008 <UART_Transmit_IT+0x48>
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	691b      	ldr	r3, [r3, #16]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d110      	bne.n	8004008 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6a1b      	ldr	r3, [r3, #32]
 8003fea:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	881b      	ldrh	r3, [r3, #0]
 8003ff0:	461a      	mov	r2, r3
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003ffa:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6a1b      	ldr	r3, [r3, #32]
 8004000:	1c9a      	adds	r2, r3, #2
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	621a      	str	r2, [r3, #32]
 8004006:	e008      	b.n	800401a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6a1b      	ldr	r3, [r3, #32]
 800400c:	1c59      	adds	r1, r3, #1
 800400e:	687a      	ldr	r2, [r7, #4]
 8004010:	6211      	str	r1, [r2, #32]
 8004012:	781a      	ldrb	r2, [r3, #0]
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800401e:	b29b      	uxth	r3, r3
 8004020:	3b01      	subs	r3, #1
 8004022:	b29b      	uxth	r3, r3
 8004024:	687a      	ldr	r2, [r7, #4]
 8004026:	4619      	mov	r1, r3
 8004028:	84d1      	strh	r1, [r2, #38]	; 0x26
 800402a:	2b00      	cmp	r3, #0
 800402c:	d10f      	bne.n	800404e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	68da      	ldr	r2, [r3, #12]
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800403c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	68da      	ldr	r2, [r3, #12]
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800404c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800404e:	2300      	movs	r3, #0
 8004050:	e000      	b.n	8004054 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004052:	2302      	movs	r3, #2
  }
}
 8004054:	4618      	mov	r0, r3
 8004056:	3714      	adds	r7, #20
 8004058:	46bd      	mov	sp, r7
 800405a:	bc80      	pop	{r7}
 800405c:	4770      	bx	lr

0800405e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800405e:	b580      	push	{r7, lr}
 8004060:	b082      	sub	sp, #8
 8004062:	af00      	add	r7, sp, #0
 8004064:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	68da      	ldr	r2, [r3, #12]
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004074:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	2220      	movs	r2, #32
 800407a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800407e:	6878      	ldr	r0, [r7, #4]
 8004080:	f7ff febe 	bl	8003e00 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004084:	2300      	movs	r3, #0
}
 8004086:	4618      	mov	r0, r3
 8004088:	3708      	adds	r7, #8
 800408a:	46bd      	mov	sp, r7
 800408c:	bd80      	pop	{r7, pc}

0800408e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800408e:	b580      	push	{r7, lr}
 8004090:	b086      	sub	sp, #24
 8004092:	af00      	add	r7, sp, #0
 8004094:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800409c:	b2db      	uxtb	r3, r3
 800409e:	2b22      	cmp	r3, #34	; 0x22
 80040a0:	f040 8099 	bne.w	80041d6 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	689b      	ldr	r3, [r3, #8]
 80040a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040ac:	d117      	bne.n	80040de <UART_Receive_IT+0x50>
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	691b      	ldr	r3, [r3, #16]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d113      	bne.n	80040de <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80040b6:	2300      	movs	r3, #0
 80040b8:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040be:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	685b      	ldr	r3, [r3, #4]
 80040c6:	b29b      	uxth	r3, r3
 80040c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040cc:	b29a      	uxth	r2, r3
 80040ce:	693b      	ldr	r3, [r7, #16]
 80040d0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040d6:	1c9a      	adds	r2, r3, #2
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	629a      	str	r2, [r3, #40]	; 0x28
 80040dc:	e026      	b.n	800412c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040e2:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 80040e4:	2300      	movs	r3, #0
 80040e6:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	689b      	ldr	r3, [r3, #8]
 80040ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040f0:	d007      	beq.n	8004102 <UART_Receive_IT+0x74>
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	689b      	ldr	r3, [r3, #8]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d10a      	bne.n	8004110 <UART_Receive_IT+0x82>
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	691b      	ldr	r3, [r3, #16]
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d106      	bne.n	8004110 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	685b      	ldr	r3, [r3, #4]
 8004108:	b2da      	uxtb	r2, r3
 800410a:	697b      	ldr	r3, [r7, #20]
 800410c:	701a      	strb	r2, [r3, #0]
 800410e:	e008      	b.n	8004122 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	685b      	ldr	r3, [r3, #4]
 8004116:	b2db      	uxtb	r3, r3
 8004118:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800411c:	b2da      	uxtb	r2, r3
 800411e:	697b      	ldr	r3, [r7, #20]
 8004120:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004126:	1c5a      	adds	r2, r3, #1
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004130:	b29b      	uxth	r3, r3
 8004132:	3b01      	subs	r3, #1
 8004134:	b29b      	uxth	r3, r3
 8004136:	687a      	ldr	r2, [r7, #4]
 8004138:	4619      	mov	r1, r3
 800413a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800413c:	2b00      	cmp	r3, #0
 800413e:	d148      	bne.n	80041d2 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	68da      	ldr	r2, [r3, #12]
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f022 0220 	bic.w	r2, r2, #32
 800414e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	68da      	ldr	r2, [r3, #12]
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800415e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	695a      	ldr	r2, [r3, #20]
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f022 0201 	bic.w	r2, r2, #1
 800416e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2220      	movs	r2, #32
 8004174:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800417c:	2b01      	cmp	r3, #1
 800417e:	d123      	bne.n	80041c8 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2200      	movs	r2, #0
 8004184:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	68da      	ldr	r2, [r3, #12]
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f022 0210 	bic.w	r2, r2, #16
 8004194:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f003 0310 	and.w	r3, r3, #16
 80041a0:	2b10      	cmp	r3, #16
 80041a2:	d10a      	bne.n	80041ba <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80041a4:	2300      	movs	r3, #0
 80041a6:	60fb      	str	r3, [r7, #12]
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	60fb      	str	r3, [r7, #12]
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	685b      	ldr	r3, [r3, #4]
 80041b6:	60fb      	str	r3, [r7, #12]
 80041b8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80041be:	4619      	mov	r1, r3
 80041c0:	6878      	ldr	r0, [r7, #4]
 80041c2:	f7ff fe2f 	bl	8003e24 <HAL_UARTEx_RxEventCallback>
 80041c6:	e002      	b.n	80041ce <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 80041c8:	6878      	ldr	r0, [r7, #4]
 80041ca:	f7fc fd43 	bl	8000c54 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80041ce:	2300      	movs	r3, #0
 80041d0:	e002      	b.n	80041d8 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 80041d2:	2300      	movs	r3, #0
 80041d4:	e000      	b.n	80041d8 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 80041d6:	2302      	movs	r3, #2
  }
}
 80041d8:	4618      	mov	r0, r3
 80041da:	3718      	adds	r7, #24
 80041dc:	46bd      	mov	sp, r7
 80041de:	bd80      	pop	{r7, pc}

080041e0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b084      	sub	sp, #16
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	691b      	ldr	r3, [r3, #16]
 80041ee:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	68da      	ldr	r2, [r3, #12]
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	430a      	orrs	r2, r1
 80041fc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	689a      	ldr	r2, [r3, #8]
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	691b      	ldr	r3, [r3, #16]
 8004206:	431a      	orrs	r2, r3
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	695b      	ldr	r3, [r3, #20]
 800420c:	4313      	orrs	r3, r2
 800420e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	68db      	ldr	r3, [r3, #12]
 8004216:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800421a:	f023 030c 	bic.w	r3, r3, #12
 800421e:	687a      	ldr	r2, [r7, #4]
 8004220:	6812      	ldr	r2, [r2, #0]
 8004222:	68b9      	ldr	r1, [r7, #8]
 8004224:	430b      	orrs	r3, r1
 8004226:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	695b      	ldr	r3, [r3, #20]
 800422e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	699a      	ldr	r2, [r3, #24]
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	430a      	orrs	r2, r1
 800423c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	4a2c      	ldr	r2, [pc, #176]	; (80042f4 <UART_SetConfig+0x114>)
 8004244:	4293      	cmp	r3, r2
 8004246:	d103      	bne.n	8004250 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004248:	f7fe fe7e 	bl	8002f48 <HAL_RCC_GetPCLK2Freq>
 800424c:	60f8      	str	r0, [r7, #12]
 800424e:	e002      	b.n	8004256 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004250:	f7fe fe66 	bl	8002f20 <HAL_RCC_GetPCLK1Freq>
 8004254:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004256:	68fa      	ldr	r2, [r7, #12]
 8004258:	4613      	mov	r3, r2
 800425a:	009b      	lsls	r3, r3, #2
 800425c:	4413      	add	r3, r2
 800425e:	009a      	lsls	r2, r3, #2
 8004260:	441a      	add	r2, r3
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	685b      	ldr	r3, [r3, #4]
 8004266:	009b      	lsls	r3, r3, #2
 8004268:	fbb2 f3f3 	udiv	r3, r2, r3
 800426c:	4a22      	ldr	r2, [pc, #136]	; (80042f8 <UART_SetConfig+0x118>)
 800426e:	fba2 2303 	umull	r2, r3, r2, r3
 8004272:	095b      	lsrs	r3, r3, #5
 8004274:	0119      	lsls	r1, r3, #4
 8004276:	68fa      	ldr	r2, [r7, #12]
 8004278:	4613      	mov	r3, r2
 800427a:	009b      	lsls	r3, r3, #2
 800427c:	4413      	add	r3, r2
 800427e:	009a      	lsls	r2, r3, #2
 8004280:	441a      	add	r2, r3
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	685b      	ldr	r3, [r3, #4]
 8004286:	009b      	lsls	r3, r3, #2
 8004288:	fbb2 f2f3 	udiv	r2, r2, r3
 800428c:	4b1a      	ldr	r3, [pc, #104]	; (80042f8 <UART_SetConfig+0x118>)
 800428e:	fba3 0302 	umull	r0, r3, r3, r2
 8004292:	095b      	lsrs	r3, r3, #5
 8004294:	2064      	movs	r0, #100	; 0x64
 8004296:	fb00 f303 	mul.w	r3, r0, r3
 800429a:	1ad3      	subs	r3, r2, r3
 800429c:	011b      	lsls	r3, r3, #4
 800429e:	3332      	adds	r3, #50	; 0x32
 80042a0:	4a15      	ldr	r2, [pc, #84]	; (80042f8 <UART_SetConfig+0x118>)
 80042a2:	fba2 2303 	umull	r2, r3, r2, r3
 80042a6:	095b      	lsrs	r3, r3, #5
 80042a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80042ac:	4419      	add	r1, r3
 80042ae:	68fa      	ldr	r2, [r7, #12]
 80042b0:	4613      	mov	r3, r2
 80042b2:	009b      	lsls	r3, r3, #2
 80042b4:	4413      	add	r3, r2
 80042b6:	009a      	lsls	r2, r3, #2
 80042b8:	441a      	add	r2, r3
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	685b      	ldr	r3, [r3, #4]
 80042be:	009b      	lsls	r3, r3, #2
 80042c0:	fbb2 f2f3 	udiv	r2, r2, r3
 80042c4:	4b0c      	ldr	r3, [pc, #48]	; (80042f8 <UART_SetConfig+0x118>)
 80042c6:	fba3 0302 	umull	r0, r3, r3, r2
 80042ca:	095b      	lsrs	r3, r3, #5
 80042cc:	2064      	movs	r0, #100	; 0x64
 80042ce:	fb00 f303 	mul.w	r3, r0, r3
 80042d2:	1ad3      	subs	r3, r2, r3
 80042d4:	011b      	lsls	r3, r3, #4
 80042d6:	3332      	adds	r3, #50	; 0x32
 80042d8:	4a07      	ldr	r2, [pc, #28]	; (80042f8 <UART_SetConfig+0x118>)
 80042da:	fba2 2303 	umull	r2, r3, r2, r3
 80042de:	095b      	lsrs	r3, r3, #5
 80042e0:	f003 020f 	and.w	r2, r3, #15
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	440a      	add	r2, r1
 80042ea:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80042ec:	bf00      	nop
 80042ee:	3710      	adds	r7, #16
 80042f0:	46bd      	mov	sp, r7
 80042f2:	bd80      	pop	{r7, pc}
 80042f4:	40013800 	.word	0x40013800
 80042f8:	51eb851f 	.word	0x51eb851f

080042fc <__errno>:
 80042fc:	4b01      	ldr	r3, [pc, #4]	; (8004304 <__errno+0x8>)
 80042fe:	6818      	ldr	r0, [r3, #0]
 8004300:	4770      	bx	lr
 8004302:	bf00      	nop
 8004304:	2000000c 	.word	0x2000000c

08004308 <__libc_init_array>:
 8004308:	b570      	push	{r4, r5, r6, lr}
 800430a:	2600      	movs	r6, #0
 800430c:	4d0c      	ldr	r5, [pc, #48]	; (8004340 <__libc_init_array+0x38>)
 800430e:	4c0d      	ldr	r4, [pc, #52]	; (8004344 <__libc_init_array+0x3c>)
 8004310:	1b64      	subs	r4, r4, r5
 8004312:	10a4      	asrs	r4, r4, #2
 8004314:	42a6      	cmp	r6, r4
 8004316:	d109      	bne.n	800432c <__libc_init_array+0x24>
 8004318:	f001 f91e 	bl	8005558 <_init>
 800431c:	2600      	movs	r6, #0
 800431e:	4d0a      	ldr	r5, [pc, #40]	; (8004348 <__libc_init_array+0x40>)
 8004320:	4c0a      	ldr	r4, [pc, #40]	; (800434c <__libc_init_array+0x44>)
 8004322:	1b64      	subs	r4, r4, r5
 8004324:	10a4      	asrs	r4, r4, #2
 8004326:	42a6      	cmp	r6, r4
 8004328:	d105      	bne.n	8004336 <__libc_init_array+0x2e>
 800432a:	bd70      	pop	{r4, r5, r6, pc}
 800432c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004330:	4798      	blx	r3
 8004332:	3601      	adds	r6, #1
 8004334:	e7ee      	b.n	8004314 <__libc_init_array+0xc>
 8004336:	f855 3b04 	ldr.w	r3, [r5], #4
 800433a:	4798      	blx	r3
 800433c:	3601      	adds	r6, #1
 800433e:	e7f2      	b.n	8004326 <__libc_init_array+0x1e>
 8004340:	08005858 	.word	0x08005858
 8004344:	08005858 	.word	0x08005858
 8004348:	08005858 	.word	0x08005858
 800434c:	0800585c 	.word	0x0800585c

08004350 <memset>:
 8004350:	4603      	mov	r3, r0
 8004352:	4402      	add	r2, r0
 8004354:	4293      	cmp	r3, r2
 8004356:	d100      	bne.n	800435a <memset+0xa>
 8004358:	4770      	bx	lr
 800435a:	f803 1b01 	strb.w	r1, [r3], #1
 800435e:	e7f9      	b.n	8004354 <memset+0x4>

08004360 <siprintf>:
 8004360:	b40e      	push	{r1, r2, r3}
 8004362:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004366:	b500      	push	{lr}
 8004368:	b09c      	sub	sp, #112	; 0x70
 800436a:	ab1d      	add	r3, sp, #116	; 0x74
 800436c:	9002      	str	r0, [sp, #8]
 800436e:	9006      	str	r0, [sp, #24]
 8004370:	9107      	str	r1, [sp, #28]
 8004372:	9104      	str	r1, [sp, #16]
 8004374:	4808      	ldr	r0, [pc, #32]	; (8004398 <siprintf+0x38>)
 8004376:	4909      	ldr	r1, [pc, #36]	; (800439c <siprintf+0x3c>)
 8004378:	f853 2b04 	ldr.w	r2, [r3], #4
 800437c:	9105      	str	r1, [sp, #20]
 800437e:	6800      	ldr	r0, [r0, #0]
 8004380:	a902      	add	r1, sp, #8
 8004382:	9301      	str	r3, [sp, #4]
 8004384:	f000 f894 	bl	80044b0 <_svfiprintf_r>
 8004388:	2200      	movs	r2, #0
 800438a:	9b02      	ldr	r3, [sp, #8]
 800438c:	701a      	strb	r2, [r3, #0]
 800438e:	b01c      	add	sp, #112	; 0x70
 8004390:	f85d eb04 	ldr.w	lr, [sp], #4
 8004394:	b003      	add	sp, #12
 8004396:	4770      	bx	lr
 8004398:	2000000c 	.word	0x2000000c
 800439c:	ffff0208 	.word	0xffff0208

080043a0 <siscanf>:
 80043a0:	b40e      	push	{r1, r2, r3}
 80043a2:	f44f 7201 	mov.w	r2, #516	; 0x204
 80043a6:	b530      	push	{r4, r5, lr}
 80043a8:	b09c      	sub	sp, #112	; 0x70
 80043aa:	ac1f      	add	r4, sp, #124	; 0x7c
 80043ac:	f854 5b04 	ldr.w	r5, [r4], #4
 80043b0:	f8ad 2014 	strh.w	r2, [sp, #20]
 80043b4:	9002      	str	r0, [sp, #8]
 80043b6:	9006      	str	r0, [sp, #24]
 80043b8:	f7fb ff34 	bl	8000224 <strlen>
 80043bc:	4b0b      	ldr	r3, [pc, #44]	; (80043ec <siscanf+0x4c>)
 80043be:	9003      	str	r0, [sp, #12]
 80043c0:	930b      	str	r3, [sp, #44]	; 0x2c
 80043c2:	2300      	movs	r3, #0
 80043c4:	930f      	str	r3, [sp, #60]	; 0x3c
 80043c6:	9314      	str	r3, [sp, #80]	; 0x50
 80043c8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80043cc:	9007      	str	r0, [sp, #28]
 80043ce:	4808      	ldr	r0, [pc, #32]	; (80043f0 <siscanf+0x50>)
 80043d0:	f8ad 3016 	strh.w	r3, [sp, #22]
 80043d4:	462a      	mov	r2, r5
 80043d6:	4623      	mov	r3, r4
 80043d8:	a902      	add	r1, sp, #8
 80043da:	6800      	ldr	r0, [r0, #0]
 80043dc:	9401      	str	r4, [sp, #4]
 80043de:	f000 f9c1 	bl	8004764 <__ssvfiscanf_r>
 80043e2:	b01c      	add	sp, #112	; 0x70
 80043e4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80043e8:	b003      	add	sp, #12
 80043ea:	4770      	bx	lr
 80043ec:	080043f5 	.word	0x080043f5
 80043f0:	2000000c 	.word	0x2000000c

080043f4 <__seofread>:
 80043f4:	2000      	movs	r0, #0
 80043f6:	4770      	bx	lr

080043f8 <__ssputs_r>:
 80043f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80043fc:	688e      	ldr	r6, [r1, #8]
 80043fe:	4682      	mov	sl, r0
 8004400:	429e      	cmp	r6, r3
 8004402:	460c      	mov	r4, r1
 8004404:	4690      	mov	r8, r2
 8004406:	461f      	mov	r7, r3
 8004408:	d838      	bhi.n	800447c <__ssputs_r+0x84>
 800440a:	898a      	ldrh	r2, [r1, #12]
 800440c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004410:	d032      	beq.n	8004478 <__ssputs_r+0x80>
 8004412:	6825      	ldr	r5, [r4, #0]
 8004414:	6909      	ldr	r1, [r1, #16]
 8004416:	3301      	adds	r3, #1
 8004418:	eba5 0901 	sub.w	r9, r5, r1
 800441c:	6965      	ldr	r5, [r4, #20]
 800441e:	444b      	add	r3, r9
 8004420:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004424:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004428:	106d      	asrs	r5, r5, #1
 800442a:	429d      	cmp	r5, r3
 800442c:	bf38      	it	cc
 800442e:	461d      	movcc	r5, r3
 8004430:	0553      	lsls	r3, r2, #21
 8004432:	d531      	bpl.n	8004498 <__ssputs_r+0xa0>
 8004434:	4629      	mov	r1, r5
 8004436:	f000 ffeb 	bl	8005410 <_malloc_r>
 800443a:	4606      	mov	r6, r0
 800443c:	b950      	cbnz	r0, 8004454 <__ssputs_r+0x5c>
 800443e:	230c      	movs	r3, #12
 8004440:	f04f 30ff 	mov.w	r0, #4294967295
 8004444:	f8ca 3000 	str.w	r3, [sl]
 8004448:	89a3      	ldrh	r3, [r4, #12]
 800444a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800444e:	81a3      	strh	r3, [r4, #12]
 8004450:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004454:	464a      	mov	r2, r9
 8004456:	6921      	ldr	r1, [r4, #16]
 8004458:	f000 ff66 	bl	8005328 <memcpy>
 800445c:	89a3      	ldrh	r3, [r4, #12]
 800445e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004462:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004466:	81a3      	strh	r3, [r4, #12]
 8004468:	6126      	str	r6, [r4, #16]
 800446a:	444e      	add	r6, r9
 800446c:	6026      	str	r6, [r4, #0]
 800446e:	463e      	mov	r6, r7
 8004470:	6165      	str	r5, [r4, #20]
 8004472:	eba5 0509 	sub.w	r5, r5, r9
 8004476:	60a5      	str	r5, [r4, #8]
 8004478:	42be      	cmp	r6, r7
 800447a:	d900      	bls.n	800447e <__ssputs_r+0x86>
 800447c:	463e      	mov	r6, r7
 800447e:	4632      	mov	r2, r6
 8004480:	4641      	mov	r1, r8
 8004482:	6820      	ldr	r0, [r4, #0]
 8004484:	f000 ff5e 	bl	8005344 <memmove>
 8004488:	68a3      	ldr	r3, [r4, #8]
 800448a:	6822      	ldr	r2, [r4, #0]
 800448c:	1b9b      	subs	r3, r3, r6
 800448e:	4432      	add	r2, r6
 8004490:	2000      	movs	r0, #0
 8004492:	60a3      	str	r3, [r4, #8]
 8004494:	6022      	str	r2, [r4, #0]
 8004496:	e7db      	b.n	8004450 <__ssputs_r+0x58>
 8004498:	462a      	mov	r2, r5
 800449a:	f001 f813 	bl	80054c4 <_realloc_r>
 800449e:	4606      	mov	r6, r0
 80044a0:	2800      	cmp	r0, #0
 80044a2:	d1e1      	bne.n	8004468 <__ssputs_r+0x70>
 80044a4:	4650      	mov	r0, sl
 80044a6:	6921      	ldr	r1, [r4, #16]
 80044a8:	f000 ff66 	bl	8005378 <_free_r>
 80044ac:	e7c7      	b.n	800443e <__ssputs_r+0x46>
	...

080044b0 <_svfiprintf_r>:
 80044b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044b4:	4698      	mov	r8, r3
 80044b6:	898b      	ldrh	r3, [r1, #12]
 80044b8:	4607      	mov	r7, r0
 80044ba:	061b      	lsls	r3, r3, #24
 80044bc:	460d      	mov	r5, r1
 80044be:	4614      	mov	r4, r2
 80044c0:	b09d      	sub	sp, #116	; 0x74
 80044c2:	d50e      	bpl.n	80044e2 <_svfiprintf_r+0x32>
 80044c4:	690b      	ldr	r3, [r1, #16]
 80044c6:	b963      	cbnz	r3, 80044e2 <_svfiprintf_r+0x32>
 80044c8:	2140      	movs	r1, #64	; 0x40
 80044ca:	f000 ffa1 	bl	8005410 <_malloc_r>
 80044ce:	6028      	str	r0, [r5, #0]
 80044d0:	6128      	str	r0, [r5, #16]
 80044d2:	b920      	cbnz	r0, 80044de <_svfiprintf_r+0x2e>
 80044d4:	230c      	movs	r3, #12
 80044d6:	603b      	str	r3, [r7, #0]
 80044d8:	f04f 30ff 	mov.w	r0, #4294967295
 80044dc:	e0d1      	b.n	8004682 <_svfiprintf_r+0x1d2>
 80044de:	2340      	movs	r3, #64	; 0x40
 80044e0:	616b      	str	r3, [r5, #20]
 80044e2:	2300      	movs	r3, #0
 80044e4:	9309      	str	r3, [sp, #36]	; 0x24
 80044e6:	2320      	movs	r3, #32
 80044e8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80044ec:	2330      	movs	r3, #48	; 0x30
 80044ee:	f04f 0901 	mov.w	r9, #1
 80044f2:	f8cd 800c 	str.w	r8, [sp, #12]
 80044f6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800469c <_svfiprintf_r+0x1ec>
 80044fa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80044fe:	4623      	mov	r3, r4
 8004500:	469a      	mov	sl, r3
 8004502:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004506:	b10a      	cbz	r2, 800450c <_svfiprintf_r+0x5c>
 8004508:	2a25      	cmp	r2, #37	; 0x25
 800450a:	d1f9      	bne.n	8004500 <_svfiprintf_r+0x50>
 800450c:	ebba 0b04 	subs.w	fp, sl, r4
 8004510:	d00b      	beq.n	800452a <_svfiprintf_r+0x7a>
 8004512:	465b      	mov	r3, fp
 8004514:	4622      	mov	r2, r4
 8004516:	4629      	mov	r1, r5
 8004518:	4638      	mov	r0, r7
 800451a:	f7ff ff6d 	bl	80043f8 <__ssputs_r>
 800451e:	3001      	adds	r0, #1
 8004520:	f000 80aa 	beq.w	8004678 <_svfiprintf_r+0x1c8>
 8004524:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004526:	445a      	add	r2, fp
 8004528:	9209      	str	r2, [sp, #36]	; 0x24
 800452a:	f89a 3000 	ldrb.w	r3, [sl]
 800452e:	2b00      	cmp	r3, #0
 8004530:	f000 80a2 	beq.w	8004678 <_svfiprintf_r+0x1c8>
 8004534:	2300      	movs	r3, #0
 8004536:	f04f 32ff 	mov.w	r2, #4294967295
 800453a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800453e:	f10a 0a01 	add.w	sl, sl, #1
 8004542:	9304      	str	r3, [sp, #16]
 8004544:	9307      	str	r3, [sp, #28]
 8004546:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800454a:	931a      	str	r3, [sp, #104]	; 0x68
 800454c:	4654      	mov	r4, sl
 800454e:	2205      	movs	r2, #5
 8004550:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004554:	4851      	ldr	r0, [pc, #324]	; (800469c <_svfiprintf_r+0x1ec>)
 8004556:	f000 fed9 	bl	800530c <memchr>
 800455a:	9a04      	ldr	r2, [sp, #16]
 800455c:	b9d8      	cbnz	r0, 8004596 <_svfiprintf_r+0xe6>
 800455e:	06d0      	lsls	r0, r2, #27
 8004560:	bf44      	itt	mi
 8004562:	2320      	movmi	r3, #32
 8004564:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004568:	0711      	lsls	r1, r2, #28
 800456a:	bf44      	itt	mi
 800456c:	232b      	movmi	r3, #43	; 0x2b
 800456e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004572:	f89a 3000 	ldrb.w	r3, [sl]
 8004576:	2b2a      	cmp	r3, #42	; 0x2a
 8004578:	d015      	beq.n	80045a6 <_svfiprintf_r+0xf6>
 800457a:	4654      	mov	r4, sl
 800457c:	2000      	movs	r0, #0
 800457e:	f04f 0c0a 	mov.w	ip, #10
 8004582:	9a07      	ldr	r2, [sp, #28]
 8004584:	4621      	mov	r1, r4
 8004586:	f811 3b01 	ldrb.w	r3, [r1], #1
 800458a:	3b30      	subs	r3, #48	; 0x30
 800458c:	2b09      	cmp	r3, #9
 800458e:	d94e      	bls.n	800462e <_svfiprintf_r+0x17e>
 8004590:	b1b0      	cbz	r0, 80045c0 <_svfiprintf_r+0x110>
 8004592:	9207      	str	r2, [sp, #28]
 8004594:	e014      	b.n	80045c0 <_svfiprintf_r+0x110>
 8004596:	eba0 0308 	sub.w	r3, r0, r8
 800459a:	fa09 f303 	lsl.w	r3, r9, r3
 800459e:	4313      	orrs	r3, r2
 80045a0:	46a2      	mov	sl, r4
 80045a2:	9304      	str	r3, [sp, #16]
 80045a4:	e7d2      	b.n	800454c <_svfiprintf_r+0x9c>
 80045a6:	9b03      	ldr	r3, [sp, #12]
 80045a8:	1d19      	adds	r1, r3, #4
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	9103      	str	r1, [sp, #12]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	bfbb      	ittet	lt
 80045b2:	425b      	neglt	r3, r3
 80045b4:	f042 0202 	orrlt.w	r2, r2, #2
 80045b8:	9307      	strge	r3, [sp, #28]
 80045ba:	9307      	strlt	r3, [sp, #28]
 80045bc:	bfb8      	it	lt
 80045be:	9204      	strlt	r2, [sp, #16]
 80045c0:	7823      	ldrb	r3, [r4, #0]
 80045c2:	2b2e      	cmp	r3, #46	; 0x2e
 80045c4:	d10c      	bne.n	80045e0 <_svfiprintf_r+0x130>
 80045c6:	7863      	ldrb	r3, [r4, #1]
 80045c8:	2b2a      	cmp	r3, #42	; 0x2a
 80045ca:	d135      	bne.n	8004638 <_svfiprintf_r+0x188>
 80045cc:	9b03      	ldr	r3, [sp, #12]
 80045ce:	3402      	adds	r4, #2
 80045d0:	1d1a      	adds	r2, r3, #4
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	9203      	str	r2, [sp, #12]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	bfb8      	it	lt
 80045da:	f04f 33ff 	movlt.w	r3, #4294967295
 80045de:	9305      	str	r3, [sp, #20]
 80045e0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80046ac <_svfiprintf_r+0x1fc>
 80045e4:	2203      	movs	r2, #3
 80045e6:	4650      	mov	r0, sl
 80045e8:	7821      	ldrb	r1, [r4, #0]
 80045ea:	f000 fe8f 	bl	800530c <memchr>
 80045ee:	b140      	cbz	r0, 8004602 <_svfiprintf_r+0x152>
 80045f0:	2340      	movs	r3, #64	; 0x40
 80045f2:	eba0 000a 	sub.w	r0, r0, sl
 80045f6:	fa03 f000 	lsl.w	r0, r3, r0
 80045fa:	9b04      	ldr	r3, [sp, #16]
 80045fc:	3401      	adds	r4, #1
 80045fe:	4303      	orrs	r3, r0
 8004600:	9304      	str	r3, [sp, #16]
 8004602:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004606:	2206      	movs	r2, #6
 8004608:	4825      	ldr	r0, [pc, #148]	; (80046a0 <_svfiprintf_r+0x1f0>)
 800460a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800460e:	f000 fe7d 	bl	800530c <memchr>
 8004612:	2800      	cmp	r0, #0
 8004614:	d038      	beq.n	8004688 <_svfiprintf_r+0x1d8>
 8004616:	4b23      	ldr	r3, [pc, #140]	; (80046a4 <_svfiprintf_r+0x1f4>)
 8004618:	bb1b      	cbnz	r3, 8004662 <_svfiprintf_r+0x1b2>
 800461a:	9b03      	ldr	r3, [sp, #12]
 800461c:	3307      	adds	r3, #7
 800461e:	f023 0307 	bic.w	r3, r3, #7
 8004622:	3308      	adds	r3, #8
 8004624:	9303      	str	r3, [sp, #12]
 8004626:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004628:	4433      	add	r3, r6
 800462a:	9309      	str	r3, [sp, #36]	; 0x24
 800462c:	e767      	b.n	80044fe <_svfiprintf_r+0x4e>
 800462e:	460c      	mov	r4, r1
 8004630:	2001      	movs	r0, #1
 8004632:	fb0c 3202 	mla	r2, ip, r2, r3
 8004636:	e7a5      	b.n	8004584 <_svfiprintf_r+0xd4>
 8004638:	2300      	movs	r3, #0
 800463a:	f04f 0c0a 	mov.w	ip, #10
 800463e:	4619      	mov	r1, r3
 8004640:	3401      	adds	r4, #1
 8004642:	9305      	str	r3, [sp, #20]
 8004644:	4620      	mov	r0, r4
 8004646:	f810 2b01 	ldrb.w	r2, [r0], #1
 800464a:	3a30      	subs	r2, #48	; 0x30
 800464c:	2a09      	cmp	r2, #9
 800464e:	d903      	bls.n	8004658 <_svfiprintf_r+0x1a8>
 8004650:	2b00      	cmp	r3, #0
 8004652:	d0c5      	beq.n	80045e0 <_svfiprintf_r+0x130>
 8004654:	9105      	str	r1, [sp, #20]
 8004656:	e7c3      	b.n	80045e0 <_svfiprintf_r+0x130>
 8004658:	4604      	mov	r4, r0
 800465a:	2301      	movs	r3, #1
 800465c:	fb0c 2101 	mla	r1, ip, r1, r2
 8004660:	e7f0      	b.n	8004644 <_svfiprintf_r+0x194>
 8004662:	ab03      	add	r3, sp, #12
 8004664:	9300      	str	r3, [sp, #0]
 8004666:	462a      	mov	r2, r5
 8004668:	4638      	mov	r0, r7
 800466a:	4b0f      	ldr	r3, [pc, #60]	; (80046a8 <_svfiprintf_r+0x1f8>)
 800466c:	a904      	add	r1, sp, #16
 800466e:	f3af 8000 	nop.w
 8004672:	1c42      	adds	r2, r0, #1
 8004674:	4606      	mov	r6, r0
 8004676:	d1d6      	bne.n	8004626 <_svfiprintf_r+0x176>
 8004678:	89ab      	ldrh	r3, [r5, #12]
 800467a:	065b      	lsls	r3, r3, #25
 800467c:	f53f af2c 	bmi.w	80044d8 <_svfiprintf_r+0x28>
 8004680:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004682:	b01d      	add	sp, #116	; 0x74
 8004684:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004688:	ab03      	add	r3, sp, #12
 800468a:	9300      	str	r3, [sp, #0]
 800468c:	462a      	mov	r2, r5
 800468e:	4638      	mov	r0, r7
 8004690:	4b05      	ldr	r3, [pc, #20]	; (80046a8 <_svfiprintf_r+0x1f8>)
 8004692:	a904      	add	r1, sp, #16
 8004694:	f000 fa50 	bl	8004b38 <_printf_i>
 8004698:	e7eb      	b.n	8004672 <_svfiprintf_r+0x1c2>
 800469a:	bf00      	nop
 800469c:	080056a0 	.word	0x080056a0
 80046a0:	080056aa 	.word	0x080056aa
 80046a4:	00000000 	.word	0x00000000
 80046a8:	080043f9 	.word	0x080043f9
 80046ac:	080056a6 	.word	0x080056a6

080046b0 <_sungetc_r>:
 80046b0:	b538      	push	{r3, r4, r5, lr}
 80046b2:	1c4b      	adds	r3, r1, #1
 80046b4:	4614      	mov	r4, r2
 80046b6:	d103      	bne.n	80046c0 <_sungetc_r+0x10>
 80046b8:	f04f 35ff 	mov.w	r5, #4294967295
 80046bc:	4628      	mov	r0, r5
 80046be:	bd38      	pop	{r3, r4, r5, pc}
 80046c0:	8993      	ldrh	r3, [r2, #12]
 80046c2:	b2cd      	uxtb	r5, r1
 80046c4:	f023 0320 	bic.w	r3, r3, #32
 80046c8:	8193      	strh	r3, [r2, #12]
 80046ca:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80046cc:	6852      	ldr	r2, [r2, #4]
 80046ce:	b18b      	cbz	r3, 80046f4 <_sungetc_r+0x44>
 80046d0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80046d2:	4293      	cmp	r3, r2
 80046d4:	dd08      	ble.n	80046e8 <_sungetc_r+0x38>
 80046d6:	6823      	ldr	r3, [r4, #0]
 80046d8:	1e5a      	subs	r2, r3, #1
 80046da:	6022      	str	r2, [r4, #0]
 80046dc:	f803 5c01 	strb.w	r5, [r3, #-1]
 80046e0:	6863      	ldr	r3, [r4, #4]
 80046e2:	3301      	adds	r3, #1
 80046e4:	6063      	str	r3, [r4, #4]
 80046e6:	e7e9      	b.n	80046bc <_sungetc_r+0xc>
 80046e8:	4621      	mov	r1, r4
 80046ea:	f000 fdd5 	bl	8005298 <__submore>
 80046ee:	2800      	cmp	r0, #0
 80046f0:	d0f1      	beq.n	80046d6 <_sungetc_r+0x26>
 80046f2:	e7e1      	b.n	80046b8 <_sungetc_r+0x8>
 80046f4:	6921      	ldr	r1, [r4, #16]
 80046f6:	6823      	ldr	r3, [r4, #0]
 80046f8:	b151      	cbz	r1, 8004710 <_sungetc_r+0x60>
 80046fa:	4299      	cmp	r1, r3
 80046fc:	d208      	bcs.n	8004710 <_sungetc_r+0x60>
 80046fe:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8004702:	42a9      	cmp	r1, r5
 8004704:	d104      	bne.n	8004710 <_sungetc_r+0x60>
 8004706:	3b01      	subs	r3, #1
 8004708:	3201      	adds	r2, #1
 800470a:	6023      	str	r3, [r4, #0]
 800470c:	6062      	str	r2, [r4, #4]
 800470e:	e7d5      	b.n	80046bc <_sungetc_r+0xc>
 8004710:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8004714:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004718:	6363      	str	r3, [r4, #52]	; 0x34
 800471a:	2303      	movs	r3, #3
 800471c:	63a3      	str	r3, [r4, #56]	; 0x38
 800471e:	4623      	mov	r3, r4
 8004720:	f803 5f46 	strb.w	r5, [r3, #70]!
 8004724:	6023      	str	r3, [r4, #0]
 8004726:	2301      	movs	r3, #1
 8004728:	e7dc      	b.n	80046e4 <_sungetc_r+0x34>

0800472a <__ssrefill_r>:
 800472a:	b510      	push	{r4, lr}
 800472c:	460c      	mov	r4, r1
 800472e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8004730:	b169      	cbz	r1, 800474e <__ssrefill_r+0x24>
 8004732:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004736:	4299      	cmp	r1, r3
 8004738:	d001      	beq.n	800473e <__ssrefill_r+0x14>
 800473a:	f000 fe1d 	bl	8005378 <_free_r>
 800473e:	2000      	movs	r0, #0
 8004740:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004742:	6360      	str	r0, [r4, #52]	; 0x34
 8004744:	6063      	str	r3, [r4, #4]
 8004746:	b113      	cbz	r3, 800474e <__ssrefill_r+0x24>
 8004748:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800474a:	6023      	str	r3, [r4, #0]
 800474c:	bd10      	pop	{r4, pc}
 800474e:	6923      	ldr	r3, [r4, #16]
 8004750:	f04f 30ff 	mov.w	r0, #4294967295
 8004754:	6023      	str	r3, [r4, #0]
 8004756:	2300      	movs	r3, #0
 8004758:	6063      	str	r3, [r4, #4]
 800475a:	89a3      	ldrh	r3, [r4, #12]
 800475c:	f043 0320 	orr.w	r3, r3, #32
 8004760:	81a3      	strh	r3, [r4, #12]
 8004762:	e7f3      	b.n	800474c <__ssrefill_r+0x22>

08004764 <__ssvfiscanf_r>:
 8004764:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004768:	460c      	mov	r4, r1
 800476a:	2100      	movs	r1, #0
 800476c:	4606      	mov	r6, r0
 800476e:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 8004772:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8004776:	49b3      	ldr	r1, [pc, #716]	; (8004a44 <__ssvfiscanf_r+0x2e0>)
 8004778:	f10d 0804 	add.w	r8, sp, #4
 800477c:	91a0      	str	r1, [sp, #640]	; 0x280
 800477e:	49b2      	ldr	r1, [pc, #712]	; (8004a48 <__ssvfiscanf_r+0x2e4>)
 8004780:	4fb2      	ldr	r7, [pc, #712]	; (8004a4c <__ssvfiscanf_r+0x2e8>)
 8004782:	f8df 92cc 	ldr.w	r9, [pc, #716]	; 8004a50 <__ssvfiscanf_r+0x2ec>
 8004786:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800478a:	91a1      	str	r1, [sp, #644]	; 0x284
 800478c:	9300      	str	r3, [sp, #0]
 800478e:	f892 a000 	ldrb.w	sl, [r2]
 8004792:	f1ba 0f00 	cmp.w	sl, #0
 8004796:	f000 8153 	beq.w	8004a40 <__ssvfiscanf_r+0x2dc>
 800479a:	f81a 3007 	ldrb.w	r3, [sl, r7]
 800479e:	1c55      	adds	r5, r2, #1
 80047a0:	f013 0308 	ands.w	r3, r3, #8
 80047a4:	d019      	beq.n	80047da <__ssvfiscanf_r+0x76>
 80047a6:	6863      	ldr	r3, [r4, #4]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	dd0f      	ble.n	80047cc <__ssvfiscanf_r+0x68>
 80047ac:	6823      	ldr	r3, [r4, #0]
 80047ae:	781a      	ldrb	r2, [r3, #0]
 80047b0:	5cba      	ldrb	r2, [r7, r2]
 80047b2:	0712      	lsls	r2, r2, #28
 80047b4:	d401      	bmi.n	80047ba <__ssvfiscanf_r+0x56>
 80047b6:	462a      	mov	r2, r5
 80047b8:	e7e9      	b.n	800478e <__ssvfiscanf_r+0x2a>
 80047ba:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80047bc:	3301      	adds	r3, #1
 80047be:	3201      	adds	r2, #1
 80047c0:	9245      	str	r2, [sp, #276]	; 0x114
 80047c2:	6862      	ldr	r2, [r4, #4]
 80047c4:	6023      	str	r3, [r4, #0]
 80047c6:	3a01      	subs	r2, #1
 80047c8:	6062      	str	r2, [r4, #4]
 80047ca:	e7ec      	b.n	80047a6 <__ssvfiscanf_r+0x42>
 80047cc:	4621      	mov	r1, r4
 80047ce:	4630      	mov	r0, r6
 80047d0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80047d2:	4798      	blx	r3
 80047d4:	2800      	cmp	r0, #0
 80047d6:	d0e9      	beq.n	80047ac <__ssvfiscanf_r+0x48>
 80047d8:	e7ed      	b.n	80047b6 <__ssvfiscanf_r+0x52>
 80047da:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 80047de:	f040 8086 	bne.w	80048ee <__ssvfiscanf_r+0x18a>
 80047e2:	9341      	str	r3, [sp, #260]	; 0x104
 80047e4:	9343      	str	r3, [sp, #268]	; 0x10c
 80047e6:	7853      	ldrb	r3, [r2, #1]
 80047e8:	2b2a      	cmp	r3, #42	; 0x2a
 80047ea:	bf04      	itt	eq
 80047ec:	2310      	moveq	r3, #16
 80047ee:	1c95      	addeq	r5, r2, #2
 80047f0:	f04f 020a 	mov.w	r2, #10
 80047f4:	bf08      	it	eq
 80047f6:	9341      	streq	r3, [sp, #260]	; 0x104
 80047f8:	46ab      	mov	fp, r5
 80047fa:	f81b 1b01 	ldrb.w	r1, [fp], #1
 80047fe:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8004802:	2b09      	cmp	r3, #9
 8004804:	d91d      	bls.n	8004842 <__ssvfiscanf_r+0xde>
 8004806:	2203      	movs	r2, #3
 8004808:	4891      	ldr	r0, [pc, #580]	; (8004a50 <__ssvfiscanf_r+0x2ec>)
 800480a:	f000 fd7f 	bl	800530c <memchr>
 800480e:	b140      	cbz	r0, 8004822 <__ssvfiscanf_r+0xbe>
 8004810:	2301      	movs	r3, #1
 8004812:	465d      	mov	r5, fp
 8004814:	eba0 0009 	sub.w	r0, r0, r9
 8004818:	fa03 f000 	lsl.w	r0, r3, r0
 800481c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800481e:	4318      	orrs	r0, r3
 8004820:	9041      	str	r0, [sp, #260]	; 0x104
 8004822:	f815 3b01 	ldrb.w	r3, [r5], #1
 8004826:	2b78      	cmp	r3, #120	; 0x78
 8004828:	d806      	bhi.n	8004838 <__ssvfiscanf_r+0xd4>
 800482a:	2b57      	cmp	r3, #87	; 0x57
 800482c:	d810      	bhi.n	8004850 <__ssvfiscanf_r+0xec>
 800482e:	2b25      	cmp	r3, #37	; 0x25
 8004830:	d05d      	beq.n	80048ee <__ssvfiscanf_r+0x18a>
 8004832:	d857      	bhi.n	80048e4 <__ssvfiscanf_r+0x180>
 8004834:	2b00      	cmp	r3, #0
 8004836:	d075      	beq.n	8004924 <__ssvfiscanf_r+0x1c0>
 8004838:	2303      	movs	r3, #3
 800483a:	9347      	str	r3, [sp, #284]	; 0x11c
 800483c:	230a      	movs	r3, #10
 800483e:	9342      	str	r3, [sp, #264]	; 0x108
 8004840:	e082      	b.n	8004948 <__ssvfiscanf_r+0x1e4>
 8004842:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8004844:	465d      	mov	r5, fp
 8004846:	fb02 1303 	mla	r3, r2, r3, r1
 800484a:	3b30      	subs	r3, #48	; 0x30
 800484c:	9343      	str	r3, [sp, #268]	; 0x10c
 800484e:	e7d3      	b.n	80047f8 <__ssvfiscanf_r+0x94>
 8004850:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8004854:	2a20      	cmp	r2, #32
 8004856:	d8ef      	bhi.n	8004838 <__ssvfiscanf_r+0xd4>
 8004858:	a101      	add	r1, pc, #4	; (adr r1, 8004860 <__ssvfiscanf_r+0xfc>)
 800485a:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800485e:	bf00      	nop
 8004860:	08004933 	.word	0x08004933
 8004864:	08004839 	.word	0x08004839
 8004868:	08004839 	.word	0x08004839
 800486c:	08004991 	.word	0x08004991
 8004870:	08004839 	.word	0x08004839
 8004874:	08004839 	.word	0x08004839
 8004878:	08004839 	.word	0x08004839
 800487c:	08004839 	.word	0x08004839
 8004880:	08004839 	.word	0x08004839
 8004884:	08004839 	.word	0x08004839
 8004888:	08004839 	.word	0x08004839
 800488c:	080049a7 	.word	0x080049a7
 8004890:	0800497d 	.word	0x0800497d
 8004894:	080048eb 	.word	0x080048eb
 8004898:	080048eb 	.word	0x080048eb
 800489c:	080048eb 	.word	0x080048eb
 80048a0:	08004839 	.word	0x08004839
 80048a4:	08004981 	.word	0x08004981
 80048a8:	08004839 	.word	0x08004839
 80048ac:	08004839 	.word	0x08004839
 80048b0:	08004839 	.word	0x08004839
 80048b4:	08004839 	.word	0x08004839
 80048b8:	080049b7 	.word	0x080049b7
 80048bc:	08004989 	.word	0x08004989
 80048c0:	0800492b 	.word	0x0800492b
 80048c4:	08004839 	.word	0x08004839
 80048c8:	08004839 	.word	0x08004839
 80048cc:	080049b3 	.word	0x080049b3
 80048d0:	08004839 	.word	0x08004839
 80048d4:	0800497d 	.word	0x0800497d
 80048d8:	08004839 	.word	0x08004839
 80048dc:	08004839 	.word	0x08004839
 80048e0:	08004933 	.word	0x08004933
 80048e4:	3b45      	subs	r3, #69	; 0x45
 80048e6:	2b02      	cmp	r3, #2
 80048e8:	d8a6      	bhi.n	8004838 <__ssvfiscanf_r+0xd4>
 80048ea:	2305      	movs	r3, #5
 80048ec:	e02b      	b.n	8004946 <__ssvfiscanf_r+0x1e2>
 80048ee:	6863      	ldr	r3, [r4, #4]
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	dd0d      	ble.n	8004910 <__ssvfiscanf_r+0x1ac>
 80048f4:	6823      	ldr	r3, [r4, #0]
 80048f6:	781a      	ldrb	r2, [r3, #0]
 80048f8:	4552      	cmp	r2, sl
 80048fa:	f040 80a1 	bne.w	8004a40 <__ssvfiscanf_r+0x2dc>
 80048fe:	3301      	adds	r3, #1
 8004900:	6862      	ldr	r2, [r4, #4]
 8004902:	6023      	str	r3, [r4, #0]
 8004904:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8004906:	3a01      	subs	r2, #1
 8004908:	3301      	adds	r3, #1
 800490a:	6062      	str	r2, [r4, #4]
 800490c:	9345      	str	r3, [sp, #276]	; 0x114
 800490e:	e752      	b.n	80047b6 <__ssvfiscanf_r+0x52>
 8004910:	4621      	mov	r1, r4
 8004912:	4630      	mov	r0, r6
 8004914:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8004916:	4798      	blx	r3
 8004918:	2800      	cmp	r0, #0
 800491a:	d0eb      	beq.n	80048f4 <__ssvfiscanf_r+0x190>
 800491c:	9844      	ldr	r0, [sp, #272]	; 0x110
 800491e:	2800      	cmp	r0, #0
 8004920:	f040 8084 	bne.w	8004a2c <__ssvfiscanf_r+0x2c8>
 8004924:	f04f 30ff 	mov.w	r0, #4294967295
 8004928:	e086      	b.n	8004a38 <__ssvfiscanf_r+0x2d4>
 800492a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800492c:	f042 0220 	orr.w	r2, r2, #32
 8004930:	9241      	str	r2, [sp, #260]	; 0x104
 8004932:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8004934:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004938:	9241      	str	r2, [sp, #260]	; 0x104
 800493a:	2210      	movs	r2, #16
 800493c:	2b6f      	cmp	r3, #111	; 0x6f
 800493e:	bf34      	ite	cc
 8004940:	2303      	movcc	r3, #3
 8004942:	2304      	movcs	r3, #4
 8004944:	9242      	str	r2, [sp, #264]	; 0x108
 8004946:	9347      	str	r3, [sp, #284]	; 0x11c
 8004948:	6863      	ldr	r3, [r4, #4]
 800494a:	2b00      	cmp	r3, #0
 800494c:	dd41      	ble.n	80049d2 <__ssvfiscanf_r+0x26e>
 800494e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8004950:	0659      	lsls	r1, r3, #25
 8004952:	d404      	bmi.n	800495e <__ssvfiscanf_r+0x1fa>
 8004954:	6823      	ldr	r3, [r4, #0]
 8004956:	781a      	ldrb	r2, [r3, #0]
 8004958:	5cba      	ldrb	r2, [r7, r2]
 800495a:	0712      	lsls	r2, r2, #28
 800495c:	d440      	bmi.n	80049e0 <__ssvfiscanf_r+0x27c>
 800495e:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8004960:	2b02      	cmp	r3, #2
 8004962:	dc4f      	bgt.n	8004a04 <__ssvfiscanf_r+0x2a0>
 8004964:	466b      	mov	r3, sp
 8004966:	4622      	mov	r2, r4
 8004968:	4630      	mov	r0, r6
 800496a:	a941      	add	r1, sp, #260	; 0x104
 800496c:	f000 fa0a 	bl	8004d84 <_scanf_chars>
 8004970:	2801      	cmp	r0, #1
 8004972:	d065      	beq.n	8004a40 <__ssvfiscanf_r+0x2dc>
 8004974:	2802      	cmp	r0, #2
 8004976:	f47f af1e 	bne.w	80047b6 <__ssvfiscanf_r+0x52>
 800497a:	e7cf      	b.n	800491c <__ssvfiscanf_r+0x1b8>
 800497c:	220a      	movs	r2, #10
 800497e:	e7dd      	b.n	800493c <__ssvfiscanf_r+0x1d8>
 8004980:	2300      	movs	r3, #0
 8004982:	9342      	str	r3, [sp, #264]	; 0x108
 8004984:	2303      	movs	r3, #3
 8004986:	e7de      	b.n	8004946 <__ssvfiscanf_r+0x1e2>
 8004988:	2308      	movs	r3, #8
 800498a:	9342      	str	r3, [sp, #264]	; 0x108
 800498c:	2304      	movs	r3, #4
 800498e:	e7da      	b.n	8004946 <__ssvfiscanf_r+0x1e2>
 8004990:	4629      	mov	r1, r5
 8004992:	4640      	mov	r0, r8
 8004994:	f000 fb40 	bl	8005018 <__sccl>
 8004998:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800499a:	4605      	mov	r5, r0
 800499c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80049a0:	9341      	str	r3, [sp, #260]	; 0x104
 80049a2:	2301      	movs	r3, #1
 80049a4:	e7cf      	b.n	8004946 <__ssvfiscanf_r+0x1e2>
 80049a6:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80049a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80049ac:	9341      	str	r3, [sp, #260]	; 0x104
 80049ae:	2300      	movs	r3, #0
 80049b0:	e7c9      	b.n	8004946 <__ssvfiscanf_r+0x1e2>
 80049b2:	2302      	movs	r3, #2
 80049b4:	e7c7      	b.n	8004946 <__ssvfiscanf_r+0x1e2>
 80049b6:	9841      	ldr	r0, [sp, #260]	; 0x104
 80049b8:	06c3      	lsls	r3, r0, #27
 80049ba:	f53f aefc 	bmi.w	80047b6 <__ssvfiscanf_r+0x52>
 80049be:	9b00      	ldr	r3, [sp, #0]
 80049c0:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80049c2:	1d19      	adds	r1, r3, #4
 80049c4:	9100      	str	r1, [sp, #0]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	07c0      	lsls	r0, r0, #31
 80049ca:	bf4c      	ite	mi
 80049cc:	801a      	strhmi	r2, [r3, #0]
 80049ce:	601a      	strpl	r2, [r3, #0]
 80049d0:	e6f1      	b.n	80047b6 <__ssvfiscanf_r+0x52>
 80049d2:	4621      	mov	r1, r4
 80049d4:	4630      	mov	r0, r6
 80049d6:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80049d8:	4798      	blx	r3
 80049da:	2800      	cmp	r0, #0
 80049dc:	d0b7      	beq.n	800494e <__ssvfiscanf_r+0x1ea>
 80049de:	e79d      	b.n	800491c <__ssvfiscanf_r+0x1b8>
 80049e0:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80049e2:	3201      	adds	r2, #1
 80049e4:	9245      	str	r2, [sp, #276]	; 0x114
 80049e6:	6862      	ldr	r2, [r4, #4]
 80049e8:	3a01      	subs	r2, #1
 80049ea:	2a00      	cmp	r2, #0
 80049ec:	6062      	str	r2, [r4, #4]
 80049ee:	dd02      	ble.n	80049f6 <__ssvfiscanf_r+0x292>
 80049f0:	3301      	adds	r3, #1
 80049f2:	6023      	str	r3, [r4, #0]
 80049f4:	e7ae      	b.n	8004954 <__ssvfiscanf_r+0x1f0>
 80049f6:	4621      	mov	r1, r4
 80049f8:	4630      	mov	r0, r6
 80049fa:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80049fc:	4798      	blx	r3
 80049fe:	2800      	cmp	r0, #0
 8004a00:	d0a8      	beq.n	8004954 <__ssvfiscanf_r+0x1f0>
 8004a02:	e78b      	b.n	800491c <__ssvfiscanf_r+0x1b8>
 8004a04:	2b04      	cmp	r3, #4
 8004a06:	dc06      	bgt.n	8004a16 <__ssvfiscanf_r+0x2b2>
 8004a08:	466b      	mov	r3, sp
 8004a0a:	4622      	mov	r2, r4
 8004a0c:	4630      	mov	r0, r6
 8004a0e:	a941      	add	r1, sp, #260	; 0x104
 8004a10:	f000 fa10 	bl	8004e34 <_scanf_i>
 8004a14:	e7ac      	b.n	8004970 <__ssvfiscanf_r+0x20c>
 8004a16:	4b0f      	ldr	r3, [pc, #60]	; (8004a54 <__ssvfiscanf_r+0x2f0>)
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	f43f aecc 	beq.w	80047b6 <__ssvfiscanf_r+0x52>
 8004a1e:	466b      	mov	r3, sp
 8004a20:	4622      	mov	r2, r4
 8004a22:	4630      	mov	r0, r6
 8004a24:	a941      	add	r1, sp, #260	; 0x104
 8004a26:	f3af 8000 	nop.w
 8004a2a:	e7a1      	b.n	8004970 <__ssvfiscanf_r+0x20c>
 8004a2c:	89a3      	ldrh	r3, [r4, #12]
 8004a2e:	f013 0f40 	tst.w	r3, #64	; 0x40
 8004a32:	bf18      	it	ne
 8004a34:	f04f 30ff 	movne.w	r0, #4294967295
 8004a38:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 8004a3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a40:	9844      	ldr	r0, [sp, #272]	; 0x110
 8004a42:	e7f9      	b.n	8004a38 <__ssvfiscanf_r+0x2d4>
 8004a44:	080046b1 	.word	0x080046b1
 8004a48:	0800472b 	.word	0x0800472b
 8004a4c:	080056ef 	.word	0x080056ef
 8004a50:	080056a6 	.word	0x080056a6
 8004a54:	00000000 	.word	0x00000000

08004a58 <_printf_common>:
 8004a58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a5c:	4616      	mov	r6, r2
 8004a5e:	4699      	mov	r9, r3
 8004a60:	688a      	ldr	r2, [r1, #8]
 8004a62:	690b      	ldr	r3, [r1, #16]
 8004a64:	4607      	mov	r7, r0
 8004a66:	4293      	cmp	r3, r2
 8004a68:	bfb8      	it	lt
 8004a6a:	4613      	movlt	r3, r2
 8004a6c:	6033      	str	r3, [r6, #0]
 8004a6e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004a72:	460c      	mov	r4, r1
 8004a74:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004a78:	b10a      	cbz	r2, 8004a7e <_printf_common+0x26>
 8004a7a:	3301      	adds	r3, #1
 8004a7c:	6033      	str	r3, [r6, #0]
 8004a7e:	6823      	ldr	r3, [r4, #0]
 8004a80:	0699      	lsls	r1, r3, #26
 8004a82:	bf42      	ittt	mi
 8004a84:	6833      	ldrmi	r3, [r6, #0]
 8004a86:	3302      	addmi	r3, #2
 8004a88:	6033      	strmi	r3, [r6, #0]
 8004a8a:	6825      	ldr	r5, [r4, #0]
 8004a8c:	f015 0506 	ands.w	r5, r5, #6
 8004a90:	d106      	bne.n	8004aa0 <_printf_common+0x48>
 8004a92:	f104 0a19 	add.w	sl, r4, #25
 8004a96:	68e3      	ldr	r3, [r4, #12]
 8004a98:	6832      	ldr	r2, [r6, #0]
 8004a9a:	1a9b      	subs	r3, r3, r2
 8004a9c:	42ab      	cmp	r3, r5
 8004a9e:	dc28      	bgt.n	8004af2 <_printf_common+0x9a>
 8004aa0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004aa4:	1e13      	subs	r3, r2, #0
 8004aa6:	6822      	ldr	r2, [r4, #0]
 8004aa8:	bf18      	it	ne
 8004aaa:	2301      	movne	r3, #1
 8004aac:	0692      	lsls	r2, r2, #26
 8004aae:	d42d      	bmi.n	8004b0c <_printf_common+0xb4>
 8004ab0:	4649      	mov	r1, r9
 8004ab2:	4638      	mov	r0, r7
 8004ab4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004ab8:	47c0      	blx	r8
 8004aba:	3001      	adds	r0, #1
 8004abc:	d020      	beq.n	8004b00 <_printf_common+0xa8>
 8004abe:	6823      	ldr	r3, [r4, #0]
 8004ac0:	68e5      	ldr	r5, [r4, #12]
 8004ac2:	f003 0306 	and.w	r3, r3, #6
 8004ac6:	2b04      	cmp	r3, #4
 8004ac8:	bf18      	it	ne
 8004aca:	2500      	movne	r5, #0
 8004acc:	6832      	ldr	r2, [r6, #0]
 8004ace:	f04f 0600 	mov.w	r6, #0
 8004ad2:	68a3      	ldr	r3, [r4, #8]
 8004ad4:	bf08      	it	eq
 8004ad6:	1aad      	subeq	r5, r5, r2
 8004ad8:	6922      	ldr	r2, [r4, #16]
 8004ada:	bf08      	it	eq
 8004adc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004ae0:	4293      	cmp	r3, r2
 8004ae2:	bfc4      	itt	gt
 8004ae4:	1a9b      	subgt	r3, r3, r2
 8004ae6:	18ed      	addgt	r5, r5, r3
 8004ae8:	341a      	adds	r4, #26
 8004aea:	42b5      	cmp	r5, r6
 8004aec:	d11a      	bne.n	8004b24 <_printf_common+0xcc>
 8004aee:	2000      	movs	r0, #0
 8004af0:	e008      	b.n	8004b04 <_printf_common+0xac>
 8004af2:	2301      	movs	r3, #1
 8004af4:	4652      	mov	r2, sl
 8004af6:	4649      	mov	r1, r9
 8004af8:	4638      	mov	r0, r7
 8004afa:	47c0      	blx	r8
 8004afc:	3001      	adds	r0, #1
 8004afe:	d103      	bne.n	8004b08 <_printf_common+0xb0>
 8004b00:	f04f 30ff 	mov.w	r0, #4294967295
 8004b04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b08:	3501      	adds	r5, #1
 8004b0a:	e7c4      	b.n	8004a96 <_printf_common+0x3e>
 8004b0c:	2030      	movs	r0, #48	; 0x30
 8004b0e:	18e1      	adds	r1, r4, r3
 8004b10:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004b14:	1c5a      	adds	r2, r3, #1
 8004b16:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004b1a:	4422      	add	r2, r4
 8004b1c:	3302      	adds	r3, #2
 8004b1e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004b22:	e7c5      	b.n	8004ab0 <_printf_common+0x58>
 8004b24:	2301      	movs	r3, #1
 8004b26:	4622      	mov	r2, r4
 8004b28:	4649      	mov	r1, r9
 8004b2a:	4638      	mov	r0, r7
 8004b2c:	47c0      	blx	r8
 8004b2e:	3001      	adds	r0, #1
 8004b30:	d0e6      	beq.n	8004b00 <_printf_common+0xa8>
 8004b32:	3601      	adds	r6, #1
 8004b34:	e7d9      	b.n	8004aea <_printf_common+0x92>
	...

08004b38 <_printf_i>:
 8004b38:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004b3c:	460c      	mov	r4, r1
 8004b3e:	7e27      	ldrb	r7, [r4, #24]
 8004b40:	4691      	mov	r9, r2
 8004b42:	2f78      	cmp	r7, #120	; 0x78
 8004b44:	4680      	mov	r8, r0
 8004b46:	469a      	mov	sl, r3
 8004b48:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004b4a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004b4e:	d807      	bhi.n	8004b60 <_printf_i+0x28>
 8004b50:	2f62      	cmp	r7, #98	; 0x62
 8004b52:	d80a      	bhi.n	8004b6a <_printf_i+0x32>
 8004b54:	2f00      	cmp	r7, #0
 8004b56:	f000 80d9 	beq.w	8004d0c <_printf_i+0x1d4>
 8004b5a:	2f58      	cmp	r7, #88	; 0x58
 8004b5c:	f000 80a4 	beq.w	8004ca8 <_printf_i+0x170>
 8004b60:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004b64:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004b68:	e03a      	b.n	8004be0 <_printf_i+0xa8>
 8004b6a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004b6e:	2b15      	cmp	r3, #21
 8004b70:	d8f6      	bhi.n	8004b60 <_printf_i+0x28>
 8004b72:	a001      	add	r0, pc, #4	; (adr r0, 8004b78 <_printf_i+0x40>)
 8004b74:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004b78:	08004bd1 	.word	0x08004bd1
 8004b7c:	08004be5 	.word	0x08004be5
 8004b80:	08004b61 	.word	0x08004b61
 8004b84:	08004b61 	.word	0x08004b61
 8004b88:	08004b61 	.word	0x08004b61
 8004b8c:	08004b61 	.word	0x08004b61
 8004b90:	08004be5 	.word	0x08004be5
 8004b94:	08004b61 	.word	0x08004b61
 8004b98:	08004b61 	.word	0x08004b61
 8004b9c:	08004b61 	.word	0x08004b61
 8004ba0:	08004b61 	.word	0x08004b61
 8004ba4:	08004cf3 	.word	0x08004cf3
 8004ba8:	08004c15 	.word	0x08004c15
 8004bac:	08004cd5 	.word	0x08004cd5
 8004bb0:	08004b61 	.word	0x08004b61
 8004bb4:	08004b61 	.word	0x08004b61
 8004bb8:	08004d15 	.word	0x08004d15
 8004bbc:	08004b61 	.word	0x08004b61
 8004bc0:	08004c15 	.word	0x08004c15
 8004bc4:	08004b61 	.word	0x08004b61
 8004bc8:	08004b61 	.word	0x08004b61
 8004bcc:	08004cdd 	.word	0x08004cdd
 8004bd0:	680b      	ldr	r3, [r1, #0]
 8004bd2:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004bd6:	1d1a      	adds	r2, r3, #4
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	600a      	str	r2, [r1, #0]
 8004bdc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004be0:	2301      	movs	r3, #1
 8004be2:	e0a4      	b.n	8004d2e <_printf_i+0x1f6>
 8004be4:	6825      	ldr	r5, [r4, #0]
 8004be6:	6808      	ldr	r0, [r1, #0]
 8004be8:	062e      	lsls	r6, r5, #24
 8004bea:	f100 0304 	add.w	r3, r0, #4
 8004bee:	d50a      	bpl.n	8004c06 <_printf_i+0xce>
 8004bf0:	6805      	ldr	r5, [r0, #0]
 8004bf2:	600b      	str	r3, [r1, #0]
 8004bf4:	2d00      	cmp	r5, #0
 8004bf6:	da03      	bge.n	8004c00 <_printf_i+0xc8>
 8004bf8:	232d      	movs	r3, #45	; 0x2d
 8004bfa:	426d      	negs	r5, r5
 8004bfc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004c00:	230a      	movs	r3, #10
 8004c02:	485e      	ldr	r0, [pc, #376]	; (8004d7c <_printf_i+0x244>)
 8004c04:	e019      	b.n	8004c3a <_printf_i+0x102>
 8004c06:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004c0a:	6805      	ldr	r5, [r0, #0]
 8004c0c:	600b      	str	r3, [r1, #0]
 8004c0e:	bf18      	it	ne
 8004c10:	b22d      	sxthne	r5, r5
 8004c12:	e7ef      	b.n	8004bf4 <_printf_i+0xbc>
 8004c14:	680b      	ldr	r3, [r1, #0]
 8004c16:	6825      	ldr	r5, [r4, #0]
 8004c18:	1d18      	adds	r0, r3, #4
 8004c1a:	6008      	str	r0, [r1, #0]
 8004c1c:	0628      	lsls	r0, r5, #24
 8004c1e:	d501      	bpl.n	8004c24 <_printf_i+0xec>
 8004c20:	681d      	ldr	r5, [r3, #0]
 8004c22:	e002      	b.n	8004c2a <_printf_i+0xf2>
 8004c24:	0669      	lsls	r1, r5, #25
 8004c26:	d5fb      	bpl.n	8004c20 <_printf_i+0xe8>
 8004c28:	881d      	ldrh	r5, [r3, #0]
 8004c2a:	2f6f      	cmp	r7, #111	; 0x6f
 8004c2c:	bf0c      	ite	eq
 8004c2e:	2308      	moveq	r3, #8
 8004c30:	230a      	movne	r3, #10
 8004c32:	4852      	ldr	r0, [pc, #328]	; (8004d7c <_printf_i+0x244>)
 8004c34:	2100      	movs	r1, #0
 8004c36:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004c3a:	6866      	ldr	r6, [r4, #4]
 8004c3c:	2e00      	cmp	r6, #0
 8004c3e:	bfa8      	it	ge
 8004c40:	6821      	ldrge	r1, [r4, #0]
 8004c42:	60a6      	str	r6, [r4, #8]
 8004c44:	bfa4      	itt	ge
 8004c46:	f021 0104 	bicge.w	r1, r1, #4
 8004c4a:	6021      	strge	r1, [r4, #0]
 8004c4c:	b90d      	cbnz	r5, 8004c52 <_printf_i+0x11a>
 8004c4e:	2e00      	cmp	r6, #0
 8004c50:	d04d      	beq.n	8004cee <_printf_i+0x1b6>
 8004c52:	4616      	mov	r6, r2
 8004c54:	fbb5 f1f3 	udiv	r1, r5, r3
 8004c58:	fb03 5711 	mls	r7, r3, r1, r5
 8004c5c:	5dc7      	ldrb	r7, [r0, r7]
 8004c5e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004c62:	462f      	mov	r7, r5
 8004c64:	42bb      	cmp	r3, r7
 8004c66:	460d      	mov	r5, r1
 8004c68:	d9f4      	bls.n	8004c54 <_printf_i+0x11c>
 8004c6a:	2b08      	cmp	r3, #8
 8004c6c:	d10b      	bne.n	8004c86 <_printf_i+0x14e>
 8004c6e:	6823      	ldr	r3, [r4, #0]
 8004c70:	07df      	lsls	r7, r3, #31
 8004c72:	d508      	bpl.n	8004c86 <_printf_i+0x14e>
 8004c74:	6923      	ldr	r3, [r4, #16]
 8004c76:	6861      	ldr	r1, [r4, #4]
 8004c78:	4299      	cmp	r1, r3
 8004c7a:	bfde      	ittt	le
 8004c7c:	2330      	movle	r3, #48	; 0x30
 8004c7e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004c82:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004c86:	1b92      	subs	r2, r2, r6
 8004c88:	6122      	str	r2, [r4, #16]
 8004c8a:	464b      	mov	r3, r9
 8004c8c:	4621      	mov	r1, r4
 8004c8e:	4640      	mov	r0, r8
 8004c90:	f8cd a000 	str.w	sl, [sp]
 8004c94:	aa03      	add	r2, sp, #12
 8004c96:	f7ff fedf 	bl	8004a58 <_printf_common>
 8004c9a:	3001      	adds	r0, #1
 8004c9c:	d14c      	bne.n	8004d38 <_printf_i+0x200>
 8004c9e:	f04f 30ff 	mov.w	r0, #4294967295
 8004ca2:	b004      	add	sp, #16
 8004ca4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ca8:	4834      	ldr	r0, [pc, #208]	; (8004d7c <_printf_i+0x244>)
 8004caa:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004cae:	680e      	ldr	r6, [r1, #0]
 8004cb0:	6823      	ldr	r3, [r4, #0]
 8004cb2:	f856 5b04 	ldr.w	r5, [r6], #4
 8004cb6:	061f      	lsls	r7, r3, #24
 8004cb8:	600e      	str	r6, [r1, #0]
 8004cba:	d514      	bpl.n	8004ce6 <_printf_i+0x1ae>
 8004cbc:	07d9      	lsls	r1, r3, #31
 8004cbe:	bf44      	itt	mi
 8004cc0:	f043 0320 	orrmi.w	r3, r3, #32
 8004cc4:	6023      	strmi	r3, [r4, #0]
 8004cc6:	b91d      	cbnz	r5, 8004cd0 <_printf_i+0x198>
 8004cc8:	6823      	ldr	r3, [r4, #0]
 8004cca:	f023 0320 	bic.w	r3, r3, #32
 8004cce:	6023      	str	r3, [r4, #0]
 8004cd0:	2310      	movs	r3, #16
 8004cd2:	e7af      	b.n	8004c34 <_printf_i+0xfc>
 8004cd4:	6823      	ldr	r3, [r4, #0]
 8004cd6:	f043 0320 	orr.w	r3, r3, #32
 8004cda:	6023      	str	r3, [r4, #0]
 8004cdc:	2378      	movs	r3, #120	; 0x78
 8004cde:	4828      	ldr	r0, [pc, #160]	; (8004d80 <_printf_i+0x248>)
 8004ce0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004ce4:	e7e3      	b.n	8004cae <_printf_i+0x176>
 8004ce6:	065e      	lsls	r6, r3, #25
 8004ce8:	bf48      	it	mi
 8004cea:	b2ad      	uxthmi	r5, r5
 8004cec:	e7e6      	b.n	8004cbc <_printf_i+0x184>
 8004cee:	4616      	mov	r6, r2
 8004cf0:	e7bb      	b.n	8004c6a <_printf_i+0x132>
 8004cf2:	680b      	ldr	r3, [r1, #0]
 8004cf4:	6826      	ldr	r6, [r4, #0]
 8004cf6:	1d1d      	adds	r5, r3, #4
 8004cf8:	6960      	ldr	r0, [r4, #20]
 8004cfa:	600d      	str	r5, [r1, #0]
 8004cfc:	0635      	lsls	r5, r6, #24
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	d501      	bpl.n	8004d06 <_printf_i+0x1ce>
 8004d02:	6018      	str	r0, [r3, #0]
 8004d04:	e002      	b.n	8004d0c <_printf_i+0x1d4>
 8004d06:	0671      	lsls	r1, r6, #25
 8004d08:	d5fb      	bpl.n	8004d02 <_printf_i+0x1ca>
 8004d0a:	8018      	strh	r0, [r3, #0]
 8004d0c:	2300      	movs	r3, #0
 8004d0e:	4616      	mov	r6, r2
 8004d10:	6123      	str	r3, [r4, #16]
 8004d12:	e7ba      	b.n	8004c8a <_printf_i+0x152>
 8004d14:	680b      	ldr	r3, [r1, #0]
 8004d16:	1d1a      	adds	r2, r3, #4
 8004d18:	600a      	str	r2, [r1, #0]
 8004d1a:	681e      	ldr	r6, [r3, #0]
 8004d1c:	2100      	movs	r1, #0
 8004d1e:	4630      	mov	r0, r6
 8004d20:	6862      	ldr	r2, [r4, #4]
 8004d22:	f000 faf3 	bl	800530c <memchr>
 8004d26:	b108      	cbz	r0, 8004d2c <_printf_i+0x1f4>
 8004d28:	1b80      	subs	r0, r0, r6
 8004d2a:	6060      	str	r0, [r4, #4]
 8004d2c:	6863      	ldr	r3, [r4, #4]
 8004d2e:	6123      	str	r3, [r4, #16]
 8004d30:	2300      	movs	r3, #0
 8004d32:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004d36:	e7a8      	b.n	8004c8a <_printf_i+0x152>
 8004d38:	4632      	mov	r2, r6
 8004d3a:	4649      	mov	r1, r9
 8004d3c:	4640      	mov	r0, r8
 8004d3e:	6923      	ldr	r3, [r4, #16]
 8004d40:	47d0      	blx	sl
 8004d42:	3001      	adds	r0, #1
 8004d44:	d0ab      	beq.n	8004c9e <_printf_i+0x166>
 8004d46:	6823      	ldr	r3, [r4, #0]
 8004d48:	079b      	lsls	r3, r3, #30
 8004d4a:	d413      	bmi.n	8004d74 <_printf_i+0x23c>
 8004d4c:	68e0      	ldr	r0, [r4, #12]
 8004d4e:	9b03      	ldr	r3, [sp, #12]
 8004d50:	4298      	cmp	r0, r3
 8004d52:	bfb8      	it	lt
 8004d54:	4618      	movlt	r0, r3
 8004d56:	e7a4      	b.n	8004ca2 <_printf_i+0x16a>
 8004d58:	2301      	movs	r3, #1
 8004d5a:	4632      	mov	r2, r6
 8004d5c:	4649      	mov	r1, r9
 8004d5e:	4640      	mov	r0, r8
 8004d60:	47d0      	blx	sl
 8004d62:	3001      	adds	r0, #1
 8004d64:	d09b      	beq.n	8004c9e <_printf_i+0x166>
 8004d66:	3501      	adds	r5, #1
 8004d68:	68e3      	ldr	r3, [r4, #12]
 8004d6a:	9903      	ldr	r1, [sp, #12]
 8004d6c:	1a5b      	subs	r3, r3, r1
 8004d6e:	42ab      	cmp	r3, r5
 8004d70:	dcf2      	bgt.n	8004d58 <_printf_i+0x220>
 8004d72:	e7eb      	b.n	8004d4c <_printf_i+0x214>
 8004d74:	2500      	movs	r5, #0
 8004d76:	f104 0619 	add.w	r6, r4, #25
 8004d7a:	e7f5      	b.n	8004d68 <_printf_i+0x230>
 8004d7c:	080056b1 	.word	0x080056b1
 8004d80:	080056c2 	.word	0x080056c2

08004d84 <_scanf_chars>:
 8004d84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004d88:	4615      	mov	r5, r2
 8004d8a:	688a      	ldr	r2, [r1, #8]
 8004d8c:	4680      	mov	r8, r0
 8004d8e:	460c      	mov	r4, r1
 8004d90:	b932      	cbnz	r2, 8004da0 <_scanf_chars+0x1c>
 8004d92:	698a      	ldr	r2, [r1, #24]
 8004d94:	2a00      	cmp	r2, #0
 8004d96:	bf0c      	ite	eq
 8004d98:	2201      	moveq	r2, #1
 8004d9a:	f04f 32ff 	movne.w	r2, #4294967295
 8004d9e:	608a      	str	r2, [r1, #8]
 8004da0:	2700      	movs	r7, #0
 8004da2:	6822      	ldr	r2, [r4, #0]
 8004da4:	f8df 9088 	ldr.w	r9, [pc, #136]	; 8004e30 <_scanf_chars+0xac>
 8004da8:	06d1      	lsls	r1, r2, #27
 8004daa:	bf5f      	itttt	pl
 8004dac:	681a      	ldrpl	r2, [r3, #0]
 8004dae:	1d11      	addpl	r1, r2, #4
 8004db0:	6019      	strpl	r1, [r3, #0]
 8004db2:	6816      	ldrpl	r6, [r2, #0]
 8004db4:	69a0      	ldr	r0, [r4, #24]
 8004db6:	b188      	cbz	r0, 8004ddc <_scanf_chars+0x58>
 8004db8:	2801      	cmp	r0, #1
 8004dba:	d107      	bne.n	8004dcc <_scanf_chars+0x48>
 8004dbc:	682b      	ldr	r3, [r5, #0]
 8004dbe:	781a      	ldrb	r2, [r3, #0]
 8004dc0:	6963      	ldr	r3, [r4, #20]
 8004dc2:	5c9b      	ldrb	r3, [r3, r2]
 8004dc4:	b953      	cbnz	r3, 8004ddc <_scanf_chars+0x58>
 8004dc6:	bb27      	cbnz	r7, 8004e12 <_scanf_chars+0x8e>
 8004dc8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004dcc:	2802      	cmp	r0, #2
 8004dce:	d120      	bne.n	8004e12 <_scanf_chars+0x8e>
 8004dd0:	682b      	ldr	r3, [r5, #0]
 8004dd2:	781b      	ldrb	r3, [r3, #0]
 8004dd4:	f813 3009 	ldrb.w	r3, [r3, r9]
 8004dd8:	071b      	lsls	r3, r3, #28
 8004dda:	d41a      	bmi.n	8004e12 <_scanf_chars+0x8e>
 8004ddc:	6823      	ldr	r3, [r4, #0]
 8004dde:	3701      	adds	r7, #1
 8004de0:	06da      	lsls	r2, r3, #27
 8004de2:	bf5e      	ittt	pl
 8004de4:	682b      	ldrpl	r3, [r5, #0]
 8004de6:	781b      	ldrbpl	r3, [r3, #0]
 8004de8:	f806 3b01 	strbpl.w	r3, [r6], #1
 8004dec:	682a      	ldr	r2, [r5, #0]
 8004dee:	686b      	ldr	r3, [r5, #4]
 8004df0:	3201      	adds	r2, #1
 8004df2:	602a      	str	r2, [r5, #0]
 8004df4:	68a2      	ldr	r2, [r4, #8]
 8004df6:	3b01      	subs	r3, #1
 8004df8:	3a01      	subs	r2, #1
 8004dfa:	606b      	str	r3, [r5, #4]
 8004dfc:	60a2      	str	r2, [r4, #8]
 8004dfe:	b142      	cbz	r2, 8004e12 <_scanf_chars+0x8e>
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	dcd7      	bgt.n	8004db4 <_scanf_chars+0x30>
 8004e04:	4629      	mov	r1, r5
 8004e06:	4640      	mov	r0, r8
 8004e08:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8004e0c:	4798      	blx	r3
 8004e0e:	2800      	cmp	r0, #0
 8004e10:	d0d0      	beq.n	8004db4 <_scanf_chars+0x30>
 8004e12:	6823      	ldr	r3, [r4, #0]
 8004e14:	f013 0310 	ands.w	r3, r3, #16
 8004e18:	d105      	bne.n	8004e26 <_scanf_chars+0xa2>
 8004e1a:	68e2      	ldr	r2, [r4, #12]
 8004e1c:	3201      	adds	r2, #1
 8004e1e:	60e2      	str	r2, [r4, #12]
 8004e20:	69a2      	ldr	r2, [r4, #24]
 8004e22:	b102      	cbz	r2, 8004e26 <_scanf_chars+0xa2>
 8004e24:	7033      	strb	r3, [r6, #0]
 8004e26:	6923      	ldr	r3, [r4, #16]
 8004e28:	2000      	movs	r0, #0
 8004e2a:	441f      	add	r7, r3
 8004e2c:	6127      	str	r7, [r4, #16]
 8004e2e:	e7cb      	b.n	8004dc8 <_scanf_chars+0x44>
 8004e30:	080056ef 	.word	0x080056ef

08004e34 <_scanf_i>:
 8004e34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e38:	460c      	mov	r4, r1
 8004e3a:	4698      	mov	r8, r3
 8004e3c:	4b72      	ldr	r3, [pc, #456]	; (8005008 <_scanf_i+0x1d4>)
 8004e3e:	b087      	sub	sp, #28
 8004e40:	4682      	mov	sl, r0
 8004e42:	4616      	mov	r6, r2
 8004e44:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004e48:	ab03      	add	r3, sp, #12
 8004e4a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8004e4e:	4b6f      	ldr	r3, [pc, #444]	; (800500c <_scanf_i+0x1d8>)
 8004e50:	69a1      	ldr	r1, [r4, #24]
 8004e52:	4a6f      	ldr	r2, [pc, #444]	; (8005010 <_scanf_i+0x1dc>)
 8004e54:	4627      	mov	r7, r4
 8004e56:	2903      	cmp	r1, #3
 8004e58:	bf18      	it	ne
 8004e5a:	461a      	movne	r2, r3
 8004e5c:	68a3      	ldr	r3, [r4, #8]
 8004e5e:	9201      	str	r2, [sp, #4]
 8004e60:	1e5a      	subs	r2, r3, #1
 8004e62:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8004e66:	bf81      	itttt	hi
 8004e68:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8004e6c:	eb03 0905 	addhi.w	r9, r3, r5
 8004e70:	f240 135d 	movwhi	r3, #349	; 0x15d
 8004e74:	60a3      	strhi	r3, [r4, #8]
 8004e76:	f857 3b1c 	ldr.w	r3, [r7], #28
 8004e7a:	bf98      	it	ls
 8004e7c:	f04f 0900 	movls.w	r9, #0
 8004e80:	463d      	mov	r5, r7
 8004e82:	f04f 0b00 	mov.w	fp, #0
 8004e86:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8004e8a:	6023      	str	r3, [r4, #0]
 8004e8c:	6831      	ldr	r1, [r6, #0]
 8004e8e:	ab03      	add	r3, sp, #12
 8004e90:	2202      	movs	r2, #2
 8004e92:	7809      	ldrb	r1, [r1, #0]
 8004e94:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8004e98:	f000 fa38 	bl	800530c <memchr>
 8004e9c:	b328      	cbz	r0, 8004eea <_scanf_i+0xb6>
 8004e9e:	f1bb 0f01 	cmp.w	fp, #1
 8004ea2:	d159      	bne.n	8004f58 <_scanf_i+0x124>
 8004ea4:	6862      	ldr	r2, [r4, #4]
 8004ea6:	b92a      	cbnz	r2, 8004eb4 <_scanf_i+0x80>
 8004ea8:	2308      	movs	r3, #8
 8004eaa:	6822      	ldr	r2, [r4, #0]
 8004eac:	6063      	str	r3, [r4, #4]
 8004eae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004eb2:	6022      	str	r2, [r4, #0]
 8004eb4:	6822      	ldr	r2, [r4, #0]
 8004eb6:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8004eba:	6022      	str	r2, [r4, #0]
 8004ebc:	68a2      	ldr	r2, [r4, #8]
 8004ebe:	1e51      	subs	r1, r2, #1
 8004ec0:	60a1      	str	r1, [r4, #8]
 8004ec2:	b192      	cbz	r2, 8004eea <_scanf_i+0xb6>
 8004ec4:	6832      	ldr	r2, [r6, #0]
 8004ec6:	1c51      	adds	r1, r2, #1
 8004ec8:	6031      	str	r1, [r6, #0]
 8004eca:	7812      	ldrb	r2, [r2, #0]
 8004ecc:	f805 2b01 	strb.w	r2, [r5], #1
 8004ed0:	6872      	ldr	r2, [r6, #4]
 8004ed2:	3a01      	subs	r2, #1
 8004ed4:	2a00      	cmp	r2, #0
 8004ed6:	6072      	str	r2, [r6, #4]
 8004ed8:	dc07      	bgt.n	8004eea <_scanf_i+0xb6>
 8004eda:	4631      	mov	r1, r6
 8004edc:	4650      	mov	r0, sl
 8004ede:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8004ee2:	4790      	blx	r2
 8004ee4:	2800      	cmp	r0, #0
 8004ee6:	f040 8085 	bne.w	8004ff4 <_scanf_i+0x1c0>
 8004eea:	f10b 0b01 	add.w	fp, fp, #1
 8004eee:	f1bb 0f03 	cmp.w	fp, #3
 8004ef2:	d1cb      	bne.n	8004e8c <_scanf_i+0x58>
 8004ef4:	6863      	ldr	r3, [r4, #4]
 8004ef6:	b90b      	cbnz	r3, 8004efc <_scanf_i+0xc8>
 8004ef8:	230a      	movs	r3, #10
 8004efa:	6063      	str	r3, [r4, #4]
 8004efc:	6863      	ldr	r3, [r4, #4]
 8004efe:	4945      	ldr	r1, [pc, #276]	; (8005014 <_scanf_i+0x1e0>)
 8004f00:	6960      	ldr	r0, [r4, #20]
 8004f02:	1ac9      	subs	r1, r1, r3
 8004f04:	f000 f888 	bl	8005018 <__sccl>
 8004f08:	f04f 0b00 	mov.w	fp, #0
 8004f0c:	68a3      	ldr	r3, [r4, #8]
 8004f0e:	6822      	ldr	r2, [r4, #0]
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d03d      	beq.n	8004f90 <_scanf_i+0x15c>
 8004f14:	6831      	ldr	r1, [r6, #0]
 8004f16:	6960      	ldr	r0, [r4, #20]
 8004f18:	f891 c000 	ldrb.w	ip, [r1]
 8004f1c:	f810 000c 	ldrb.w	r0, [r0, ip]
 8004f20:	2800      	cmp	r0, #0
 8004f22:	d035      	beq.n	8004f90 <_scanf_i+0x15c>
 8004f24:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8004f28:	d124      	bne.n	8004f74 <_scanf_i+0x140>
 8004f2a:	0510      	lsls	r0, r2, #20
 8004f2c:	d522      	bpl.n	8004f74 <_scanf_i+0x140>
 8004f2e:	f10b 0b01 	add.w	fp, fp, #1
 8004f32:	f1b9 0f00 	cmp.w	r9, #0
 8004f36:	d003      	beq.n	8004f40 <_scanf_i+0x10c>
 8004f38:	3301      	adds	r3, #1
 8004f3a:	f109 39ff 	add.w	r9, r9, #4294967295
 8004f3e:	60a3      	str	r3, [r4, #8]
 8004f40:	6873      	ldr	r3, [r6, #4]
 8004f42:	3b01      	subs	r3, #1
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	6073      	str	r3, [r6, #4]
 8004f48:	dd1b      	ble.n	8004f82 <_scanf_i+0x14e>
 8004f4a:	6833      	ldr	r3, [r6, #0]
 8004f4c:	3301      	adds	r3, #1
 8004f4e:	6033      	str	r3, [r6, #0]
 8004f50:	68a3      	ldr	r3, [r4, #8]
 8004f52:	3b01      	subs	r3, #1
 8004f54:	60a3      	str	r3, [r4, #8]
 8004f56:	e7d9      	b.n	8004f0c <_scanf_i+0xd8>
 8004f58:	f1bb 0f02 	cmp.w	fp, #2
 8004f5c:	d1ae      	bne.n	8004ebc <_scanf_i+0x88>
 8004f5e:	6822      	ldr	r2, [r4, #0]
 8004f60:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8004f64:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8004f68:	d1bf      	bne.n	8004eea <_scanf_i+0xb6>
 8004f6a:	2310      	movs	r3, #16
 8004f6c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004f70:	6063      	str	r3, [r4, #4]
 8004f72:	e7a2      	b.n	8004eba <_scanf_i+0x86>
 8004f74:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8004f78:	6022      	str	r2, [r4, #0]
 8004f7a:	780b      	ldrb	r3, [r1, #0]
 8004f7c:	f805 3b01 	strb.w	r3, [r5], #1
 8004f80:	e7de      	b.n	8004f40 <_scanf_i+0x10c>
 8004f82:	4631      	mov	r1, r6
 8004f84:	4650      	mov	r0, sl
 8004f86:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8004f8a:	4798      	blx	r3
 8004f8c:	2800      	cmp	r0, #0
 8004f8e:	d0df      	beq.n	8004f50 <_scanf_i+0x11c>
 8004f90:	6823      	ldr	r3, [r4, #0]
 8004f92:	05d9      	lsls	r1, r3, #23
 8004f94:	d50d      	bpl.n	8004fb2 <_scanf_i+0x17e>
 8004f96:	42bd      	cmp	r5, r7
 8004f98:	d909      	bls.n	8004fae <_scanf_i+0x17a>
 8004f9a:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8004f9e:	4632      	mov	r2, r6
 8004fa0:	4650      	mov	r0, sl
 8004fa2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004fa6:	f105 39ff 	add.w	r9, r5, #4294967295
 8004faa:	4798      	blx	r3
 8004fac:	464d      	mov	r5, r9
 8004fae:	42bd      	cmp	r5, r7
 8004fb0:	d028      	beq.n	8005004 <_scanf_i+0x1d0>
 8004fb2:	6822      	ldr	r2, [r4, #0]
 8004fb4:	f012 0210 	ands.w	r2, r2, #16
 8004fb8:	d113      	bne.n	8004fe2 <_scanf_i+0x1ae>
 8004fba:	702a      	strb	r2, [r5, #0]
 8004fbc:	4639      	mov	r1, r7
 8004fbe:	6863      	ldr	r3, [r4, #4]
 8004fc0:	4650      	mov	r0, sl
 8004fc2:	9e01      	ldr	r6, [sp, #4]
 8004fc4:	47b0      	blx	r6
 8004fc6:	f8d8 3000 	ldr.w	r3, [r8]
 8004fca:	6821      	ldr	r1, [r4, #0]
 8004fcc:	1d1a      	adds	r2, r3, #4
 8004fce:	f8c8 2000 	str.w	r2, [r8]
 8004fd2:	f011 0f20 	tst.w	r1, #32
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	d00f      	beq.n	8004ffa <_scanf_i+0x1c6>
 8004fda:	6018      	str	r0, [r3, #0]
 8004fdc:	68e3      	ldr	r3, [r4, #12]
 8004fde:	3301      	adds	r3, #1
 8004fe0:	60e3      	str	r3, [r4, #12]
 8004fe2:	2000      	movs	r0, #0
 8004fe4:	1bed      	subs	r5, r5, r7
 8004fe6:	44ab      	add	fp, r5
 8004fe8:	6925      	ldr	r5, [r4, #16]
 8004fea:	445d      	add	r5, fp
 8004fec:	6125      	str	r5, [r4, #16]
 8004fee:	b007      	add	sp, #28
 8004ff0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ff4:	f04f 0b00 	mov.w	fp, #0
 8004ff8:	e7ca      	b.n	8004f90 <_scanf_i+0x15c>
 8004ffa:	07ca      	lsls	r2, r1, #31
 8004ffc:	bf4c      	ite	mi
 8004ffe:	8018      	strhmi	r0, [r3, #0]
 8005000:	6018      	strpl	r0, [r3, #0]
 8005002:	e7eb      	b.n	8004fdc <_scanf_i+0x1a8>
 8005004:	2001      	movs	r0, #1
 8005006:	e7f2      	b.n	8004fee <_scanf_i+0x1ba>
 8005008:	0800567c 	.word	0x0800567c
 800500c:	08005295 	.word	0x08005295
 8005010:	08005199 	.word	0x08005199
 8005014:	080056ec 	.word	0x080056ec

08005018 <__sccl>:
 8005018:	b570      	push	{r4, r5, r6, lr}
 800501a:	780b      	ldrb	r3, [r1, #0]
 800501c:	4604      	mov	r4, r0
 800501e:	2b5e      	cmp	r3, #94	; 0x5e
 8005020:	bf13      	iteet	ne
 8005022:	2200      	movne	r2, #0
 8005024:	2201      	moveq	r2, #1
 8005026:	784b      	ldrbeq	r3, [r1, #1]
 8005028:	1c48      	addne	r0, r1, #1
 800502a:	bf08      	it	eq
 800502c:	1c88      	addeq	r0, r1, #2
 800502e:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8005032:	1e61      	subs	r1, r4, #1
 8005034:	f801 2f01 	strb.w	r2, [r1, #1]!
 8005038:	42a9      	cmp	r1, r5
 800503a:	d1fb      	bne.n	8005034 <__sccl+0x1c>
 800503c:	b90b      	cbnz	r3, 8005042 <__sccl+0x2a>
 800503e:	3801      	subs	r0, #1
 8005040:	bd70      	pop	{r4, r5, r6, pc}
 8005042:	f082 0101 	eor.w	r1, r2, #1
 8005046:	54e1      	strb	r1, [r4, r3]
 8005048:	1c42      	adds	r2, r0, #1
 800504a:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 800504e:	4610      	mov	r0, r2
 8005050:	2d2d      	cmp	r5, #45	; 0x2d
 8005052:	f102 36ff 	add.w	r6, r2, #4294967295
 8005056:	d006      	beq.n	8005066 <__sccl+0x4e>
 8005058:	2d5d      	cmp	r5, #93	; 0x5d
 800505a:	d0f1      	beq.n	8005040 <__sccl+0x28>
 800505c:	b90d      	cbnz	r5, 8005062 <__sccl+0x4a>
 800505e:	4630      	mov	r0, r6
 8005060:	e7ee      	b.n	8005040 <__sccl+0x28>
 8005062:	462b      	mov	r3, r5
 8005064:	e7ef      	b.n	8005046 <__sccl+0x2e>
 8005066:	7816      	ldrb	r6, [r2, #0]
 8005068:	2e5d      	cmp	r6, #93	; 0x5d
 800506a:	d0fa      	beq.n	8005062 <__sccl+0x4a>
 800506c:	42b3      	cmp	r3, r6
 800506e:	dcf8      	bgt.n	8005062 <__sccl+0x4a>
 8005070:	4618      	mov	r0, r3
 8005072:	3001      	adds	r0, #1
 8005074:	4286      	cmp	r6, r0
 8005076:	5421      	strb	r1, [r4, r0]
 8005078:	dcfb      	bgt.n	8005072 <__sccl+0x5a>
 800507a:	43d8      	mvns	r0, r3
 800507c:	4430      	add	r0, r6
 800507e:	42b3      	cmp	r3, r6
 8005080:	bfa8      	it	ge
 8005082:	2000      	movge	r0, #0
 8005084:	1c5d      	adds	r5, r3, #1
 8005086:	182b      	adds	r3, r5, r0
 8005088:	3202      	adds	r2, #2
 800508a:	e7de      	b.n	800504a <__sccl+0x32>

0800508c <_strtol_l.isra.0>:
 800508c:	2b01      	cmp	r3, #1
 800508e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005092:	4686      	mov	lr, r0
 8005094:	d001      	beq.n	800509a <_strtol_l.isra.0+0xe>
 8005096:	2b24      	cmp	r3, #36	; 0x24
 8005098:	d906      	bls.n	80050a8 <_strtol_l.isra.0+0x1c>
 800509a:	f7ff f92f 	bl	80042fc <__errno>
 800509e:	2316      	movs	r3, #22
 80050a0:	6003      	str	r3, [r0, #0]
 80050a2:	2000      	movs	r0, #0
 80050a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80050a8:	468c      	mov	ip, r1
 80050aa:	4e3a      	ldr	r6, [pc, #232]	; (8005194 <_strtol_l.isra.0+0x108>)
 80050ac:	4660      	mov	r0, ip
 80050ae:	f81c 4b01 	ldrb.w	r4, [ip], #1
 80050b2:	5da5      	ldrb	r5, [r4, r6]
 80050b4:	f015 0508 	ands.w	r5, r5, #8
 80050b8:	d1f8      	bne.n	80050ac <_strtol_l.isra.0+0x20>
 80050ba:	2c2d      	cmp	r4, #45	; 0x2d
 80050bc:	d133      	bne.n	8005126 <_strtol_l.isra.0+0x9a>
 80050be:	f04f 0801 	mov.w	r8, #1
 80050c2:	f89c 4000 	ldrb.w	r4, [ip]
 80050c6:	f100 0c02 	add.w	ip, r0, #2
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d05d      	beq.n	800518a <_strtol_l.isra.0+0xfe>
 80050ce:	2b10      	cmp	r3, #16
 80050d0:	d10c      	bne.n	80050ec <_strtol_l.isra.0+0x60>
 80050d2:	2c30      	cmp	r4, #48	; 0x30
 80050d4:	d10a      	bne.n	80050ec <_strtol_l.isra.0+0x60>
 80050d6:	f89c 0000 	ldrb.w	r0, [ip]
 80050da:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80050de:	2858      	cmp	r0, #88	; 0x58
 80050e0:	d14e      	bne.n	8005180 <_strtol_l.isra.0+0xf4>
 80050e2:	2310      	movs	r3, #16
 80050e4:	f89c 4001 	ldrb.w	r4, [ip, #1]
 80050e8:	f10c 0c02 	add.w	ip, ip, #2
 80050ec:	2500      	movs	r5, #0
 80050ee:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
 80050f2:	3f01      	subs	r7, #1
 80050f4:	fbb7 f9f3 	udiv	r9, r7, r3
 80050f8:	4628      	mov	r0, r5
 80050fa:	fb03 7a19 	mls	sl, r3, r9, r7
 80050fe:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 8005102:	2e09      	cmp	r6, #9
 8005104:	d818      	bhi.n	8005138 <_strtol_l.isra.0+0xac>
 8005106:	4634      	mov	r4, r6
 8005108:	42a3      	cmp	r3, r4
 800510a:	dd24      	ble.n	8005156 <_strtol_l.isra.0+0xca>
 800510c:	2d00      	cmp	r5, #0
 800510e:	db1f      	blt.n	8005150 <_strtol_l.isra.0+0xc4>
 8005110:	4581      	cmp	r9, r0
 8005112:	d31d      	bcc.n	8005150 <_strtol_l.isra.0+0xc4>
 8005114:	d101      	bne.n	800511a <_strtol_l.isra.0+0x8e>
 8005116:	45a2      	cmp	sl, r4
 8005118:	db1a      	blt.n	8005150 <_strtol_l.isra.0+0xc4>
 800511a:	2501      	movs	r5, #1
 800511c:	fb00 4003 	mla	r0, r0, r3, r4
 8005120:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8005124:	e7eb      	b.n	80050fe <_strtol_l.isra.0+0x72>
 8005126:	2c2b      	cmp	r4, #43	; 0x2b
 8005128:	bf08      	it	eq
 800512a:	f89c 4000 	ldrbeq.w	r4, [ip]
 800512e:	46a8      	mov	r8, r5
 8005130:	bf08      	it	eq
 8005132:	f100 0c02 	addeq.w	ip, r0, #2
 8005136:	e7c8      	b.n	80050ca <_strtol_l.isra.0+0x3e>
 8005138:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 800513c:	2e19      	cmp	r6, #25
 800513e:	d801      	bhi.n	8005144 <_strtol_l.isra.0+0xb8>
 8005140:	3c37      	subs	r4, #55	; 0x37
 8005142:	e7e1      	b.n	8005108 <_strtol_l.isra.0+0x7c>
 8005144:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 8005148:	2e19      	cmp	r6, #25
 800514a:	d804      	bhi.n	8005156 <_strtol_l.isra.0+0xca>
 800514c:	3c57      	subs	r4, #87	; 0x57
 800514e:	e7db      	b.n	8005108 <_strtol_l.isra.0+0x7c>
 8005150:	f04f 35ff 	mov.w	r5, #4294967295
 8005154:	e7e4      	b.n	8005120 <_strtol_l.isra.0+0x94>
 8005156:	2d00      	cmp	r5, #0
 8005158:	da08      	bge.n	800516c <_strtol_l.isra.0+0xe0>
 800515a:	2322      	movs	r3, #34	; 0x22
 800515c:	4638      	mov	r0, r7
 800515e:	f8ce 3000 	str.w	r3, [lr]
 8005162:	2a00      	cmp	r2, #0
 8005164:	d09e      	beq.n	80050a4 <_strtol_l.isra.0+0x18>
 8005166:	f10c 31ff 	add.w	r1, ip, #4294967295
 800516a:	e007      	b.n	800517c <_strtol_l.isra.0+0xf0>
 800516c:	f1b8 0f00 	cmp.w	r8, #0
 8005170:	d000      	beq.n	8005174 <_strtol_l.isra.0+0xe8>
 8005172:	4240      	negs	r0, r0
 8005174:	2a00      	cmp	r2, #0
 8005176:	d095      	beq.n	80050a4 <_strtol_l.isra.0+0x18>
 8005178:	2d00      	cmp	r5, #0
 800517a:	d1f4      	bne.n	8005166 <_strtol_l.isra.0+0xda>
 800517c:	6011      	str	r1, [r2, #0]
 800517e:	e791      	b.n	80050a4 <_strtol_l.isra.0+0x18>
 8005180:	2430      	movs	r4, #48	; 0x30
 8005182:	2b00      	cmp	r3, #0
 8005184:	d1b2      	bne.n	80050ec <_strtol_l.isra.0+0x60>
 8005186:	2308      	movs	r3, #8
 8005188:	e7b0      	b.n	80050ec <_strtol_l.isra.0+0x60>
 800518a:	2c30      	cmp	r4, #48	; 0x30
 800518c:	d0a3      	beq.n	80050d6 <_strtol_l.isra.0+0x4a>
 800518e:	230a      	movs	r3, #10
 8005190:	e7ac      	b.n	80050ec <_strtol_l.isra.0+0x60>
 8005192:	bf00      	nop
 8005194:	080056ef 	.word	0x080056ef

08005198 <_strtol_r>:
 8005198:	f7ff bf78 	b.w	800508c <_strtol_l.isra.0>

0800519c <_strtoul_l.isra.0>:
 800519c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80051a0:	468c      	mov	ip, r1
 80051a2:	4686      	mov	lr, r0
 80051a4:	4e3a      	ldr	r6, [pc, #232]	; (8005290 <_strtoul_l.isra.0+0xf4>)
 80051a6:	4660      	mov	r0, ip
 80051a8:	f81c 4b01 	ldrb.w	r4, [ip], #1
 80051ac:	5da5      	ldrb	r5, [r4, r6]
 80051ae:	f015 0508 	ands.w	r5, r5, #8
 80051b2:	d1f8      	bne.n	80051a6 <_strtoul_l.isra.0+0xa>
 80051b4:	2c2d      	cmp	r4, #45	; 0x2d
 80051b6:	d134      	bne.n	8005222 <_strtoul_l.isra.0+0x86>
 80051b8:	f04f 0801 	mov.w	r8, #1
 80051bc:	f89c 4000 	ldrb.w	r4, [ip]
 80051c0:	f100 0c02 	add.w	ip, r0, #2
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d05e      	beq.n	8005286 <_strtoul_l.isra.0+0xea>
 80051c8:	2b10      	cmp	r3, #16
 80051ca:	d10c      	bne.n	80051e6 <_strtoul_l.isra.0+0x4a>
 80051cc:	2c30      	cmp	r4, #48	; 0x30
 80051ce:	d10a      	bne.n	80051e6 <_strtoul_l.isra.0+0x4a>
 80051d0:	f89c 0000 	ldrb.w	r0, [ip]
 80051d4:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80051d8:	2858      	cmp	r0, #88	; 0x58
 80051da:	d14f      	bne.n	800527c <_strtoul_l.isra.0+0xe0>
 80051dc:	2310      	movs	r3, #16
 80051de:	f89c 4001 	ldrb.w	r4, [ip, #1]
 80051e2:	f10c 0c02 	add.w	ip, ip, #2
 80051e6:	f04f 37ff 	mov.w	r7, #4294967295
 80051ea:	fbb7 f7f3 	udiv	r7, r7, r3
 80051ee:	2500      	movs	r5, #0
 80051f0:	fb03 f907 	mul.w	r9, r3, r7
 80051f4:	4628      	mov	r0, r5
 80051f6:	ea6f 0909 	mvn.w	r9, r9
 80051fa:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 80051fe:	2e09      	cmp	r6, #9
 8005200:	d818      	bhi.n	8005234 <_strtoul_l.isra.0+0x98>
 8005202:	4634      	mov	r4, r6
 8005204:	42a3      	cmp	r3, r4
 8005206:	dd24      	ble.n	8005252 <_strtoul_l.isra.0+0xb6>
 8005208:	2d00      	cmp	r5, #0
 800520a:	db1f      	blt.n	800524c <_strtoul_l.isra.0+0xb0>
 800520c:	4287      	cmp	r7, r0
 800520e:	d31d      	bcc.n	800524c <_strtoul_l.isra.0+0xb0>
 8005210:	d101      	bne.n	8005216 <_strtoul_l.isra.0+0x7a>
 8005212:	45a1      	cmp	r9, r4
 8005214:	db1a      	blt.n	800524c <_strtoul_l.isra.0+0xb0>
 8005216:	2501      	movs	r5, #1
 8005218:	fb00 4003 	mla	r0, r0, r3, r4
 800521c:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8005220:	e7eb      	b.n	80051fa <_strtoul_l.isra.0+0x5e>
 8005222:	2c2b      	cmp	r4, #43	; 0x2b
 8005224:	bf08      	it	eq
 8005226:	f89c 4000 	ldrbeq.w	r4, [ip]
 800522a:	46a8      	mov	r8, r5
 800522c:	bf08      	it	eq
 800522e:	f100 0c02 	addeq.w	ip, r0, #2
 8005232:	e7c7      	b.n	80051c4 <_strtoul_l.isra.0+0x28>
 8005234:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 8005238:	2e19      	cmp	r6, #25
 800523a:	d801      	bhi.n	8005240 <_strtoul_l.isra.0+0xa4>
 800523c:	3c37      	subs	r4, #55	; 0x37
 800523e:	e7e1      	b.n	8005204 <_strtoul_l.isra.0+0x68>
 8005240:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 8005244:	2e19      	cmp	r6, #25
 8005246:	d804      	bhi.n	8005252 <_strtoul_l.isra.0+0xb6>
 8005248:	3c57      	subs	r4, #87	; 0x57
 800524a:	e7db      	b.n	8005204 <_strtoul_l.isra.0+0x68>
 800524c:	f04f 35ff 	mov.w	r5, #4294967295
 8005250:	e7e4      	b.n	800521c <_strtoul_l.isra.0+0x80>
 8005252:	2d00      	cmp	r5, #0
 8005254:	da07      	bge.n	8005266 <_strtoul_l.isra.0+0xca>
 8005256:	2322      	movs	r3, #34	; 0x22
 8005258:	f04f 30ff 	mov.w	r0, #4294967295
 800525c:	f8ce 3000 	str.w	r3, [lr]
 8005260:	b942      	cbnz	r2, 8005274 <_strtoul_l.isra.0+0xd8>
 8005262:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005266:	f1b8 0f00 	cmp.w	r8, #0
 800526a:	d000      	beq.n	800526e <_strtoul_l.isra.0+0xd2>
 800526c:	4240      	negs	r0, r0
 800526e:	2a00      	cmp	r2, #0
 8005270:	d0f7      	beq.n	8005262 <_strtoul_l.isra.0+0xc6>
 8005272:	b10d      	cbz	r5, 8005278 <_strtoul_l.isra.0+0xdc>
 8005274:	f10c 31ff 	add.w	r1, ip, #4294967295
 8005278:	6011      	str	r1, [r2, #0]
 800527a:	e7f2      	b.n	8005262 <_strtoul_l.isra.0+0xc6>
 800527c:	2430      	movs	r4, #48	; 0x30
 800527e:	2b00      	cmp	r3, #0
 8005280:	d1b1      	bne.n	80051e6 <_strtoul_l.isra.0+0x4a>
 8005282:	2308      	movs	r3, #8
 8005284:	e7af      	b.n	80051e6 <_strtoul_l.isra.0+0x4a>
 8005286:	2c30      	cmp	r4, #48	; 0x30
 8005288:	d0a2      	beq.n	80051d0 <_strtoul_l.isra.0+0x34>
 800528a:	230a      	movs	r3, #10
 800528c:	e7ab      	b.n	80051e6 <_strtoul_l.isra.0+0x4a>
 800528e:	bf00      	nop
 8005290:	080056ef 	.word	0x080056ef

08005294 <_strtoul_r>:
 8005294:	f7ff bf82 	b.w	800519c <_strtoul_l.isra.0>

08005298 <__submore>:
 8005298:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800529c:	460c      	mov	r4, r1
 800529e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80052a0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80052a4:	4299      	cmp	r1, r3
 80052a6:	d11b      	bne.n	80052e0 <__submore+0x48>
 80052a8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80052ac:	f000 f8b0 	bl	8005410 <_malloc_r>
 80052b0:	b918      	cbnz	r0, 80052ba <__submore+0x22>
 80052b2:	f04f 30ff 	mov.w	r0, #4294967295
 80052b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80052ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80052be:	63a3      	str	r3, [r4, #56]	; 0x38
 80052c0:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 80052c4:	6360      	str	r0, [r4, #52]	; 0x34
 80052c6:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 80052ca:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80052ce:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 80052d2:	7043      	strb	r3, [r0, #1]
 80052d4:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80052d8:	7003      	strb	r3, [r0, #0]
 80052da:	6020      	str	r0, [r4, #0]
 80052dc:	2000      	movs	r0, #0
 80052de:	e7ea      	b.n	80052b6 <__submore+0x1e>
 80052e0:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80052e2:	0077      	lsls	r7, r6, #1
 80052e4:	463a      	mov	r2, r7
 80052e6:	f000 f8ed 	bl	80054c4 <_realloc_r>
 80052ea:	4605      	mov	r5, r0
 80052ec:	2800      	cmp	r0, #0
 80052ee:	d0e0      	beq.n	80052b2 <__submore+0x1a>
 80052f0:	eb00 0806 	add.w	r8, r0, r6
 80052f4:	4601      	mov	r1, r0
 80052f6:	4632      	mov	r2, r6
 80052f8:	4640      	mov	r0, r8
 80052fa:	f000 f815 	bl	8005328 <memcpy>
 80052fe:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8005302:	f8c4 8000 	str.w	r8, [r4]
 8005306:	e7e9      	b.n	80052dc <__submore+0x44>

08005308 <__retarget_lock_acquire_recursive>:
 8005308:	4770      	bx	lr

0800530a <__retarget_lock_release_recursive>:
 800530a:	4770      	bx	lr

0800530c <memchr>:
 800530c:	4603      	mov	r3, r0
 800530e:	b510      	push	{r4, lr}
 8005310:	b2c9      	uxtb	r1, r1
 8005312:	4402      	add	r2, r0
 8005314:	4293      	cmp	r3, r2
 8005316:	4618      	mov	r0, r3
 8005318:	d101      	bne.n	800531e <memchr+0x12>
 800531a:	2000      	movs	r0, #0
 800531c:	e003      	b.n	8005326 <memchr+0x1a>
 800531e:	7804      	ldrb	r4, [r0, #0]
 8005320:	3301      	adds	r3, #1
 8005322:	428c      	cmp	r4, r1
 8005324:	d1f6      	bne.n	8005314 <memchr+0x8>
 8005326:	bd10      	pop	{r4, pc}

08005328 <memcpy>:
 8005328:	440a      	add	r2, r1
 800532a:	4291      	cmp	r1, r2
 800532c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005330:	d100      	bne.n	8005334 <memcpy+0xc>
 8005332:	4770      	bx	lr
 8005334:	b510      	push	{r4, lr}
 8005336:	f811 4b01 	ldrb.w	r4, [r1], #1
 800533a:	4291      	cmp	r1, r2
 800533c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005340:	d1f9      	bne.n	8005336 <memcpy+0xe>
 8005342:	bd10      	pop	{r4, pc}

08005344 <memmove>:
 8005344:	4288      	cmp	r0, r1
 8005346:	b510      	push	{r4, lr}
 8005348:	eb01 0402 	add.w	r4, r1, r2
 800534c:	d902      	bls.n	8005354 <memmove+0x10>
 800534e:	4284      	cmp	r4, r0
 8005350:	4623      	mov	r3, r4
 8005352:	d807      	bhi.n	8005364 <memmove+0x20>
 8005354:	1e43      	subs	r3, r0, #1
 8005356:	42a1      	cmp	r1, r4
 8005358:	d008      	beq.n	800536c <memmove+0x28>
 800535a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800535e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005362:	e7f8      	b.n	8005356 <memmove+0x12>
 8005364:	4601      	mov	r1, r0
 8005366:	4402      	add	r2, r0
 8005368:	428a      	cmp	r2, r1
 800536a:	d100      	bne.n	800536e <memmove+0x2a>
 800536c:	bd10      	pop	{r4, pc}
 800536e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005372:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005376:	e7f7      	b.n	8005368 <memmove+0x24>

08005378 <_free_r>:
 8005378:	b538      	push	{r3, r4, r5, lr}
 800537a:	4605      	mov	r5, r0
 800537c:	2900      	cmp	r1, #0
 800537e:	d043      	beq.n	8005408 <_free_r+0x90>
 8005380:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005384:	1f0c      	subs	r4, r1, #4
 8005386:	2b00      	cmp	r3, #0
 8005388:	bfb8      	it	lt
 800538a:	18e4      	addlt	r4, r4, r3
 800538c:	f000 f8d0 	bl	8005530 <__malloc_lock>
 8005390:	4a1e      	ldr	r2, [pc, #120]	; (800540c <_free_r+0x94>)
 8005392:	6813      	ldr	r3, [r2, #0]
 8005394:	4610      	mov	r0, r2
 8005396:	b933      	cbnz	r3, 80053a6 <_free_r+0x2e>
 8005398:	6063      	str	r3, [r4, #4]
 800539a:	6014      	str	r4, [r2, #0]
 800539c:	4628      	mov	r0, r5
 800539e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80053a2:	f000 b8cb 	b.w	800553c <__malloc_unlock>
 80053a6:	42a3      	cmp	r3, r4
 80053a8:	d90a      	bls.n	80053c0 <_free_r+0x48>
 80053aa:	6821      	ldr	r1, [r4, #0]
 80053ac:	1862      	adds	r2, r4, r1
 80053ae:	4293      	cmp	r3, r2
 80053b0:	bf01      	itttt	eq
 80053b2:	681a      	ldreq	r2, [r3, #0]
 80053b4:	685b      	ldreq	r3, [r3, #4]
 80053b6:	1852      	addeq	r2, r2, r1
 80053b8:	6022      	streq	r2, [r4, #0]
 80053ba:	6063      	str	r3, [r4, #4]
 80053bc:	6004      	str	r4, [r0, #0]
 80053be:	e7ed      	b.n	800539c <_free_r+0x24>
 80053c0:	461a      	mov	r2, r3
 80053c2:	685b      	ldr	r3, [r3, #4]
 80053c4:	b10b      	cbz	r3, 80053ca <_free_r+0x52>
 80053c6:	42a3      	cmp	r3, r4
 80053c8:	d9fa      	bls.n	80053c0 <_free_r+0x48>
 80053ca:	6811      	ldr	r1, [r2, #0]
 80053cc:	1850      	adds	r0, r2, r1
 80053ce:	42a0      	cmp	r0, r4
 80053d0:	d10b      	bne.n	80053ea <_free_r+0x72>
 80053d2:	6820      	ldr	r0, [r4, #0]
 80053d4:	4401      	add	r1, r0
 80053d6:	1850      	adds	r0, r2, r1
 80053d8:	4283      	cmp	r3, r0
 80053da:	6011      	str	r1, [r2, #0]
 80053dc:	d1de      	bne.n	800539c <_free_r+0x24>
 80053de:	6818      	ldr	r0, [r3, #0]
 80053e0:	685b      	ldr	r3, [r3, #4]
 80053e2:	4401      	add	r1, r0
 80053e4:	6011      	str	r1, [r2, #0]
 80053e6:	6053      	str	r3, [r2, #4]
 80053e8:	e7d8      	b.n	800539c <_free_r+0x24>
 80053ea:	d902      	bls.n	80053f2 <_free_r+0x7a>
 80053ec:	230c      	movs	r3, #12
 80053ee:	602b      	str	r3, [r5, #0]
 80053f0:	e7d4      	b.n	800539c <_free_r+0x24>
 80053f2:	6820      	ldr	r0, [r4, #0]
 80053f4:	1821      	adds	r1, r4, r0
 80053f6:	428b      	cmp	r3, r1
 80053f8:	bf01      	itttt	eq
 80053fa:	6819      	ldreq	r1, [r3, #0]
 80053fc:	685b      	ldreq	r3, [r3, #4]
 80053fe:	1809      	addeq	r1, r1, r0
 8005400:	6021      	streq	r1, [r4, #0]
 8005402:	6063      	str	r3, [r4, #4]
 8005404:	6054      	str	r4, [r2, #4]
 8005406:	e7c9      	b.n	800539c <_free_r+0x24>
 8005408:	bd38      	pop	{r3, r4, r5, pc}
 800540a:	bf00      	nop
 800540c:	20000090 	.word	0x20000090

08005410 <_malloc_r>:
 8005410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005412:	1ccd      	adds	r5, r1, #3
 8005414:	f025 0503 	bic.w	r5, r5, #3
 8005418:	3508      	adds	r5, #8
 800541a:	2d0c      	cmp	r5, #12
 800541c:	bf38      	it	cc
 800541e:	250c      	movcc	r5, #12
 8005420:	2d00      	cmp	r5, #0
 8005422:	4606      	mov	r6, r0
 8005424:	db01      	blt.n	800542a <_malloc_r+0x1a>
 8005426:	42a9      	cmp	r1, r5
 8005428:	d903      	bls.n	8005432 <_malloc_r+0x22>
 800542a:	230c      	movs	r3, #12
 800542c:	6033      	str	r3, [r6, #0]
 800542e:	2000      	movs	r0, #0
 8005430:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005432:	f000 f87d 	bl	8005530 <__malloc_lock>
 8005436:	4921      	ldr	r1, [pc, #132]	; (80054bc <_malloc_r+0xac>)
 8005438:	680a      	ldr	r2, [r1, #0]
 800543a:	4614      	mov	r4, r2
 800543c:	b99c      	cbnz	r4, 8005466 <_malloc_r+0x56>
 800543e:	4f20      	ldr	r7, [pc, #128]	; (80054c0 <_malloc_r+0xb0>)
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	b923      	cbnz	r3, 800544e <_malloc_r+0x3e>
 8005444:	4621      	mov	r1, r4
 8005446:	4630      	mov	r0, r6
 8005448:	f000 f862 	bl	8005510 <_sbrk_r>
 800544c:	6038      	str	r0, [r7, #0]
 800544e:	4629      	mov	r1, r5
 8005450:	4630      	mov	r0, r6
 8005452:	f000 f85d 	bl	8005510 <_sbrk_r>
 8005456:	1c43      	adds	r3, r0, #1
 8005458:	d123      	bne.n	80054a2 <_malloc_r+0x92>
 800545a:	230c      	movs	r3, #12
 800545c:	4630      	mov	r0, r6
 800545e:	6033      	str	r3, [r6, #0]
 8005460:	f000 f86c 	bl	800553c <__malloc_unlock>
 8005464:	e7e3      	b.n	800542e <_malloc_r+0x1e>
 8005466:	6823      	ldr	r3, [r4, #0]
 8005468:	1b5b      	subs	r3, r3, r5
 800546a:	d417      	bmi.n	800549c <_malloc_r+0x8c>
 800546c:	2b0b      	cmp	r3, #11
 800546e:	d903      	bls.n	8005478 <_malloc_r+0x68>
 8005470:	6023      	str	r3, [r4, #0]
 8005472:	441c      	add	r4, r3
 8005474:	6025      	str	r5, [r4, #0]
 8005476:	e004      	b.n	8005482 <_malloc_r+0x72>
 8005478:	6863      	ldr	r3, [r4, #4]
 800547a:	42a2      	cmp	r2, r4
 800547c:	bf0c      	ite	eq
 800547e:	600b      	streq	r3, [r1, #0]
 8005480:	6053      	strne	r3, [r2, #4]
 8005482:	4630      	mov	r0, r6
 8005484:	f000 f85a 	bl	800553c <__malloc_unlock>
 8005488:	f104 000b 	add.w	r0, r4, #11
 800548c:	1d23      	adds	r3, r4, #4
 800548e:	f020 0007 	bic.w	r0, r0, #7
 8005492:	1ac2      	subs	r2, r0, r3
 8005494:	d0cc      	beq.n	8005430 <_malloc_r+0x20>
 8005496:	1a1b      	subs	r3, r3, r0
 8005498:	50a3      	str	r3, [r4, r2]
 800549a:	e7c9      	b.n	8005430 <_malloc_r+0x20>
 800549c:	4622      	mov	r2, r4
 800549e:	6864      	ldr	r4, [r4, #4]
 80054a0:	e7cc      	b.n	800543c <_malloc_r+0x2c>
 80054a2:	1cc4      	adds	r4, r0, #3
 80054a4:	f024 0403 	bic.w	r4, r4, #3
 80054a8:	42a0      	cmp	r0, r4
 80054aa:	d0e3      	beq.n	8005474 <_malloc_r+0x64>
 80054ac:	1a21      	subs	r1, r4, r0
 80054ae:	4630      	mov	r0, r6
 80054b0:	f000 f82e 	bl	8005510 <_sbrk_r>
 80054b4:	3001      	adds	r0, #1
 80054b6:	d1dd      	bne.n	8005474 <_malloc_r+0x64>
 80054b8:	e7cf      	b.n	800545a <_malloc_r+0x4a>
 80054ba:	bf00      	nop
 80054bc:	20000090 	.word	0x20000090
 80054c0:	20000094 	.word	0x20000094

080054c4 <_realloc_r>:
 80054c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054c6:	4607      	mov	r7, r0
 80054c8:	4614      	mov	r4, r2
 80054ca:	460e      	mov	r6, r1
 80054cc:	b921      	cbnz	r1, 80054d8 <_realloc_r+0x14>
 80054ce:	4611      	mov	r1, r2
 80054d0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80054d4:	f7ff bf9c 	b.w	8005410 <_malloc_r>
 80054d8:	b922      	cbnz	r2, 80054e4 <_realloc_r+0x20>
 80054da:	f7ff ff4d 	bl	8005378 <_free_r>
 80054de:	4625      	mov	r5, r4
 80054e0:	4628      	mov	r0, r5
 80054e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80054e4:	f000 f830 	bl	8005548 <_malloc_usable_size_r>
 80054e8:	42a0      	cmp	r0, r4
 80054ea:	d20f      	bcs.n	800550c <_realloc_r+0x48>
 80054ec:	4621      	mov	r1, r4
 80054ee:	4638      	mov	r0, r7
 80054f0:	f7ff ff8e 	bl	8005410 <_malloc_r>
 80054f4:	4605      	mov	r5, r0
 80054f6:	2800      	cmp	r0, #0
 80054f8:	d0f2      	beq.n	80054e0 <_realloc_r+0x1c>
 80054fa:	4631      	mov	r1, r6
 80054fc:	4622      	mov	r2, r4
 80054fe:	f7ff ff13 	bl	8005328 <memcpy>
 8005502:	4631      	mov	r1, r6
 8005504:	4638      	mov	r0, r7
 8005506:	f7ff ff37 	bl	8005378 <_free_r>
 800550a:	e7e9      	b.n	80054e0 <_realloc_r+0x1c>
 800550c:	4635      	mov	r5, r6
 800550e:	e7e7      	b.n	80054e0 <_realloc_r+0x1c>

08005510 <_sbrk_r>:
 8005510:	b538      	push	{r3, r4, r5, lr}
 8005512:	2300      	movs	r3, #0
 8005514:	4d05      	ldr	r5, [pc, #20]	; (800552c <_sbrk_r+0x1c>)
 8005516:	4604      	mov	r4, r0
 8005518:	4608      	mov	r0, r1
 800551a:	602b      	str	r3, [r5, #0]
 800551c:	f7fb fe4e 	bl	80011bc <_sbrk>
 8005520:	1c43      	adds	r3, r0, #1
 8005522:	d102      	bne.n	800552a <_sbrk_r+0x1a>
 8005524:	682b      	ldr	r3, [r5, #0]
 8005526:	b103      	cbz	r3, 800552a <_sbrk_r+0x1a>
 8005528:	6023      	str	r3, [r4, #0]
 800552a:	bd38      	pop	{r3, r4, r5, pc}
 800552c:	2000029c 	.word	0x2000029c

08005530 <__malloc_lock>:
 8005530:	4801      	ldr	r0, [pc, #4]	; (8005538 <__malloc_lock+0x8>)
 8005532:	f7ff bee9 	b.w	8005308 <__retarget_lock_acquire_recursive>
 8005536:	bf00      	nop
 8005538:	200002a4 	.word	0x200002a4

0800553c <__malloc_unlock>:
 800553c:	4801      	ldr	r0, [pc, #4]	; (8005544 <__malloc_unlock+0x8>)
 800553e:	f7ff bee4 	b.w	800530a <__retarget_lock_release_recursive>
 8005542:	bf00      	nop
 8005544:	200002a4 	.word	0x200002a4

08005548 <_malloc_usable_size_r>:
 8005548:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800554c:	1f18      	subs	r0, r3, #4
 800554e:	2b00      	cmp	r3, #0
 8005550:	bfbc      	itt	lt
 8005552:	580b      	ldrlt	r3, [r1, r0]
 8005554:	18c0      	addlt	r0, r0, r3
 8005556:	4770      	bx	lr

08005558 <_init>:
 8005558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800555a:	bf00      	nop
 800555c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800555e:	bc08      	pop	{r3}
 8005560:	469e      	mov	lr, r3
 8005562:	4770      	bx	lr

08005564 <_fini>:
 8005564:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005566:	bf00      	nop
 8005568:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800556a:	bc08      	pop	{r3}
 800556c:	469e      	mov	lr, r3
 800556e:	4770      	bx	lr
